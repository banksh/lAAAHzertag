

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sun Aug 24 18:56:11 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0197                     	;# 
   100  0199                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019C                     	;# 
   105  019D                     	;# 
   106  019E                     	;# 
   107  019F                     	;# 
   108  020C                     	;# 
   109  028C                     	;# 
   110  030C                     	;# 
   111  038C                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0691                     	;# 
   116  0692                     	;# 
   117  0693                     	;# 
   118  0694                     	;# 
   119  0695                     	;# 
   120  0D8E                     	;# 
   121  0D8F                     	;# 
   122  0D90                     	;# 
   123  0D91                     	;# 
   124  0D91                     	;# 
   125  0D92                     	;# 
   126  0D93                     	;# 
   127  0D93                     	;# 
   128  0D94                     	;# 
   129  0D95                     	;# 
   130  0D95                     	;# 
   131  0D96                     	;# 
   132  0D97                     	;# 
   133  0D97                     	;# 
   134  0D98                     	;# 
   135  0D99                     	;# 
   136  0D99                     	;# 
   137  0D9A                     	;# 
   138  0D9B                     	;# 
   139  0D9C                     	;# 
   140  0D9D                     	;# 
   141  0D9E                     	;# 
   142  0D9F                     	;# 
   143  0DA0                     	;# 
   144  0DA1                     	;# 
   145  0DA1                     	;# 
   146  0DA2                     	;# 
   147  0DA3                     	;# 
   148  0DA3                     	;# 
   149  0DA4                     	;# 
   150  0DA5                     	;# 
   151  0DA5                     	;# 
   152  0DA6                     	;# 
   153  0DA7                     	;# 
   154  0DA7                     	;# 
   155  0DA8                     	;# 
   156  0DA9                     	;# 
   157  0DA9                     	;# 
   158  0DAA                     	;# 
   159  0DAB                     	;# 
   160  0DAC                     	;# 
   161  0DAD                     	;# 
   162  0DAE                     	;# 
   163  0DAF                     	;# 
   164  0DB0                     	;# 
   165  0DB1                     	;# 
   166  0DB1                     	;# 
   167  0DB2                     	;# 
   168  0DB3                     	;# 
   169  0DB3                     	;# 
   170  0DB4                     	;# 
   171  0DB5                     	;# 
   172  0DB5                     	;# 
   173  0DB6                     	;# 
   174  0DB7                     	;# 
   175  0DB7                     	;# 
   176  0DB8                     	;# 
   177  0DB9                     	;# 
   178  0DB9                     	;# 
   179  0DBA                     	;# 
   180  0DBB                     	;# 
   181  0DBC                     	;# 
   182  0DBD                     	;# 
   183  0DBE                     	;# 
   184  0DBF                     	;# 
   185  0DC0                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEA                     	;# 
   195  0FEB                     	;# 
   196  0FED                     	;# 
   197  0FEE                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  008C                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0093                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0098                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  009F                     	;# 
   241  010C                     	;# 
   242  0111                     	;# 
   243  0112                     	;# 
   244  0115                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  0118                     	;# 
   248  0119                     	;# 
   249  011D                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  0191                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0193                     	;# 
   256  0193                     	;# 
   257  0194                     	;# 
   258  0195                     	;# 
   259  0196                     	;# 
   260  0197                     	;# 
   261  0199                     	;# 
   262  019A                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019C                     	;# 
   266  019D                     	;# 
   267  019E                     	;# 
   268  019F                     	;# 
   269  020C                     	;# 
   270  028C                     	;# 
   271  030C                     	;# 
   272  038C                     	;# 
   273  0391                     	;# 
   274  0392                     	;# 
   275  0393                     	;# 
   276  0691                     	;# 
   277  0692                     	;# 
   278  0693                     	;# 
   279  0694                     	;# 
   280  0695                     	;# 
   281  0D8E                     	;# 
   282  0D8F                     	;# 
   283  0D90                     	;# 
   284  0D91                     	;# 
   285  0D91                     	;# 
   286  0D92                     	;# 
   287  0D93                     	;# 
   288  0D93                     	;# 
   289  0D94                     	;# 
   290  0D95                     	;# 
   291  0D95                     	;# 
   292  0D96                     	;# 
   293  0D97                     	;# 
   294  0D97                     	;# 
   295  0D98                     	;# 
   296  0D99                     	;# 
   297  0D99                     	;# 
   298  0D9A                     	;# 
   299  0D9B                     	;# 
   300  0D9C                     	;# 
   301  0D9D                     	;# 
   302  0D9E                     	;# 
   303  0D9F                     	;# 
   304  0DA0                     	;# 
   305  0DA1                     	;# 
   306  0DA1                     	;# 
   307  0DA2                     	;# 
   308  0DA3                     	;# 
   309  0DA3                     	;# 
   310  0DA4                     	;# 
   311  0DA5                     	;# 
   312  0DA5                     	;# 
   313  0DA6                     	;# 
   314  0DA7                     	;# 
   315  0DA7                     	;# 
   316  0DA8                     	;# 
   317  0DA9                     	;# 
   318  0DA9                     	;# 
   319  0DAA                     	;# 
   320  0DAB                     	;# 
   321  0DAC                     	;# 
   322  0DAD                     	;# 
   323  0DAE                     	;# 
   324  0DAF                     	;# 
   325  0DB0                     	;# 
   326  0DB1                     	;# 
   327  0DB1                     	;# 
   328  0DB2                     	;# 
   329  0DB3                     	;# 
   330  0DB3                     	;# 
   331  0DB4                     	;# 
   332  0DB5                     	;# 
   333  0DB5                     	;# 
   334  0DB6                     	;# 
   335  0DB7                     	;# 
   336  0DB7                     	;# 
   337  0DB8                     	;# 
   338  0DB9                     	;# 
   339  0DB9                     	;# 
   340  0DBA                     	;# 
   341  0DBB                     	;# 
   342  0DBC                     	;# 
   343  0DBD                     	;# 
   344  0DBE                     	;# 
   345  0DBF                     	;# 
   346  0DC0                     	;# 
   347  0FE4                     	;# 
   348  0FE5                     	;# 
   349  0FE6                     	;# 
   350  0FE7                     	;# 
   351  0FE8                     	;# 
   352  0FE8                     	;# 
   353  0FE9                     	;# 
   354  0FEA                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEE                     	;# 
   360  0FEF                     	;# 
   361  0000                     	;# 
   362  0001                     	;# 
   363  0002                     	;# 
   364  0003                     	;# 
   365  0004                     	;# 
   366  0005                     	;# 
   367  0006                     	;# 
   368  0007                     	;# 
   369  0008                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  008C                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0095                     	;# 
   391  0096                     	;# 
   392  0097                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  0111                     	;# 
   404  0112                     	;# 
   405  0115                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  0118                     	;# 
   409  0119                     	;# 
   410  011D                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  0191                     	;# 
   414  0191                     	;# 
   415  0192                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0194                     	;# 
   419  0195                     	;# 
   420  0196                     	;# 
   421  0197                     	;# 
   422  0199                     	;# 
   423  019A                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  028C                     	;# 
   432  030C                     	;# 
   433  038C                     	;# 
   434  0391                     	;# 
   435  0392                     	;# 
   436  0393                     	;# 
   437  0691                     	;# 
   438  0692                     	;# 
   439  0693                     	;# 
   440  0694                     	;# 
   441  0695                     	;# 
   442  0D8E                     	;# 
   443  0D8F                     	;# 
   444  0D90                     	;# 
   445  0D91                     	;# 
   446  0D91                     	;# 
   447  0D92                     	;# 
   448  0D93                     	;# 
   449  0D93                     	;# 
   450  0D94                     	;# 
   451  0D95                     	;# 
   452  0D95                     	;# 
   453  0D96                     	;# 
   454  0D97                     	;# 
   455  0D97                     	;# 
   456  0D98                     	;# 
   457  0D99                     	;# 
   458  0D99                     	;# 
   459  0D9A                     	;# 
   460  0D9B                     	;# 
   461  0D9C                     	;# 
   462  0D9D                     	;# 
   463  0D9E                     	;# 
   464  0D9F                     	;# 
   465  0DA0                     	;# 
   466  0DA1                     	;# 
   467  0DA1                     	;# 
   468  0DA2                     	;# 
   469  0DA3                     	;# 
   470  0DA3                     	;# 
   471  0DA4                     	;# 
   472  0DA5                     	;# 
   473  0DA5                     	;# 
   474  0DA6                     	;# 
   475  0DA7                     	;# 
   476  0DA7                     	;# 
   477  0DA8                     	;# 
   478  0DA9                     	;# 
   479  0DA9                     	;# 
   480  0DAA                     	;# 
   481  0DAB                     	;# 
   482  0DAC                     	;# 
   483  0DAD                     	;# 
   484  0DAE                     	;# 
   485  0DAF                     	;# 
   486  0DB0                     	;# 
   487  0DB1                     	;# 
   488  0DB1                     	;# 
   489  0DB2                     	;# 
   490  0DB3                     	;# 
   491  0DB3                     	;# 
   492  0DB4                     	;# 
   493  0DB5                     	;# 
   494  0DB5                     	;# 
   495  0DB6                     	;# 
   496  0DB7                     	;# 
   497  0DB7                     	;# 
   498  0DB8                     	;# 
   499  0DB9                     	;# 
   500  0DB9                     	;# 
   501  0DBA                     	;# 
   502  0DBB                     	;# 
   503  0DBC                     	;# 
   504  0DBD                     	;# 
   505  0DBE                     	;# 
   506  0DBF                     	;# 
   507  0DC0                     	;# 
   508  0FE4                     	;# 
   509  0FE5                     	;# 
   510  0FE6                     	;# 
   511  0FE7                     	;# 
   512  0FE8                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEE                     	;# 
   521  0FEF                     	;# 
   522                           
   523                           	psect	strings
   524  0445                     __pstrings:	
   525  0445                     __stringtab:	
   526  0445  3400               	retlw	0
   527  0446                     __end_of__stringtab:	
   528  0446                     _death_song:	
   529  0446  3462               	retlw	98
   530  0447  34F0               	retlw	240
   531  0448  3400               	retlw	0
   532  0449  34FA               	retlw	250
   533  044A  3400               	retlw	0
   534  044B  3400               	retlw	0
   535  044C  3400               	retlw	0
   536  044D  3400               	retlw	0
   537  044E  3400               	retlw	0
   538  044F  3400               	retlw	0
   539  0450  3400               	retlw	0
   540  0451  3400               	retlw	0
   541  0452  346F               	retlw	111
   542  0453  3477               	retlw	119
   543  0454  347A               	retlw	122
   544  0455  3459               	retlw	89
   545  0456  3400               	retlw	0
   546  0457  3400               	retlw	0
   547  0458  34CC               	retlw	204
   548  0459  345E               	retlw	94
   549  045A  347A               	retlw	122
   550  045B  3459               	retlw	89
   551  045C  34CC               	retlw	204
   552  045D  345E               	retlw	94
   553  045E  346B               	retlw	107
   554  045F  346A               	retlw	106
   555  0460  3400               	retlw	0
   556  0461  3400               	retlw	0
   557  0462  346F               	retlw	111
   558  0463  3477               	retlw	119
   559  0464  3470               	retlw	112
   560  0465  349F               	retlw	159
   561  0466  3400               	retlw	0
   562  0467  3400               	retlw	0
   563  0468  3470               	retlw	112
   564  0469  349F               	retlw	159
   565  046A  34EA               	retlw	234
   566  046B  34EE               	retlw	238
   567  046C                     __end_of_death_song:	
   568  046C                     _fire_song:	
   569  046C  34A0               	retlw	160
   570  046D  340F               	retlw	15
   571  046E  34DB               	retlw	219
   572  046F  3411               	retlw	17
   573  0470  34D5               	retlw	213
   574  0471  3414               	retlw	20
   575  0472  3400               	retlw	0
   576  0473  3419               	retlw	25
   577  0474  3440               	retlw	64
   578  0475  341F               	retlw	31
   579  0476  34AA               	retlw	170
   580  0477  3429               	retlw	41
   581  0478  3480               	retlw	128
   582  0479  343E               	retlw	62
   583  047A  3400               	retlw	0
   584  047B  347D               	retlw	125
   585  047C  34E3               	retlw	227
   586  047D  348A               	retlw	138
   587  047E  3440               	retlw	64
   588  047F  349C               	retlw	156
   589  0480  3492               	retlw	146
   590  0481  34B2               	retlw	178
   591  0482  3455               	retlw	85
   592  0483  34D0               	retlw	208
   593  0484  3400               	retlw	0
   594  0485  34FA               	retlw	250
   595  0486  3400               	retlw	0
   596  0487  3400               	retlw	0
   597  0488  3400               	retlw	0
   598  0489  3400               	retlw	0
   599  048A  3400               	retlw	0
   600  048B  3400               	retlw	0
   601  048C                     __end_of_fire_song:	
   602  048C                     _one_up:	
   603  048C  34CC               	retlw	204
   604  048D  345E               	retlw	94
   605  048E  34B8               	retlw	184
   606  048F  344F               	retlw	79
   607  0490  3467               	retlw	103
   608  0491  342F               	retlw	47
   609  0492  34B9               	retlw	185
   610  0493  343B               	retlw	59
   611  0494  3434               	retlw	52
   612  0495  3435               	retlw	53
   613  0496  34DC               	retlw	220
   614  0497  3427               	retlw	39
   615  0498                     __end_of_one_up:	
   616  0498                     _dead_song:	
   617  0498  346F               	retlw	111
   618  0499  3477               	retlw	119
   619  049A  3470               	retlw	112
   620  049B  349F               	retlw	159
   621  049C  34EA               	retlw	234
   622  049D  34EE               	retlw	238
   623  049E                     __end_of_dead_song:	
   624  0016                     _TMR1	set	22
   625  000B                     _INTCONbits	set	11
   626  0011                     _PIR1bits	set	17
   627  000C                     _PORTAbits	set	12
   628  0018                     _T1CONbits	set	24
   629  001C                     _T2CONbits	set	28
   630  0015                     _TMR0	set	21
   631  001A                     _TMR2	set	26
   632  009B                     _ADRES	set	155
   633  009D                     _ADCON0bits	set	157
   634  009E                     _ADCON1	set	158
   635  0095                     _OPTION_REGbits	set	149
   636  0099                     _OSCCON	set	153
   637  008C                     _TRISAbits	set	140
   638  0118                     _DACCON0bits	set	280
   639  0191                     _PMADR	set	401
   640  0193                     _PMDAT	set	403
   641  018C                     _ANSELA	set	396
   642  018C                     _ANSELAbits	set	396
   643  019F                     _BAUDCONbits	set	415
   644  0191                     _PMADRL	set	401
   645  0195                     _PMCON1bits	set	405
   646  0196                     _PMCON2	set	406
   647  0199                     _RCREG	set	409
   648  019D                     _RCSTAbits	set	413
   649  019B                     _SPBRGL	set	411
   650  019A                     _TXREG	set	410
   651  019E                     _TXSTAbits	set	414
   652  0DB3                     _PWM3DC	set	3507
   653  0DB1                     _PWM3PH	set	3505
   654  0DB5                     _PWM3PR	set	3509
   655  0DBB                     _PWM3CONbits	set	3515
   656  0DBF                     _PWM3LDCONbits	set	3519
   657                           
   658                           ; #config settings
   659  0000                     
   660                           	psect	cinit
   661  0014                     start_initialization:	
   662  0014                     __initialization:	
   663                           
   664                           ; Clear objects allocated to COMMON
   665  0014  01FC               	clrf	__pbssCOMMON& (0+127)
   666                           
   667                           ; Clear objects allocated to BANK0
   668  0015  305C               	movlw	low __pbssBANK0
   669  0016  0084               	movwf	4
   670  0017  3000               	movlw	high __pbssBANK0
   671  0018  0085               	movwf	5
   672  0019  3011               	movlw	17
   673  001A  27B3               	fcall	clear_ram0
   674                           
   675                           ; Clear objects allocated to BANK1
   676  001B  30A0               	movlw	low __pbssBANK1
   677  001C  0084               	movwf	4
   678  001D  3000               	movlw	high __pbssBANK1
   679  001E  0085               	movwf	5
   680  001F  3032               	movlw	50
   681  0020  27B3               	fcall	clear_ram0
   682  0021                     end_of_initialization:	
   683                           ;End of C runtime variable initialization code
   684                           
   685  0021                     __end_of__initialization:	
   686  0021  0020               	movlb	0
   687  0022  2F9F               	ljmp	_main	;jump to C main() function
   688                           
   689                           	psect	bssCOMMON
   690  007C                     __pbssCOMMON:	
   691  007C                     __x:	
   692  007C                     	ds	1
   693                           
   694                           	psect	bssBANK0
   695  005C                     __pbssBANK0:	
   696  005C                     __i:	
   697  005C                     	ds	2
   698  005E                     _cur_song_duration:	
   699  005E                     	ds	2
   700  0060                     handle_fire@counter:	
   701  0060                     	ds	2
   702  0062                     handle_fire@timer:	
   703  0062                     	ds	2
   704  0064                     __checksum:	
   705  0064                     	ds	1
   706  0065                     _cur_song:	
   707  0065                     	ds	1
   708  0066                     _cur_song_length:	
   709  0066                     	ds	1
   710  0067                     _cur_song_ptr:	
   711  0067                     	ds	1
   712  0068                     _cur_song_repeat:	
   713  0068                     	ds	1
   714  0069                     _my_random_number:	
   715  0069                     	ds	1
   716  006A                     handle_serial@rx_counter:	
   717  006A                     	ds	1
   718  006B                     handle_serial@rx_id:	
   719  006B                     	ds	1
   720  006C                     __y:	
   721  006C                     	ds	1
   722                           
   723                           	psect	bssBANK1
   724  00A0                     __pbssBANK1:	
   725  00A0                     _hitlist:	
   726  00A0                     	ds	32
   727  00C0                     _config:	
   728  00C0                     	ds	18
   729                           
   730                           	psect	clrtext
   731  07B3                     clear_ram0:	
   732                           ;	Called with FSR0 containing the base address, and
   733                           ;	WREG with the size to clear
   734                           
   735  07B3  0064               	clrwdt	;clear the watchdog before getting into this loop
   736  07B4                     clrloop0:	
   737  07B4  0180               	clrf	0	;clear RAM location pointed to by FSR
   738  07B5  3101               	addfsr 0,1
   739  07B6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   740  07B7  2FB4               	goto	clrloop0	;have we reached the end yet?
   741  07B8  3400               	retlw	0	;all done for this memory range, return
   742                           
   743                           	psect	cstackCOMMON
   744  0070                     __pcstackCOMMON:	
   745  0070                     ?_Setup:	
   746  0070                     ?_super_dead_mode:	
   747                           ; 0 bytes @ 0x0
   748                           
   749  0070                     ?_handle_music:	
   750                           ; 0 bytes @ 0x0
   751                           
   752  0070                     ?_delay_1_ms:	
   753                           ; 0 bytes @ 0x0
   754                           
   755  0070                     ?_cheat:	
   756                           ; 0 bytes @ 0x0
   757                           
   758  0070                     ?_control_transfer:	
   759                           ; 0 bytes @ 0x0
   760                           
   761  0070                     ?_LoadFromFlash:	
   762                           ; 0 bytes @ 0x0
   763                           
   764  0070                     ?_main:	
   765                           ; 0 bytes @ 0x0
   766                           
   767  0070                     ?_red_led_on:	
   768                           ; 0 bytes @ 0x0
   769                           
   770  0070                     ?_green_led_on:	
   771                           ; 0 bytes @ 0x0
   772                           
   773  0070                     ?_stop_song:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0070                     ?_Send_Byte:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0070                     ?_High_Priority_Interrupt:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0070                     ??_High_Priority_Interrupt:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0070                     ?_add_to_hitlist:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0070                     ?_hit_by:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0070                     ?_SEND_DATA_BYTE:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0070                     ?_SEND_SOF:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0070                     ?_SEND_EOF:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0070                     ?_handle_serial:	
   801                           ; 0 bytes @ 0x0
   802                           
   803  0070                     ?_handle_fire:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_GET_CHAR_HELPER:	
   807                           ; 1 bytes @ 0x0
   808                           
   809                           
   810                           ; 1 bytes @ 0x0
   811  0070                     	ds	1
   812  0071                     ?_Load:	
   813  0071                     ?_Save:	
   814                           ; 0 bytes @ 0x1
   815                           
   816  0071                     ??_delay_1_ms:	
   817                           ; 0 bytes @ 0x1
   818                           
   819  0071                     ?_tone:	
   820                           ; 0 bytes @ 0x1
   821                           
   822  0071                     ??_red_led_on:	
   823                           ; 0 bytes @ 0x1
   824                           
   825  0071                     ??_green_led_on:	
   826                           ; 0 bytes @ 0x1
   827                           
   828  0071                     ?_play_song:	
   829                           ; 0 bytes @ 0x1
   830                           
   831  0071                     ??_stop_song:	
   832                           ; 0 bytes @ 0x1
   833                           
   834  0071                     ??_add_to_hitlist:	
   835                           ; 0 bytes @ 0x1
   836                           
   837  0071                     ??_GET_CHAR_HELPER:	
   838                           ; 0 bytes @ 0x1
   839                           
   840  0071                     ?_ADC_read:	
   841                           ; 0 bytes @ 0x1
   842                           
   843  0071                     play_song@length:	
   844                           ; 2 bytes @ 0x1
   845                           
   846  0071                     tone@period:	
   847                           ; 1 bytes @ 0x1
   848                           
   849  0071                     Load@address:	
   850                           ; 2 bytes @ 0x1
   851                           
   852  0071                     Save@address:	
   853                           ; 2 bytes @ 0x1
   854                           
   855  0071                     delay_1_ms@i:	
   856                           ; 2 bytes @ 0x1
   857                           
   858                           
   859                           ; 2 bytes @ 0x1
   860  0071                     	ds	1
   861  0072                     GET_CHAR_HELPER@val:	
   862  0072                     play_song@note_duration:	
   863                           ; 1 bytes @ 0x2
   864                           
   865                           
   866                           ; 2 bytes @ 0x2
   867  0072                     	ds	1
   868  0073                     ??_Setup:	
   869  0073                     ??_tone:	
   870                           ; 0 bytes @ 0x3
   871                           
   872  0073                     ??_ADC_read:	
   873                           ; 0 bytes @ 0x3
   874                           
   875  0073                     Load@ptr:	
   876                           ; 0 bytes @ 0x3
   877                           
   878  0073                     Save@ptr:	
   879                           ; 1 bytes @ 0x3
   880                           
   881                           
   882                           ; 1 bytes @ 0x3
   883  0073                     	ds	1
   884  0074                     play_song@repeat:	
   885  0074                     Load@data_length:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0074                     Save@data_length:	
   889                           ; 1 bytes @ 0x4
   890                           
   891                           
   892                           ; 1 bytes @ 0x4
   893  0074                     	ds	1
   894  0075                     ??_Load:	
   895  0075                     ??_Save:	
   896                           ; 0 bytes @ 0x5
   897                           
   898  0075                     ??_handle_music:	
   899                           ; 0 bytes @ 0x5
   900                           
   901  0075                     ??_cheat:	
   902                           ; 0 bytes @ 0x5
   903                           
   904  0075                     ??_play_song:	
   905                           ; 0 bytes @ 0x5
   906                           
   907  0075                     add_to_hitlist@gun:	
   908                           ; 0 bytes @ 0x5
   909                           
   910                           
   911                           ; 1 bytes @ 0x5
   912  0075                     	ds	1
   913  0076                     Load@i:	
   914  0076                     Save@i:	
   915                           ; 1 bytes @ 0x6
   916                           
   917  0076                     cheat@i:	
   918                           ; 1 bytes @ 0x6
   919                           
   920  0076                     add_to_hitlist@gun16:	
   921                           ; 1 bytes @ 0x6
   922                           
   923                           
   924                           ; 2 bytes @ 0x6
   925  0076                     	ds	1
   926  0077                     ??_LoadFromFlash:	
   927  0077                     play_song@song:	
   928                           ; 0 bytes @ 0x7
   929                           
   930  0077                     cheat@i_686:	
   931                           ; 1 bytes @ 0x7
   932                           
   933                           
   934                           ; 1 bytes @ 0x7
   935  0077                     	ds	1
   936  0078                     ??_Send_Byte:	
   937  0078                     add_to_hitlist@i:	
   938                           ; 0 bytes @ 0x8
   939                           
   940                           
   941                           ; 1 bytes @ 0x8
   942  0078                     	ds	1
   943  0079                     Send_Byte@data:	
   944                           
   945                           ; 1 bytes @ 0x9
   946  0079                     	ds	1
   947  007A                     Send_Byte@i:	
   948                           
   949                           ; 2 bytes @ 0xA
   950  007A                     	ds	2
   951  007C                     ??_main:	
   952  007C                     ??_SEND_SOF:	
   953                           ; 0 bytes @ 0xC
   954                           
   955  007C                     ??_SEND_EOF:	
   956                           ; 0 bytes @ 0xC
   957                           
   958                           
   959                           	psect	cstackBANK0
   960  0020                     __pcstackBANK0:	
   961                           ; 0 bytes @ 0xC
   962                           
   963  0020                     ??_handle_fire:	
   964  0020                     ??_SEND_DATA_BYTE:	
   965                           ; 0 bytes @ 0x0
   966                           
   967                           
   968                           ; 0 bytes @ 0x0
   969  0020                     	ds	2
   970  0022                     SEND_DATA_BYTE@b:	
   971  0022                     handle_fire@a:	
   972                           ; 1 bytes @ 0x2
   973                           
   974                           
   975                           ; 2 bytes @ 0x2
   976  0022                     	ds	1
   977  0023                     ??_control_transfer:	
   978                           
   979                           ; 0 bytes @ 0x3
   980  0023                     	ds	2
   981  0025                     control_transfer@data:	
   982                           
   983                           ; 32 bytes @ 0x5
   984  0025                     	ds	32
   985  0045                     control_transfer@cmd:	
   986                           
   987                           ; 1 bytes @ 0x25
   988  0045                     	ds	1
   989  0046                     control_transfer@random_number:	
   990                           
   991                           ; 1 bytes @ 0x26
   992  0046                     	ds	1
   993  0047                     control_transfer@id:	
   994                           
   995                           ; 1 bytes @ 0x27
   996  0047                     	ds	1
   997  0048                     control_transfer@dptr:	
   998                           
   999                           ; 1 bytes @ 0x28
  1000  0048                     	ds	1
  1001  0049                     control_transfer@i:	
  1002                           
  1003                           ; 1 bytes @ 0x29
  1004  0049                     	ds	1
  1005  004A                     control_transfer@page:	
  1006                           
  1007                           ; 2 bytes @ 0x2A
  1008  004A                     	ds	2
  1009  004C                     control_transfer@x:	
  1010                           
  1011                           ; 1 bytes @ 0x2C
  1012  004C                     	ds	1
  1013  004D                     ??_super_dead_mode:	
  1014                           
  1015                           ; 0 bytes @ 0x2D
  1016  004D                     	ds	2
  1017  004F                     super_dead_mode@b:	
  1018                           
  1019                           ; 1 bytes @ 0x2F
  1020  004F                     	ds	1
  1021  0050                     super_dead_mode@counter:	
  1022                           
  1023                           ; 2 bytes @ 0x30
  1024  0050                     	ds	2
  1025  0052                     ??_hit_by:	
  1026                           
  1027                           ; 0 bytes @ 0x32
  1028  0052                     	ds	2
  1029  0054                     hit_by@who:	
  1030                           
  1031                           ; 1 bytes @ 0x34
  1032  0054                     	ds	1
  1033  0055                     hit_by@respawn_timer:	
  1034                           
  1035                           ; 2 bytes @ 0x35
  1036  0055                     	ds	2
  1037  0057                     hit_by@i:	
  1038                           
  1039                           ; 1 bytes @ 0x37
  1040  0057                     	ds	1
  1041  0058                     hit_by@i_704:	
  1042                           
  1043                           ; 1 bytes @ 0x38
  1044  0058                     	ds	1
  1045  0059                     ??_handle_serial:	
  1046                           
  1047                           ; 0 bytes @ 0x39
  1048  0059                     	ds	2
  1049  005B                     handle_serial@b:	
  1050                           
  1051                           ; 1 bytes @ 0x3B
  1052  005B                     	ds	1
  1053                           
  1054                           	psect	maintext
  1055  079F                     __pmaintext:	
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 49 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 17F/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1075 ;;      Params:         0       0       0       0
  1076 ;;      Locals:         0       0       0       0
  1077 ;;      Temps:          0       0       0       0
  1078 ;;      Totals:         0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:   10
  1081 ;; This function calls:
  1082 ;;		_LoadFromFlash
  1083 ;;		_Setup
  1084 ;;		_super_dead_mode
  1085 ;;		_handle_serial
  1086 ;;		_handle_fire
  1087 ;;		_handle_music
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _main
  1095  079F                     _main:	
  1096                           
  1097                           ;main.c: 50: Setup();
  1098                           
  1099                           ;incstack = 0
  1100                           ; Regs used in _main: [allreg]
  1101  079F  269C               	fcall	_Setup
  1102                           
  1103                           ;main.c: 51: LoadFromFlash();
  1104  07A0  2546               	fcall	_LoadFromFlash
  1105                           
  1106                           ;main.c: 52: if(!config.health) {
  1107  07A1  0021               	movlb	1	; select bank1
  1108  07A2  0845               	movf	((_config+1)^(0+128)+4),w
  1109  07A3  0444               	iorwf	(_config^(0+128)+4),w
  1110  07A4  1D03               	skipz
  1111  07A5  2FA7               	goto	l26
  1112                           
  1113                           ;main.c: 53: super_dead_mode();
  1114  07A6  24F2               	fcall	_super_dead_mode
  1115  07A7                     l26:	
  1116                           ;main.c: 54: }
  1117                           ;main.c: 56: while(1)
  1118                           
  1119                           
  1120                           ;main.c: 57: {
  1121                           ;main.c: 58: handle_serial();
  1122  07A7  259A               	fcall	_handle_serial
  1123                           
  1124                           ;main.c: 59: handle_fire();
  1125  07A8  2340               	fcall	_handle_fire
  1126                           
  1127                           ;main.c: 60: handle_music();
  1128  07A9  266E               	fcall	_handle_music
  1129  07AA  2FA7               	goto	l26
  1130  07AB                     __end_of_main:	
  1131                           
  1132                           	psect	text1
  1133  0340                     __ptext1:	
  1134 ;; *************** function _handle_fire *****************
  1135 ;; Defined at:
  1136 ;;		line 246 in file "user.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;		None
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  a               2    2[BANK0 ] unsigned int 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      unsigned char 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1150 ;;      Params:         0       0       0       0
  1151 ;;      Locals:         0       2       0       0
  1152 ;;      Temps:          0       2       0       0
  1153 ;;      Totals:         0       4       0       0
  1154 ;;Total ram usage:        4 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    4
  1157 ;; This function calls:
  1158 ;;		_ADC_read
  1159 ;;		_green_led_on
  1160 ;;		_play_song
  1161 ;;		_stop_song
  1162 ;;		_Send_Byte
  1163 ;;		_cheat
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _handle_fire
  1171  0340                     _handle_fire:	
  1172                           
  1173                           ;user.c: 247: static uint16_t timer = 0;
  1174                           ;user.c: 248: static uint16_t counter = 0;
  1175                           ;user.c: 249: uint16_t a;
  1176                           ;user.c: 251: a=ADC_read();
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1180  0340  277E               	fcall	_ADC_read
  1181  0341  0872               	movf	?_ADC_read+1,w
  1182  0342  0020               	movlb	0	; select bank0
  1183  0343  01A3               	clrf	handle_fire@a+1
  1184  0344  07A3               	addwf	handle_fire@a+1,f
  1185  0345  0871               	movf	?_ADC_read,w
  1186  0346  01A2               	clrf	handle_fire@a
  1187  0347  07A2               	addwf	handle_fire@a,f
  1188                           
  1189                           ;user.c: 252: if (a > config.fire_cheating){
  1190  0348  0823               	movf	handle_fire@a+1,w
  1191  0349  0021               	movlb	1	; select bank1
  1192  034A  024D               	subwf	((_config+1)^(0+128)+12),w
  1193  034B  1D03               	skipz
  1194  034C  2B51               	goto	u3155
  1195  034D  0020               	movlb	0	; select bank0
  1196  034E  0822               	movf	handle_fire@a,w
  1197  034F  0021               	movlb	1	; select bank1
  1198  0350  024C               	subwf	(_config^(0+128)+12),w
  1199  0351                     u3155:	
  1200  0351  1803               	skipnc
  1201  0352  2B54               	goto	l2675
  1202                           
  1203                           ;user.c: 253: cheat();
  1204  0353  270E               	fcall	_cheat
  1205  0354                     l2675:	
  1206                           
  1207                           ;user.c: 254: }
  1208                           ;user.c: 255: if (a > config.fire_threshold && a < config.fire_cheating)
  1209  0354  0020               	movlb	0	; select bank0
  1210  0355  0823               	movf	handle_fire@a+1,w
  1211  0356  0021               	movlb	1	; select bank1
  1212  0357  024B               	subwf	((_config+1)^(0+128)+10),w
  1213  0358  1D03               	skipz
  1214  0359  2B5E               	goto	u3165
  1215  035A  0020               	movlb	0	; select bank0
  1216  035B  0822               	movf	handle_fire@a,w
  1217  035C  0021               	movlb	1	; select bank1
  1218  035D  024A               	subwf	(_config^(0+128)+10),w
  1219  035E                     u3165:	
  1220  035E  1803               	skipnc
  1221  035F  2BBF               	goto	l200
  1222  0360  084D               	movf	((_config+1)^(0+128)+12),w
  1223  0361  0020               	movlb	0	; select bank0
  1224  0362  0223               	subwf	handle_fire@a+1,w
  1225  0363  1D03               	skipz
  1226  0364  2B69               	goto	u3175
  1227  0365  0021               	movlb	1	; select bank1
  1228  0366  084C               	movf	(_config^(0+128)+12),w
  1229  0367  0020               	movlb	0	; select bank0
  1230  0368  0222               	subwf	handle_fire@a,w
  1231  0369                     u3175:	
  1232  0369  1803               	skipnc
  1233  036A  2BBF               	goto	l200
  1234  036B                     l201:	
  1235                           ;user.c: 256: {
  1236                           ;user.c: 257: while(!my_random_number){
  1237                           
  1238  036B  0869               	movf	_my_random_number,w
  1239  036C  1D03               	skipz
  1240  036D  2B73               	goto	l2683
  1241                           
  1242                           ;user.c: 258: my_random_number = TMR0;
  1243  036E  0815               	movf	21,w	;volatile
  1244  036F  00A0               	movwf	??_handle_fire
  1245  0370  0820               	movf	??_handle_fire,w
  1246  0371  00E9               	movwf	_my_random_number
  1247  0372  2B6B               	goto	l201
  1248  0373                     l2683:	
  1249                           
  1250                           ;user.c: 259: }
  1251                           ;user.c: 260: if(timer < config.fire_holdoff)
  1252  0373  0021               	movlb	1	; select bank1
  1253  0374  084F               	movf	((_config+1)^(0+128)+14),w
  1254  0375  0020               	movlb	0	; select bank0
  1255  0376  0263               	subwf	handle_fire@timer+1,w
  1256  0377  1D03               	skipz
  1257  0378  2B7D               	goto	u3195
  1258  0379  0021               	movlb	1	; select bank1
  1259  037A  084E               	movf	(_config^(0+128)+14),w
  1260  037B  0020               	movlb	0	; select bank0
  1261  037C  0262               	subwf	handle_fire@timer,w
  1262  037D                     u3195:	
  1263  037D  1803               	skipnc
  1264  037E  2B84               	goto	l2687
  1265                           
  1266                           ;user.c: 261: {
  1267                           ;user.c: 262: timer ++;
  1268  037F  3001               	movlw	1
  1269  0380  07E2               	addwf	handle_fire@timer,f
  1270  0381  3000               	movlw	0
  1271  0382  3DE3               	addwfc	handle_fire@timer+1,f
  1272                           
  1273                           ;user.c: 263: }
  1274  0383  0008               	return
  1275  0384                     l2687:	
  1276                           
  1277                           ;user.c: 264: else
  1278                           ;user.c: 265: {
  1279                           ;user.c: 266: if(!config.power || counter <= config.power)
  1280  0384  3002               	movlw	2
  1281  0385  3EC0               	addlw	_config& (0+255)
  1282  0386  0086               	movwf	6
  1283  0387  0187               	clrf	7
  1284  0388  0016               	moviw fsr1++
  1285  0389  0401               	iorwf	1,w
  1286  038A  1903               	skipnz
  1287  038B  2B97               	goto	l2691
  1288  038C  0861               	movf	handle_fire@counter+1,w
  1289  038D  0021               	movlb	1	; select bank1
  1290  038E  0243               	subwf	((_config+1)^(0+128)+2),w
  1291  038F  1D03               	skipz
  1292  0390  2B95               	goto	u3215
  1293  0391  0020               	movlb	0	; select bank0
  1294  0392  0860               	movf	handle_fire@counter,w
  1295  0393  0021               	movlb	1	; select bank1
  1296  0394  0242               	subwf	(_config^(0+128)+2),w
  1297  0395                     u3215:	
  1298  0395  1C03               	skipc
  1299  0396  2BBD               	goto	l206
  1300  0397                     l2691:	
  1301                           
  1302                           ;user.c: 267: {
  1303                           ;user.c: 268: if(!counter)
  1304  0397  0020               	movlb	0	; select bank0
  1305  0398  0861               	movf	handle_fire@counter+1,w
  1306  0399  0460               	iorwf	handle_fire@counter,w
  1307  039A  1D03               	skipz
  1308  039B  2BB4               	goto	l2697
  1309                           
  1310                           ;user.c: 269: {
  1311                           ;user.c: 270: green_led_on();
  1312  039C  27C5               	fcall	_green_led_on
  1313                           
  1314                           ;user.c: 271: play_song((uint16_t*)fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(c
      +                          onfig.power));
  1315  039D  3010               	movlw	16
  1316  039E  0020               	movlb	0	; select bank0
  1317  039F  00A0               	movwf	??_handle_fire
  1318  03A0  0820               	movf	??_handle_fire,w
  1319  03A1  00F1               	movwf	?_play_song
  1320  03A2  30B8               	movlw	184
  1321  03A3  00F2               	movwf	?_play_song+1
  1322  03A4  300B               	movlw	11
  1323  03A5  00F3               	movwf	?_play_song+2
  1324  03A6  3002               	movlw	2
  1325  03A7  3EC0               	addlw	_config& (0+255)
  1326  03A8  0086               	movwf	6
  1327  03A9  0187               	clrf	7
  1328  03AA  0016               	moviw fsr1++
  1329  03AB  0401               	iorwf	1,w
  1330  03AC  3000               	movlw	0
  1331  03AD  1903               	skipnz
  1332  03AE  3001               	movlw	1
  1333  03AF  00A1               	movwf	??_handle_fire+1
  1334  03B0  0821               	movf	??_handle_fire+1,w
  1335  03B1  00F4               	movwf	?_play_song+3
  1336  03B2  306C               	movlw	(_fire_song| (0+32768))& (0+255)
  1337  03B3  26EB               	fcall	_play_song
  1338  03B4                     l2697:	
  1339                           
  1340                           ;user.c: 272: }
  1341                           ;user.c: 273: Send_Byte(config.id);
  1342  03B4  0021               	movlb	1	; select bank1
  1343  03B5  0840               	movf	_config^(0+128),w
  1344  03B6  2634               	fcall	_Send_Byte
  1345                           
  1346                           ;user.c: 274: counter++;
  1347  03B7  3001               	movlw	1
  1348  03B8  0020               	movlb	0	; select bank0
  1349  03B9  07E0               	addwf	handle_fire@counter,f
  1350  03BA  3000               	movlw	0
  1351  03BB  3DE1               	addwfc	handle_fire@counter+1,f
  1352                           
  1353                           ;user.c: 275: }
  1354  03BC  0008               	return
  1355  03BD                     l206:	
  1356                           
  1357                           ;user.c: 276: else
  1358                           ;user.c: 277: {
  1359                           ;user.c: 278: {TRISAbits.TRISA5 = 1;};
  1360  03BD  168C               	bsf	12,5	;volatile
  1361                           
  1362                           ;user.c: 279: }
  1363                           ;user.c: 280: }
  1364                           ;user.c: 281: }
  1365  03BE  0008               	return
  1366  03BF                     l200:	
  1367                           
  1368                           ;user.c: 282: else
  1369                           ;user.c: 283: {
  1370                           ;user.c: 284: {TRISAbits.TRISA5 = 1;};
  1371  03BF  0021               	movlb	1	; select bank1
  1372  03C0  168C               	bsf	12,5	;volatile
  1373                           
  1374                           ;user.c: 285: if(!config.power && counter) stop_song();
  1375  03C1  0843               	movf	((_config+1)^(0+128)+2),w
  1376  03C2  0442               	iorwf	(_config^(0+128)+2),w
  1377  03C3  1D03               	skipz
  1378  03C4  2BCB               	goto	l2707
  1379  03C5  0020               	movlb	0	; select bank0
  1380  03C6  0861               	movf	handle_fire@counter+1,w
  1381  03C7  0460               	iorwf	handle_fire@counter,w
  1382  03C8  1903               	skipnz
  1383  03C9  2BCB               	goto	l2707
  1384  03CA  27BF               	fcall	_stop_song
  1385  03CB                     l2707:	
  1386                           
  1387                           ;user.c: 286: timer = 0;
  1388  03CB  0020               	movlb	0	; select bank0
  1389  03CC  01E2               	clrf	handle_fire@timer
  1390  03CD  01E3               	clrf	handle_fire@timer+1
  1391                           
  1392                           ;user.c: 287: counter = 0;
  1393  03CE  01E0               	clrf	handle_fire@counter
  1394  03CF  01E1               	clrf	handle_fire@counter+1
  1395                           
  1396                           ;user.c: 288: return 0;
  1397                           ;	Return value of _handle_fire is never used
  1398  03D0  0008               	return
  1399  03D1                     __end_of_handle_fire:	
  1400                           ;user.c: 289: }
  1401                           ;user.c: 290: return 1;
  1402                           ;	Return value of _handle_fire is never used
  1403                           
  1404                           
  1405                           	psect	text2
  1406  07C5                     __ptext2:	
  1407 ;; *************** function _green_led_on *****************
  1408 ;; Defined at:
  1409 ;;		line 87 in file "user.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;		None               void
  1416 ;; Registers used:
  1417 ;;		None
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1423 ;;      Params:         0       0       0       0
  1424 ;;      Locals:         0       0       0       0
  1425 ;;      Temps:          0       0       0       0
  1426 ;;      Totals:         0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    1
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_handle_fire
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _green_led_on
  1439  07C5                     _green_led_on:	
  1440                           
  1441                           ;user.c: 88: TRISAbits.TRISA5 = 0;
  1442                           
  1443                           ;incstack = 0
  1444                           ; Regs used in _green_led_on: []
  1445  07C5  0021               	movlb	1	; select bank1
  1446  07C6  128C               	bcf	12,5	;volatile
  1447                           
  1448                           ;user.c: 89: PORTAbits.RA5 = 1;
  1449  07C7  0020               	movlb	0	; select bank0
  1450  07C8  168C               	bsf	12,5	;volatile
  1451  07C9  0008               	return
  1452  07CA                     __end_of_green_led_on:	
  1453                           
  1454                           	psect	text3
  1455  077E                     __ptext3:	
  1456 ;; *************** function _ADC_read *****************
  1457 ;; Defined at:
  1458 ;;		line 74 in file "user.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  2    1[COMMON] unsigned int 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1472 ;;      Params:         2       0       0       0
  1473 ;;      Locals:         0       0       0       0
  1474 ;;      Temps:          2       0       0       0
  1475 ;;      Totals:         4       0       0       0
  1476 ;;Total ram usage:        4 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    1
  1479 ;; This function calls:
  1480 ;;		Nothing
  1481 ;; This function is called by:
  1482 ;;		_handle_fire
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           
  1487                           ;psect for function _ADC_read
  1488  077E                     _ADC_read:	
  1489                           
  1490                           ;user.c: 75: ADCON0bits.GO = 1;
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1494  077E  0021               	movlb	1	; select bank1
  1495  077F  149D               	bsf	29,1	;volatile
  1496  0780                     l131:	
  1497                           ;user.c: 76: while(ADCON0bits.GO){};
  1498                           
  1499  0780  189D               	btfsc	29,1	;volatile
  1500  0781  2F80               	goto	l131
  1501                           
  1502                           ;user.c: 77: return ADRES >> 6;
  1503  0782  081C               	movf	28,w	;volatile
  1504  0783  00F4               	movwf	??_ADC_read+1
  1505  0784  081B               	movf	27,w	;volatile
  1506  0785  00F3               	movwf	??_ADC_read
  1507  0786  3006               	movlw	6
  1508  0787                     u1855:	
  1509  0787  36F4               	lsrf	??_ADC_read+1,f
  1510  0788  0CF3               	rrf	??_ADC_read,f
  1511  0789  0B89               	decfsz	9,f
  1512  078A  2F87               	goto	u1855
  1513  078B  0873               	movf	??_ADC_read,w
  1514  078C  00F1               	movwf	?_ADC_read
  1515  078D  0874               	movf	??_ADC_read+1,w
  1516  078E  00F2               	movwf	?_ADC_read+1
  1517  078F  0008               	return
  1518  0790                     __end_of_ADC_read:	
  1519                           
  1520                           	psect	text4
  1521  059A                     __ptext4:	
  1522 ;; *************** function _handle_serial *****************
  1523 ;; Defined at:
  1524 ;;		line 134 in file "protocol.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;		None
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  b               1   59[BANK0 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      unsigned char 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1538 ;;      Params:         0       0       0       0
  1539 ;;      Locals:         0       1       0       0
  1540 ;;      Temps:          0       2       0       0
  1541 ;;      Totals:         0       3       0       0
  1542 ;;Total ram usage:        3 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    9
  1545 ;; This function calls:
  1546 ;;		_control_transfer
  1547 ;;		_hit_by
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _handle_serial
  1555  059A                     _handle_serial:	
  1556                           
  1557                           ;protocol.c: 135: static uint8_t rx_id=0;
  1558                           ;protocol.c: 136: static uint8_t rx_counter=0;
  1559                           ;protocol.c: 137: uint8_t b;
  1560                           ;protocol.c: 139: if(!(PIR1bits.RCIF)) return 0;
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _handle_serial: [allreg]
  1564  059A  0020               	movlb	0	; select bank0
  1565  059B  1E91               	btfss	17,5	;volatile
  1566  059C  0008               	return
  1567                           
  1568                           ;protocol.c: 140: b=(RCREG^0b10101010);
  1569                           
  1570                           ;	Return value of _handle_serial is never used
  1571  059D  0023               	movlb	3	; select bank3
  1572  059E  0819               	movf	25,w	;volatile
  1573  059F  3AAA               	xorlw	170
  1574  05A0  0020               	movlb	0	; select bank0
  1575  05A1  00D9               	movwf	??_handle_serial
  1576  05A2  0859               	movf	??_handle_serial,w
  1577  05A3  00DB               	movwf	handle_serial@b
  1578                           
  1579                           ;protocol.c: 141: if(b == 0x10) {
  1580  05A4  085B               	movf	handle_serial@b,w
  1581  05A5  3A10               	xorlw	16
  1582  05A6  1D03               	skipz
  1583  05A7  2DAA               	goto	l2637
  1584                           
  1585                           ;protocol.c: 142: control_transfer();
  1586  05A8  2023               	fcall	_control_transfer
  1587                           
  1588                           ;protocol.c: 143: }
  1589  05A9  0008               	return
  1590  05AA                     l2637:	
  1591                           
  1592                           ;protocol.c: 145: else if((b > 0x80) && (b != config.id) && (config.id != 0x80)) {
  1593  05AA  3081               	movlw	129
  1594  05AB  0020               	movlb	0	; select bank0
  1595  05AC  025B               	subwf	handle_serial@b,w
  1596  05AD  1C03               	skipc
  1597  05AE  0008               	return
  1598  05AF  085B               	movf	handle_serial@b,w
  1599  05B0  00D9               	movwf	??_handle_serial
  1600  05B1  01DA               	clrf	??_handle_serial+1
  1601  05B2  0021               	movlb	1	; select bank1
  1602  05B3  0841               	movf	(_config+1)^(0+128),w
  1603  05B4  0020               	movlb	0	; select bank0
  1604  05B5  065A               	xorwf	??_handle_serial+1,w
  1605  05B6  1D03               	skipz
  1606  05B7  2DBC               	goto	u3105
  1607  05B8  0021               	movlb	1	; select bank1
  1608  05B9  0840               	movf	_config^(0+128),w
  1609  05BA  0020               	movlb	0	; select bank0
  1610  05BB  0659               	xorwf	??_handle_serial,w
  1611  05BC                     u3105:	
  1612  05BC  1903               	skipnz
  1613  05BD  0008               	return
  1614  05BE  3080               	movlw	128
  1615  05BF  0021               	movlb	1	; select bank1
  1616  05C0  0640               	xorwf	_config^(0+128),w
  1617  05C1  0441               	iorwf	(_config+1)^(0+128),w
  1618  05C2  1903               	skipnz
  1619  05C3  0008               	return
  1620                           
  1621                           ;protocol.c: 146: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1622  05C4  0020               	movlb	0	; select bank0
  1623  05C5  085B               	movf	handle_serial@b,w
  1624  05C6  066B               	xorwf	handle_serial@rx_id,w
  1625  05C7  1903               	btfsc	3,2
  1626  05C8  1891               	btfsc	17,1	;volatile
  1627  05C9  01EA               	clrf	handle_serial@rx_counter
  1628                           
  1629                           ;protocol.c: 147: TMR2 = 0;
  1630  05CA  019A               	clrf	26	;volatile
  1631                           
  1632                           ;protocol.c: 148: PIR1bits.TMR2IF = 0;
  1633  05CB  1091               	bcf	17,1	;volatile
  1634                           
  1635                           ;protocol.c: 149: rx_id = b;
  1636  05CC  085B               	movf	handle_serial@b,w
  1637  05CD  00D9               	movwf	??_handle_serial
  1638  05CE  0859               	movf	??_handle_serial,w
  1639  05CF  00EB               	movwf	handle_serial@rx_id
  1640                           
  1641                           ;protocol.c: 150: rx_counter++;
  1642  05D0  3001               	movlw	1
  1643  05D1  00D9               	movwf	??_handle_serial
  1644  05D2  0859               	movf	??_handle_serial,w
  1645  05D3  07EA               	addwf	handle_serial@rx_counter,f
  1646                           
  1647                           ;protocol.c: 151: if(rx_counter > config.shield) {
  1648  05D4  086A               	movf	handle_serial@rx_counter,w
  1649  05D5  00D9               	movwf	??_handle_serial
  1650  05D6  01DA               	clrf	??_handle_serial+1
  1651  05D7  085A               	movf	??_handle_serial+1,w
  1652  05D8  0021               	movlb	1	; select bank1
  1653  05D9  0247               	subwf	((_config+1)^(0+128)+6),w
  1654  05DA  1D03               	skipz
  1655  05DB  2DE0               	goto	u3145
  1656  05DC  0020               	movlb	0	; select bank0
  1657  05DD  0859               	movf	??_handle_serial,w
  1658  05DE  0021               	movlb	1	; select bank1
  1659  05DF  0246               	subwf	(_config^(0+128)+6),w
  1660  05E0                     u3145:	
  1661  05E0  1803               	skipnc
  1662  05E1  0008               	return
  1663                           
  1664                           ;protocol.c: 152: RCSTAbits.CREN = 0;
  1665  05E2  0023               	movlb	3	; select bank3
  1666  05E3  121D               	bcf	29,4	;volatile
  1667                           
  1668                           ;protocol.c: 153: hit_by(b);
  1669  05E4  0020               	movlb	0	; select bank0
  1670  05E5  085B               	movf	handle_serial@b,w
  1671  05E6  23D1               	fcall	_hit_by
  1672                           
  1673                           ;protocol.c: 154: rx_id = 0;
  1674  05E7  0020               	movlb	0	; select bank0
  1675  05E8  01EB               	clrf	handle_serial@rx_id
  1676                           
  1677                           ;protocol.c: 155: (RCREG^0b10101010);
  1678  05E9  0023               	movlb	3	; select bank3
  1679  05EA  0819               	movf	25,w	;volatile
  1680                           
  1681                           ;protocol.c: 156: RCSTAbits.CREN = 1;
  1682  05EB  161D               	bsf	29,4	;volatile
  1683  05EC  0008               	return
  1684  05ED                     __end_of_handle_serial:	
  1685                           ;protocol.c: 157: }
  1686                           ;protocol.c: 158: }
  1687                           ;protocol.c: 159: return 1;
  1688                           ;	Return value of _handle_serial is never used
  1689                           
  1690                           
  1691                           	psect	text5
  1692  03D1                     __ptext5:	
  1693 ;; *************** function _hit_by *****************
  1694 ;; Defined at:
  1695 ;;		line 350 in file "user.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  who             1    wreg     unsigned char 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  who             1   52[BANK0 ] unsigned char 
  1700 ;;  i               1   56[BANK0 ] unsigned char 
  1701 ;;  i               1   55[BANK0 ] unsigned char 
  1702 ;;  respawn_time    2   53[BANK0 ] unsigned int 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;		None               void
  1705 ;; Registers used:
  1706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       0       0       0
  1713 ;;      Locals:         0       5       0       0
  1714 ;;      Temps:          0       2       0       0
  1715 ;;      Totals:         0       7       0       0
  1716 ;;Total ram usage:        7 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    8
  1719 ;; This function calls:
  1720 ;;		_Save
  1721 ;;		_super_dead_mode
  1722 ;;		_handle_music
  1723 ;;		_delay_1_ms
  1724 ;;		_red_led_on
  1725 ;;		_play_song
  1726 ;;		_add_to_hitlist
  1727 ;; This function is called by:
  1728 ;;		_handle_serial
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function _hit_by
  1734  03D1                     _hit_by:	
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in _hit_by: [allreg]
  1738                           ;hit_by@who stored from wreg
  1739  03D1  0020               	movlb	0	; select bank0
  1740  03D2  00D4               	movwf	hit_by@who
  1741                           
  1742                           ;user.c: 351: uint16_t respawn_timer;
  1743                           ;user.c: 353: add_to_hitlist(who);
  1744  03D3  0854               	movf	hit_by@who,w
  1745  03D4  249E               	fcall	_add_to_hitlist
  1746                           
  1747                           ;user.c: 354: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1748  03D5  30E0               	movlw	224
  1749  03D6  00F1               	movwf	?_Save
  1750  03D7  3007               	movlw	7
  1751  03D8  00F2               	movwf	?_Save+1
  1752  03D9  30A0               	movlw	_hitlist& (0+255)
  1753  03DA  0020               	movlb	0	; select bank0
  1754  03DB  00D2               	movwf	??_hit_by
  1755  03DC  0852               	movf	??_hit_by,w
  1756  03DD  00F3               	movwf	?_Save+2
  1757  03DE  3010               	movlw	16
  1758  03DF  00D3               	movwf	??_hit_by+1
  1759  03E0  0853               	movf	??_hit_by+1,w
  1760  03E1  00F4               	movwf	?_Save+3
  1761  03E2  25ED               	fcall	_Save
  1762                           
  1763                           ;user.c: 356: config.health --;
  1764  03E3  3001               	movlw	1
  1765  03E4  0021               	movlb	1	; select bank1
  1766  03E5  02C4               	subwf	(_config^(0+128)+4),f
  1767  03E6  3000               	movlw	0
  1768  03E7  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1769                           
  1770                           ;user.c: 357: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1771  03E8  30F0               	movlw	240
  1772  03E9  00F1               	movwf	?_Save
  1773  03EA  3007               	movlw	7
  1774  03EB  00F2               	movwf	?_Save+1
  1775  03EC  30C0               	movlw	_config& (0+255)
  1776  03ED  0020               	movlb	0	; select bank0
  1777  03EE  00D2               	movwf	??_hit_by
  1778  03EF  0852               	movf	??_hit_by,w
  1779  03F0  00F3               	movwf	?_Save+2
  1780  03F1  3009               	movlw	9
  1781  03F2  00D3               	movwf	??_hit_by+1
  1782  03F3  0853               	movf	??_hit_by+1,w
  1783  03F4  00F4               	movwf	?_Save+3
  1784  03F5  25ED               	fcall	_Save
  1785                           
  1786                           ;user.c: 359: play_song((uint16_t*)death_song,sizeof(death_song)/sizeof(uint16_t),60000,
      +                          0);
  1787  03F6  3013               	movlw	19
  1788  03F7  0020               	movlb	0	; select bank0
  1789  03F8  00D2               	movwf	??_hit_by
  1790  03F9  0852               	movf	??_hit_by,w
  1791  03FA  00F1               	movwf	?_play_song
  1792  03FB  3060               	movlw	96
  1793  03FC  00F2               	movwf	?_play_song+1
  1794  03FD  30EA               	movlw	234
  1795  03FE  00F3               	movwf	?_play_song+2
  1796  03FF  01F4               	clrf	?_play_song+3
  1797  0400  3046               	movlw	(_death_song| (0+32768))& (0+255)
  1798  0401  26EB               	fcall	_play_song
  1799                           
  1800                           ;user.c: 361: if(!config.health)
  1801  0402  0021               	movlb	1	; select bank1
  1802  0403  0845               	movf	((_config+1)^(0+128)+4),w
  1803  0404  0444               	iorwf	(_config^(0+128)+4),w
  1804  0405  1D03               	skipz
  1805  0406  2C0A               	goto	l3179
  1806                           
  1807                           ;user.c: 362: {
  1808                           ;user.c: 363: red_led_on();
  1809  0407  27CA               	fcall	_red_led_on
  1810                           
  1811                           ;user.c: 364: super_dead_mode();
  1812  0408  24F2               	fcall	_super_dead_mode
  1813                           
  1814                           ;user.c: 365: return;
  1815  0409  0008               	return
  1816  040A                     l3179:	
  1817                           
  1818                           ;user.c: 366: }
  1819                           ;user.c: 368: respawn_timer = config.respawn_delay;
  1820  040A  0021               	movlb	1	; select bank1
  1821  040B  0849               	movf	((_config+1)^(0+128)+8),w
  1822  040C  0020               	movlb	0	; select bank0
  1823  040D  01D6               	clrf	hit_by@respawn_timer+1
  1824  040E  07D6               	addwf	hit_by@respawn_timer+1,f
  1825  040F  0021               	movlb	1	; select bank1
  1826  0410  0848               	movf	(_config^(0+128)+8),w
  1827  0411  0020               	movlb	0	; select bank0
  1828  0412  01D5               	clrf	hit_by@respawn_timer
  1829  0413  07D5               	addwf	hit_by@respawn_timer,f
  1830  0414                     l3217:	
  1831                           ;user.c: 369: while(respawn_timer)
  1832                           
  1833  0414  0856               	movf	hit_by@respawn_timer+1,w
  1834  0415  0455               	iorwf	hit_by@respawn_timer,w
  1835  0416  1903               	btfsc	3,2
  1836  0417  0008               	return
  1837                           
  1838                           ;user.c: 370: {
  1839                           ;user.c: 371: respawn_timer--;
  1840  0418  3001               	movlw	1
  1841  0419  02D5               	subwf	hit_by@respawn_timer,f
  1842  041A  3000               	movlw	0
  1843  041B  3BD6               	subwfb	hit_by@respawn_timer+1,f
  1844                           
  1845                           ;user.c: 372: red_led_on();
  1846  041C  27CA               	fcall	_red_led_on
  1847                           
  1848                           ;user.c: 373: for(uint8_t i=0;i<50;i++)
  1849  041D  0020               	movlb	0	; select bank0
  1850  041E  01D7               	clrf	hit_by@i
  1851  041F  3032               	movlw	50
  1852  0420  0257               	subwf	hit_by@i,w
  1853  0421  1803               	btfsc	3,0
  1854  0422  2C2E               	goto	l3199
  1855  0423                     l3191:	
  1856                           
  1857                           ;user.c: 374: {
  1858                           ;user.c: 375: handle_music();
  1859  0423  266E               	fcall	_handle_music
  1860                           
  1861                           ;user.c: 376: delay_1_ms();
  1862  0424  2790               	fcall	_delay_1_ms
  1863  0425  3001               	movlw	1
  1864  0426  0020               	movlb	0	; select bank0
  1865  0427  00D2               	movwf	??_hit_by
  1866  0428  0852               	movf	??_hit_by,w
  1867  0429  07D7               	addwf	hit_by@i,f
  1868  042A  3032               	movlw	50
  1869  042B  0257               	subwf	hit_by@i,w
  1870  042C  1C03               	skipc
  1871  042D  2C23               	goto	l3191
  1872  042E                     l3199:	
  1873                           
  1874                           ;user.c: 377: }
  1875                           ;user.c: 379: if(respawn_timer < 30)
  1876  042E  3000               	movlw	0
  1877  042F  0256               	subwf	hit_by@respawn_timer+1,w
  1878  0430  301E               	movlw	30
  1879  0431  1903               	skipnz
  1880  0432  0255               	subwf	hit_by@respawn_timer,w
  1881  0433  1803               	skipnc
  1882  0434  2C37               	goto	l3203
  1883                           
  1884                           ;user.c: 380: {
  1885                           ;user.c: 381: {TRISAbits.TRISA5 = 1;};
  1886  0435  0021               	movlb	1	; select bank1
  1887  0436  168C               	bsf	12,5	;volatile
  1888  0437                     l3203:	
  1889                           
  1890                           ;user.c: 382: }
  1891                           ;user.c: 383: for(uint8_t i=0;i<50;i++)
  1892  0437  0020               	movlb	0	; select bank0
  1893  0438  01D8               	clrf	hit_by@i_704
  1894  0439                     L1:	
  1895  0439  3032               	movlw	50
  1896  043A  0258               	subwf	hit_by@i_704,w
  1897  043B  1803               	btfsc	3,0
  1898  043C  2C14               	goto	l3217
  1899                           
  1900                           ;user.c: 384: {
  1901                           ;user.c: 385: handle_music();
  1902  043D  266E               	fcall	_handle_music
  1903                           
  1904                           ;user.c: 386: delay_1_ms();
  1905  043E  2790               	fcall	_delay_1_ms
  1906  043F  3001               	movlw	1
  1907  0440  0020               	movlb	0	; select bank0
  1908  0441  00D2               	movwf	??_hit_by
  1909  0442  0852               	movf	??_hit_by,w
  1910  0443  07D8               	addwf	hit_by@i_704,f
  1911  0444  2C39               	goto	L1
  1912  0445                     __end_of_hit_by:	
  1913                           
  1914                           	psect	text6
  1915  049E                     __ptext6:	
  1916 ;; *************** function _add_to_hitlist *****************
  1917 ;; Defined at:
  1918 ;;		line 306 in file "user.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  gun             1    wreg     unsigned char 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  gun             1    5[COMMON] unsigned char 
  1923 ;;  i               1    8[COMMON] unsigned char 
  1924 ;;  gun16           2    6[COMMON] unsigned int 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;		None               void
  1927 ;; Registers used:
  1928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1934 ;;      Params:         0       0       0       0
  1935 ;;      Locals:         4       0       0       0
  1936 ;;      Temps:          4       0       0       0
  1937 ;;      Totals:         8       0       0       0
  1938 ;;Total ram usage:        8 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    1
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_hit_by
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _add_to_hitlist
  1950  049E                     _add_to_hitlist:	
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  1954                           ;add_to_hitlist@gun stored from wreg
  1955  049E  00F5               	movwf	add_to_hitlist@gun
  1956                           
  1957                           ;user.c: 307: uint16_t gun16 = gun & 0x7F;
  1958  049F  0875               	movf	add_to_hitlist@gun,w
  1959  04A0  397F               	andlw	127
  1960  04A1  00F1               	movwf	??_add_to_hitlist
  1961  04A2  01F2               	clrf	??_add_to_hitlist+1
  1962  04A3  0871               	movf	??_add_to_hitlist,w
  1963  04A4  00F6               	movwf	add_to_hitlist@gun16
  1964  04A5  0872               	movf	??_add_to_hitlist+1,w
  1965  04A6  00F7               	movwf	add_to_hitlist@gun16+1
  1966                           
  1967                           ;user.c: 308: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  1968  04A7  01F8               	clrf	add_to_hitlist@i
  1969  04A8                     L2:	
  1970  04A8  3010               	movlw	16
  1971  04A9  0278               	subwf	add_to_hitlist@i,w
  1972  04AA  1803               	btfsc	3,0
  1973  04AB  0008               	return
  1974                           
  1975                           ;user.c: 309: {
  1976                           ;user.c: 310: if(!(hitlist[i] & 0x007F))
  1977  04AC  3578               	lslf	add_to_hitlist@i,w
  1978  04AD  3EA0               	addlw	_hitlist& (0+255)
  1979  04AE  0086               	movwf	6
  1980  04AF  0187               	clrf	7
  1981  04B0  3F40               	moviw [0]fsr1
  1982  04B1  00F1               	movwf	??_add_to_hitlist
  1983  04B2  3F41               	moviw [1]fsr1
  1984  04B3  00F2               	movwf	??_add_to_hitlist+1
  1985  04B4  307F               	movlw	127
  1986  04B5  0571               	andwf	??_add_to_hitlist,w
  1987  04B6  00F3               	movwf	??_add_to_hitlist+2
  1988  04B7  3000               	movlw	0
  1989  04B8  0572               	andwf	??_add_to_hitlist+1,w
  1990  04B9  00F4               	movwf	??_add_to_hitlist+3
  1991  04BA  0874               	movf	??_add_to_hitlist+3,w
  1992  04BB  0473               	iorwf	??_add_to_hitlist+2,w
  1993  04BC  1D03               	skipz
  1994  04BD  2CC8               	goto	l2075
  1995                           
  1996                           ;user.c: 311: {
  1997                           ;user.c: 312: hitlist[i] |= gun16;
  1998  04BE  3578               	lslf	add_to_hitlist@i,w
  1999  04BF  3EA0               	addlw	_hitlist& (0+255)
  2000  04C0  0086               	movwf	6
  2001  04C1  0187               	clrf	7
  2002  04C2  0876               	movf	add_to_hitlist@gun16,w
  2003  04C3  0481               	iorwf	1,f
  2004  04C4  3141               	addfsr 1,1
  2005  04C5  0877               	movf	add_to_hitlist@gun16+1,w
  2006  04C6  0481               	iorwf	1,f
  2007                           
  2008                           ;user.c: 313: return;
  2009  04C7  0008               	return
  2010  04C8                     l2075:	
  2011                           
  2012                           ;user.c: 314: }
  2013                           ;user.c: 315: if(!(hitlist[i] & 0x3F80))
  2014  04C8  3578               	lslf	add_to_hitlist@i,w
  2015  04C9  3EA0               	addlw	_hitlist& (0+255)
  2016  04CA  0086               	movwf	6
  2017  04CB  0187               	clrf	7
  2018  04CC  3F40               	moviw [0]fsr1
  2019  04CD  00F1               	movwf	??_add_to_hitlist
  2020  04CE  3F41               	moviw [1]fsr1
  2021  04CF  00F2               	movwf	??_add_to_hitlist+1
  2022  04D0  3080               	movlw	128
  2023  04D1  0571               	andwf	??_add_to_hitlist,w
  2024  04D2  00F3               	movwf	??_add_to_hitlist+2
  2025  04D3  303F               	movlw	63
  2026  04D4  0572               	andwf	??_add_to_hitlist+1,w
  2027  04D5  00F4               	movwf	??_add_to_hitlist+3
  2028  04D6  0874               	movf	??_add_to_hitlist+3,w
  2029  04D7  0473               	iorwf	??_add_to_hitlist+2,w
  2030  04D8  1D03               	skipz
  2031  04D9  2CED               	goto	l2081
  2032                           
  2033                           ;user.c: 316: {
  2034                           ;user.c: 317: hitlist[i] |= gun16 << 7;
  2035  04DA  0877               	movf	add_to_hitlist@gun16+1,w
  2036  04DB  00F2               	movwf	??_add_to_hitlist+1
  2037  04DC  0876               	movf	add_to_hitlist@gun16,w
  2038  04DD  00F1               	movwf	??_add_to_hitlist
  2039  04DE  3007               	movlw	7
  2040  04DF                     u1985:	
  2041  04DF  35F1               	lslf	??_add_to_hitlist,f
  2042  04E0  0DF2               	rlf	??_add_to_hitlist+1,f
  2043  04E1  0B89               	decfsz	9,f
  2044  04E2  2CDF               	goto	u1985
  2045  04E3  3578               	lslf	add_to_hitlist@i,w
  2046  04E4  3EA0               	addlw	_hitlist& (0+255)
  2047  04E5  0086               	movwf	6
  2048  04E6  0187               	clrf	7
  2049  04E7  0871               	movf	??_add_to_hitlist,w
  2050  04E8  0481               	iorwf	1,f
  2051  04E9  3141               	addfsr 1,1
  2052  04EA  0872               	movf	??_add_to_hitlist+1,w
  2053  04EB  0481               	iorwf	1,f
  2054                           
  2055                           ;user.c: 318: return;
  2056  04EC  0008               	return
  2057  04ED                     l2081:	
  2058  04ED  3001               	movlw	1
  2059  04EE  00F1               	movwf	??_add_to_hitlist
  2060  04EF  0871               	movf	??_add_to_hitlist,w
  2061  04F0  07F8               	addwf	add_to_hitlist@i,f
  2062  04F1  2CA8               	goto	L2
  2063  04F2                     __end_of_add_to_hitlist:	
  2064                           
  2065                           	psect	text7
  2066  04F2                     __ptext7:	
  2067 ;; *************** function _super_dead_mode *****************
  2068 ;; Defined at:
  2069 ;;		line 323 in file "user.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  b               1   47[BANK0 ] unsigned char 
  2074 ;;  counter         2   48[BANK0 ] unsigned int 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;		None               void
  2077 ;; Registers used:
  2078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2084 ;;      Params:         0       0       0       0
  2085 ;;      Locals:         0       3       0       0
  2086 ;;      Temps:          0       2       0       0
  2087 ;;      Totals:         0       5       0       0
  2088 ;;Total ram usage:        5 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    7
  2091 ;; This function calls:
  2092 ;;		_handle_music
  2093 ;;		_delay_1_ms
  2094 ;;		_red_led_on
  2095 ;;		_play_song
  2096 ;;		_Send_Byte
  2097 ;;		_control_transfer
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;;		_hit_by
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           
  2105                           ;psect for function _super_dead_mode
  2106  04F2                     _super_dead_mode:	
  2107                           
  2108                           ;user.c: 324: uint16_t counter = 0;
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _super_dead_mode: [allreg]
  2112  04F2  0020               	movlb	0	; select bank0
  2113  04F3  01D0               	clrf	super_dead_mode@counter
  2114  04F4  01D1               	clrf	super_dead_mode@counter+1
  2115  04F5                     l2625:	
  2116                           ;user.c: 325: while(!config.health){
  2117                           
  2118  04F5  3004               	movlw	4
  2119  04F6  3EC0               	addlw	_config& (0+255)
  2120  04F7  0086               	movwf	6
  2121  04F8  0187               	clrf	7
  2122  04F9  0016               	moviw fsr1++
  2123  04FA  0401               	iorwf	1,w
  2124  04FB  1D03               	btfss	3,2
  2125  04FC  0008               	return
  2126                           
  2127                           ;user.c: 326: handle_music();
  2128  04FD  266E               	fcall	_handle_music
  2129                           
  2130                           ;user.c: 328: uint8_t b;
  2131                           ;user.c: 329: if((PIR1bits.RCIF)){
  2132  04FE  0020               	movlb	0	; select bank0
  2133  04FF  1E91               	btfss	17,5	;volatile
  2134  0500  2D0D               	goto	l2607
  2135                           
  2136                           ;user.c: 330: b=(RCREG^0b10101010);
  2137  0501  0023               	movlb	3	; select bank3
  2138  0502  0819               	movf	25,w	;volatile
  2139  0503  3AAA               	xorlw	170
  2140  0504  0020               	movlb	0	; select bank0
  2141  0505  00CD               	movwf	??_super_dead_mode
  2142  0506  084D               	movf	??_super_dead_mode,w
  2143  0507  00CF               	movwf	super_dead_mode@b
  2144                           
  2145                           ;user.c: 331: if(b == 0x10) {
  2146  0508  084F               	movf	super_dead_mode@b,w
  2147  0509  3A10               	xorlw	16
  2148  050A  1D03               	skipz
  2149  050B  2D0D               	goto	l2607
  2150                           
  2151                           ;user.c: 332: control_transfer();
  2152  050C  2023               	fcall	_control_transfer
  2153  050D                     l2607:	
  2154                           
  2155                           ;user.c: 333: }
  2156                           ;user.c: 334: }
  2157                           ;user.c: 335: counter++;
  2158  050D  3001               	movlw	1
  2159  050E  0020               	movlb	0	; select bank0
  2160  050F  07D0               	addwf	super_dead_mode@counter,f
  2161  0510  3000               	movlw	0
  2162  0511  3DD1               	addwfc	super_dead_mode@counter+1,f
  2163                           
  2164                           ;user.c: 336: delay_1_ms();
  2165  0512  2790               	fcall	_delay_1_ms
  2166                           
  2167                           ;user.c: 337: if(counter > config.death_period){
  2168  0513  0020               	movlb	0	; select bank0
  2169  0514  0851               	movf	super_dead_mode@counter+1,w
  2170  0515  0021               	movlb	1	; select bank1
  2171  0516  0251               	subwf	((_config+1)^(0+128)+16),w
  2172  0517  1D03               	skipz
  2173  0518  2D1D               	goto	u3045
  2174  0519  0020               	movlb	0	; select bank0
  2175  051A  0850               	movf	super_dead_mode@counter,w
  2176  051B  0021               	movlb	1	; select bank1
  2177  051C  0250               	subwf	(_config^(0+128)+16),w
  2178  051D                     u3045:	
  2179  051D  1803               	skipnc
  2180  051E  2D32               	goto	l2621
  2181                           
  2182                           ;user.c: 338: counter = 0;
  2183  051F  0020               	movlb	0	; select bank0
  2184  0520  01D0               	clrf	super_dead_mode@counter
  2185  0521  01D1               	clrf	super_dead_mode@counter+1
  2186                           
  2187                           ;user.c: 339: {TRISAbits.TRISA5 = 1;};
  2188  0522  0021               	movlb	1	; select bank1
  2189  0523  168C               	bsf	12,5	;volatile
  2190                           
  2191                           ;user.c: 340: Send_Byte(config.id);
  2192  0524  0840               	movf	_config^(0+128),w
  2193  0525  2634               	fcall	_Send_Byte
  2194                           
  2195                           ;user.c: 341: play_song((uint16_t*)dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  2196  0526  3003               	movlw	3
  2197  0527  0020               	movlb	0	; select bank0
  2198  0528  00CD               	movwf	??_super_dead_mode
  2199  0529  084D               	movf	??_super_dead_mode,w
  2200  052A  00F1               	movwf	?_play_song
  2201  052B  3010               	movlw	16
  2202  052C  00F2               	movwf	?_play_song+1
  2203  052D  3027               	movlw	39
  2204  052E  00F3               	movwf	?_play_song+2
  2205  052F  01F4               	clrf	?_play_song+3
  2206  0530  3098               	movlw	(_dead_song| (0+32768))& (0+255)
  2207  0531  26EB               	fcall	_play_song
  2208  0532                     l2621:	
  2209                           
  2210                           ;user.c: 342: }
  2211                           ;user.c: 343: if(counter == config.death_period-50){
  2212  0532  0021               	movlb	1	; select bank1
  2213  0533  0850               	movf	(_config^(0+128)+16),w
  2214  0534  3ECE               	addlw	206
  2215  0535  0020               	movlb	0	; select bank0
  2216  0536  00CD               	movwf	??_super_dead_mode
  2217  0537  30FF               	movlw	255
  2218  0538  0021               	movlb	1	; select bank1
  2219  0539  3D51               	addwfc	((_config+1)^(0+128)+16),w
  2220  053A  0020               	movlb	0	; select bank0
  2221  053B  00CE               	movwf	??_super_dead_mode+1
  2222  053C  0851               	movf	super_dead_mode@counter+1,w
  2223  053D  064E               	xorwf	??_super_dead_mode+1,w
  2224  053E  1D03               	skipz
  2225  053F  2D42               	goto	u3055
  2226  0540  0850               	movf	super_dead_mode@counter,w
  2227  0541  064D               	xorwf	??_super_dead_mode,w
  2228  0542                     u3055:	
  2229  0542  1D03               	skipz
  2230  0543  2CF5               	goto	l2625
  2231                           
  2232                           ;user.c: 344: red_led_on();
  2233  0544  27CA               	fcall	_red_led_on
  2234  0545  2CF5               	goto	l2625
  2235  0546                     __end_of_super_dead_mode:	
  2236                           
  2237                           	psect	text8
  2238  0023                     __ptext8:	
  2239 ;; *************** function _control_transfer *****************
  2240 ;; Defined at:
  2241 ;;		line 43 in file "protocol.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  data           32    5[BANK0 ] unsigned int [16]
  2246 ;;  page            2   42[BANK0 ] unsigned int 
  2247 ;;  x               1   44[BANK0 ] unsigned char 
  2248 ;;  i               1   41[BANK0 ] unsigned char 
  2249 ;;  dptr            1   40[BANK0 ] PTR unsigned char 
  2250 ;;		 -> control_transfer@data(32), 
  2251 ;;  id              1   39[BANK0 ] unsigned char 
  2252 ;;  random_numbe    1   38[BANK0 ] unsigned char 
  2253 ;;  cmd             1   37[BANK0 ] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;		None               void
  2256 ;; Registers used:
  2257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2263 ;;      Params:         0       0       0       0
  2264 ;;      Locals:         0      40       0       0
  2265 ;;      Temps:          0       2       0       0
  2266 ;;      Totals:         0      42       0       0
  2267 ;;Total ram usage:       42 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    6
  2270 ;; This function calls:
  2271 ;;		_Load
  2272 ;;		_Save
  2273 ;;		_play_song
  2274 ;;		_GET_CHAR_HELPER
  2275 ;;		_SEND_DATA_BYTE
  2276 ;;		_SEND_SOF
  2277 ;;		_SEND_EOF
  2278 ;; This function is called by:
  2279 ;;		_super_dead_mode
  2280 ;;		_handle_serial
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _control_transfer
  2286  0023                     _control_transfer:	
  2287                           
  2288                           ;protocol.c: 44: uint8_t i;
  2289                           ;protocol.c: 45: uint8_t cmd;
  2290                           ;protocol.c: 46: uint8_t random_number,id;
  2291                           ;protocol.c: 48: uint16_t page;
  2292                           ;protocol.c: 49: uint16_t data[16];
  2293                           ;protocol.c: 50: uint8_t* dptr;
  2294                           ;protocol.c: 51: uint8_t x;
  2295                           ;protocol.c: 53: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  2296                           
  2297                           ;incstack = 0
  2298                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2299  0023  0020               	movlb	0	; select bank0
  2300  0024  01E4               	clrf	__checksum
  2301  0025  307C               	movlw	__x& (0+255)
  2302  0026  272F               	fcall	_GET_CHAR_HELPER
  2303  0027  3A00               	xorlw	0
  2304  0028  1D03               	btfss	3,2
  2305  0029  0008               	return
  2306  002A  306C               	movlw	__y& (0+255)
  2307  002B  272F               	fcall	_GET_CHAR_HELPER
  2308  002C  3A00               	xorlw	0
  2309  002D  1D03               	btfss	3,2
  2310  002E  0008               	return
  2311  002F  087C               	movf	__x,w
  2312  0030  39F0               	andlw	240
  2313  0031  1D03               	btfss	3,2
  2314  0032  0008               	return
  2315  0033  0020               	movlb	0	; select bank0
  2316  0034  086C               	movf	__y,w
  2317  0035  39F0               	andlw	240
  2318  0036  1D03               	btfss	3,2
  2319  0037  0008               	return
  2320  0038  086C               	movf	__y,w
  2321  0039  00A3               	movwf	??_control_transfer
  2322  003A  3003               	movlw	3
  2323  003B                     u3435:	
  2324  003B  35A3               	lslf	??_control_transfer,f
  2325  003C  3EFF               	addlw	-1
  2326  003D  1D03               	skipz
  2327  003E  283B               	goto	u3435
  2328  003F  3523               	lslf	??_control_transfer,w
  2329  0040  047C               	iorwf	__x,w
  2330  0041  00A4               	movwf	??_control_transfer+1
  2331  0042  0824               	movf	??_control_transfer+1,w
  2332  0043  00FC               	movwf	__x
  2333  0044  087C               	movf	__x,w
  2334  0045  00A3               	movwf	??_control_transfer
  2335  0046  0823               	movf	??_control_transfer,w
  2336  0047  07E4               	addwf	__checksum,f
  2337  0048  0021               	movlb	1	; select bank1
  2338  0049  0840               	movf	_config^(0+128),w
  2339  004A  067C               	xorwf	__x,w
  2340  004B  1D03               	btfss	3,2
  2341  004C  0008               	return
  2342                           
  2343                           ;protocol.c: 54: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd;
  2344  004D  307C               	movlw	__x& (0+255)
  2345  004E  272F               	fcall	_GET_CHAR_HELPER
  2346  004F  3A00               	xorlw	0
  2347  0050  1D03               	btfss	3,2
  2348  0051  0008               	return
  2349  0052  306C               	movlw	__y& (0+255)
  2350  0053  272F               	fcall	_GET_CHAR_HELPER
  2351  0054  3A00               	xorlw	0
  2352  0055  1D03               	btfss	3,2
  2353  0056  0008               	return
  2354  0057  087C               	movf	__x,w
  2355  0058  39F0               	andlw	240
  2356  0059  1D03               	btfss	3,2
  2357  005A  0008               	return
  2358  005B  0020               	movlb	0	; select bank0
  2359  005C  086C               	movf	__y,w
  2360  005D  39F0               	andlw	240
  2361  005E  1D03               	btfss	3,2
  2362  005F  0008               	return
  2363  0060  086C               	movf	__y,w
  2364  0061  00A3               	movwf	??_control_transfer
  2365  0062  3003               	movlw	3
  2366  0063                     u3495:	
  2367  0063  35A3               	lslf	??_control_transfer,f
  2368  0064  3EFF               	addlw	-1
  2369  0065  1D03               	skipz
  2370  0066  2863               	goto	u3495
  2371  0067  3523               	lslf	??_control_transfer,w
  2372  0068  047C               	iorwf	__x,w
  2373  0069  00A4               	movwf	??_control_transfer+1
  2374  006A  0824               	movf	??_control_transfer+1,w
  2375  006B  00C5               	movwf	control_transfer@cmd
  2376  006C  0845               	movf	control_transfer@cmd,w
  2377  006D  00A3               	movwf	??_control_transfer
  2378  006E  0823               	movf	??_control_transfer,w
  2379  006F  07E4               	addwf	__checksum,f
  2380                           
  2381                           ;protocol.c: 56: switch(cmd)
  2382  0070  2B2C               	goto	l3157
  2383  0071                     l2853:	
  2384                           ;protocol.c: 57: {
  2385                           ;protocol.c: 58: case 0x01:
  2386                           
  2387                           
  2388                           ;protocol.c: 59: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2389  0071  307C               	movlw	__x& (0+255)
  2390  0072  272F               	fcall	_GET_CHAR_HELPER
  2391  0073  3A00               	xorlw	0
  2392  0074  1D03               	btfss	3,2
  2393  0075  0008               	return
  2394  0076  306C               	movlw	__y& (0+255)
  2395  0077  272F               	fcall	_GET_CHAR_HELPER
  2396  0078  3A00               	xorlw	0
  2397  0079  1D03               	btfss	3,2
  2398  007A  0008               	return
  2399  007B  087C               	movf	__x,w
  2400  007C  39F0               	andlw	240
  2401  007D  1D03               	btfss	3,2
  2402  007E  0008               	return
  2403  007F  0020               	movlb	0	; select bank0
  2404  0080  086C               	movf	__y,w
  2405  0081  39F0               	andlw	240
  2406  0082  1D03               	btfss	3,2
  2407  0083  0008               	return
  2408  0084  086C               	movf	__y,w
  2409  0085  00A3               	movwf	??_control_transfer
  2410  0086  3003               	movlw	3
  2411  0087                     u3545:	
  2412  0087  35A3               	lslf	??_control_transfer,f
  2413  0088  3EFF               	addlw	-1
  2414  0089  1D03               	skipz
  2415  008A  2887               	goto	u3545
  2416  008B  3523               	lslf	??_control_transfer,w
  2417  008C  047C               	iorwf	__x,w
  2418  008D  00A4               	movwf	??_control_transfer+1
  2419  008E  0824               	movf	??_control_transfer+1,w
  2420  008F  00FC               	movwf	__x
  2421  0090  087C               	movf	__x,w
  2422  0091  00A3               	movwf	??_control_transfer
  2423  0092  0823               	movf	??_control_transfer,w
  2424  0093  07E4               	addwf	__checksum,f
  2425  0094  0864               	movf	__checksum,w
  2426  0095  1D03               	skipz
  2427  0096  0008               	return
  2428  0097  307C               	movlw	__x& (0+255)
  2429  0098  272F               	fcall	_GET_CHAR_HELPER
  2430  0099  3A00               	xorlw	0
  2431  009A  1D03               	btfss	3,2
  2432  009B  0008               	return
  2433  009C  087C               	movf	__x,w
  2434  009D  3A11               	xorlw	17
  2435  009E  1D03               	btfss	3,2
  2436  009F  0008               	return
  2437                           
  2438                           ;protocol.c: 60: SEND_SOF();
  2439  00A0  27AB               	fcall	_SEND_SOF
  2440                           
  2441                           ;protocol.c: 61: SEND_DATA_BYTE(0x02);
  2442  00A1  3002               	movlw	2
  2443  00A2  274D               	fcall	_SEND_DATA_BYTE
  2444                           
  2445                           ;protocol.c: 62: SEND_DATA_BYTE(my_random_number);
  2446  00A3  0020               	movlb	0	; select bank0
  2447  00A4  0869               	movf	_my_random_number,w
  2448  00A5  274D               	fcall	_SEND_DATA_BYTE
  2449                           
  2450                           ;protocol.c: 63: SEND_EOF();
  2451  00A6  27B9               	fcall	_SEND_EOF
  2452                           
  2453                           ;protocol.c: 64: break;
  2454  00A7  0008               	return
  2455  00A8                     l2881:	
  2456                           ;protocol.c: 65: case 0x03:
  2457                           
  2458                           
  2459                           ;protocol.c: 66: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2460  00A8  307C               	movlw	__x& (0+255)
  2461  00A9  272F               	fcall	_GET_CHAR_HELPER
  2462  00AA  3A00               	xorlw	0
  2463  00AB  1D03               	btfss	3,2
  2464  00AC  0008               	return
  2465  00AD  306C               	movlw	__y& (0+255)
  2466  00AE  272F               	fcall	_GET_CHAR_HELPER
  2467  00AF  3A00               	xorlw	0
  2468  00B0  1D03               	btfss	3,2
  2469  00B1  0008               	return
  2470  00B2  087C               	movf	__x,w
  2471  00B3  39F0               	andlw	240
  2472  00B4  1D03               	btfss	3,2
  2473  00B5  0008               	return
  2474  00B6  0020               	movlb	0	; select bank0
  2475  00B7  086C               	movf	__y,w
  2476  00B8  39F0               	andlw	240
  2477  00B9  1D03               	btfss	3,2
  2478  00BA  0008               	return
  2479  00BB  086C               	movf	__y,w
  2480  00BC  00A3               	movwf	??_control_transfer
  2481  00BD  3003               	movlw	3
  2482  00BE                     u3625:	
  2483  00BE  35A3               	lslf	??_control_transfer,f
  2484  00BF  3EFF               	addlw	-1
  2485  00C0  1D03               	skipz
  2486  00C1  28BE               	goto	u3625
  2487  00C2  3523               	lslf	??_control_transfer,w
  2488  00C3  047C               	iorwf	__x,w
  2489  00C4  00A4               	movwf	??_control_transfer+1
  2490  00C5  0824               	movf	??_control_transfer+1,w
  2491  00C6  00C6               	movwf	control_transfer@random_number
  2492  00C7  0846               	movf	control_transfer@random_number,w
  2493  00C8  00A3               	movwf	??_control_transfer
  2494  00C9  0823               	movf	??_control_transfer,w
  2495  00CA  07E4               	addwf	__checksum,f
  2496                           
  2497                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2498  00CB  307C               	movlw	__x& (0+255)
  2499  00CC  272F               	fcall	_GET_CHAR_HELPER
  2500  00CD  3A00               	xorlw	0
  2501  00CE  1D03               	btfss	3,2
  2502  00CF  0008               	return
  2503  00D0  306C               	movlw	__y& (0+255)
  2504  00D1  272F               	fcall	_GET_CHAR_HELPER
  2505  00D2  3A00               	xorlw	0
  2506  00D3  1D03               	btfss	3,2
  2507  00D4  0008               	return
  2508  00D5  087C               	movf	__x,w
  2509  00D6  39F0               	andlw	240
  2510  00D7  1D03               	btfss	3,2
  2511  00D8  0008               	return
  2512  00D9  0020               	movlb	0	; select bank0
  2513  00DA  086C               	movf	__y,w
  2514  00DB  39F0               	andlw	240
  2515  00DC  1D03               	btfss	3,2
  2516  00DD  0008               	return
  2517  00DE  086C               	movf	__y,w
  2518  00DF  00A3               	movwf	??_control_transfer
  2519  00E0  3003               	movlw	3
  2520  00E1                     u3675:	
  2521  00E1  35A3               	lslf	??_control_transfer,f
  2522  00E2  3EFF               	addlw	-1
  2523  00E3  1D03               	skipz
  2524  00E4  28E1               	goto	u3675
  2525  00E5  3523               	lslf	??_control_transfer,w
  2526  00E6  047C               	iorwf	__x,w
  2527  00E7  00A4               	movwf	??_control_transfer+1
  2528  00E8  0824               	movf	??_control_transfer+1,w
  2529  00E9  00C7               	movwf	control_transfer@id
  2530  00EA  0847               	movf	control_transfer@id,w
  2531  00EB  00A3               	movwf	??_control_transfer
  2532  00EC  0823               	movf	??_control_transfer,w
  2533  00ED  07E4               	addwf	__checksum,f
  2534                           
  2535                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2536  00EE  307C               	movlw	__x& (0+255)
  2537  00EF  272F               	fcall	_GET_CHAR_HELPER
  2538  00F0  3A00               	xorlw	0
  2539  00F1  1D03               	btfss	3,2
  2540  00F2  0008               	return
  2541  00F3  306C               	movlw	__y& (0+255)
  2542  00F4  272F               	fcall	_GET_CHAR_HELPER
  2543  00F5  3A00               	xorlw	0
  2544  00F6  1D03               	btfss	3,2
  2545  00F7  0008               	return
  2546  00F8  087C               	movf	__x,w
  2547  00F9  39F0               	andlw	240
  2548  00FA  1D03               	btfss	3,2
  2549  00FB  0008               	return
  2550  00FC  0020               	movlb	0	; select bank0
  2551  00FD  086C               	movf	__y,w
  2552  00FE  39F0               	andlw	240
  2553  00FF  1D03               	btfss	3,2
  2554  0100  0008               	return
  2555  0101  086C               	movf	__y,w
  2556  0102  00A3               	movwf	??_control_transfer
  2557  0103  3003               	movlw	3
  2558  0104                     u3725:	
  2559  0104  35A3               	lslf	??_control_transfer,f
  2560  0105  3EFF               	addlw	-1
  2561  0106  1D03               	skipz
  2562  0107  2904               	goto	u3725
  2563  0108  3523               	lslf	??_control_transfer,w
  2564  0109  047C               	iorwf	__x,w
  2565  010A  00A4               	movwf	??_control_transfer+1
  2566  010B  0824               	movf	??_control_transfer+1,w
  2567  010C  00FC               	movwf	__x
  2568  010D  087C               	movf	__x,w
  2569  010E  00A3               	movwf	??_control_transfer
  2570  010F  0823               	movf	??_control_transfer,w
  2571  0110  07E4               	addwf	__checksum,f
  2572  0111  0864               	movf	__checksum,w
  2573  0112  1D03               	skipz
  2574  0113  0008               	return
  2575  0114  307C               	movlw	__x& (0+255)
  2576  0115  272F               	fcall	_GET_CHAR_HELPER
  2577  0116  3A00               	xorlw	0
  2578  0117  1D03               	btfss	3,2
  2579  0118  0008               	return
  2580  0119  087C               	movf	__x,w
  2581  011A  3A11               	xorlw	17
  2582  011B  1D03               	btfss	3,2
  2583  011C  0008               	return
  2584                           
  2585                           ;protocol.c: 69: if(random_number != my_random_number) goto err;
  2586  011D  0020               	movlb	0	; select bank0
  2587  011E  0846               	movf	control_transfer@random_number,w
  2588  011F  0669               	xorwf	_my_random_number,w
  2589  0120  1D03               	btfss	3,2
  2590  0121  0008               	return
  2591                           
  2592                           ;protocol.c: 70: SEND_SOF();
  2593  0122  27AB               	fcall	_SEND_SOF
  2594                           
  2595                           ;protocol.c: 71: SEND_DATA_BYTE(0x00);
  2596  0123  3000               	movlw	0
  2597  0124  274D               	fcall	_SEND_DATA_BYTE
  2598                           
  2599                           ;protocol.c: 72: SEND_EOF();
  2600  0125  27B9               	fcall	_SEND_EOF
  2601                           
  2602                           ;protocol.c: 73: config.id=id;
  2603  0126  0020               	movlb	0	; select bank0
  2604  0127  0847               	movf	control_transfer@id,w
  2605  0128  00A3               	movwf	??_control_transfer
  2606  0129  01A4               	clrf	??_control_transfer+1
  2607  012A  0823               	movf	??_control_transfer,w
  2608  012B  0021               	movlb	1	; select bank1
  2609  012C  00C0               	movwf	_config^(0+128)
  2610  012D  0020               	movlb	0	; select bank0
  2611  012E  0824               	movf	??_control_transfer+1,w
  2612  012F  0021               	movlb	1	; select bank1
  2613  0130  00C1               	movwf	(_config+1)^(0+128)
  2614                           
  2615                           ;protocol.c: 74: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2616  0131  30F0               	movlw	240
  2617  0132  00F1               	movwf	?_Save
  2618  0133  3007               	movlw	7
  2619  0134  00F2               	movwf	?_Save+1
  2620  0135  30C0               	movlw	_config& (0+255)
  2621  0136  0020               	movlb	0	; select bank0
  2622  0137  00A3               	movwf	??_control_transfer
  2623  0138  0823               	movf	??_control_transfer,w
  2624  0139  00F3               	movwf	?_Save+2
  2625  013A  3009               	movlw	9
  2626  013B  00A4               	movwf	??_control_transfer+1
  2627  013C  0824               	movf	??_control_transfer+1,w
  2628  013D  00F4               	movwf	?_Save+3
  2629  013E  25ED               	fcall	_Save
  2630                           
  2631                           ;protocol.c: 75: break;
  2632  013F  0008               	return
  2633  0140                     l2945:	
  2634                           ;protocol.c: 76: case 0x04:
  2635                           
  2636                           
  2637                           ;protocol.c: 77: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2638  0140  307C               	movlw	__x& (0+255)
  2639  0141  272F               	fcall	_GET_CHAR_HELPER
  2640  0142  3A00               	xorlw	0
  2641  0143  1D03               	btfss	3,2
  2642  0144  0008               	return
  2643  0145  306C               	movlw	__y& (0+255)
  2644  0146  272F               	fcall	_GET_CHAR_HELPER
  2645  0147  3A00               	xorlw	0
  2646  0148  1D03               	btfss	3,2
  2647  0149  0008               	return
  2648  014A  087C               	movf	__x,w
  2649  014B  39F0               	andlw	240
  2650  014C  1D03               	btfss	3,2
  2651  014D  0008               	return
  2652  014E  0020               	movlb	0	; select bank0
  2653  014F  086C               	movf	__y,w
  2654  0150  39F0               	andlw	240
  2655  0151  1D03               	btfss	3,2
  2656  0152  0008               	return
  2657  0153  086C               	movf	__y,w
  2658  0154  00A3               	movwf	??_control_transfer
  2659  0155  3003               	movlw	3
  2660  0156                     u3815:	
  2661  0156  35A3               	lslf	??_control_transfer,f
  2662  0157  3EFF               	addlw	-1
  2663  0158  1D03               	skipz
  2664  0159  2956               	goto	u3815
  2665  015A  3523               	lslf	??_control_transfer,w
  2666  015B  047C               	iorwf	__x,w
  2667  015C  00A4               	movwf	??_control_transfer+1
  2668  015D  0824               	movf	??_control_transfer+1,w
  2669  015E  00CC               	movwf	control_transfer@x
  2670  015F  084C               	movf	control_transfer@x,w
  2671  0160  00A3               	movwf	??_control_transfer
  2672  0161  0823               	movf	??_control_transfer,w
  2673  0162  07E4               	addwf	__checksum,f
  2674                           
  2675                           ;protocol.c: 78: *((uint8_t*)(&page))=x;
  2676  0163  084C               	movf	control_transfer@x,w
  2677  0164  00A3               	movwf	??_control_transfer
  2678  0165  0823               	movf	??_control_transfer,w
  2679  0166  00CA               	movwf	control_transfer@page
  2680                           
  2681                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2682  0167  307C               	movlw	__x& (0+255)
  2683  0168  272F               	fcall	_GET_CHAR_HELPER
  2684  0169  3A00               	xorlw	0
  2685  016A  1D03               	btfss	3,2
  2686  016B  0008               	return
  2687  016C  306C               	movlw	__y& (0+255)
  2688  016D  272F               	fcall	_GET_CHAR_HELPER
  2689  016E  3A00               	xorlw	0
  2690  016F  1D03               	btfss	3,2
  2691  0170  0008               	return
  2692  0171  087C               	movf	__x,w
  2693  0172  39F0               	andlw	240
  2694  0173  1D03               	btfss	3,2
  2695  0174  0008               	return
  2696  0175  0020               	movlb	0	; select bank0
  2697  0176  086C               	movf	__y,w
  2698  0177  39F0               	andlw	240
  2699  0178  1D03               	btfss	3,2
  2700  0179  0008               	return
  2701  017A  086C               	movf	__y,w
  2702  017B  00A3               	movwf	??_control_transfer
  2703  017C  3003               	movlw	3
  2704  017D                     u3865:	
  2705  017D  35A3               	lslf	??_control_transfer,f
  2706  017E  3EFF               	addlw	-1
  2707  017F  1D03               	skipz
  2708  0180  297D               	goto	u3865
  2709  0181  3523               	lslf	??_control_transfer,w
  2710  0182  047C               	iorwf	__x,w
  2711  0183  00A4               	movwf	??_control_transfer+1
  2712  0184  0824               	movf	??_control_transfer+1,w
  2713  0185  00CC               	movwf	control_transfer@x
  2714  0186  084C               	movf	control_transfer@x,w
  2715  0187  00A3               	movwf	??_control_transfer
  2716  0188  0823               	movf	??_control_transfer,w
  2717  0189  07E4               	addwf	__checksum,f
  2718                           
  2719                           ;protocol.c: 80: *(((uint8_t*)(&page))+1)=x;
  2720  018A  084C               	movf	control_transfer@x,w
  2721  018B  00A3               	movwf	??_control_transfer
  2722  018C  0823               	movf	??_control_transfer,w
  2723  018D  00CB               	movwf	control_transfer@page+1
  2724                           
  2725                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2726  018E  307C               	movlw	__x& (0+255)
  2727  018F  272F               	fcall	_GET_CHAR_HELPER
  2728  0190  3A00               	xorlw	0
  2729  0191  1D03               	btfss	3,2
  2730  0192  0008               	return
  2731  0193  306C               	movlw	__y& (0+255)
  2732  0194  272F               	fcall	_GET_CHAR_HELPER
  2733  0195  3A00               	xorlw	0
  2734  0196  1D03               	btfss	3,2
  2735  0197  0008               	return
  2736  0198  087C               	movf	__x,w
  2737  0199  39F0               	andlw	240
  2738  019A  1D03               	btfss	3,2
  2739  019B  0008               	return
  2740  019C  0020               	movlb	0	; select bank0
  2741  019D  086C               	movf	__y,w
  2742  019E  39F0               	andlw	240
  2743  019F  1D03               	btfss	3,2
  2744  01A0  0008               	return
  2745  01A1  086C               	movf	__y,w
  2746  01A2  00A3               	movwf	??_control_transfer
  2747  01A3  3003               	movlw	3
  2748  01A4                     u3915:	
  2749  01A4  35A3               	lslf	??_control_transfer,f
  2750  01A5  3EFF               	addlw	-1
  2751  01A6  1D03               	skipz
  2752  01A7  29A4               	goto	u3915
  2753  01A8  3523               	lslf	??_control_transfer,w
  2754  01A9  047C               	iorwf	__x,w
  2755  01AA  00A4               	movwf	??_control_transfer+1
  2756  01AB  0824               	movf	??_control_transfer+1,w
  2757  01AC  00FC               	movwf	__x
  2758  01AD  087C               	movf	__x,w
  2759  01AE  00A3               	movwf	??_control_transfer
  2760  01AF  0823               	movf	??_control_transfer,w
  2761  01B0  07E4               	addwf	__checksum,f
  2762  01B1  0864               	movf	__checksum,w
  2763  01B2  1D03               	skipz
  2764  01B3  0008               	return
  2765  01B4  307C               	movlw	__x& (0+255)
  2766  01B5  272F               	fcall	_GET_CHAR_HELPER
  2767  01B6  3A00               	xorlw	0
  2768  01B7  1D03               	btfss	3,2
  2769  01B8  0008               	return
  2770  01B9  087C               	movf	__x,w
  2771  01BA  3A11               	xorlw	17
  2772  01BB  1D03               	btfss	3,2
  2773  01BC  0008               	return
  2774                           
  2775                           ;protocol.c: 82: Load(page,data,16);
  2776  01BD  0020               	movlb	0	; select bank0
  2777  01BE  084B               	movf	control_transfer@page+1,w
  2778  01BF  01F2               	clrf	?_Load+1
  2779  01C0  07F2               	addwf	?_Load+1,f
  2780  01C1  084A               	movf	control_transfer@page,w
  2781  01C2  01F1               	clrf	?_Load
  2782  01C3  07F1               	addwf	?_Load,f
  2783  01C4  3025               	movlw	control_transfer@data& (0+255)
  2784  01C5  00A3               	movwf	??_control_transfer
  2785  01C6  0823               	movf	??_control_transfer,w
  2786  01C7  00F3               	movwf	?_Load+2
  2787  01C8  3010               	movlw	16
  2788  01C9  00A4               	movwf	??_control_transfer+1
  2789  01CA  0824               	movf	??_control_transfer+1,w
  2790  01CB  00F4               	movwf	?_Load+3
  2791  01CC  26C6               	fcall	_Load
  2792                           
  2793                           ;protocol.c: 83: SEND_SOF();
  2794  01CD  27AB               	fcall	_SEND_SOF
  2795                           
  2796                           ;protocol.c: 84: SEND_DATA_BYTE(0x05);
  2797  01CE  3005               	movlw	5
  2798  01CF  274D               	fcall	_SEND_DATA_BYTE
  2799                           
  2800                           ;protocol.c: 85: dptr=(uint8_t*)data;
  2801  01D0  3025               	movlw	control_transfer@data& (0+255)
  2802  01D1  0020               	movlb	0	; select bank0
  2803  01D2  00A3               	movwf	??_control_transfer
  2804  01D3  0823               	movf	??_control_transfer,w
  2805  01D4  00C8               	movwf	control_transfer@dptr
  2806                           
  2807                           ;protocol.c: 86: for(i=0;i<32;i++)
  2808  01D5  01C9               	clrf	control_transfer@i
  2809  01D6  3020               	movlw	32
  2810  01D7  0249               	subwf	control_transfer@i,w
  2811  01D8  1803               	btfsc	3,0
  2812  01D9  29EC               	goto	l3025
  2813  01DA                     l3017:	
  2814                           
  2815                           ;protocol.c: 87: {
  2816                           ;protocol.c: 88: SEND_DATA_BYTE(*dptr++);
  2817  01DA  0848               	movf	control_transfer@dptr,w
  2818  01DB  0086               	movwf	6
  2819  01DC  0187               	clrf	7
  2820  01DD  0801               	movf	1,w
  2821  01DE  274D               	fcall	_SEND_DATA_BYTE
  2822  01DF  3001               	movlw	1
  2823  01E0  0020               	movlb	0	; select bank0
  2824  01E1  00A3               	movwf	??_control_transfer
  2825  01E2  0823               	movf	??_control_transfer,w
  2826  01E3  07C8               	addwf	control_transfer@dptr,f
  2827  01E4  3001               	movlw	1
  2828  01E5  00A3               	movwf	??_control_transfer
  2829  01E6  0823               	movf	??_control_transfer,w
  2830  01E7  07C9               	addwf	control_transfer@i,f
  2831  01E8  3020               	movlw	32
  2832  01E9  0249               	subwf	control_transfer@i,w
  2833  01EA  1C03               	skipc
  2834  01EB  29DA               	goto	l3017
  2835  01EC                     l3025:	
  2836                           
  2837                           ;protocol.c: 89: }
  2838                           ;protocol.c: 90: SEND_EOF();
  2839  01EC  27B9               	fcall	_SEND_EOF
  2840                           
  2841                           ;protocol.c: 91: break;
  2842  01ED  0008               	return
  2843  01EE                     l3027:	
  2844                           ;protocol.c: 92: case 0x06:
  2845                           
  2846                           
  2847                           ;protocol.c: 93: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2848  01EE  307C               	movlw	__x& (0+255)
  2849  01EF  272F               	fcall	_GET_CHAR_HELPER
  2850  01F0  3A00               	xorlw	0
  2851  01F1  1D03               	btfss	3,2
  2852  01F2  0008               	return
  2853  01F3  306C               	movlw	__y& (0+255)
  2854  01F4  272F               	fcall	_GET_CHAR_HELPER
  2855  01F5  3A00               	xorlw	0
  2856  01F6  1D03               	btfss	3,2
  2857  01F7  0008               	return
  2858  01F8  087C               	movf	__x,w
  2859  01F9  39F0               	andlw	240
  2860  01FA  1D03               	btfss	3,2
  2861  01FB  0008               	return
  2862  01FC  0020               	movlb	0	; select bank0
  2863  01FD  086C               	movf	__y,w
  2864  01FE  39F0               	andlw	240
  2865  01FF  1D03               	btfss	3,2
  2866  0200  0008               	return
  2867  0201  086C               	movf	__y,w
  2868  0202  00A3               	movwf	??_control_transfer
  2869  0203  3003               	movlw	3
  2870  0204                     u4015:	
  2871  0204  35A3               	lslf	??_control_transfer,f
  2872  0205  3EFF               	addlw	-1
  2873  0206  1D03               	skipz
  2874  0207  2A04               	goto	u4015
  2875  0208  3523               	lslf	??_control_transfer,w
  2876  0209  047C               	iorwf	__x,w
  2877  020A  00A4               	movwf	??_control_transfer+1
  2878  020B  0824               	movf	??_control_transfer+1,w
  2879  020C  00CC               	movwf	control_transfer@x
  2880  020D  084C               	movf	control_transfer@x,w
  2881  020E  00A3               	movwf	??_control_transfer
  2882  020F  0823               	movf	??_control_transfer,w
  2883  0210  07E4               	addwf	__checksum,f
  2884                           
  2885                           ;protocol.c: 94: *((uint8_t*)(&page))=x;
  2886  0211  084C               	movf	control_transfer@x,w
  2887  0212  00A3               	movwf	??_control_transfer
  2888  0213  0823               	movf	??_control_transfer,w
  2889  0214  00CA               	movwf	control_transfer@page
  2890                           
  2891                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2892  0215  307C               	movlw	__x& (0+255)
  2893  0216  272F               	fcall	_GET_CHAR_HELPER
  2894  0217  3A00               	xorlw	0
  2895  0218  1D03               	btfss	3,2
  2896  0219  0008               	return
  2897  021A  306C               	movlw	__y& (0+255)
  2898  021B  272F               	fcall	_GET_CHAR_HELPER
  2899  021C  3A00               	xorlw	0
  2900  021D  1D03               	btfss	3,2
  2901  021E  0008               	return
  2902  021F  087C               	movf	__x,w
  2903  0220  39F0               	andlw	240
  2904  0221  1D03               	btfss	3,2
  2905  0222  0008               	return
  2906  0223  0020               	movlb	0	; select bank0
  2907  0224  086C               	movf	__y,w
  2908  0225  39F0               	andlw	240
  2909  0226  1D03               	btfss	3,2
  2910  0227  0008               	return
  2911  0228  086C               	movf	__y,w
  2912  0229  00A3               	movwf	??_control_transfer
  2913  022A  3003               	movlw	3
  2914  022B                     u4065:	
  2915  022B  35A3               	lslf	??_control_transfer,f
  2916  022C  3EFF               	addlw	-1
  2917  022D  1D03               	skipz
  2918  022E  2A2B               	goto	u4065
  2919  022F  3523               	lslf	??_control_transfer,w
  2920  0230  047C               	iorwf	__x,w
  2921  0231  00A4               	movwf	??_control_transfer+1
  2922  0232  0824               	movf	??_control_transfer+1,w
  2923  0233  00CC               	movwf	control_transfer@x
  2924  0234  084C               	movf	control_transfer@x,w
  2925  0235  00A3               	movwf	??_control_transfer
  2926  0236  0823               	movf	??_control_transfer,w
  2927  0237  07E4               	addwf	__checksum,f
  2928                           
  2929                           ;protocol.c: 96: *(((uint8_t*)(&page))+1)=x;
  2930  0238  084C               	movf	control_transfer@x,w
  2931  0239  00A3               	movwf	??_control_transfer
  2932  023A  0823               	movf	??_control_transfer,w
  2933  023B  00CB               	movwf	control_transfer@page+1
  2934                           
  2935                           ;protocol.c: 97: dptr=(uint8_t*)data;
  2936  023C  3025               	movlw	control_transfer@data& (0+255)
  2937  023D  00A3               	movwf	??_control_transfer
  2938  023E  0823               	movf	??_control_transfer,w
  2939  023F  00C8               	movwf	control_transfer@dptr
  2940                           
  2941                           ;protocol.c: 98: for(i=0;i<32;i++)
  2942  0240  01C9               	clrf	control_transfer@i
  2943  0241  3020               	movlw	32
  2944  0242  0249               	subwf	control_transfer@i,w
  2945  0243  1803               	btfsc	3,0
  2946  0244  2A7B               	goto	l3089
  2947  0245                     l3067:	
  2948                           
  2949                           ;protocol.c: 99: {
  2950                           ;protocol.c: 100: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2951  0245  307C               	movlw	__x& (0+255)
  2952  0246  272F               	fcall	_GET_CHAR_HELPER
  2953  0247  3A00               	xorlw	0
  2954  0248  1D03               	btfss	3,2
  2955  0249  0008               	return
  2956  024A  306C               	movlw	__y& (0+255)
  2957  024B  272F               	fcall	_GET_CHAR_HELPER
  2958  024C  3A00               	xorlw	0
  2959  024D  1D03               	btfss	3,2
  2960  024E  0008               	return
  2961  024F  087C               	movf	__x,w
  2962  0250  39F0               	andlw	240
  2963  0251  1D03               	btfss	3,2
  2964  0252  0008               	return
  2965  0253  0020               	movlb	0	; select bank0
  2966  0254  086C               	movf	__y,w
  2967  0255  39F0               	andlw	240
  2968  0256  1D03               	btfss	3,2
  2969  0257  0008               	return
  2970  0258  086C               	movf	__y,w
  2971  0259  00A3               	movwf	??_control_transfer
  2972  025A  3003               	movlw	3
  2973  025B                     u4125:	
  2974  025B  35A3               	lslf	??_control_transfer,f
  2975  025C  3EFF               	addlw	-1
  2976  025D  1D03               	skipz
  2977  025E  2A5B               	goto	u4125
  2978  025F  3523               	lslf	??_control_transfer,w
  2979  0260  047C               	iorwf	__x,w
  2980  0261  00A4               	movwf	??_control_transfer+1
  2981  0262  0824               	movf	??_control_transfer+1,w
  2982  0263  00CC               	movwf	control_transfer@x
  2983  0264  084C               	movf	control_transfer@x,w
  2984  0265  00A3               	movwf	??_control_transfer
  2985  0266  0823               	movf	??_control_transfer,w
  2986  0267  07E4               	addwf	__checksum,f
  2987                           
  2988                           ;protocol.c: 101: *dptr++=x;
  2989  0268  084C               	movf	control_transfer@x,w
  2990  0269  00A3               	movwf	??_control_transfer
  2991  026A  0848               	movf	control_transfer@dptr,w
  2992  026B  0086               	movwf	6
  2993  026C  0187               	clrf	7
  2994  026D  0823               	movf	??_control_transfer,w
  2995  026E  0081               	movwf	1
  2996  026F  3001               	movlw	1
  2997  0270  00A3               	movwf	??_control_transfer
  2998  0271  0823               	movf	??_control_transfer,w
  2999  0272  07C8               	addwf	control_transfer@dptr,f
  3000  0273  3001               	movlw	1
  3001  0274  00A3               	movwf	??_control_transfer
  3002  0275  0823               	movf	??_control_transfer,w
  3003  0276  07C9               	addwf	control_transfer@i,f
  3004  0277  3020               	movlw	32
  3005  0278  0249               	subwf	control_transfer@i,w
  3006  0279  1C03               	skipc
  3007  027A  2A45               	goto	l3067
  3008  027B                     l3089:	
  3009                           
  3010                           ;protocol.c: 102: }
  3011                           ;protocol.c: 103: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  3012  027B  307C               	movlw	__x& (0+255)
  3013  027C  272F               	fcall	_GET_CHAR_HELPER
  3014  027D  3A00               	xorlw	0
  3015  027E  1D03               	btfss	3,2
  3016  027F  0008               	return
  3017  0280  306C               	movlw	__y& (0+255)
  3018  0281  272F               	fcall	_GET_CHAR_HELPER
  3019  0282  3A00               	xorlw	0
  3020  0283  1D03               	btfss	3,2
  3021  0284  0008               	return
  3022  0285  087C               	movf	__x,w
  3023  0286  39F0               	andlw	240
  3024  0287  1D03               	btfss	3,2
  3025  0288  0008               	return
  3026  0289  0020               	movlb	0	; select bank0
  3027  028A  086C               	movf	__y,w
  3028  028B  39F0               	andlw	240
  3029  028C  1D03               	btfss	3,2
  3030  028D  0008               	return
  3031  028E  086C               	movf	__y,w
  3032  028F  00A3               	movwf	??_control_transfer
  3033  0290  3003               	movlw	3
  3034  0291                     u4185:	
  3035  0291  35A3               	lslf	??_control_transfer,f
  3036  0292  3EFF               	addlw	-1
  3037  0293  1D03               	skipz
  3038  0294  2A91               	goto	u4185
  3039  0295  3523               	lslf	??_control_transfer,w
  3040  0296  047C               	iorwf	__x,w
  3041  0297  00A4               	movwf	??_control_transfer+1
  3042  0298  0824               	movf	??_control_transfer+1,w
  3043  0299  00FC               	movwf	__x
  3044  029A  087C               	movf	__x,w
  3045  029B  00A3               	movwf	??_control_transfer
  3046  029C  0823               	movf	??_control_transfer,w
  3047  029D  07E4               	addwf	__checksum,f
  3048  029E  0864               	movf	__checksum,w
  3049  029F  1D03               	skipz
  3050  02A0  0008               	return
  3051  02A1  307C               	movlw	__x& (0+255)
  3052  02A2  272F               	fcall	_GET_CHAR_HELPER
  3053  02A3  3A00               	xorlw	0
  3054  02A4  1D03               	btfss	3,2
  3055  02A5  0008               	return
  3056  02A6  087C               	movf	__x,w
  3057  02A7  3A11               	xorlw	17
  3058  02A8  1D03               	btfss	3,2
  3059  02A9  0008               	return
  3060                           
  3061                           ;protocol.c: 104: Save(page,data,16);
  3062  02AA  0020               	movlb	0	; select bank0
  3063  02AB  084B               	movf	control_transfer@page+1,w
  3064  02AC  01F2               	clrf	?_Save+1
  3065  02AD  07F2               	addwf	?_Save+1,f
  3066  02AE  084A               	movf	control_transfer@page,w
  3067  02AF  01F1               	clrf	?_Save
  3068  02B0  07F1               	addwf	?_Save,f
  3069  02B1  3025               	movlw	control_transfer@data& (0+255)
  3070  02B2  00A3               	movwf	??_control_transfer
  3071  02B3  0823               	movf	??_control_transfer,w
  3072  02B4  00F3               	movwf	?_Save+2
  3073  02B5  3010               	movlw	16
  3074  02B6  00A4               	movwf	??_control_transfer+1
  3075  02B7  0824               	movf	??_control_transfer+1,w
  3076  02B8  00F4               	movwf	?_Save+3
  3077  02B9  25ED               	fcall	_Save
  3078                           
  3079                           ;protocol.c: 105: switch(page)
  3080  02BA  2AD9               	goto	l3123
  3081  02BB                     l3117:	
  3082                           ;protocol.c: 106: {
  3083                           ;protocol.c: 107: case 0x7F0:
  3084                           
  3085                           
  3086                           ;protocol.c: 108: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  3087  02BB  30F0               	movlw	240
  3088  02BC  00F1               	movwf	?_Load
  3089  02BD  3007               	movlw	7
  3090  02BE  00F2               	movwf	?_Load+1
  3091  02BF  30C0               	movlw	_config& (0+255)
  3092  02C0  0020               	movlb	0	; select bank0
  3093  02C1  00A3               	movwf	??_control_transfer
  3094  02C2  0823               	movf	??_control_transfer,w
  3095  02C3  00F3               	movwf	?_Load+2
  3096  02C4  3009               	movlw	9
  3097  02C5  00A4               	movwf	??_control_transfer+1
  3098  02C6  0824               	movf	??_control_transfer+1,w
  3099  02C7  00F4               	movwf	?_Load+3
  3100  02C8  26C6               	fcall	_Load
  3101                           
  3102                           ;protocol.c: 109: break;
  3103  02C9  2AE7               	goto	l3125
  3104  02CA                     l3119:	
  3105                           ;protocol.c: 110: case 0x7E0:
  3106                           
  3107                           
  3108                           ;protocol.c: 111: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3109  02CA  30E0               	movlw	224
  3110  02CB  00F1               	movwf	?_Load
  3111  02CC  3007               	movlw	7
  3112  02CD  00F2               	movwf	?_Load+1
  3113  02CE  30A0               	movlw	_hitlist& (0+255)
  3114  02CF  0020               	movlb	0	; select bank0
  3115  02D0  00A3               	movwf	??_control_transfer
  3116  02D1  0823               	movf	??_control_transfer,w
  3117  02D2  00F3               	movwf	?_Load+2
  3118  02D3  3010               	movlw	16
  3119  02D4  00A4               	movwf	??_control_transfer+1
  3120  02D5  0824               	movf	??_control_transfer+1,w
  3121  02D6  00F4               	movwf	?_Load+3
  3122  02D7  26C6               	fcall	_Load
  3123                           
  3124                           ;protocol.c: 113: }
  3125                           
  3126                           ;protocol.c: 112: break;
  3127  02D8  2AE7               	goto	l3125
  3128  02D9                     l3123:	
  3129                           
  3130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3131                           ; Switch size 1, requested type "space"
  3132                           ; Number of cases is 1, Range of values is 7 to 7
  3133                           ; switch strategies available:
  3134                           ; Name         Instructions Cycles
  3135                           ; simple_byte            4     3 (average)
  3136                           ; direct_byte           11     9 (fixed)
  3137                           ; jumptable            263     9 (fixed)
  3138                           ;	Chosen strategy is simple_byte
  3139  02D9  0020               	movlb	0	; select bank0
  3140  02DA  084B               	movf	control_transfer@page+1,w
  3141  02DB  3A07               	xorlw	7	; case 7
  3142  02DC  1903               	skipnz
  3143  02DD  2ADF               	goto	l3257
  3144  02DE  2AE7               	goto	l3125
  3145  02DF                     l3257:	
  3146                           
  3147                           ; Switch size 1, requested type "space"
  3148                           ; Number of cases is 2, Range of values is 224 to 240
  3149                           ; switch strategies available:
  3150                           ; Name         Instructions Cycles
  3151                           ; simple_byte            7     4 (average)
  3152                           ; direct_byte           43     9 (fixed)
  3153                           ; jumptable            263     9 (fixed)
  3154                           ;	Chosen strategy is simple_byte
  3155  02DF  084A               	movf	control_transfer@page,w
  3156  02E0  3AE0               	xorlw	224	; case 224
  3157  02E1  1903               	skipnz
  3158  02E2  2ACA               	goto	l3119
  3159  02E3  3A10               	xorlw	16	; case 240
  3160  02E4  1903               	skipnz
  3161  02E5  2ABB               	goto	l3117
  3162  02E6  2AE7               	goto	l3125
  3163  02E7                     l3125:	
  3164                           
  3165                           ;protocol.c: 114: SEND_SOF();
  3166  02E7  27AB               	fcall	_SEND_SOF
  3167                           
  3168                           ;protocol.c: 115: SEND_DATA_BYTE(0x00);
  3169  02E8  3000               	movlw	0
  3170  02E9  274D               	fcall	_SEND_DATA_BYTE
  3171                           
  3172                           ;protocol.c: 116: SEND_EOF();
  3173  02EA  27B9               	fcall	_SEND_EOF
  3174                           
  3175                           ;protocol.c: 117: break;
  3176  02EB  0008               	return
  3177  02EC                     l3127:	
  3178                           ;protocol.c: 118: case 0x7:
  3179                           
  3180                           
  3181                           ;protocol.c: 119: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  3182  02EC  307C               	movlw	__x& (0+255)
  3183  02ED  272F               	fcall	_GET_CHAR_HELPER
  3184  02EE  3A00               	xorlw	0
  3185  02EF  1D03               	btfss	3,2
  3186  02F0  0008               	return
  3187  02F1  306C               	movlw	__y& (0+255)
  3188  02F2  272F               	fcall	_GET_CHAR_HELPER
  3189  02F3  3A00               	xorlw	0
  3190  02F4  1D03               	btfss	3,2
  3191  02F5  0008               	return
  3192  02F6  087C               	movf	__x,w
  3193  02F7  39F0               	andlw	240
  3194  02F8  1D03               	btfss	3,2
  3195  02F9  0008               	return
  3196  02FA  0020               	movlb	0	; select bank0
  3197  02FB  086C               	movf	__y,w
  3198  02FC  39F0               	andlw	240
  3199  02FD  1D03               	btfss	3,2
  3200  02FE  0008               	return
  3201  02FF  086C               	movf	__y,w
  3202  0300  00A3               	movwf	??_control_transfer
  3203  0301  3003               	movlw	3
  3204  0302                     u4265:	
  3205  0302  35A3               	lslf	??_control_transfer,f
  3206  0303  3EFF               	addlw	-1
  3207  0304  1D03               	skipz
  3208  0305  2B02               	goto	u4265
  3209  0306  3523               	lslf	??_control_transfer,w
  3210  0307  047C               	iorwf	__x,w
  3211  0308  00A4               	movwf	??_control_transfer+1
  3212  0309  0824               	movf	??_control_transfer+1,w
  3213  030A  00FC               	movwf	__x
  3214  030B  087C               	movf	__x,w
  3215  030C  00A3               	movwf	??_control_transfer
  3216  030D  0823               	movf	??_control_transfer,w
  3217  030E  07E4               	addwf	__checksum,f
  3218  030F  0864               	movf	__checksum,w
  3219  0310  1D03               	skipz
  3220  0311  0008               	return
  3221  0312  307C               	movlw	__x& (0+255)
  3222  0313  272F               	fcall	_GET_CHAR_HELPER
  3223  0314  3A00               	xorlw	0
  3224  0315  1D03               	btfss	3,2
  3225  0316  0008               	return
  3226  0317  087C               	movf	__x,w
  3227  0318  3A11               	xorlw	17
  3228  0319  1D03               	btfss	3,2
  3229  031A  0008               	return
  3230                           
  3231                           ;protocol.c: 120: play_song((uint16_t*)one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  3232  031B  3006               	movlw	6
  3233  031C  0020               	movlb	0	; select bank0
  3234  031D  00A3               	movwf	??_control_transfer
  3235  031E  0823               	movf	??_control_transfer,w
  3236  031F  00F1               	movwf	?_play_song
  3237  0320  30E8               	movlw	232
  3238  0321  00F2               	movwf	?_play_song+1
  3239  0322  30FD               	movlw	253
  3240  0323  00F3               	movwf	?_play_song+2
  3241  0324  01F4               	clrf	?_play_song+3
  3242  0325  308C               	movlw	(_one_up| (0+32768))& (0+255)
  3243  0326  26EB               	fcall	_play_song
  3244                           
  3245                           ;protocol.c: 121: SEND_SOF();
  3246  0327  27AB               	fcall	_SEND_SOF
  3247                           
  3248                           ;protocol.c: 122: SEND_DATA_BYTE(0x00);
  3249  0328  3000               	movlw	0
  3250  0329  274D               	fcall	_SEND_DATA_BYTE
  3251                           
  3252                           ;protocol.c: 123: SEND_EOF();
  3253  032A  27B9               	fcall	_SEND_EOF
  3254                           
  3255                           ;protocol.c: 128: }
  3256                           
  3257                           ;protocol.c: 127: goto err;
  3258                           
  3259                           ;protocol.c: 126: default:
  3260                           
  3261                           ;protocol.c: 124: break;
  3262  032B  0008               	return
  3263  032C                     l3157:	
  3264  032C  0020               	movlb	0	; select bank0
  3265  032D  0845               	movf	control_transfer@cmd,w
  3266                           
  3267                           ; Switch size 1, requested type "space"
  3268                           ; Number of cases is 5, Range of values is 1 to 7
  3269                           ; switch strategies available:
  3270                           ; Name         Instructions Cycles
  3271                           ; simple_byte           16     9 (average)
  3272                           ; direct_byte           23     9 (fixed)
  3273                           ; jumptable            263     9 (fixed)
  3274                           ;	Chosen strategy is simple_byte
  3275  032E  3A01               	xorlw	1	; case 1
  3276  032F  1903               	skipnz
  3277  0330  2871               	goto	l2853
  3278  0331  3A02               	xorlw	2	; case 3
  3279  0332  1903               	skipnz
  3280  0333  28A8               	goto	l2881
  3281  0334  3A07               	xorlw	7	; case 4
  3282  0335  1903               	skipnz
  3283  0336  2940               	goto	l2945
  3284  0337  3A02               	xorlw	2	; case 6
  3285  0338  1903               	skipnz
  3286  0339  29EE               	goto	l3027
  3287  033A  3A01               	xorlw	1	; case 7
  3288  033B  1903               	skipnz
  3289  033C  2AEC               	goto	l3127
  3290  033D  2B3F               	goto	l407
  3291  033E  0008               	return
  3292  033F                     l407:	
  3293                           ;protocol.c: 130: return;
  3294                           
  3295                           ;protocol.c: 129: err:
  3296                           
  3297  033F  0008               	return
  3298  0340                     __end_of_control_transfer:	
  3299                           
  3300                           	psect	text9
  3301  07B9                     __ptext9:	
  3302 ;; *************** function _SEND_EOF *****************
  3303 ;; Defined at:
  3304 ;;		line 37 in file "protocol.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0, pclath, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3318 ;;      Params:         0       0       0       0
  3319 ;;      Locals:         0       0       0       0
  3320 ;;      Temps:          0       0       0       0
  3321 ;;      Totals:         0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    5
  3325 ;; This function calls:
  3326 ;;		_Send_Byte
  3327 ;;		_SEND_DATA_BYTE
  3328 ;; This function is called by:
  3329 ;;		_control_transfer
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           
  3334                           ;psect for function _SEND_EOF
  3335  07B9                     _SEND_EOF:	
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  3339  07B9  0020               	movlb	0	; select bank0
  3340  07BA  0864               	movf	__checksum,w
  3341  07BB  274D               	fcall	_SEND_DATA_BYTE
  3342  07BC  3011               	movlw	17
  3343  07BD  2634               	fcall	_Send_Byte
  3344  07BE  0008               	return
  3345  07BF                     __end_of_SEND_EOF:	
  3346                           
  3347                           	psect	text10
  3348  07AB                     __ptext10:	
  3349 ;; *************** function _SEND_SOF *****************
  3350 ;; Defined at:
  3351 ;;		line 36 in file "protocol.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;		None               void
  3358 ;; Registers used:
  3359 ;;		wreg, status,2, status,0, pclath, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3365 ;;      Params:         0       0       0       0
  3366 ;;      Locals:         0       0       0       0
  3367 ;;      Temps:          0       0       0       0
  3368 ;;      Totals:         0       0       0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    5
  3372 ;; This function calls:
  3373 ;;		_Send_Byte
  3374 ;;		_SEND_DATA_BYTE
  3375 ;; This function is called by:
  3376 ;;		_control_transfer
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           
  3381                           ;psect for function _SEND_SOF
  3382  07AB                     _SEND_SOF:	
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  3386  07AB  3010               	movlw	16
  3387  07AC  2634               	fcall	_Send_Byte
  3388  07AD  0020               	movlb	0	; select bank0
  3389  07AE  01E4               	clrf	__checksum
  3390  07AF  0021               	movlb	1	; select bank1
  3391  07B0  0840               	movf	_config^(0+128),w
  3392  07B1  274D               	fcall	_SEND_DATA_BYTE
  3393  07B2  0008               	return
  3394  07B3                     __end_of_SEND_SOF:	
  3395                           
  3396                           	psect	text11
  3397  074D                     __ptext11:	
  3398 ;; *************** function _SEND_DATA_BYTE *****************
  3399 ;; Defined at:
  3400 ;;		line 35 in file "protocol.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  b               1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  b               1    2[BANK0 ] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;		None               void
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0, pclath, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3414 ;;      Params:         0       0       0       0
  3415 ;;      Locals:         0       1       0       0
  3416 ;;      Temps:          0       2       0       0
  3417 ;;      Totals:         0       3       0       0
  3418 ;;Total ram usage:        3 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    4
  3421 ;; This function calls:
  3422 ;;		_Send_Byte
  3423 ;; This function is called by:
  3424 ;;		_SEND_SOF
  3425 ;;		_SEND_EOF
  3426 ;;		_control_transfer
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _SEND_DATA_BYTE
  3432  074D                     _SEND_DATA_BYTE:	
  3433                           
  3434                           ;incstack = 0
  3435                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3436                           ;SEND_DATA_BYTE@b stored from wreg
  3437  074D  0020               	movlb	0	; select bank0
  3438  074E  00A2               	movwf	SEND_DATA_BYTE@b
  3439  074F  0822               	movf	SEND_DATA_BYTE@b,w
  3440  0750  390F               	andlw	15
  3441  0751  00A0               	movwf	??_SEND_DATA_BYTE
  3442  0752  0820               	movf	??_SEND_DATA_BYTE,w
  3443  0753  00FC               	movwf	__x
  3444  0754  0822               	movf	SEND_DATA_BYTE@b,w
  3445  0755  00A0               	movwf	??_SEND_DATA_BYTE
  3446  0756  3004               	movlw	4
  3447  0757                     u4375:	
  3448  0757  36A0               	lsrf	??_SEND_DATA_BYTE,f
  3449  0758  0B89               	decfsz	9,f
  3450  0759  2F57               	goto	u4375
  3451  075A  0820               	movf	??_SEND_DATA_BYTE,w
  3452  075B  00A1               	movwf	??_SEND_DATA_BYTE+1
  3453  075C  0821               	movf	??_SEND_DATA_BYTE+1,w
  3454  075D  00EC               	movwf	__y
  3455  075E  087C               	movf	__x,w
  3456  075F  2634               	fcall	_Send_Byte
  3457  0760  0020               	movlb	0	; select bank0
  3458  0761  086C               	movf	__y,w
  3459  0762  2634               	fcall	_Send_Byte
  3460  0763  0020               	movlb	0	; select bank0
  3461  0764  0822               	movf	SEND_DATA_BYTE@b,w
  3462  0765  02E4               	subwf	__checksum,f
  3463  0766  0008               	return
  3464  0767                     __end_of_SEND_DATA_BYTE:	
  3465                           
  3466                           	psect	text12
  3467  0634                     __ptext12:	
  3468 ;; *************** function _Send_Byte *****************
  3469 ;; Defined at:
  3470 ;;		line 156 in file "user.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  data            1    wreg     unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  data            1    9[COMMON] unsigned char 
  3475 ;;  i               2   10[COMMON] unsigned int 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;		None               void
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0, pclath, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3485 ;;      Params:         0       0       0       0
  3486 ;;      Locals:         3       0       0       0
  3487 ;;      Temps:          1       0       0       0
  3488 ;;      Totals:         4       0       0       0
  3489 ;;Total ram usage:        4 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		_delay_1_ms
  3494 ;;		_cheat
  3495 ;; This function is called by:
  3496 ;;		_handle_fire
  3497 ;;		_super_dead_mode
  3498 ;;		_SEND_DATA_BYTE
  3499 ;;		_SEND_SOF
  3500 ;;		_SEND_EOF
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _Send_Byte
  3506  0634                     _Send_Byte:	
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3510                           ;Send_Byte@data stored from wreg
  3511  0634  00F9               	movwf	Send_Byte@data
  3512                           
  3513                           ;user.c: 157: data ^= 0b10101010;
  3514  0635  30AA               	movlw	170
  3515  0636  00F8               	movwf	??_Send_Byte
  3516  0637  0878               	movf	??_Send_Byte,w
  3517  0638  06F9               	xorwf	Send_Byte@data,f
  3518                           
  3519                           ;user.c: 158: delay_1_ms();
  3520  0639  2790               	fcall	_delay_1_ms
  3521                           
  3522                           ;user.c: 159: RCSTAbits.CREN = 0;
  3523  063A  0023               	movlb	3	; select bank3
  3524  063B  121D               	bcf	29,4	;volatile
  3525                           
  3526                           ;user.c: 161: for(uint16_t i=0; i<100; i++){
  3527  063C  01FA               	clrf	Send_Byte@i
  3528  063D  01FB               	clrf	Send_Byte@i+1
  3529  063E  3000               	movlw	0
  3530  063F  027B               	subwf	Send_Byte@i+1,w
  3531  0640  3064               	movlw	100
  3532  0641  1903               	skipnz
  3533  0642  027A               	subwf	Send_Byte@i,w
  3534  0643  1803               	btfsc	3,0
  3535  0644  2E5A               	goto	l160
  3536  0645                     l159:	
  3537                           
  3538                           ;user.c: 162: if(PORTAbits.RA1){break;}
  3539  0645  0020               	movlb	0	; select bank0
  3540  0646  188C               	btfsc	12,1	;volatile
  3541  0647  2E5A               	goto	l160
  3542                           
  3543                           ;user.c: 163: delay_1_ms();
  3544  0648  2790               	fcall	_delay_1_ms
  3545                           
  3546                           ;user.c: 164: if(i==99){cheat();}
  3547  0649  3063               	movlw	99
  3548  064A  067A               	xorwf	Send_Byte@i,w
  3549  064B  047B               	iorwf	Send_Byte@i+1,w
  3550  064C  1D03               	skipz
  3551  064D  2E4F               	goto	l2773
  3552  064E  270E               	fcall	_cheat
  3553  064F                     l2773:	
  3554  064F  3001               	movlw	1
  3555  0650  07FA               	addwf	Send_Byte@i,f
  3556  0651  3000               	movlw	0
  3557  0652  3DFB               	addwfc	Send_Byte@i+1,f
  3558  0653  3000               	movlw	0
  3559  0654  027B               	subwf	Send_Byte@i+1,w
  3560  0655  3064               	movlw	100
  3561  0656  1903               	skipnz
  3562  0657  027A               	subwf	Send_Byte@i,w
  3563  0658  1C03               	skipc
  3564  0659  2E45               	goto	l159
  3565  065A                     l160:	
  3566                           
  3567                           ;user.c: 165: }
  3568                           ;user.c: 167: { DACCON0bits.DACEN = 1; TMR0=0; INTCONbits.TMR0IF=1; INTCONbits.TMR0IE=1;
      +                          };
  3569  065A  0022               	movlb	2	; select bank2
  3570  065B  1798               	bsf	24,7	;volatile
  3571  065C  0020               	movlb	0	; select bank0
  3572  065D  0195               	clrf	21	;volatile
  3573  065E  150B               	bsf	11,2	;volatile
  3574  065F  168B               	bsf	11,5	;volatile
  3575                           
  3576                           ;user.c: 168: TXREG = data;
  3577  0660  0879               	movf	Send_Byte@data,w
  3578  0661  0023               	movlb	3	; select bank3
  3579  0662  009A               	movwf	26	;volatile
  3580  0663                     l163:	
  3581                           ;user.c: 169: while(!TXSTAbits.TRMT);
  3582                           
  3583  0663  1C9E               	btfss	30,1	;volatile
  3584  0664  2E63               	goto	l163
  3585                           
  3586                           ;user.c: 170: { INTCONbits.TMR0IE=0; DACCON0bits.DACEN=0;};
  3587  0665  128B               	bcf	11,5	;volatile
  3588  0666  0022               	movlb	2	; select bank2
  3589  0667  1398               	bcf	24,7	;volatile
  3590                           
  3591                           ;user.c: 171: RCSTAbits.CREN = 1;
  3592  0668  0023               	movlb	3	; select bank3
  3593  0669  161D               	bsf	29,4	;volatile
  3594                           
  3595                           ;user.c: 172: RCREG;
  3596  066A  0819               	movf	25,w	;volatile
  3597                           
  3598                           ;user.c: 173: delay_1_ms();
  3599  066B  2790               	fcall	_delay_1_ms
  3600                           
  3601                           ;user.c: 174: delay_1_ms();
  3602  066C  2790               	fcall	_delay_1_ms
  3603  066D  0008               	return
  3604  066E                     __end_of_Send_Byte:	
  3605                           
  3606                           	psect	text13
  3607  070E                     __ptext13:	
  3608 ;; *************** function _cheat *****************
  3609 ;; Defined at:
  3610 ;;		line 232 in file "user.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  i               1    7[COMMON] unsigned char 
  3615 ;;  i               1    6[COMMON] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;		None               void
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0, pclath, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3625 ;;      Params:         0       0       0       0
  3626 ;;      Locals:         2       0       0       0
  3627 ;;      Temps:          1       0       0       0
  3628 ;;      Totals:         3       0       0       0
  3629 ;;Total ram usage:        3 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    2
  3632 ;; This function calls:
  3633 ;;		_delay_1_ms
  3634 ;;		_red_led_on
  3635 ;;		_tone
  3636 ;; This function is called by:
  3637 ;;		_Send_Byte
  3638 ;;		_handle_fire
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _cheat
  3644  070E                     _cheat:	
  3645  070E                     l185:	
  3646                           ;incstack = 0
  3647                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  3648                           ;user.c: 233: while(1){
  3649                           
  3650                           
  3651                           ;user.c: 234: red_led_on();
  3652  070E  27CA               	fcall	_red_led_on
  3653                           
  3654                           ;user.c: 235: tone(7813);
  3655  070F  3085               	movlw	133
  3656  0710  00F1               	movwf	?_tone
  3657  0711  301E               	movlw	30
  3658  0712  00F2               	movwf	?_tone+1
  3659  0713  2767               	fcall	_tone
  3660                           
  3661                           ;user.c: 236: for(uint8_t i=0; i<200; i++){
  3662  0714  01F6               	clrf	cheat@i
  3663  0715  30C8               	movlw	200
  3664  0716  0276               	subwf	cheat@i,w
  3665  0717  1803               	btfsc	3,0
  3666  0718  2F22               	goto	l187
  3667  0719                     l2801:	
  3668                           
  3669                           ;user.c: 237: delay_1_ms();
  3670  0719  2790               	fcall	_delay_1_ms
  3671  071A  3001               	movlw	1
  3672  071B  00F5               	movwf	??_cheat
  3673  071C  0875               	movf	??_cheat,w
  3674  071D  07F6               	addwf	cheat@i,f
  3675  071E  30C8               	movlw	200
  3676  071F  0276               	subwf	cheat@i,w
  3677  0720  1C03               	skipc
  3678  0721  2F19               	goto	l2801
  3679  0722                     l187:	
  3680                           
  3681                           ;user.c: 238: }
  3682                           ;user.c: 239: {TRISAbits.TRISA5 = 1;};
  3683  0722  0021               	movlb	1	; select bank1
  3684  0723  168C               	bsf	12,5	;volatile
  3685                           
  3686                           ;user.c: 240: for(uint8_t i=0; i<200; i++){
  3687  0724  01F7               	clrf	cheat@i_686
  3688  0725                     L3:	
  3689  0725  30C8               	movlw	200
  3690  0726  0277               	subwf	cheat@i_686,w
  3691  0727  1803               	btfsc	3,0
  3692  0728  2F0E               	goto	l185
  3693                           
  3694                           ;user.c: 241: delay_1_ms();
  3695  0729  2790               	fcall	_delay_1_ms
  3696  072A  3001               	movlw	1
  3697  072B  00F5               	movwf	??_cheat
  3698  072C  0875               	movf	??_cheat,w
  3699  072D  07F7               	addwf	cheat@i_686,f
  3700  072E  2F25               	goto	L3
  3701  072F                     __end_of_cheat:	
  3702                           
  3703                           	psect	text14
  3704  07CA                     __ptext14:	
  3705 ;; *************** function _red_led_on *****************
  3706 ;; Defined at:
  3707 ;;		line 81 in file "user.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;		None               void
  3714 ;; Registers used:
  3715 ;;		None
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3721 ;;      Params:         0       0       0       0
  3722 ;;      Locals:         0       0       0       0
  3723 ;;      Temps:          0       0       0       0
  3724 ;;      Totals:         0       0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_cheat
  3732 ;;		_super_dead_mode
  3733 ;;		_hit_by
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           
  3738                           ;psect for function _red_led_on
  3739  07CA                     _red_led_on:	
  3740                           
  3741                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in _red_led_on: []
  3745  07CA  0021               	movlb	1	; select bank1
  3746  07CB  128C               	bcf	12,5	;volatile
  3747                           
  3748                           ;user.c: 83: PORTAbits.RA5 = 0;
  3749  07CC  0020               	movlb	0	; select bank0
  3750  07CD  128C               	bcf	12,5	;volatile
  3751  07CE  0008               	return
  3752  07CF                     __end_of_red_led_on:	
  3753                           
  3754                           	psect	text15
  3755  072F                     __ptext15:	
  3756 ;; *************** function _GET_CHAR_HELPER *****************
  3757 ;; Defined at:
  3758 ;;		line 29 in file "protocol.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  val             1    wreg     PTR unsigned char 
  3761 ;;		 -> _y(1), _x(1), 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  val             1    2[COMMON] PTR unsigned char 
  3764 ;;		 -> _y(1), _x(1), 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      unsigned char 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr1l, fsr1h, status,2
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3774 ;;      Params:         0       0       0       0
  3775 ;;      Locals:         1       0       0       0
  3776 ;;      Temps:          1       0       0       0
  3777 ;;      Totals:         2       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    1
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_control_transfer
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function _GET_CHAR_HELPER
  3790  072F                     _GET_CHAR_HELPER:	
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3794                           ;GET_CHAR_HELPER@val stored from wreg
  3795  072F  00F2               	movwf	GET_CHAR_HELPER@val
  3796  0730  0020               	movlb	0	; select bank0
  3797  0731  01DC               	clrf	__i
  3798  0732  01DD               	clrf	__i+1
  3799  0733                     l287:	
  3800  0733  1A91               	btfsc	17,5	;volatile
  3801  0734  2F42               	goto	l2499
  3802  0735  3001               	movlw	1
  3803  0736  07DC               	addwf	__i,f
  3804  0737  3000               	movlw	0
  3805  0738  3DDD               	addwfc	__i+1,f
  3806  0739  3075               	movlw	117
  3807  073A  025D               	subwf	__i+1,w
  3808  073B  3030               	movlw	48
  3809  073C  1903               	skipnz
  3810  073D  025C               	subwf	__i,w
  3811  073E  1C03               	skipc
  3812  073F  2F33               	goto	l287
  3813  0740  3001               	movlw	1
  3814  0741  0008               	return
  3815  0742                     l2499:	
  3816  0742  0023               	movlb	3	; select bank3
  3817  0743  0819               	movf	25,w	;volatile
  3818  0744  3AAA               	xorlw	170
  3819  0745  00F1               	movwf	??_GET_CHAR_HELPER
  3820  0746  0872               	movf	GET_CHAR_HELPER@val,w
  3821  0747  0086               	movwf	6
  3822  0748  0187               	clrf	7
  3823  0749  0871               	movf	??_GET_CHAR_HELPER,w
  3824  074A  0081               	movwf	1
  3825  074B  3000               	movlw	0
  3826  074C  0008               	return
  3827  074D                     __end_of_GET_CHAR_HELPER:	
  3828                           
  3829                           	psect	text16
  3830  06EB                     __ptext16:	
  3831 ;; *************** function _play_song *****************
  3832 ;; Defined at:
  3833 ;;		line 93 in file "user.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  song            1    wreg     PTR unsigned int 
  3836 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3837 ;;  length          1    1[COMMON] unsigned char 
  3838 ;;  note_duratio    2    2[COMMON] unsigned int 
  3839 ;;  repeat          1    4[COMMON] unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  song            1    7[COMMON] PTR unsigned int 
  3842 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;		None               void
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3852 ;;      Params:         4       0       0       0
  3853 ;;      Locals:         1       0       0       0
  3854 ;;      Temps:          2       0       0       0
  3855 ;;      Totals:         7       0       0       0
  3856 ;;Total ram usage:        7 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    1
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_handle_fire
  3863 ;;		_super_dead_mode
  3864 ;;		_hit_by
  3865 ;;		_control_transfer
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _play_song
  3871  06EB                     _play_song:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3875                           ;play_song@song stored from wreg
  3876  06EB  00F7               	movwf	play_song@song
  3877                           
  3878                           ;user.c: 94: cur_song=song;
  3879  06EC  0877               	movf	play_song@song,w
  3880  06ED  00F5               	movwf	??_play_song
  3881  06EE  0875               	movf	??_play_song,w
  3882  06EF  0020               	movlb	0	; select bank0
  3883  06F0  00E5               	movwf	_cur_song
  3884                           
  3885                           ;user.c: 95: cur_song_length=length;
  3886  06F1  0871               	movf	play_song@length,w
  3887  06F2  00F5               	movwf	??_play_song
  3888  06F3  0875               	movf	??_play_song,w
  3889  06F4  00E6               	movwf	_cur_song_length
  3890                           
  3891                           ;user.c: 96: cur_song_ptr=0;
  3892  06F5  01E7               	clrf	_cur_song_ptr
  3893                           
  3894                           ;user.c: 97: cur_song_repeat=repeat;
  3895  06F6  0874               	movf	play_song@repeat,w
  3896  06F7  00F5               	movwf	??_play_song
  3897  06F8  0875               	movf	??_play_song,w
  3898  06F9  00E8               	movwf	_cur_song_repeat
  3899                           
  3900                           ;user.c: 98: cur_song_duration=note_duration;
  3901  06FA  0873               	movf	play_song@note_duration+1,w
  3902  06FB  01DF               	clrf	_cur_song_duration+1
  3903  06FC  07DF               	addwf	_cur_song_duration+1,f
  3904  06FD  0872               	movf	play_song@note_duration,w
  3905  06FE  01DE               	clrf	_cur_song_duration
  3906  06FF  07DE               	addwf	_cur_song_duration,f
  3907                           
  3908                           ;user.c: 100: TMR1 = -cur_song_duration;
  3909  0700  095E               	comf	_cur_song_duration,w
  3910  0701  00F5               	movwf	??_play_song
  3911  0702  095F               	comf	_cur_song_duration+1,w
  3912  0703  00F6               	movwf	??_play_song+1
  3913  0704  0AF5               	incf	??_play_song,f
  3914  0705  1903               	skipnz
  3915  0706  0AF6               	incf	??_play_song+1,f
  3916  0707  0875               	movf	??_play_song,w
  3917  0708  0096               	movwf	22	;volatile
  3918  0709  0876               	movf	??_play_song+1,w
  3919  070A  0097               	movwf	23	;volatile
  3920                           
  3921                           ;user.c: 101: PIR1bits.TMR1IF = 1;
  3922  070B  1411               	bsf	17,0	;volatile
  3923                           
  3924                           ;user.c: 102: T1CONbits.TMR1ON = 1;
  3925  070C  1418               	bsf	24,0	;volatile
  3926  070D  0008               	return
  3927  070E                     __end_of_play_song:	
  3928                           
  3929                           	psect	text17
  3930  066E                     __ptext17:	
  3931 ;; *************** function _handle_music *****************
  3932 ;; Defined at:
  3933 ;;		line 113 in file "user.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3947 ;;      Params:         0       0       0       0
  3948 ;;      Locals:         0       0       0       0
  3949 ;;      Temps:          2       0       0       0
  3950 ;;      Totals:         2       0       0       0
  3951 ;;Total ram usage:        2 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		_stop_song
  3956 ;;		_tone
  3957 ;; This function is called by:
  3958 ;;		_main
  3959 ;;		_super_dead_mode
  3960 ;;		_hit_by
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _handle_music
  3966  066E                     _handle_music:	
  3967                           
  3968                           ;user.c: 114: if(!PIR1bits.TMR1IF) return;
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3972  066E  0020               	movlb	0	; select bank0
  3973  066F  1C11               	btfss	17,0	;volatile
  3974  0670  0008               	return
  3975                           
  3976                           ;user.c: 115: if(cur_song_ptr >= cur_song_length)
  3977  0671  0866               	movf	_cur_song_length,w
  3978  0672  0267               	subwf	_cur_song_ptr,w
  3979  0673  1C03               	skipc
  3980  0674  2E7C               	goto	l2727
  3981                           
  3982                           ;user.c: 116: {
  3983                           ;user.c: 117: if(cur_song_repeat)
  3984  0675  0868               	movf	_cur_song_repeat,w
  3985  0676  1903               	btfsc	3,2
  3986  0677  2E7A               	goto	l2723
  3987                           
  3988                           ;user.c: 118: {
  3989                           ;user.c: 119: cur_song_ptr=0;
  3990  0678  01E7               	clrf	_cur_song_ptr
  3991                           
  3992                           ;user.c: 120: }
  3993  0679  2E7C               	goto	l2727
  3994  067A                     l2723:	
  3995                           
  3996                           ;user.c: 121: else
  3997                           ;user.c: 122: {
  3998                           ;user.c: 123: stop_song();
  3999  067A  27BF               	fcall	_stop_song
  4000                           
  4001                           ;user.c: 124: return;
  4002  067B  0008               	return
  4003  067C                     l2727:	
  4004                           
  4005                           ;user.c: 125: }
  4006                           ;user.c: 126: }
  4007                           ;user.c: 127: tone(cur_song[cur_song_ptr]);
  4008  067C  0020               	movlb	0	; select bank0
  4009  067D  0865               	movf	_cur_song,w
  4010  067E  0084               	movwf	4
  4011  067F  3084               	movlw	(high __stringtab)| (0+128)
  4012  0680  0085               	movwf	5
  4013  0681  3567               	lslf	_cur_song_ptr,w
  4014  0682  0784               	addwf	4,f
  4015  0683  1803               	skipnc
  4016  0684  0A85               	incf	5,f
  4017  0685  3F00               	moviw [0]fsr0
  4018  0686  00F1               	movwf	?_tone
  4019  0687  3F01               	moviw [1]fsr0
  4020  0688  00F2               	movwf	?_tone+1
  4021  0689  2767               	fcall	_tone
  4022                           
  4023                           ;user.c: 128: TMR1 = -cur_song_duration;
  4024  068A  0020               	movlb	0	; select bank0
  4025  068B  095E               	comf	_cur_song_duration,w
  4026  068C  00F5               	movwf	??_handle_music
  4027  068D  095F               	comf	_cur_song_duration+1,w
  4028  068E  00F6               	movwf	??_handle_music+1
  4029  068F  0AF5               	incf	??_handle_music,f
  4030  0690  1903               	skipnz
  4031  0691  0AF6               	incf	??_handle_music+1,f
  4032  0692  0875               	movf	??_handle_music,w
  4033  0693  0096               	movwf	22	;volatile
  4034  0694  0876               	movf	??_handle_music+1,w
  4035  0695  0097               	movwf	23	;volatile
  4036                           
  4037                           ;user.c: 129: cur_song_ptr++;
  4038  0696  3001               	movlw	1
  4039  0697  00F5               	movwf	??_handle_music
  4040  0698  0875               	movf	??_handle_music,w
  4041  0699  07E7               	addwf	_cur_song_ptr,f
  4042                           
  4043                           ;user.c: 130: PIR1bits.TMR1IF=0;
  4044  069A  1011               	bcf	17,0	;volatile
  4045  069B  0008               	return
  4046  069C                     __end_of_handle_music:	
  4047                           
  4048                           	psect	text18
  4049  0767                     __ptext18:	
  4050 ;; *************** function _tone *****************
  4051 ;; Defined at:
  4052 ;;		line 134 in file "user.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  period          2    1[COMMON] unsigned int 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;		None               void
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4066 ;;      Params:         2       0       0       0
  4067 ;;      Locals:         0       0       0       0
  4068 ;;      Temps:          2       0       0       0
  4069 ;;      Totals:         4       0       0       0
  4070 ;;Total ram usage:        4 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_handle_music
  4077 ;;		_cheat
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _tone
  4083  0767                     _tone:	
  4084                           
  4085                           ;user.c: 135: PWM3CONbits.PWM3EN = 1;
  4086                           
  4087                           ;incstack = 0
  4088                           ; Regs used in _tone: [wreg+status,2+status,0]
  4089  0767  003B               	movlb	27	; select bank27
  4090  0768  17BB               	bsf	59,7	;volatile
  4091                           
  4092                           ;user.c: 136: PWM3CONbits.PWM3OE = 1;
  4093  0769  173B               	bsf	59,6	;volatile
  4094                           
  4095                           ;user.c: 137: PWM3PR = period;
  4096  076A  0872               	movf	tone@period+1,w
  4097  076B  01B6               	clrf	54	;volatile
  4098  076C  07B6               	addwf	54,f	;volatile
  4099  076D  0871               	movf	tone@period,w
  4100  076E  01B5               	clrf	53	;volatile
  4101  076F  07B5               	addwf	53,f	;volatile
  4102                           
  4103                           ;user.c: 138: PWM3DC = period >> 1;
  4104  0770  0872               	movf	tone@period+1,w
  4105  0771  00F4               	movwf	??_tone+1
  4106  0772  0871               	movf	tone@period,w
  4107  0773  00F3               	movwf	??_tone
  4108  0774  36F4               	lsrf	??_tone+1,f
  4109  0775  0CF3               	rrf	??_tone,f
  4110  0776  0873               	movf	??_tone,w
  4111  0777  00B3               	movwf	51	;volatile
  4112  0778  0874               	movf	??_tone+1,w
  4113  0779  00B4               	movwf	52	;volatile
  4114                           
  4115                           ;user.c: 139: PWM3PH = 0x0000;
  4116  077A  01B1               	clrf	49	;volatile
  4117  077B  01B2               	clrf	50	;volatile
  4118                           
  4119                           ;user.c: 140: PWM3LDCONbits.PWM3LD = 1;
  4120  077C  17BF               	bsf	63,7	;volatile
  4121  077D  0008               	return
  4122  077E                     __end_of_tone:	
  4123                           
  4124                           	psect	text19
  4125  07BF                     __ptext19:	
  4126 ;; *************** function _stop_song *****************
  4127 ;; Defined at:
  4128 ;;		line 106 in file "user.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;		None               void
  4135 ;; Registers used:
  4136 ;;		None
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4142 ;;      Params:         0       0       0       0
  4143 ;;      Locals:         0       0       0       0
  4144 ;;      Temps:          0       0       0       0
  4145 ;;      Totals:         0       0       0       0
  4146 ;;Total ram usage:        0 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    1
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_handle_music
  4153 ;;		_handle_fire
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _stop_song
  4159  07BF                     _stop_song:	
  4160                           
  4161                           ;user.c: 107: {PWM3CONbits.PWM3OE = 0;};
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _stop_song: []
  4165  07BF  003B               	movlb	27	; select bank27
  4166  07C0  133B               	bcf	59,6	;volatile
  4167                           
  4168                           ;user.c: 108: T1CONbits.TMR1ON=0;
  4169  07C1  0020               	movlb	0	; select bank0
  4170  07C2  1018               	bcf	24,0	;volatile
  4171                           
  4172                           ;user.c: 109: PIR1bits.TMR1IF=0;
  4173  07C3  1011               	bcf	17,0	;volatile
  4174  07C4  0008               	return
  4175  07C5                     __end_of_stop_song:	
  4176                           
  4177                           	psect	text20
  4178  069C                     __ptext20:	
  4179 ;; *************** function _Setup *****************
  4180 ;; Defined at:
  4181 ;;		line 33 in file "user.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;		None
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;		None               void
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4195 ;;      Params:         0       0       0       0
  4196 ;;      Locals:         0       0       0       0
  4197 ;;      Temps:          1       0       0       0
  4198 ;;      Totals:         1       0       0       0
  4199 ;;Total ram usage:        1 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    2
  4202 ;; This function calls:
  4203 ;;		_delay_1_ms
  4204 ;; This function is called by:
  4205 ;;		_main
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _Setup
  4211  069C                     _Setup:	
  4212                           
  4213                           ;user.c: 34: OSCCON = 0b01111010;
  4214                           
  4215                           ;incstack = 0
  4216                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  4217  069C  307A               	movlw	122
  4218  069D  0021               	movlb	1	; select bank1
  4219  069E  0099               	movwf	25	;volatile
  4220                           
  4221                           ;user.c: 36: ANSELA = 0x00;
  4222  069F  0023               	movlb	3	; select bank3
  4223  06A0  018C               	clrf	12	;volatile
  4224                           
  4225                           ;user.c: 37: TRISAbits.TRISA2 = 0;
  4226  06A1  0021               	movlb	1	; select bank1
  4227  06A2  110C               	bcf	12,2	;volatile
  4228                           
  4229                           ;user.c: 38: TRISAbits.TRISA0 = 0;
  4230  06A3  100C               	bcf	12,0	;volatile
  4231                           
  4232                           ;user.c: 41: ANSELAbits.ANSA4 = 1;
  4233  06A4  0023               	movlb	3	; select bank3
  4234  06A5  160C               	bsf	12,4	;volatile
  4235                           
  4236                           ;user.c: 42: ADCON1 |= 0b00110000;
  4237  06A6  3030               	movlw	48
  4238  06A7  00F3               	movwf	??_Setup
  4239  06A8  0873               	movf	??_Setup,w
  4240  06A9  0021               	movlb	1	; select bank1
  4241  06AA  049E               	iorwf	30,f	;volatile
  4242                           
  4243                           ;user.c: 45: SPBRGL = 103;
  4244  06AB  3067               	movlw	103
  4245  06AC  0023               	movlb	3	; select bank3
  4246  06AD  009B               	movwf	27	;volatile
  4247                           
  4248                           ;user.c: 46: TXSTAbits.SYNC = 0;
  4249  06AE  121E               	bcf	30,4	;volatile
  4250                           
  4251                           ;user.c: 47: RCSTAbits.SPEN = 1;
  4252  06AF  179D               	bsf	29,7	;volatile
  4253                           
  4254                           ;user.c: 48: BAUDCONbits.SCKP = 1;
  4255  06B0  161F               	bsf	31,4	;volatile
  4256                           
  4257                           ;user.c: 49: TXSTAbits.TXEN = 1;
  4258  06B1  169E               	bsf	30,5	;volatile
  4259                           
  4260                           ;user.c: 52: RCSTAbits.CREN = 1;
  4261  06B2  161D               	bsf	29,4	;volatile
  4262                           
  4263                           ;user.c: 55: INTCONbits.GIE = 1;
  4264  06B3  178B               	bsf	11,7	;volatile
  4265                           
  4266                           ;user.c: 58: OPTION_REGbits.TMR0CS = 0;
  4267  06B4  0021               	movlb	1	; select bank1
  4268  06B5  1295               	bcf	21,5	;volatile
  4269                           
  4270                           ;user.c: 61: T1CONbits.T1CKPS=3;
  4271  06B6  3030               	movlw	48
  4272  06B7  0020               	movlb	0	; select bank0
  4273  06B8  0498               	iorwf	24,f	;volatile
  4274                           
  4275                           ;user.c: 64: T2CONbits.T2CKPS = 3;
  4276  06B9  3003               	movlw	3
  4277  06BA  049C               	iorwf	28,f	;volatile
  4278                           
  4279                           ;user.c: 65: T2CONbits.T2OUTPS = 15;
  4280  06BB  3078               	movlw	120
  4281  06BC  049C               	iorwf	28,f	;volatile
  4282                           
  4283                           ;user.c: 66: T2CONbits.TMR2ON = 1;
  4284  06BD  151C               	bsf	28,2	;volatile
  4285                           
  4286                           ;user.c: 68: ADCON0bits.CHS = 3;
  4287  06BE  0021               	movlb	1	; select bank1
  4288  06BF  081D               	movf	29,w	;volatile
  4289  06C0  3983               	andlw	-125
  4290  06C1  380C               	iorlw	12
  4291  06C2  009D               	movwf	29	;volatile
  4292                           
  4293                           ;user.c: 69: ADCON0bits.ADON = 1;
  4294  06C3  141D               	bsf	29,0	;volatile
  4295                           
  4296                           ;user.c: 70: delay_1_ms();
  4297  06C4  2790               	fcall	_delay_1_ms
  4298  06C5  0008               	return
  4299  06C6                     __end_of_Setup:	
  4300                           
  4301                           	psect	text21
  4302  0790                     __ptext21:	
  4303 ;; *************** function _delay_1_ms *****************
  4304 ;; Defined at:
  4305 ;;		line 391 in file "user.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  i               2    1[COMMON] unsigned int 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;		None               void
  4312 ;; Registers used:
  4313 ;;		wreg, status,2
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4319 ;;      Params:         0       0       0       0
  4320 ;;      Locals:         2       0       0       0
  4321 ;;      Temps:          0       0       0       0
  4322 ;;      Totals:         2       0       0       0
  4323 ;;Total ram usage:        2 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    1
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_Setup
  4330 ;;		_Send_Byte
  4331 ;;		_cheat
  4332 ;;		_super_dead_mode
  4333 ;;		_hit_by
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           
  4338                           ;psect for function _delay_1_ms
  4339  0790                     _delay_1_ms:	
  4340                           
  4341                           ;user.c: 392: for (uint16_t i=0; i<4000/14; i++){
  4342                           
  4343                           ;incstack = 0
  4344                           ; Regs used in _delay_1_ms: [wreg+status,2]
  4345  0790  01F1               	clrf	delay_1_ms@i
  4346  0791  01F2               	clrf	delay_1_ms@i+1
  4347  0792                     L4:	
  4348  0792  3001               	movlw	1
  4349  0793  0272               	subwf	delay_1_ms@i+1,w
  4350  0794  301D               	movlw	29
  4351  0795  1903               	skipnz
  4352  0796  0271               	subwf	delay_1_ms@i,w
  4353  0797  1803               	btfsc	3,0
  4354  0798  0008               	return
  4355                           
  4356                           ;user.c: 393: _nop();
  4357  0799  0000               	nop
  4358  079A  3001               	movlw	1
  4359  079B  07F1               	addwf	delay_1_ms@i,f
  4360  079C  3000               	movlw	0
  4361  079D  3DF2               	addwfc	delay_1_ms@i+1,f
  4362  079E  2F92               	goto	L4
  4363  079F                     __end_of_delay_1_ms:	
  4364                           
  4365                           	psect	text22
  4366  0546                     __ptext22:	
  4367 ;; *************** function _LoadFromFlash *****************
  4368 ;; Defined at:
  4369 ;;		line 29 in file "main.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;		None
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;		None               void
  4376 ;; Registers used:
  4377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4383 ;;      Params:         0       0       0       0
  4384 ;;      Locals:         0       0       0       0
  4385 ;;      Temps:          2       0       0       0
  4386 ;;      Totals:         2       0       0       0
  4387 ;;Total ram usage:        2 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    2
  4390 ;; This function calls:
  4391 ;;		_Load
  4392 ;;		_Save
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _LoadFromFlash
  4400  0546                     _LoadFromFlash:	
  4401                           
  4402                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4406  0546  30F0               	movlw	240
  4407  0547  00F1               	movwf	?_Load
  4408  0548  3007               	movlw	7
  4409  0549  00F2               	movwf	?_Load+1
  4410  054A  30C0               	movlw	_config& (0+255)
  4411  054B  00F7               	movwf	??_LoadFromFlash
  4412  054C  0877               	movf	??_LoadFromFlash,w
  4413  054D  00F3               	movwf	?_Load+2
  4414  054E  3009               	movlw	9
  4415  054F  00F8               	movwf	??_LoadFromFlash+1
  4416  0550  0878               	movf	??_LoadFromFlash+1,w
  4417  0551  00F4               	movwf	?_Load+3
  4418  0552  26C6               	fcall	_Load
  4419                           
  4420                           ;main.c: 31: if(config.id == 0x3FFF)
  4421  0553  303F               	movlw	63
  4422  0554  0021               	movlb	1	; select bank1
  4423  0555  0641               	xorwf	(_config+1)^(0+128),w
  4424  0556  1D03               	skipz
  4425  0557  2D5A               	goto	u1515
  4426  0558  30FF               	movlw	255
  4427  0559  0640               	xorwf	_config^(0+128),w
  4428  055A                     u1515:	
  4429  055A  1D03               	skipz
  4430  055B  2D8C               	goto	l1695
  4431                           
  4432                           ;main.c: 32: {
  4433                           ;main.c: 33: config.health = 1;
  4434  055C  3001               	movlw	1
  4435  055D  00C4               	movwf	(_config^(0+128)+4)
  4436  055E  3000               	movlw	0
  4437  055F  00C5               	movwf	(_config^(0+128)+5)
  4438                           
  4439                           ;main.c: 34: config.id = 0x80;
  4440  0560  3080               	movlw	128
  4441  0561  00C0               	movwf	_config^(0+128)
  4442  0562  3000               	movlw	0
  4443  0563  00C1               	movwf	(_config^(0+128)+1)
  4444                           
  4445                           ;main.c: 35: config.power = 0;
  4446  0564  01C2               	clrf	(_config^(0+128)+2)
  4447  0565  01C3               	clrf	((_config+1)^(0+128)+2)
  4448                           
  4449                           ;main.c: 37: config.fire_threshold = 500;
  4450  0566  30F4               	movlw	244
  4451  0567  00CA               	movwf	(_config^(0+128)+10)
  4452  0568  3001               	movlw	1
  4453  0569  00CB               	movwf	(_config^(0+128)+11)
  4454                           
  4455                           ;main.c: 38: config.fire_holdoff = 4000;
  4456  056A  30A0               	movlw	160
  4457  056B  00CE               	movwf	(_config^(0+128)+14)
  4458  056C  300F               	movlw	15
  4459  056D  00CF               	movwf	(_config^(0+128)+15)
  4460                           
  4461                           ;main.c: 40: config.fire_cheating = 1000;
  4462  056E  30E8               	movlw	232
  4463  056F  00CC               	movwf	(_config^(0+128)+12)
  4464  0570  3003               	movlw	3
  4465  0571  00CD               	movwf	(_config^(0+128)+13)
  4466                           
  4467                           ;main.c: 42: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4468  0572  30F0               	movlw	240
  4469  0573  00F1               	movwf	?_Save
  4470  0574  3007               	movlw	7
  4471  0575  00F2               	movwf	?_Save+1
  4472  0576  30C0               	movlw	_config& (0+255)
  4473  0577  00F7               	movwf	??_LoadFromFlash
  4474  0578  0877               	movf	??_LoadFromFlash,w
  4475  0579  00F3               	movwf	?_Save+2
  4476  057A  3009               	movlw	9
  4477  057B  00F8               	movwf	??_LoadFromFlash+1
  4478  057C  0878               	movf	??_LoadFromFlash+1,w
  4479  057D  00F4               	movwf	?_Save+3
  4480  057E  25ED               	fcall	_Save
  4481                           
  4482                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4483  057F  30E0               	movlw	224
  4484  0580  00F1               	movwf	?_Save
  4485  0581  3007               	movlw	7
  4486  0582  00F2               	movwf	?_Save+1
  4487  0583  30A0               	movlw	_hitlist& (0+255)
  4488  0584  00F7               	movwf	??_LoadFromFlash
  4489  0585  0877               	movf	??_LoadFromFlash,w
  4490  0586  00F3               	movwf	?_Save+2
  4491  0587  3010               	movlw	16
  4492  0588  00F8               	movwf	??_LoadFromFlash+1
  4493  0589  0878               	movf	??_LoadFromFlash+1,w
  4494  058A  00F4               	movwf	?_Save+3
  4495  058B  25ED               	fcall	_Save
  4496  058C                     l1695:	
  4497                           
  4498                           ;main.c: 44: }
  4499                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4500  058C  30E0               	movlw	224
  4501  058D  00F1               	movwf	?_Load
  4502  058E  3007               	movlw	7
  4503  058F  00F2               	movwf	?_Load+1
  4504  0590  30A0               	movlw	_hitlist& (0+255)
  4505  0591  00F7               	movwf	??_LoadFromFlash
  4506  0592  0877               	movf	??_LoadFromFlash,w
  4507  0593  00F3               	movwf	?_Load+2
  4508  0594  3010               	movlw	16
  4509  0595  00F8               	movwf	??_LoadFromFlash+1
  4510  0596  0878               	movf	??_LoadFromFlash+1,w
  4511  0597  00F4               	movwf	?_Load+3
  4512  0598  26C6               	fcall	_Load
  4513  0599  0008               	return
  4514  059A                     __end_of_LoadFromFlash:	
  4515                           
  4516                           	psect	text23
  4517  05ED                     __ptext23:	
  4518 ;; *************** function _Save *****************
  4519 ;; Defined at:
  4520 ;;		line 198 in file "user.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  address         2    1[COMMON] unsigned int 
  4523 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4524 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4525 ;;  data_length     1    4[COMMON] unsigned char 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  i               1    6[COMMON] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;		None               void
  4530 ;; Registers used:
  4531 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4537 ;;      Params:         4       0       0       0
  4538 ;;      Locals:         1       0       0       0
  4539 ;;      Temps:          1       0       0       0
  4540 ;;      Totals:         6       0       0       0
  4541 ;;Total ram usage:        6 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    1
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_LoadFromFlash
  4548 ;;		_hit_by
  4549 ;;		_control_transfer
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           
  4554                           ;psect for function _Save
  4555  05ED                     _Save:	
  4556                           
  4557                           ;user.c: 200: INTCONbits.GIE = 0;
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4561  05ED  138B               	bcf	11,7	;volatile
  4562                           
  4563                           ;user.c: 201: PMADR = address;
  4564  05EE  0872               	movf	Save@address+1,w
  4565  05EF  0023               	movlb	3	; select bank3
  4566  05F0  0192               	clrf	18	;volatile
  4567  05F1  0792               	addwf	18,f	;volatile
  4568  05F2  0871               	movf	Save@address,w
  4569  05F3  0191               	clrf	17	;volatile
  4570  05F4  0791               	addwf	17,f	;volatile
  4571                           
  4572                           ;user.c: 202: PMCON1bits.CFGS = 0;
  4573  05F5  1315               	bcf	21,6	;volatile
  4574                           
  4575                           ;user.c: 203: PMCON1bits.FREE = 1;
  4576  05F6  1615               	bsf	21,4	;volatile
  4577                           
  4578                           ;user.c: 204: PMCON1bits.WREN = 1;
  4579  05F7  1515               	bsf	21,2	;volatile
  4580                           
  4581                           ;user.c: 205: PMCON2 = 0x55;
  4582  05F8  3055               	movlw	85
  4583  05F9  0096               	movwf	22	;volatile
  4584                           
  4585                           ;user.c: 206: PMCON2 = 0xAA;
  4586  05FA  30AA               	movlw	170
  4587  05FB  0096               	movwf	22	;volatile
  4588                           
  4589                           ;user.c: 207: PMCON1bits.WR = 1;
  4590  05FC  1495               	bsf	21,1	;volatile
  4591                           
  4592                           ;user.c: 208: _nop();
  4593  05FD  0000               	nop
  4594                           
  4595                           ;user.c: 209: _nop();
  4596  05FE  0000               	nop
  4597                           
  4598                           ;user.c: 210: PMCON1bits.WREN = 0;
  4599  05FF  0023               	movlb	3	; select bank3
  4600  0600  1115               	bcf	21,2	;volatile
  4601                           
  4602                           ;user.c: 212: PMADR = address;
  4603  0601  0872               	movf	Save@address+1,w
  4604  0602  0192               	clrf	18	;volatile
  4605  0603  0792               	addwf	18,f	;volatile
  4606  0604  0871               	movf	Save@address,w
  4607  0605  0191               	clrf	17	;volatile
  4608  0606  0791               	addwf	17,f	;volatile
  4609                           
  4610                           ;user.c: 213: PMCON1bits.CFGS = 0;
  4611  0607  1315               	bcf	21,6	;volatile
  4612                           
  4613                           ;user.c: 214: PMCON1bits.FREE = 0;
  4614  0608  1215               	bcf	21,4	;volatile
  4615                           
  4616                           ;user.c: 215: PMCON1bits.WREN = 1;
  4617  0609  1515               	bsf	21,2	;volatile
  4618                           
  4619                           ;user.c: 216: PMCON1bits.LWLO = 1;
  4620  060A  1695               	bsf	21,5	;volatile
  4621                           
  4622                           ;user.c: 218: for (uint8_t i=1; i<=data_length; i++){
  4623  060B  01F6               	clrf	Save@i
  4624  060C  0AF6               	incf	Save@i,f
  4625  060D                     l178:	
  4626  060D  0876               	movf	Save@i,w
  4627  060E  0274               	subwf	Save@data_length,w
  4628  060F  1C03               	btfss	3,0
  4629  0610  2E31               	goto	l181
  4630                           
  4631                           ;user.c: 219: PMDAT = *ptr++;
  4632  0611  0873               	movf	Save@ptr,w
  4633  0612  0086               	movwf	6
  4634  0613  0187               	clrf	7
  4635  0614  3F40               	moviw [0]fsr1
  4636  0615  0093               	movwf	19	;volatile
  4637  0616  3F41               	moviw [1]fsr1
  4638  0617  0094               	movwf	20	;volatile
  4639  0618  3002               	movlw	2
  4640  0619  00F5               	movwf	??_Save
  4641  061A  0875               	movf	??_Save,w
  4642  061B  07F3               	addwf	Save@ptr,f
  4643                           
  4644                           ;user.c: 220: if(i == data_length) PMCON1bits.LWLO = 0;
  4645  061C  0876               	movf	Save@i,w
  4646  061D  0674               	xorwf	Save@data_length,w
  4647  061E  1903               	btfsc	3,2
  4648  061F  1295               	bcf	21,5	;volatile
  4649                           
  4650                           ;user.c: 221: PMCON2 = 0x55;
  4651  0620  3055               	movlw	85
  4652  0621  0096               	movwf	22	;volatile
  4653                           
  4654                           ;user.c: 222: PMCON2 = 0xAA;
  4655  0622  30AA               	movlw	170
  4656  0623  0096               	movwf	22	;volatile
  4657                           
  4658                           ;user.c: 223: PMCON1bits.WR = 1;
  4659  0624  1495               	bsf	21,1	;volatile
  4660                           
  4661                           ;user.c: 224: _nop();
  4662  0625  0000               	nop
  4663                           
  4664                           ;user.c: 225: _nop();
  4665  0626  0000               	nop
  4666                           
  4667                           ;user.c: 226: PMADRL++;
  4668  0627  3001               	movlw	1
  4669  0628  00F5               	movwf	??_Save
  4670  0629  0875               	movf	??_Save,w
  4671  062A  0023               	movlb	3	; select bank3
  4672  062B  0791               	addwf	17,f	;volatile
  4673  062C  3001               	movlw	1
  4674  062D  00F5               	movwf	??_Save
  4675  062E  0875               	movf	??_Save,w
  4676  062F  07F6               	addwf	Save@i,f
  4677  0630  2E0D               	goto	l178
  4678  0631                     l181:	
  4679                           
  4680                           ;user.c: 227: }
  4681                           ;user.c: 228: PMCON1bits.WREN = 0;
  4682  0631  1115               	bcf	21,2	;volatile
  4683                           
  4684                           ;user.c: 229: INTCONbits.GIE = 1;
  4685  0632  178B               	bsf	11,7	;volatile
  4686  0633  0008               	return
  4687  0634                     __end_of_Save:	
  4688                           
  4689                           	psect	text24
  4690  06C6                     __ptext24:	
  4691 ;; *************** function _Load *****************
  4692 ;; Defined at:
  4693 ;;		line 186 in file "user.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  address         2    1[COMMON] unsigned int 
  4696 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4697 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4698 ;;  data_length     1    4[COMMON] unsigned char 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  i               1    6[COMMON] unsigned char 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;		None               void
  4703 ;; Registers used:
  4704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4710 ;;      Params:         4       0       0       0
  4711 ;;      Locals:         1       0       0       0
  4712 ;;      Temps:          1       0       0       0
  4713 ;;      Totals:         6       0       0       0
  4714 ;;Total ram usage:        6 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    1
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_LoadFromFlash
  4721 ;;		_control_transfer
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           
  4726                           ;psect for function _Load
  4727  06C6                     _Load:	
  4728                           
  4729                           ;user.c: 187: PMCON1bits.CFGS = 0;
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4733  06C6  0023               	movlb	3	; select bank3
  4734  06C7  1315               	bcf	21,6	;volatile
  4735                           
  4736                           ;user.c: 188: PMADR = address;
  4737  06C8  0872               	movf	Load@address+1,w
  4738  06C9  0192               	clrf	18	;volatile
  4739  06CA  0792               	addwf	18,f	;volatile
  4740  06CB  0871               	movf	Load@address,w
  4741  06CC  0191               	clrf	17	;volatile
  4742  06CD  0791               	addwf	17,f	;volatile
  4743                           
  4744                           ;user.c: 189: for (uint8_t i=0; i<data_length; i++){
  4745  06CE  01F6               	clrf	Load@i
  4746  06CF                     l1711:	
  4747  06CF  0874               	movf	Load@data_length,w
  4748  06D0  0276               	subwf	Load@i,w
  4749  06D1  1803               	btfsc	3,0
  4750  06D2  0008               	return
  4751                           
  4752                           ;user.c: 190: PMCON1bits.RD = 1;
  4753  06D3  1415               	bsf	21,0	;volatile
  4754                           
  4755                           ;user.c: 191: _nop();
  4756  06D4  0000               	nop
  4757                           
  4758                           ;user.c: 192: _nop();
  4759  06D5  0000               	nop
  4760                           
  4761                           ;user.c: 193: *ptr++ = PMDAT;
  4762  06D6  0873               	movf	Load@ptr,w
  4763  06D7  0086               	movwf	6
  4764  06D8  0187               	clrf	7
  4765  06D9  0023               	movlb	3	; select bank3
  4766  06DA  0813               	movf	19,w	;volatile
  4767  06DB  3FC0               	movwi [0]fsr1
  4768  06DC  0814               	movf	20,w	;volatile
  4769  06DD  3FC1               	movwi [1]fsr1
  4770  06DE  3002               	movlw	2
  4771  06DF  00F5               	movwf	??_Load
  4772  06E0  0875               	movf	??_Load,w
  4773  06E1  07F3               	addwf	Load@ptr,f
  4774                           
  4775                           ;user.c: 194: PMADR ++;
  4776  06E2  3001               	movlw	1
  4777  06E3  0791               	addwf	17,f	;volatile
  4778  06E4  3000               	movlw	0
  4779  06E5  3D92               	addwfc	18,f	;volatile
  4780  06E6  3001               	movlw	1
  4781  06E7  00F5               	movwf	??_Load
  4782  06E8  0875               	movf	??_Load,w
  4783  06E9  07F6               	addwf	Load@i,f
  4784  06EA  2ECF               	goto	l1711
  4785  06EB                     __end_of_Load:	
  4786                           
  4787                           	psect	intentry
  4788  0004                     __pintentry:	
  4789 ;; *************** function _High_Priority_Interrupt *****************
  4790 ;; Defined at:
  4791 ;;		line 295 in file "user.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;		None
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;		None
  4796 ;; Return value:  Size  Location     Type
  4797 ;;		None               void
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4805 ;;      Params:         0       0       0       0
  4806 ;;      Locals:         0       0       0       0
  4807 ;;      Temps:          1       0       0       0
  4808 ;;      Totals:         1       0       0       0
  4809 ;;Total ram usage:        1 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		Interrupt level 1
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818  0004                     _High_Priority_Interrupt:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4822  0004  3180               	pagesel	$
  4823  0005  0020               	movlb	0	; select bank0
  4824  0006  087F               	movf	127,w
  4825  0007  00F0               	movwf	??_High_Priority_Interrupt
  4826  0008  0022               	banksel	280	;# 
  4827  0009  0818               	movf	24,w	;# 
  4828  000A  3A20               	xorlw	32	;# 
  4829  000B  0098               	movwf	24	;# 
  4830                           
  4831                           ;user.c: 301: TMR0 -= 50;
  4832  000C  3032               	movlw	50
  4833  000D  0020               	movlb	0	; select bank0
  4834  000E  0295               	subwf	21,f	;volatile
  4835                           
  4836                           ;user.c: 302: INTCONbits.TMR0IF = 0;
  4837  000F  110B               	bcf	11,2	;volatile
  4838  0010  0870               	movf	??_High_Priority_Interrupt,w
  4839  0011  00FF               	movwf	127
  4840  0012  0009               	retfie
  4841  0013                     __end_of_High_Priority_Interrupt:	
  4842  007E                     btemp	set	126	;btemp
  4843  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      77
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    ?_ADC_read	unsigned int  size(1) Largest target is 0

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(1) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(1) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _handle_fire->_Send_Byte
    _super_dead_mode->_Send_Byte
    _SEND_EOF->_Send_Byte
    _SEND_SOF->_Send_Byte
    _SEND_DATA_BYTE->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _handle_music->_tone
    _Setup->_delay_1_ms
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15926
                      _LoadFromFlash
                              _Setup
                    _super_dead_mode
                      _handle_serial
                        _handle_fire
                       _handle_music
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0     917
                                              0 BANK0      4     4      0
                           _ADC_read
                       _green_led_on
                          _play_song
                          _stop_song
                          _Send_Byte
                              _cheat
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0    9824
                                             57 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0    5618
                                             50 BANK0      7     7      0
                               _Save
                    _super_dead_mode
                       _handle_music
                         _delay_1_ms
                         _red_led_on
                          _play_song
                     _add_to_hitlist
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (3) _super_dead_mode                                      5     5      0    4807
                                             45 BANK0      5     5      0
                       _handle_music
                         _delay_1_ms
                         _red_led_on
                          _play_song
                          _Send_Byte
                   _control_transfer
 ---------------------------------------------------------------------------------
 (4) _control_transfer                                    42    42      0    4017
                                              3 BANK0     42    42      0
                               _Load
                               _Save
                          _play_song
                    _GET_CHAR_HELPER
                     _SEND_DATA_BYTE
                           _SEND_SOF
                           _SEND_EOF
 ---------------------------------------------------------------------------------
 (5) _SEND_EOF                                             0     0      0    1027
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (5) _SEND_SOF                                             0     0      0    1027
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (6) _SEND_DATA_BYTE                                       3     3      0     560
                                              0 BANK0      3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _Send_Byte                                            4     4      0     467
                                              8 COMMON     4     4      0
                         _delay_1_ms
                              _cheat
 ---------------------------------------------------------------------------------
 (2) _cheat                                                3     3      0     266
                                              5 COMMON     3     3      0
                         _delay_1_ms
                         _red_led_on
                               _tone
 ---------------------------------------------------------------------------------
 (3) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _GET_CHAR_HELPER                                      2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            7     3      4      88
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _handle_music                                         2     2      0      62
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _tone                                                 4     2      2      62
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      68
                                              3 COMMON     1     1      0
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (3) _delay_1_ms                                           2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0     248
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (5) _Save                                                 6     2      4     157
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) _Load                                                 6     2      4      91
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
     _delay_1_ms
   _super_dead_mode
     _handle_music
       _stop_song
       _tone
     _delay_1_ms
     _red_led_on
     _play_song
     _Send_Byte
       _delay_1_ms
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
     _control_transfer
       _Load
       _Save
       _play_song
       _GET_CHAR_HELPER
       _SEND_DATA_BYTE
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
       _SEND_SOF
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
         _SEND_DATA_BYTE
           _Send_Byte
             _delay_1_ms
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
       _SEND_EOF
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
         _SEND_DATA_BYTE
           _Send_Byte
             _delay_1_ms
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
   _handle_serial
     _control_transfer
       _Load
       _Save
       _play_song
       _GET_CHAR_HELPER
       _SEND_DATA_BYTE
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
       _SEND_SOF
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
         _SEND_DATA_BYTE
           _Send_Byte
             _delay_1_ms
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
       _SEND_EOF
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
         _SEND_DATA_BYTE
           _Send_Byte
             _delay_1_ms
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
     _hit_by
       _Save
       _super_dead_mode
         _handle_music
           _stop_song
           _tone
         _delay_1_ms
         _red_led_on
         _play_song
         _Send_Byte
           _delay_1_ms
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
         _control_transfer
           _Load
           _Save
           _play_song
           _GET_CHAR_HELPER
           _SEND_DATA_BYTE
             _Send_Byte
               _delay_1_ms
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
           _SEND_SOF
             _Send_Byte
               _delay_1_ms
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
             _SEND_DATA_BYTE
               _Send_Byte
                 _delay_1_ms
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
           _SEND_EOF
             _Send_Byte
               _delay_1_ms
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
             _SEND_DATA_BYTE
               _Send_Byte
                 _delay_1_ms
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
       _handle_music
         _stop_song
         _tone
       _delay_1_ms
       _red_led_on
       _play_song
       _add_to_hitlist
   _handle_fire
     _ADC_read
     _green_led_on
     _play_song
     _stop_song
     _Send_Byte
       _delay_1_ms
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
     _cheat
       _delay_1_ms
       _red_led_on
       _tone
   _handle_music
     _stop_song
     _tone

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       9       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      95      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Aug 24 18:56:11 2014

                     __CFG_CP$OFF 0000                                l26 07A7                                __i 005C  
                              __x 007C                                __y 006C                     _LoadFromFlash 0546  
                             l200 03BF                               l201 036B                               l131 0780  
                             l206 03BD                               l160 065A                               l163 0663  
                             l181 0631                               l159 0645                               l407 033F  
                             l185 070E                               l178 060D                               l187 0722  
                             l287 0733                      __CFG_BORV$LO 0000                               wreg 0009  
                 _super_dead_mode 04F2                      __CFG_LVP$OFF 0000                       Load@address 0071  
                            l3025 01EC                              l3017 01DA                              l2081 04ED  
                            l3123 02D9                              l3027 01EE                              l2075 04C8  
                            l3203 0437                              l3125 02E7                              l3117 02BB  
                            l1711 06CF                              l3127 02EC                              l3119 02CA  
                            l3217 0414                              l3067 0245                              l3157 032C  
                            l2621 0532                              l2607 050D                              l3191 0423  
                            l2801 0719                              l3257 02DF                              l3089 027B  
                            l2625 04F5                              l2723 067A                              l3179 040A  
                            l2707 03CB                              l2637 05AA                              l1695 058C  
                            l2727 067C                              l3199 042E                              l2499 0742  
                            l2691 0397                              l2683 0373                              l2675 0354  
                            l2773 064F                              l2853 0071                              l2687 0384  
                            l2945 0140                              l2881 00A8                              l2697 03B4  
                            u3105 05BC                              u1515 055A                              u3045 051D  
                            u4015 0204                              u3055 0542                              u3215 0395  
                            u3145 05E0                              u3155 0351                              u4125 025B  
                            u3165 035E                              u3175 0369                              u4065 022B  
                            u3435 003B                              u3195 037D                              u1855 0787  
                            u4265 0302                              u4185 0291                              u3625 00BE  
                            u3545 0087                              u3725 0104                              u4375 0757  
                            u3815 0156                              u3495 0063                              u1985 04DF  
                            u3915 01A4                              u3675 00E1                              u3865 017D  
            control_transfer@data 0025                              _TMR0 0015                              _TMR1 0016  
                            _TMR2 001A              control_transfer@page 004A              control_transfer@dptr 0048  
                            _Load 06C6                      __CFG_WRT$OFF 0000                              _Save 05ED  
                            _main 079F                     Send_Byte@data 0079                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 0767                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              start 0013  
                __end_of_ADC_read 0790                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0055                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 000F                             ?_tone 0071  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 07BF                  __end_of_SEND_SOF 07B3                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_704 0058  
                           _Setup 069C                             _cheat 070E                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             status 0003                             wtemp0 007E  
        __end_of_control_transfer 0340                        Send_Byte@i 007A                   __initialization 0014  
                    __end_of_Load 06EB                      __end_of_Save 0634                      __end_of_main 07AB  
                    __end_of_tone 077E                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 0546                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 069C                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071                            ?_cheat 0070  
            __size_of_handle_fire 0091                            _ADCON1 009E                            _ANSELA 018C  
                          _PMADRL 0191                            _PMCON2 0196                            _OSCCON 0099  
                          _PWM3DC 0DB3                            _PWM3PH 0DB1                            _SPBRGL 019B  
                          _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077  
              __size_of_Send_Byte 003A                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0020  
                          _config 00C0                            _hit_by 03D1                            cheat@i 0076  
                 play_song@length 0071                            _one_up 048C                   play_song@repeat 0074  
                     Save@address 0071                  _my_random_number 0069                         ?_ADC_read 0071  
         __end_of__initialization 0021           handle_serial@rx_counter 006A                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 06C6  
                   __end_of_cheat 072F           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004F                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0073                           ??_cheat 0075                   _GET_CHAR_HELPER 072F  
               __end_of_Send_Byte 066E           __size_of_add_to_hitlist 0054                        __pbssBANK0 005C  
                      __pbssBANK1 00A0             __end_of_handle_serial 05ED                        _death_song 0446  
                      _delay_1_ms 0790                        ??_SEND_EOF 007C                        ??_SEND_SOF 007C  
                      __pmaintext 079F              __end_of_green_led_on 07CA                 _cur_song_duration 005E  
                      __pintentry 0004             __size_of_handle_music 002E                           ?_hit_by 0070  
              __size_of_play_song 0023                 __end_of_dead_song 049E                        __stringtab 0445  
                         Load@ptr 0073                __size_of_stop_song 0006                           Save@ptr 0073  
                      cheat@i_686 0077                      _handle_music 066E                 ?_control_transfer 0070  
              ??_control_transfer 0023                   SEND_DATA_BYTE@b 0022         ??_High_Priority_Interrupt 0070  
               __end_of_fire_song 048C                   __size_of_hit_by 0074                           __ptext1 0340  
                         __ptext2 07C5                           __ptext3 077E                           __ptext4 059A  
                         __ptext5 03D1                           __ptext6 049E                           __ptext7 04F2  
                         __ptext8 0023                           __ptext9 07B9                        _red_led_on 07CA  
                       _T1CONbits 0018           __end_of_GET_CHAR_HELPER 074D                           _hitlist 00A0  
                       _T2CONbits 001C                           clrloop0 07B4                 add_to_hitlist@gun 0075  
            end_of_initialization 0021                           hit_by@i 0057                 __end_of_play_song 070E  
                     ?_delay_1_ms 0070                         _RCSTAbits 019D                         _PORTAbits 000C  
               __end_of_stop_song 07C5                     ??_handle_fire 0020                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 049E  
               __size_of_ADC_read 0012                         _TXSTAbits 019E               control_transfer@cmd 0045  
           __size_of_green_led_on 0005                handle_fire@counter 0060                 __size_of_SEND_EOF 0006  
               __size_of_SEND_SOF 0008             __end_of_LoadFromFlash 059A                       _BAUDCONbits 019F  
                  __end_of_hit_by 0445                GET_CHAR_HELPER@val 0072                     play_song@song 0077  
                  __end_of_one_up 0498                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             __size_of_delay_1_ms 000F               start_initialization 0014            __end_of_add_to_hitlist 04F2  
                    _green_led_on 07C5               __end_of_handle_fire 03D1                         _Send_Byte 0634  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0067  
                        ??_hit_by 0052                       __pbssCOMMON 007C                     __pcstackBANK0 0020  
                 ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 001A                         __checksum 0064  
                handle_fire@timer 0062          __size_of_super_dead_mode 0054                   Save@data_length 0074  
                       _dead_song 0498                        ?_Send_Byte 0070               __size_of_red_led_on 0005  
                       __pstrings 0445                    handle_serial@b 005B                         _fire_song 046C  
          __size_of_handle_serial 0053         __size_of_control_transfer 031D                       _handle_fire 0340  
                        _ADC_read 077E                    __size_of_Setup 002A                    __size_of_cheat 0021  
                    ??_delay_1_ms 0071                         clear_ram0 07B3                   Load@data_length 0074  
                       _play_song 06EB                          _PIR1bits 0011                          _SEND_EOF 07B9  
                        _SEND_SOF 07AB                        _ADCON0bits 009D                __end_of_death_song 046C  
              control_transfer@id 0047                __end_of_delay_1_ms 079F                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 07BF                         hit_by@who 0054  
          super_dead_mode@counter 0050                       ??_Send_Byte 0078                     _handle_serial 059A  
               ??_super_dead_mode 004D          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
              __end_of__stringtab 0446                      ??_red_led_on 0071                        _ANSELAbits 018C  
                  _SEND_DATA_BYTE 074D                        ?_stop_song 0070                   _cur_song_length 0066  
   control_transfer@random_number 0046                          __ptext10 07AB                          __ptext11 074D  
                        __ptext20 069C                          __ptext12 0634                          __ptext21 0790  
                        __ptext13 070E                          __ptext22 0546                          __ptext14 07CA  
                        __ptext23 05ED                          __ptext15 072F                          __ptext24 06C6  
                        __ptext16 06EB                          __ptext17 066E                          __ptext18 0767  
                        __ptext19 07BF                   _cur_song_repeat 0068                     __size_of_Load 0025  
                  ?_handle_serial 0070                          _cur_song 0065                     __size_of_Save 0047  
                   __size_of_main 000C                       delay_1_ms@i 0071                     __size_of_tone 0017  
              __end_of_red_led_on 07CF                 control_transfer@i 0049                 control_transfer@x 004C  
          play_song@note_duration 0072                  ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 0767  
                _control_transfer 0023                        _INTCONbits 000B                       _PWM3CONbits 0DBB  
                        intlevel1 0000          __size_of_GET_CHAR_HELPER 001E   __end_of_High_Priority_Interrupt 0013  
                    handle_fire@a 0022            __size_of_LoadFromFlash 0054                        _PMCON1bits 0195  
               __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070                       ??_play_song 0075  
                 ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070                       ??_stop_song 0071  
                 ??_handle_serial 0059                handle_serial@rx_id 006B                    ??_handle_music 0075  
