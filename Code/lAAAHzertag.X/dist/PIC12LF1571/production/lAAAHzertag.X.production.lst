

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Aug 18 03:02:10 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	intentry,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0008                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001B                     	;# 
    59  001C                     	;# 
    60  008C                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0095                     	;# 
    65  0096                     	;# 
    66  0097                     	;# 
    67  0098                     	;# 
    68  0099                     	;# 
    69  009A                     	;# 
    70  009B                     	;# 
    71  009B                     	;# 
    72  009C                     	;# 
    73  009D                     	;# 
    74  009E                     	;# 
    75  009F                     	;# 
    76  010C                     	;# 
    77  0111                     	;# 
    78  0112                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  011D                     	;# 
    85  011D                     	;# 
    86  018C                     	;# 
    87  0191                     	;# 
    88  0191                     	;# 
    89  0192                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0197                     	;# 
    96  0199                     	;# 
    97  019A                     	;# 
    98  019B                     	;# 
    99  019B                     	;# 
   100  019C                     	;# 
   101  019D                     	;# 
   102  019E                     	;# 
   103  019F                     	;# 
   104  020C                     	;# 
   105  028C                     	;# 
   106  030C                     	;# 
   107  038C                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0691                     	;# 
   112  0692                     	;# 
   113  0693                     	;# 
   114  0694                     	;# 
   115  0695                     	;# 
   116  0D8E                     	;# 
   117  0D8F                     	;# 
   118  0D90                     	;# 
   119  0D91                     	;# 
   120  0D91                     	;# 
   121  0D92                     	;# 
   122  0D93                     	;# 
   123  0D93                     	;# 
   124  0D94                     	;# 
   125  0D95                     	;# 
   126  0D95                     	;# 
   127  0D96                     	;# 
   128  0D97                     	;# 
   129  0D97                     	;# 
   130  0D98                     	;# 
   131  0D99                     	;# 
   132  0D99                     	;# 
   133  0D9A                     	;# 
   134  0D9B                     	;# 
   135  0D9C                     	;# 
   136  0D9C                     	;# 
   137  0D9D                     	;# 
   138  0D9D                     	;# 
   139  0D9E                     	;# 
   140  0D9F                     	;# 
   141  0DA0                     	;# 
   142  0DA1                     	;# 
   143  0DA1                     	;# 
   144  0DA2                     	;# 
   145  0DA3                     	;# 
   146  0DA3                     	;# 
   147  0DA4                     	;# 
   148  0DA5                     	;# 
   149  0DA5                     	;# 
   150  0DA6                     	;# 
   151  0DA7                     	;# 
   152  0DA7                     	;# 
   153  0DA8                     	;# 
   154  0DA9                     	;# 
   155  0DA9                     	;# 
   156  0DAA                     	;# 
   157  0DAB                     	;# 
   158  0DAC                     	;# 
   159  0DAC                     	;# 
   160  0DAD                     	;# 
   161  0DAD                     	;# 
   162  0DAE                     	;# 
   163  0DAF                     	;# 
   164  0DB0                     	;# 
   165  0DB1                     	;# 
   166  0DB1                     	;# 
   167  0DB2                     	;# 
   168  0DB3                     	;# 
   169  0DB3                     	;# 
   170  0DB4                     	;# 
   171  0DB5                     	;# 
   172  0DB5                     	;# 
   173  0DB6                     	;# 
   174  0DB7                     	;# 
   175  0DB7                     	;# 
   176  0DB8                     	;# 
   177  0DB9                     	;# 
   178  0DB9                     	;# 
   179  0DBA                     	;# 
   180  0DBB                     	;# 
   181  0DBC                     	;# 
   182  0DBC                     	;# 
   183  0DBD                     	;# 
   184  0DBD                     	;# 
   185  0DBE                     	;# 
   186  0DBF                     	;# 
   187  0DC0                     	;# 
   188  0FE4                     	;# 
   189  0FE5                     	;# 
   190  0FE6                     	;# 
   191  0FE7                     	;# 
   192  0FE8                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  008C                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009A                     	;# 
   237  009B                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  010C                     	;# 
   244  0111                     	;# 
   245  0112                     	;# 
   246  0115                     	;# 
   247  0116                     	;# 
   248  0117                     	;# 
   249  0118                     	;# 
   250  0119                     	;# 
   251  011D                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  0199                     	;# 
   264  019A                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019C                     	;# 
   268  019D                     	;# 
   269  019E                     	;# 
   270  019F                     	;# 
   271  020C                     	;# 
   272  028C                     	;# 
   273  030C                     	;# 
   274  038C                     	;# 
   275  0391                     	;# 
   276  0392                     	;# 
   277  0393                     	;# 
   278  0691                     	;# 
   279  0692                     	;# 
   280  0693                     	;# 
   281  0694                     	;# 
   282  0695                     	;# 
   283  0D8E                     	;# 
   284  0D8F                     	;# 
   285  0D90                     	;# 
   286  0D91                     	;# 
   287  0D91                     	;# 
   288  0D92                     	;# 
   289  0D93                     	;# 
   290  0D93                     	;# 
   291  0D94                     	;# 
   292  0D95                     	;# 
   293  0D95                     	;# 
   294  0D96                     	;# 
   295  0D97                     	;# 
   296  0D97                     	;# 
   297  0D98                     	;# 
   298  0D99                     	;# 
   299  0D99                     	;# 
   300  0D9A                     	;# 
   301  0D9B                     	;# 
   302  0D9C                     	;# 
   303  0D9C                     	;# 
   304  0D9D                     	;# 
   305  0D9D                     	;# 
   306  0D9E                     	;# 
   307  0D9F                     	;# 
   308  0DA0                     	;# 
   309  0DA1                     	;# 
   310  0DA1                     	;# 
   311  0DA2                     	;# 
   312  0DA3                     	;# 
   313  0DA3                     	;# 
   314  0DA4                     	;# 
   315  0DA5                     	;# 
   316  0DA5                     	;# 
   317  0DA6                     	;# 
   318  0DA7                     	;# 
   319  0DA7                     	;# 
   320  0DA8                     	;# 
   321  0DA9                     	;# 
   322  0DA9                     	;# 
   323  0DAA                     	;# 
   324  0DAB                     	;# 
   325  0DAC                     	;# 
   326  0DAC                     	;# 
   327  0DAD                     	;# 
   328  0DAD                     	;# 
   329  0DAE                     	;# 
   330  0DAF                     	;# 
   331  0DB0                     	;# 
   332  0DB1                     	;# 
   333  0DB1                     	;# 
   334  0DB2                     	;# 
   335  0DB3                     	;# 
   336  0DB3                     	;# 
   337  0DB4                     	;# 
   338  0DB5                     	;# 
   339  0DB5                     	;# 
   340  0DB6                     	;# 
   341  0DB7                     	;# 
   342  0DB7                     	;# 
   343  0DB8                     	;# 
   344  0DB9                     	;# 
   345  0DB9                     	;# 
   346  0DBA                     	;# 
   347  0DBB                     	;# 
   348  0DBC                     	;# 
   349  0DBC                     	;# 
   350  0DBD                     	;# 
   351  0DBD                     	;# 
   352  0DBE                     	;# 
   353  0DBF                     	;# 
   354  0DC0                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE8                     	;# 
   361  0FE9                     	;# 
   362  0FEA                     	;# 
   363  0FEA                     	;# 
   364  0FEB                     	;# 
   365  0FED                     	;# 
   366  0FEE                     	;# 
   367  0FEE                     	;# 
   368  0FEF                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  008C                     	;# 
   395  0091                     	;# 
   396  0092                     	;# 
   397  0093                     	;# 
   398  0095                     	;# 
   399  0096                     	;# 
   400  0097                     	;# 
   401  0098                     	;# 
   402  0099                     	;# 
   403  009A                     	;# 
   404  009B                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  010C                     	;# 
   411  0111                     	;# 
   412  0112                     	;# 
   413  0115                     	;# 
   414  0116                     	;# 
   415  0117                     	;# 
   416  0118                     	;# 
   417  0119                     	;# 
   418  011D                     	;# 
   419  011D                     	;# 
   420  018C                     	;# 
   421  0191                     	;# 
   422  0191                     	;# 
   423  0192                     	;# 
   424  0193                     	;# 
   425  0193                     	;# 
   426  0194                     	;# 
   427  0195                     	;# 
   428  0196                     	;# 
   429  0197                     	;# 
   430  0199                     	;# 
   431  019A                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019C                     	;# 
   435  019D                     	;# 
   436  019E                     	;# 
   437  019F                     	;# 
   438  020C                     	;# 
   439  028C                     	;# 
   440  030C                     	;# 
   441  038C                     	;# 
   442  0391                     	;# 
   443  0392                     	;# 
   444  0393                     	;# 
   445  0691                     	;# 
   446  0692                     	;# 
   447  0693                     	;# 
   448  0694                     	;# 
   449  0695                     	;# 
   450  0D8E                     	;# 
   451  0D8F                     	;# 
   452  0D90                     	;# 
   453  0D91                     	;# 
   454  0D91                     	;# 
   455  0D92                     	;# 
   456  0D93                     	;# 
   457  0D93                     	;# 
   458  0D94                     	;# 
   459  0D95                     	;# 
   460  0D95                     	;# 
   461  0D96                     	;# 
   462  0D97                     	;# 
   463  0D97                     	;# 
   464  0D98                     	;# 
   465  0D99                     	;# 
   466  0D99                     	;# 
   467  0D9A                     	;# 
   468  0D9B                     	;# 
   469  0D9C                     	;# 
   470  0D9C                     	;# 
   471  0D9D                     	;# 
   472  0D9D                     	;# 
   473  0D9E                     	;# 
   474  0D9F                     	;# 
   475  0DA0                     	;# 
   476  0DA1                     	;# 
   477  0DA1                     	;# 
   478  0DA2                     	;# 
   479  0DA3                     	;# 
   480  0DA3                     	;# 
   481  0DA4                     	;# 
   482  0DA5                     	;# 
   483  0DA5                     	;# 
   484  0DA6                     	;# 
   485  0DA7                     	;# 
   486  0DA7                     	;# 
   487  0DA8                     	;# 
   488  0DA9                     	;# 
   489  0DA9                     	;# 
   490  0DAA                     	;# 
   491  0DAB                     	;# 
   492  0DAC                     	;# 
   493  0DAC                     	;# 
   494  0DAD                     	;# 
   495  0DAD                     	;# 
   496  0DAE                     	;# 
   497  0DAF                     	;# 
   498  0DB0                     	;# 
   499  0DB1                     	;# 
   500  0DB1                     	;# 
   501  0DB2                     	;# 
   502  0DB3                     	;# 
   503  0DB3                     	;# 
   504  0DB4                     	;# 
   505  0DB5                     	;# 
   506  0DB5                     	;# 
   507  0DB6                     	;# 
   508  0DB7                     	;# 
   509  0DB7                     	;# 
   510  0DB8                     	;# 
   511  0DB9                     	;# 
   512  0DB9                     	;# 
   513  0DBA                     	;# 
   514  0DBB                     	;# 
   515  0DBC                     	;# 
   516  0DBC                     	;# 
   517  0DBD                     	;# 
   518  0DBD                     	;# 
   519  0DBE                     	;# 
   520  0DBF                     	;# 
   521  0DC0                     	;# 
   522  0FE4                     	;# 
   523  0FE5                     	;# 
   524  0FE6                     	;# 
   525  0FE7                     	;# 
   526  0FE8                     	;# 
   527  0FE8                     	;# 
   528  0FE9                     	;# 
   529  0FEA                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEE                     	;# 
   535  0FEF                     	;# 
   536  0016                     _TMR1	set	22
   537  000B                     _INTCONbits	set	11
   538  0011                     _PIR1bits	set	17
   539  000C                     _PORTAbits	set	12
   540  0018                     _T1CONbits	set	24
   541  009B                     _ADRES	set	155
   542  009D                     _ADCON0bits	set	157
   543  009E                     _ADCON1	set	158
   544  0099                     _OSCCON	set	153
   545  0091                     _PIE1bits	set	145
   546  008C                     _TRISAbits	set	140
   547  0118                     _DACCON0bits	set	280
   548  0191                     _PMADR	set	401
   549  0193                     _PMDAT	set	403
   550  018C                     _ANSELA	set	396
   551  018C                     _ANSELAbits	set	396
   552  019F                     _BAUDCONbits	set	415
   553  0191                     _PMADRL	set	401
   554  0195                     _PMCON1bits	set	405
   555  0196                     _PMCON2	set	406
   556  0199                     _RCREG	set	409
   557  019D                     _RCSTAbits	set	413
   558  019B                     _SPBRGL	set	411
   559  019A                     _TXREG	set	410
   560  019E                     _TXSTAbits	set	414
   561  0DB3                     _PWM3DC	set	3507
   562  0DB1                     _PWM3PH	set	3505
   563  0DB5                     _PWM3PR	set	3509
   564  0DBB                     _PWM3CONbits	set	3515
   565  0DBF                     _PWM3LDCONbits	set	3519
   566                           
   567                           	psect	intentry
   568  0004                     __pintentry:	
   569                           
   570                           ; #config settings
   571  0000                     
   572 ;; *************** function _High_Priority_Interrupt *****************
   573 ;; Defined at:
   574 ;;		line 222 in file "user.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;		None               void
   581 ;; Registers used:
   582 ;;		wreg
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   588 ;;      Params:         0       0       0       0
   589 ;;      Locals:         0       0       0       0
   590 ;;      Temps:          1       0       0       0
   591 ;;      Totals:         1       0       0       0
   592 ;;Total ram usage:        1 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		Interrupt level 1
   598 ;; This function uses a non-reentrant model
   599 ;;
   600  0004                     _High_Priority_Interrupt:	
   601                           
   602                           ;incstack = 0
   603                           ; Regs used in _High_Priority_Interrupt: [wreg]
   604  0004  147E               	bsf	126,0	;set compiler interrupt flag
   605  0005  3180               	pagesel	$
   606  0006  0020               	movlb	0	; select bank0
   607  0007  087F               	movf	127,w
   608  0008  00F0               	movwf	??_High_Priority_Interrupt
   609                           
   610                           ;user.c: 223: if(PIR1bits.TMR1IF == 1)
   611  0009  1C11               	btfss	17,0	;volatile
   612  000A  2815               	goto	i1l181
   613  000B  0022               	banksel	280	;# 
   614  000C  0818               	movf	24,w	;# 
   615  000D  3A20               	xorlw	32	;# 
   616  000E  0098               	movwf	24	;# 
   617                           
   618                           ;user.c: 230: TMR1 += 65486;
   619  000F  30CE               	movlw	206
   620  0010  0020               	movlb	0	; select bank0
   621  0011  0796               	addwf	22,f	;volatile
   622  0012  30FF               	movlw	255
   623  0013  3D97               	addwfc	23,f	;volatile
   624                           
   625                           ;user.c: 231: PIR1bits.TMR1IF = 0;
   626  0014  1011               	bcf	17,0	;volatile
   627  0015                     i1l181:	
   628  0015  0870               	movf	??_High_Priority_Interrupt,w
   629  0016  00FF               	movwf	127
   630  0017  107E               	bcf	126,0	;clear compiler interrupt flag
   631  0018  0009               	retfie
   632  0019                     __end_of_High_Priority_Interrupt:	
   633  007E                     btemp	set	126	;btemp
   634  007E                     pic14e$flags	set	126
   635  007E                     wtemp	set	126
   636  007E                     wtemp0	set	126
   637  0080                     wtemp1	set	128
   638  0082                     wtemp2	set	130
   639  0084                     wtemp3	set	132
   640  0086                     wtemp4	set	134
   641  0088                     wtemp5	set	136
   642  007F                     wtemp6	set	127
   643  007E                     ttemp	set	126
   644  007E                     ttemp0	set	126
   645  0081                     ttemp1	set	129
   646  0084                     ttemp2	set	132
   647  0087                     ttemp3	set	135
   648  007F                     ttemp4	set	127
   649  007E                     ltemp	set	126
   650  007E                     ltemp0	set	126
   651  0082                     ltemp1	set	130
   652  0086                     ltemp2	set	134
   653  0080                     ltemp3	set	128
   654                           
   655                           	psect	cinit
   656  001A                     start_initialization:	
   657  001A                     __initialization:	
   658                           
   659                           ; Clear objects allocated to BANK0
   660  001A  304B               	movlw	low __pbssBANK0
   661  001B  0084               	movwf	4
   662  001C  3000               	movlw	high __pbssBANK0
   663  001D  0085               	movwf	5
   664  001E  301C               	movlw	28
   665  001F  268F               	fcall	clear_ram0
   666                           
   667                           ; Clear objects allocated to BANK1
   668  0020  30A0               	movlw	low __pbssBANK1
   669  0021  0084               	movwf	4
   670  0022  3000               	movlw	high __pbssBANK1
   671  0023  0085               	movwf	5
   672  0024  3020               	movlw	32
   673  0025  268F               	fcall	clear_ram0
   674  0026                     end_of_initialization:	
   675                           ;End of C runtime variable initialization code
   676                           
   677  0026                     __end_of__initialization:	
   678  0026  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   679  0027  0020               	movlb	0
   680  0028  2E9B               	ljmp	_main	;jump to C main() function
   681                           
   682                           	psect	bssBANK0
   683  004B                     __pbssBANK0:	
   684  004B                     Fire@counter:	
   685  004B                     	ds	2
   686  004D                     Fire@timer:	
   687  004D                     	ds	2
   688  004F                     __i:	
   689  004F                     	ds	2
   690  0051                     __checksum:	
   691  0051                     	ds	1
   692  0052                     _my_random_number:	
   693  0052                     	ds	1
   694  0053                     handle_serial@rx_counter:	
   695  0053                     	ds	1
   696  0054                     handle_serial@rx_id:	
   697  0054                     	ds	1
   698  0055                     _config:	
   699  0055                     	ds	16
   700  0065                     __x:	
   701  0065                     	ds	1
   702  0066                     __y:	
   703  0066                     	ds	1
   704                           
   705                           	psect	bssBANK1
   706  00A0                     __pbssBANK1:	
   707  00A0                     _hitlist:	
   708  00A0                     	ds	32
   709                           
   710                           	psect	clrtext
   711  068F                     clear_ram0:	
   712                           ;	Called with FSR0 containing the base address, and
   713                           ;	WREG with the size to clear
   714                           
   715  068F  0064               	clrwdt	;clear the watchdog before getting into this loop
   716  0690                     clrloop0:	
   717  0690  0180               	clrf	0	;clear RAM location pointed to by FSR
   718  0691  3101               	addfsr 0,1
   719  0692  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   720  0693  2E90               	goto	clrloop0	;have we reached the end yet?
   721  0694  3400               	retlw	0	;all done for this memory range, return
   722                           
   723                           	psect	cstackCOMMON
   724  0070                     __pcstackCOMMON:	
   725  0070                     ?_Setup:	
   726  0070                     ?_add_to_hitlist:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0070                     ?_Modulate_Serial:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ?_Disable_Modulation:	
   733                           ; 0 bytes @ 0x0
   734                           
   735  0070                     ?_LoadFromFlash:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_main:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_hit_by:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ?_LED_on:	
   745                           ; 0 bytes @ 0x0
   746                           
   747  0070                     ?_LED_off:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_Send_Byte:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_High_Priority_Interrupt:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ??_High_Priority_Interrupt:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_SEND_DATA_BYTE:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_SEND_SOF:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_SEND_EOF:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_control_transfer:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_handle_serial:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_Fire:	
   775                           ; 1 bytes @ 0x0
   776                           
   777  0070                     ?_get_hitlist_length:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0070                     ?_GET_CHAR_HELPER:	
   781                           ; 1 bytes @ 0x0
   782                           
   783                           
   784                           ; 1 bytes @ 0x0
   785  0070                     	ds	1
   786  0071                     ?_Load:	
   787  0071                     ?_Save:	
   788                           ; 0 bytes @ 0x1
   789                           
   790  0071                     ??_Setup:	
   791                           ; 0 bytes @ 0x1
   792                           
   793  0071                     ??_add_to_hitlist:	
   794                           ; 0 bytes @ 0x1
   795                           
   796  0071                     ??_get_hitlist_length:	
   797                           ; 0 bytes @ 0x1
   798                           
   799  0071                     ??_Modulate_Serial:	
   800                           ; 0 bytes @ 0x1
   801                           
   802  0071                     ??_Disable_Modulation:	
   803                           ; 0 bytes @ 0x1
   804                           
   805  0071                     ??_LED_on:	
   806                           ; 0 bytes @ 0x1
   807                           
   808  0071                     ??_LED_off:	
   809                           ; 0 bytes @ 0x1
   810                           
   811  0071                     ??_Send_Byte:	
   812                           ; 0 bytes @ 0x1
   813                           
   814  0071                     ??_GET_CHAR_HELPER:	
   815                           ; 0 bytes @ 0x1
   816                           
   817  0071                     ?_ADC_read:	
   818                           ; 0 bytes @ 0x1
   819                           
   820  0071                     ?___aldiv:	
   821                           ; 2 bytes @ 0x1
   822                           
   823  0071                     Send_Byte@data:	
   824                           ; 4 bytes @ 0x1
   825                           
   826  0071                     Load@address:	
   827                           ; 1 bytes @ 0x1
   828                           
   829  0071                     Save@address:	
   830                           ; 2 bytes @ 0x1
   831                           
   832  0071                     ___aldiv@divisor:	
   833                           ; 2 bytes @ 0x1
   834                           
   835                           
   836                           ; 4 bytes @ 0x1
   837  0071                     	ds	1
   838  0072                     ??_SEND_DATA_BYTE:	
   839  0072                     GET_CHAR_HELPER@val:	
   840                           ; 0 bytes @ 0x2
   841                           
   842                           
   843                           ; 1 bytes @ 0x2
   844  0072                     	ds	1
   845  0073                     ??_ADC_read:	
   846  0073                     Load@ptr:	
   847                           ; 0 bytes @ 0x3
   848                           
   849  0073                     Save@ptr:	
   850                           ; 1 bytes @ 0x3
   851                           
   852                           
   853                           ; 1 bytes @ 0x3
   854  0073                     	ds	1
   855  0074                     Load@data_length:	
   856  0074                     Save@data_length:	
   857                           ; 1 bytes @ 0x4
   858                           
   859  0074                     SEND_DATA_BYTE@b:	
   860                           ; 1 bytes @ 0x4
   861                           
   862                           
   863                           ; 1 bytes @ 0x4
   864  0074                     	ds	1
   865  0075                     ??_Load:	
   866  0075                     ??_Save:	
   867                           ; 0 bytes @ 0x5
   868                           
   869  0075                     ??_SEND_SOF:	
   870                           ; 0 bytes @ 0x5
   871                           
   872  0075                     ??_SEND_EOF:	
   873                           ; 0 bytes @ 0x5
   874                           
   875  0075                     get_hitlist_length@i:	
   876                           ; 0 bytes @ 0x5
   877                           
   878  0075                     add_to_hitlist@gun:	
   879                           ; 1 bytes @ 0x5
   880                           
   881  0075                     ___aldiv@dividend:	
   882                           ; 1 bytes @ 0x5
   883                           
   884                           
   885                           ; 4 bytes @ 0x5
   886  0075                     	ds	1
   887  0076                     Load@i:	
   888  0076                     Save@i:	
   889                           ; 1 bytes @ 0x6
   890                           
   891  0076                     add_to_hitlist@gun16:	
   892                           ; 1 bytes @ 0x6
   893                           
   894                           
   895                           ; 2 bytes @ 0x6
   896  0076                     	ds	1
   897  0077                     ??_LoadFromFlash:	
   898  0077                     ??_control_transfer:	
   899                           ; 0 bytes @ 0x7
   900                           
   901                           
   902                           ; 0 bytes @ 0x7
   903  0077                     	ds	1
   904  0078                     add_to_hitlist@i:	
   905                           
   906                           ; 1 bytes @ 0x8
   907  0078                     	ds	1
   908  0079                     ??___aldiv:	
   909                           
   910                           ; 0 bytes @ 0x9
   911  0079                     	ds	1
   912  007A                     ??_Buzz:	
   913                           
   914                           ; 0 bytes @ 0xA
   915  007A                     	ds	2
   916  007C                     ??_Fire:	
   917  007C                     hit_by@who:	
   918                           ; 0 bytes @ 0xC
   919                           
   920                           
   921                           ; 1 bytes @ 0xC
   922  007C                     	ds	1
   923  007D                     ??_main:	
   924                           
   925                           	psect	cstackBANK0
   926  0020                     __pcstackBANK0:	
   927                           ; 0 bytes @ 0xD
   928                           
   929  0020                     ___aldiv@counter:	
   930  0020                     control_transfer@data:	
   931                           ; 1 bytes @ 0x0
   932                           
   933                           
   934                           ; 32 bytes @ 0x0
   935  0020                     	ds	1
   936  0021                     ___aldiv@sign:	
   937                           
   938                           ; 1 bytes @ 0x1
   939  0021                     	ds	1
   940  0022                     ___aldiv@quotient:	
   941                           
   942                           ; 4 bytes @ 0x2
   943  0022                     	ds	4
   944  0026                     ?_Buzz:	
   945  0026                     Buzz@freq:	
   946                           ; 0 bytes @ 0x6
   947                           
   948                           
   949                           ; 2 bytes @ 0x6
   950  0026                     	ds	2
   951  0028                     Buzz@dur_ms:	
   952                           
   953                           ; 2 bytes @ 0x8
   954  0028                     	ds	2
   955  002A                     Buzz@i:	
   956                           
   957                           ; 2 bytes @ 0xA
   958  002A                     	ds	2
   959  002C                     ??_hit_by:	
   960  002C                     Fire@a:	
   961                           ; 0 bytes @ 0xC
   962                           
   963                           
   964                           ; 2 bytes @ 0xC
   965  002C                     	ds	20
   966  0040                     control_transfer@cmd:	
   967                           
   968                           ; 1 bytes @ 0x20
   969  0040                     	ds	1
   970  0041                     control_transfer@random_number:	
   971                           
   972                           ; 1 bytes @ 0x21
   973  0041                     	ds	1
   974  0042                     control_transfer@id:	
   975                           
   976                           ; 1 bytes @ 0x22
   977  0042                     	ds	1
   978  0043                     control_transfer@dptr:	
   979                           
   980                           ; 1 bytes @ 0x23
   981  0043                     	ds	1
   982  0044                     control_transfer@i:	
   983                           
   984                           ; 1 bytes @ 0x24
   985  0044                     	ds	1
   986  0045                     control_transfer@page:	
   987                           
   988                           ; 2 bytes @ 0x25
   989  0045                     	ds	2
   990  0047                     control_transfer@x:	
   991                           
   992                           ; 1 bytes @ 0x27
   993  0047                     	ds	1
   994  0048                     ??_handle_serial:	
   995                           
   996                           ; 0 bytes @ 0x28
   997  0048                     	ds	2
   998  004A                     handle_serial@b:	
   999                           
  1000                           ; 1 bytes @ 0x2A
  1001  004A                     	ds	1
  1002                           
  1003                           	psect	maintext
  1004  069B                     __pmaintext:	
  1005 ;;
  1006 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1007 ;;
  1008 ;; *************** function _main *****************
  1009 ;; Defined at:
  1010 ;;		line 47 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;		None               void
  1017 ;; Registers used:
  1018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 17F/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1024 ;;      Params:         0       0       0       0
  1025 ;;      Locals:         0       0       0       0
  1026 ;;      Temps:          0       0       0       0
  1027 ;;      Totals:         0       0       0       0
  1028 ;;Total ram usage:        0 bytes
  1029 ;; Hardware stack levels required when called:    7
  1030 ;; This function calls:
  1031 ;;		_Fire
  1032 ;;		_LoadFromFlash
  1033 ;;		_Setup
  1034 ;;		_handle_serial
  1035 ;; This function is called by:
  1036 ;;		Startup code after reset
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           
  1041                           ;psect for function _main
  1042  069B                     _main:	
  1043                           
  1044                           ;main.c: 49: Setup();
  1045                           
  1046                           ;incstack = 0
  1047                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1048  069B  2643               	fcall	_Setup
  1049                           
  1050                           ;main.c: 50: LoadFromFlash();
  1051  069C  2386               	fcall	_LoadFromFlash
  1052  069D                     l2147:	
  1053                           ;main.c: 52: while(1)
  1054                           
  1055                           
  1056                           ;main.c: 53: {
  1057                           ;main.c: 54: if(!handle_serial() & !Fire());
  1058  069D  251A               	fcall	_handle_serial
  1059  069E  23E2               	fcall	_Fire
  1060  069F  2E9D               	goto	l2147
  1061  06A0                     __end_of_main:	
  1062                           
  1063                           	psect	text1
  1064  051A                     __ptext1:	
  1065 ;; *************** function _handle_serial *****************
  1066 ;; Defined at:
  1067 ;;		line 126 in file "protocol.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  b               1   42[BANK0 ] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      unsigned char 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1081 ;;      Params:         0       0       0       0
  1082 ;;      Locals:         0       1       0       0
  1083 ;;      Temps:          0       2       0       0
  1084 ;;      Totals:         0       3       0       0
  1085 ;;Total ram usage:        3 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    6
  1088 ;; This function calls:
  1089 ;;		_control_transfer
  1090 ;;		_hit_by
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           
  1097                           ;psect for function _handle_serial
  1098  051A                     _handle_serial:	
  1099                           
  1100                           ;protocol.c: 128: static uint8_t rx_id=0;
  1101                           ;protocol.c: 129: static uint8_t rx_counter=0;
  1102                           ;protocol.c: 130: uint8_t b;
  1103                           ;protocol.c: 132: if(!(PIR1bits.RCIF)) return 0;
  1104                           
  1105                           ;incstack = 0
  1106                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1107  051A  0020               	movlb	0	; select bank0
  1108  051B  1A91               	btfsc	17,5	;volatile
  1109  051C  2D1F               	goto	l2079
  1110  051D  3000               	movlw	0
  1111  051E  0008               	return
  1112  051F                     l2079:	
  1113                           
  1114                           ;protocol.c: 133: b=(RCREG);
  1115  051F  0023               	movlb	3	; select bank3
  1116  0520  0819               	movf	25,w	;volatile
  1117  0521  0020               	movlb	0	; select bank0
  1118  0522  00C8               	movwf	??_handle_serial
  1119  0523  0848               	movf	??_handle_serial,w
  1120  0524  00CA               	movwf	handle_serial@b
  1121                           
  1122                           ;protocol.c: 134: if(b == 0x10) {
  1123  0525  084A               	movf	handle_serial@b,w
  1124  0526  3A10               	xorlw	16
  1125  0527  1D03               	skipz
  1126  0528  2D2B               	goto	l2083
  1127                           
  1128                           ;protocol.c: 135: control_transfer();
  1129  0529  2029               	fcall	_control_transfer
  1130                           
  1131                           ;protocol.c: 136: }
  1132  052A  2D57               	goto	l2101
  1133  052B                     l2083:	
  1134                           
  1135                           ;protocol.c: 137: else if((b > 0x80) && (b != config.id)) {
  1136  052B  3081               	movlw	129
  1137  052C  0020               	movlb	0	; select bank0
  1138  052D  024A               	subwf	handle_serial@b,w
  1139  052E  1C03               	skipc
  1140  052F  2D57               	goto	l2101
  1141  0530  084A               	movf	handle_serial@b,w
  1142  0531  00C8               	movwf	??_handle_serial
  1143  0532  01C9               	clrf	??_handle_serial+1
  1144  0533  0856               	movf	_config+1,w
  1145  0534  0649               	xorwf	??_handle_serial+1,w
  1146  0535  1D03               	skipz
  1147  0536  2D39               	goto	u2445
  1148  0537  0855               	movf	_config,w
  1149  0538  0648               	xorwf	??_handle_serial,w
  1150  0539                     u2445:	
  1151  0539  1903               	skipnz
  1152  053A  2D57               	goto	l2101
  1153                           
  1154                           ;protocol.c: 138: if(b != rx_id) rx_counter=0;
  1155  053B  084A               	movf	handle_serial@b,w
  1156  053C  0654               	xorwf	handle_serial@rx_id,w
  1157  053D  1903               	skipnz
  1158  053E  2D40               	goto	l2091
  1159  053F  01D3               	clrf	handle_serial@rx_counter
  1160  0540                     l2091:	
  1161                           
  1162                           ;protocol.c: 139: rx_id = b;
  1163  0540  084A               	movf	handle_serial@b,w
  1164  0541  00C8               	movwf	??_handle_serial
  1165  0542  0848               	movf	??_handle_serial,w
  1166  0543  00D4               	movwf	handle_serial@rx_id
  1167                           
  1168                           ;protocol.c: 140: rx_counter++;
  1169  0544  3001               	movlw	1
  1170  0545  00C8               	movwf	??_handle_serial
  1171  0546  0848               	movf	??_handle_serial,w
  1172  0547  07D3               	addwf	handle_serial@rx_counter,f
  1173                           
  1174                           ;protocol.c: 141: if(rx_counter > config.shield) {
  1175  0548  0853               	movf	handle_serial@rx_counter,w
  1176  0549  00C8               	movwf	??_handle_serial
  1177  054A  01C9               	clrf	??_handle_serial+1
  1178  054B  0849               	movf	??_handle_serial+1,w
  1179  054C  025C               	subwf	_config+7,w
  1180  054D  1D03               	skipz
  1181  054E  2D51               	goto	u2465
  1182  054F  0848               	movf	??_handle_serial,w
  1183  0550  025B               	subwf	_config+6,w
  1184  0551                     u2465:	
  1185  0551  1803               	skipnc
  1186  0552  2D57               	goto	l2101
  1187                           
  1188                           ;protocol.c: 142: hit_by(b);
  1189  0553  084A               	movf	handle_serial@b,w
  1190  0554  2591               	fcall	_hit_by
  1191                           
  1192                           ;protocol.c: 143: rx_id = 0;
  1193  0555  0020               	movlb	0	; select bank0
  1194  0556  01D4               	clrf	handle_serial@rx_id
  1195  0557                     l2101:	
  1196                           
  1197                           ;protocol.c: 144: }
  1198                           ;protocol.c: 145: }
  1199                           ;protocol.c: 146: return 1;
  1200  0557  3001               	movlw	1
  1201  0558  0008               	return
  1202  0559                     __end_of_handle_serial:	
  1203                           
  1204                           	psect	text2
  1205  0591                     __ptext2:	
  1206 ;; *************** function _hit_by *****************
  1207 ;; Defined at:
  1208 ;;		line 58 in file "main.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  who             1    wreg     unsigned char 
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;  who             1   12[COMMON] unsigned char 
  1213 ;; Return value:  Size  Location     Type
  1214 ;;		None               void
  1215 ;; Registers used:
  1216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1222 ;;      Params:         0       0       0       0
  1223 ;;      Locals:         1       0       0       0
  1224 ;;      Temps:          0       2       0       0
  1225 ;;      Totals:         1       2       0       0
  1226 ;;Total ram usage:        3 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    3
  1229 ;; This function calls:
  1230 ;;		_Buzz
  1231 ;;		_Save
  1232 ;;		_add_to_hitlist
  1233 ;;		_get_hitlist_length
  1234 ;; This function is called by:
  1235 ;;		_handle_serial
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _hit_by
  1241  0591                     _hit_by:	
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _hit_by: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1245                           ;hit_by@who stored from wreg
  1246  0591  00FC               	movwf	hit_by@who
  1247                           
  1248                           ;main.c: 60: add_to_hitlist(who);
  1249  0592  087C               	movf	hit_by@who,w
  1250  0593  2437               	fcall	_add_to_hitlist
  1251                           
  1252                           ;main.c: 61: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1253  0594  30E0               	movlw	224
  1254  0595  00F1               	movwf	Save@address
  1255  0596  3007               	movlw	7
  1256  0597  00F2               	movwf	Save@address+1
  1257  0598  30A0               	movlw	_hitlist& (0+255)
  1258  0599  0020               	movlb	0	; select bank0
  1259  059A  00AC               	movwf	??_hit_by
  1260  059B  082C               	movf	??_hit_by,w
  1261  059C  00F3               	movwf	Save@ptr
  1262  059D  3010               	movlw	16
  1263  059E  00AD               	movwf	??_hit_by+1
  1264  059F  082D               	movf	??_hit_by+1,w
  1265  05A0  00F4               	movwf	Save@data_length
  1266  05A1  24D3               	fcall	_Save
  1267                           
  1268                           ;main.c: 62: Buzz(1000,50);
  1269  05A2  30E8               	movlw	232
  1270  05A3  0020               	movlb	0	; select bank0
  1271  05A4  00A6               	movwf	Buzz@freq
  1272  05A5  3003               	movlw	3
  1273  05A6  00A7               	movwf	Buzz@freq+1
  1274  05A7  3032               	movlw	50
  1275  05A8  00A8               	movwf	Buzz@dur_ms
  1276  05A9  3000               	movlw	0
  1277  05AA  00A9               	movwf	Buzz@dur_ms+1
  1278  05AB  248B               	fcall	_Buzz
  1279                           
  1280                           ;main.c: 63: if(get_hitlist_length() > config.health)
  1281  05AC  2559               	fcall	_get_hitlist_length
  1282  05AD  0020               	movlb	0	; select bank0
  1283  05AE  00AC               	movwf	??_hit_by
  1284  05AF  01AD               	clrf	??_hit_by+1
  1285  05B0  082D               	movf	??_hit_by+1,w
  1286  05B1  025A               	subwf	_config+5,w
  1287  05B2  1D03               	skipz
  1288  05B3  2DB6               	goto	u1545
  1289  05B4  082C               	movf	??_hit_by,w
  1290  05B5  0259               	subwf	_config+4,w
  1291  05B6                     u1545:	
  1292  05B6  1803               	skipnc
  1293  05B7  0008               	return
  1294                           
  1295                           ;main.c: 64: {
  1296                           ;main.c: 65: Buzz(100,2000);
  1297  05B8  3064               	movlw	100
  1298  05B9  00A6               	movwf	Buzz@freq
  1299  05BA  3000               	movlw	0
  1300  05BB  00A7               	movwf	Buzz@freq+1
  1301  05BC  30D0               	movlw	208
  1302  05BD  00A8               	movwf	Buzz@dur_ms
  1303  05BE  3007               	movlw	7
  1304  05BF  00A9               	movwf	Buzz@dur_ms+1
  1305  05C0  248B               	fcall	_Buzz
  1306  05C1  0008               	return
  1307  05C2                     __end_of_hit_by:	
  1308                           
  1309                           	psect	text3
  1310  0559                     __ptext3:	
  1311 ;; *************** function _get_hitlist_length *****************
  1312 ;; Defined at:
  1313 ;;		line 235 in file "user.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  i               1    5[COMMON] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      unsigned char 
  1320 ;; Registers used:
  1321 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1327 ;;      Params:         0       0       0       0
  1328 ;;      Locals:         1       0       0       0
  1329 ;;      Temps:          4       0       0       0
  1330 ;;      Totals:         5       0       0       0
  1331 ;;Total ram usage:        5 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    1
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_hit_by
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _get_hitlist_length
  1343  0559                     _get_hitlist_length:	
  1344                           
  1345                           ;user.c: 237: uint8_t i;
  1346                           ;user.c: 238: for(i=0;i<(sizeof(hitlist_t)/2);i++)
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _get_hitlist_length: [wreg+fsr1l+fsr1h+status,2+status,0]
  1350  0559  01F5               	clrf	get_hitlist_length@i
  1351  055A  3010               	movlw	16
  1352  055B  0275               	subwf	get_hitlist_length@i,w
  1353  055C  1803               	btfsc	3,0
  1354  055D  2D8F               	goto	l1679
  1355  055E                     l1663:	
  1356                           
  1357                           ;user.c: 239: {
  1358                           ;user.c: 240: if(!(hitlist[i] & 0x007F)) return 2*i;
  1359  055E  3575               	lslf	get_hitlist_length@i,w
  1360  055F  3EA0               	addlw	_hitlist& (0+255)
  1361  0560  0086               	movwf	6
  1362  0561  0187               	clrf	7
  1363  0562  3F40               	moviw [0]fsr1
  1364  0563  00F1               	movwf	??_get_hitlist_length
  1365  0564  3F41               	moviw [1]fsr1
  1366  0565  00F2               	movwf	??_get_hitlist_length+1
  1367  0566  307F               	movlw	127
  1368  0567  0571               	andwf	??_get_hitlist_length,w
  1369  0568  00F3               	movwf	??_get_hitlist_length+2
  1370  0569  3000               	movlw	0
  1371  056A  0572               	andwf	??_get_hitlist_length+1,w
  1372  056B  00F4               	movwf	??_get_hitlist_length+3
  1373  056C  0874               	movf	??_get_hitlist_length+3,w
  1374  056D  0473               	iorwf	??_get_hitlist_length+2,w
  1375  056E  1D03               	skipz
  1376  056F  2D72               	goto	l1669
  1377  0570  3575               	lslf	get_hitlist_length@i,w
  1378  0571  0008               	return
  1379  0572                     l1669:	
  1380                           
  1381                           ;user.c: 241: if(!(hitlist[i] & 0x3F80)) return 2*i+1;
  1382  0572  3575               	lslf	get_hitlist_length@i,w
  1383  0573  3EA0               	addlw	_hitlist& (0+255)
  1384  0574  0086               	movwf	6
  1385  0575  0187               	clrf	7
  1386  0576  3F40               	moviw [0]fsr1
  1387  0577  00F1               	movwf	??_get_hitlist_length
  1388  0578  3F41               	moviw [1]fsr1
  1389  0579  00F2               	movwf	??_get_hitlist_length+1
  1390  057A  3080               	movlw	128
  1391  057B  0571               	andwf	??_get_hitlist_length,w
  1392  057C  00F3               	movwf	??_get_hitlist_length+2
  1393  057D  303F               	movlw	63
  1394  057E  0572               	andwf	??_get_hitlist_length+1,w
  1395  057F  00F4               	movwf	??_get_hitlist_length+3
  1396  0580  0874               	movf	??_get_hitlist_length+3,w
  1397  0581  0473               	iorwf	??_get_hitlist_length+2,w
  1398  0582  1D03               	skipz
  1399  0583  2D87               	goto	l1675
  1400  0584  1403               	setc
  1401  0585  0D75               	rlf	get_hitlist_length@i,w
  1402  0586  0008               	return
  1403  0587                     l1675:	
  1404  0587  3001               	movlw	1
  1405  0588  00F1               	movwf	??_get_hitlist_length
  1406  0589  0871               	movf	??_get_hitlist_length,w
  1407  058A  07F5               	addwf	get_hitlist_length@i,f
  1408  058B  3010               	movlw	16
  1409  058C  0275               	subwf	get_hitlist_length@i,w
  1410  058D  1C03               	skipc
  1411  058E  2D5E               	goto	l1663
  1412  058F                     l1679:	
  1413                           
  1414                           ;user.c: 242: }
  1415                           ;user.c: 243: return 2*i;
  1416  058F  3575               	lslf	get_hitlist_length@i,w
  1417  0590  0008               	return
  1418  0591                     __end_of_get_hitlist_length:	
  1419                           
  1420                           	psect	text4
  1421  0437                     __ptext4:	
  1422 ;; *************** function _add_to_hitlist *****************
  1423 ;; Defined at:
  1424 ;;		line 246 in file "user.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  gun             1    wreg     unsigned char 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  gun             1    5[COMMON] unsigned char 
  1429 ;;  i               1    8[COMMON] unsigned char 
  1430 ;;  gun16           2    6[COMMON] unsigned int 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;		None               void
  1433 ;; Registers used:
  1434 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1440 ;;      Params:         0       0       0       0
  1441 ;;      Locals:         4       0       0       0
  1442 ;;      Temps:          4       0       0       0
  1443 ;;      Totals:         8       0       0       0
  1444 ;;Total ram usage:        8 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_hit_by
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function _add_to_hitlist
  1456  0437                     _add_to_hitlist:	
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  1460                           ;add_to_hitlist@gun stored from wreg
  1461  0437  00F5               	movwf	add_to_hitlist@gun
  1462                           
  1463                           ;user.c: 248: uint16_t gun16 = gun & 0x7F;
  1464  0438  0875               	movf	add_to_hitlist@gun,w
  1465  0439  397F               	andlw	127
  1466  043A  00F1               	movwf	??_add_to_hitlist
  1467  043B  01F2               	clrf	??_add_to_hitlist+1
  1468  043C  0871               	movf	??_add_to_hitlist,w
  1469  043D  00F6               	movwf	add_to_hitlist@gun16
  1470  043E  0872               	movf	??_add_to_hitlist+1,w
  1471  043F  00F7               	movwf	add_to_hitlist@gun16+1
  1472                           
  1473                           ;user.c: 249: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  1474  0440  01F8               	clrf	add_to_hitlist@i
  1475  0441                     L1:	
  1476  0441  3010               	movlw	16
  1477  0442  0278               	subwf	add_to_hitlist@i,w
  1478  0443  1803               	btfsc	3,0
  1479  0444  0008               	return
  1480                           
  1481                           ;user.c: 250: {
  1482                           ;user.c: 251: if(!(hitlist[i] & 0x007F))
  1483  0445  3578               	lslf	add_to_hitlist@i,w
  1484  0446  3EA0               	addlw	_hitlist& (0+255)
  1485  0447  0086               	movwf	6
  1486  0448  0187               	clrf	7
  1487  0449  3F40               	moviw [0]fsr1
  1488  044A  00F1               	movwf	??_add_to_hitlist
  1489  044B  3F41               	moviw [1]fsr1
  1490  044C  00F2               	movwf	??_add_to_hitlist+1
  1491  044D  307F               	movlw	127
  1492  044E  0571               	andwf	??_add_to_hitlist,w
  1493  044F  00F3               	movwf	??_add_to_hitlist+2
  1494  0450  3000               	movlw	0
  1495  0451  0572               	andwf	??_add_to_hitlist+1,w
  1496  0452  00F4               	movwf	??_add_to_hitlist+3
  1497  0453  0874               	movf	??_add_to_hitlist+3,w
  1498  0454  0473               	iorwf	??_add_to_hitlist+2,w
  1499  0455  1D03               	skipz
  1500  0456  2C61               	goto	l1633
  1501                           
  1502                           ;user.c: 252: {
  1503                           ;user.c: 253: hitlist[i] |= gun16;
  1504  0457  3578               	lslf	add_to_hitlist@i,w
  1505  0458  3EA0               	addlw	_hitlist& (0+255)
  1506  0459  0086               	movwf	6
  1507  045A  0187               	clrf	7
  1508  045B  0876               	movf	add_to_hitlist@gun16,w
  1509  045C  0481               	iorwf	1,f
  1510  045D  3141               	addfsr 1,1
  1511  045E  0877               	movf	add_to_hitlist@gun16+1,w
  1512  045F  0481               	iorwf	1,f
  1513                           
  1514                           ;user.c: 254: return;
  1515  0460  0008               	return
  1516  0461                     l1633:	
  1517                           
  1518                           ;user.c: 255: }
  1519                           ;user.c: 256: if(!(hitlist[i] & 0x3F80))
  1520  0461  3578               	lslf	add_to_hitlist@i,w
  1521  0462  3EA0               	addlw	_hitlist& (0+255)
  1522  0463  0086               	movwf	6
  1523  0464  0187               	clrf	7
  1524  0465  3F40               	moviw [0]fsr1
  1525  0466  00F1               	movwf	??_add_to_hitlist
  1526  0467  3F41               	moviw [1]fsr1
  1527  0468  00F2               	movwf	??_add_to_hitlist+1
  1528  0469  3080               	movlw	128
  1529  046A  0571               	andwf	??_add_to_hitlist,w
  1530  046B  00F3               	movwf	??_add_to_hitlist+2
  1531  046C  303F               	movlw	63
  1532  046D  0572               	andwf	??_add_to_hitlist+1,w
  1533  046E  00F4               	movwf	??_add_to_hitlist+3
  1534  046F  0874               	movf	??_add_to_hitlist+3,w
  1535  0470  0473               	iorwf	??_add_to_hitlist+2,w
  1536  0471  1D03               	skipz
  1537  0472  2C86               	goto	l1639
  1538                           
  1539                           ;user.c: 257: {
  1540                           ;user.c: 258: hitlist[i] |= gun16 << 7;
  1541  0473  0877               	movf	add_to_hitlist@gun16+1,w
  1542  0474  00F2               	movwf	??_add_to_hitlist+1
  1543  0475  0876               	movf	add_to_hitlist@gun16,w
  1544  0476  00F1               	movwf	??_add_to_hitlist
  1545  0477  3007               	movlw	7
  1546  0478                     u1455:	
  1547  0478  35F1               	lslf	??_add_to_hitlist,f
  1548  0479  0DF2               	rlf	??_add_to_hitlist+1,f
  1549  047A  0B89               	decfsz	9,f
  1550  047B  2C78               	goto	u1455
  1551  047C  3578               	lslf	add_to_hitlist@i,w
  1552  047D  3EA0               	addlw	_hitlist& (0+255)
  1553  047E  0086               	movwf	6
  1554  047F  0187               	clrf	7
  1555  0480  0871               	movf	??_add_to_hitlist,w
  1556  0481  0481               	iorwf	1,f
  1557  0482  3141               	addfsr 1,1
  1558  0483  0872               	movf	??_add_to_hitlist+1,w
  1559  0484  0481               	iorwf	1,f
  1560                           
  1561                           ;user.c: 259: return;
  1562  0485  0008               	return
  1563  0486                     l1639:	
  1564  0486  3001               	movlw	1
  1565  0487  00F1               	movwf	??_add_to_hitlist
  1566  0488  0871               	movf	??_add_to_hitlist,w
  1567  0489  07F8               	addwf	add_to_hitlist@i,f
  1568  048A  2C41               	goto	L1
  1569  048B                     __end_of_add_to_hitlist:	
  1570                           
  1571                           	psect	text5
  1572  0029                     __ptext5:	
  1573 ;; *************** function _control_transfer *****************
  1574 ;; Defined at:
  1575 ;;		line 43 in file "protocol.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  data           32    0[BANK0 ] unsigned int [16]
  1580 ;;  page            2   37[BANK0 ] unsigned int 
  1581 ;;  x               1   39[BANK0 ] unsigned char 
  1582 ;;  i               1   36[BANK0 ] unsigned char 
  1583 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1584 ;;		 -> control_transfer@data(32), 
  1585 ;;  id              1   34[BANK0 ] unsigned char 
  1586 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1587 ;;  cmd             1   32[BANK0 ] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;		None               void
  1590 ;; Registers used:
  1591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1597 ;;      Params:         0       0       0       0
  1598 ;;      Locals:         0      40       0       0
  1599 ;;      Temps:          2       0       0       0
  1600 ;;      Totals:         2      40       0       0
  1601 ;;Total ram usage:       42 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; Hardware stack levels required when called:    5
  1604 ;; This function calls:
  1605 ;;		_GET_CHAR_HELPER
  1606 ;;		_Load
  1607 ;;		_SEND_DATA_BYTE
  1608 ;;		_SEND_EOF
  1609 ;;		_SEND_SOF
  1610 ;;		_Save
  1611 ;; This function is called by:
  1612 ;;		_handle_serial
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           
  1617                           ;psect for function _control_transfer
  1618  0029                     _control_transfer:	
  1619                           
  1620                           ;protocol.c: 45: uint8_t i;
  1621                           ;protocol.c: 46: uint8_t cmd;
  1622                           ;protocol.c: 47: uint8_t random_number,id;
  1623                           ;protocol.c: 49: uint16_t page;
  1624                           ;protocol.c: 50: uint16_t data[16];
  1625                           ;protocol.c: 51: uint8_t* dptr;
  1626                           ;protocol.c: 52: uint8_t x;
  1627                           ;protocol.c: 54: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != config.id) goto err;
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1631  0029  0020               	movlb	0	; select bank0
  1632  002A  01D1               	clrf	__checksum
  1633  002B  3065               	movlw	__x& (0+255)
  1634  002C  2609               	fcall	_GET_CHAR_HELPER
  1635  002D  3A00               	xorlw	0
  1636  002E  1D03               	btfss	3,2
  1637  002F  0008               	return
  1638  0030  3066               	movlw	__y& (0+255)
  1639  0031  2609               	fcall	_GET_CHAR_HELPER
  1640  0032  3A00               	xorlw	0
  1641  0033  1D03               	btfss	3,2
  1642  0034  0008               	return
  1643  0035  0020               	movlb	0	; select bank0
  1644  0036  0865               	movf	__x,w
  1645  0037  39F0               	andlw	240
  1646  0038  1D03               	btfss	3,2
  1647  0039  0008               	return
  1648  003A  0866               	movf	__y,w
  1649  003B  39F0               	andlw	240
  1650  003C  1D03               	btfss	3,2
  1651  003D  0008               	return
  1652  003E  0866               	movf	__y,w
  1653  003F  00F7               	movwf	??_control_transfer
  1654  0040  3003               	movlw	3
  1655  0041                     u1615:	
  1656  0041  35F7               	lslf	??_control_transfer,f
  1657  0042  3EFF               	addlw	-1
  1658  0043  1D03               	skipz
  1659  0044  2841               	goto	u1615
  1660  0045  3577               	lslf	??_control_transfer,w
  1661  0046  0465               	iorwf	__x,w
  1662  0047  00F8               	movwf	??_control_transfer+1
  1663  0048  0878               	movf	??_control_transfer+1,w
  1664  0049  00E5               	movwf	__x
  1665  004A  0865               	movf	__x,w
  1666  004B  00F7               	movwf	??_control_transfer
  1667  004C  0877               	movf	??_control_transfer,w
  1668  004D  07D1               	addwf	__checksum,f
  1669  004E  0865               	movf	__x,w
  1670  004F  00F7               	movwf	??_control_transfer
  1671  0050  01F8               	clrf	??_control_transfer+1
  1672  0051  0856               	movf	_config+1,w
  1673  0052  0678               	xorwf	??_control_transfer+1,w
  1674  0053  1D03               	skipz
  1675  0054  2857               	goto	u1625
  1676  0055  0855               	movf	_config,w
  1677  0056  0677               	xorwf	??_control_transfer,w
  1678  0057                     u1625:	
  1679  0057  1D03               	btfss	3,2
  1680  0058  0008               	return
  1681                           
  1682                           ;protocol.c: 55: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1683  0059  3065               	movlw	__x& (0+255)
  1684  005A  2609               	fcall	_GET_CHAR_HELPER
  1685  005B  3A00               	xorlw	0
  1686  005C  1D03               	btfss	3,2
  1687  005D  0008               	return
  1688  005E  3066               	movlw	__y& (0+255)
  1689  005F  2609               	fcall	_GET_CHAR_HELPER
  1690  0060  3A00               	xorlw	0
  1691  0061  1D03               	btfss	3,2
  1692  0062  0008               	return
  1693  0063  0020               	movlb	0	; select bank0
  1694  0064  0865               	movf	__x,w
  1695  0065  39F0               	andlw	240
  1696  0066  1D03               	btfss	3,2
  1697  0067  0008               	return
  1698  0068  0866               	movf	__y,w
  1699  0069  39F0               	andlw	240
  1700  006A  1D03               	btfss	3,2
  1701  006B  0008               	return
  1702  006C  0866               	movf	__y,w
  1703  006D  00F7               	movwf	??_control_transfer
  1704  006E  3003               	movlw	3
  1705  006F                     u1675:	
  1706  006F  35F7               	lslf	??_control_transfer,f
  1707  0070  3EFF               	addlw	-1
  1708  0071  1D03               	skipz
  1709  0072  286F               	goto	u1675
  1710  0073  3577               	lslf	??_control_transfer,w
  1711  0074  0465               	iorwf	__x,w
  1712  0075  00F8               	movwf	??_control_transfer+1
  1713  0076  0878               	movf	??_control_transfer+1,w
  1714  0077  00C0               	movwf	control_transfer@cmd
  1715  0078  0840               	movf	control_transfer@cmd,w
  1716  0079  00F7               	movwf	??_control_transfer
  1717  007A  0877               	movf	??_control_transfer,w
  1718  007B  07D1               	addwf	__checksum,f
  1719                           
  1720                           ;protocol.c: 57: switch(cmd)
  1721  007C  2AF3               	goto	l2043
  1722  007D                     l1767:	
  1723                           ;protocol.c: 58: {
  1724                           ;protocol.c: 59: case 0x01:
  1725                           
  1726                           
  1727                           ;protocol.c: 60: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1728  007D  3065               	movlw	__x& (0+255)
  1729  007E  2609               	fcall	_GET_CHAR_HELPER
  1730  007F  3A00               	xorlw	0
  1731  0080  1D03               	btfss	3,2
  1732  0081  0008               	return
  1733  0082  3066               	movlw	__y& (0+255)
  1734  0083  2609               	fcall	_GET_CHAR_HELPER
  1735  0084  3A00               	xorlw	0
  1736  0085  1D03               	btfss	3,2
  1737  0086  0008               	return
  1738  0087  0020               	movlb	0	; select bank0
  1739  0088  0865               	movf	__x,w
  1740  0089  39F0               	andlw	240
  1741  008A  1D03               	btfss	3,2
  1742  008B  0008               	return
  1743  008C  0866               	movf	__y,w
  1744  008D  39F0               	andlw	240
  1745  008E  1D03               	btfss	3,2
  1746  008F  0008               	return
  1747  0090  0866               	movf	__y,w
  1748  0091  00F7               	movwf	??_control_transfer
  1749  0092  3003               	movlw	3
  1750  0093                     u1725:	
  1751  0093  35F7               	lslf	??_control_transfer,f
  1752  0094  3EFF               	addlw	-1
  1753  0095  1D03               	skipz
  1754  0096  2893               	goto	u1725
  1755  0097  3577               	lslf	??_control_transfer,w
  1756  0098  0465               	iorwf	__x,w
  1757  0099  00F8               	movwf	??_control_transfer+1
  1758  009A  0878               	movf	??_control_transfer+1,w
  1759  009B  00E5               	movwf	__x
  1760  009C  0865               	movf	__x,w
  1761  009D  00F7               	movwf	??_control_transfer
  1762  009E  0877               	movf	??_control_transfer,w
  1763  009F  07D1               	addwf	__checksum,f
  1764  00A0  0851               	movf	__checksum,w
  1765  00A1  1D03               	skipz
  1766  00A2  0008               	return
  1767  00A3  3065               	movlw	__x& (0+255)
  1768  00A4  2609               	fcall	_GET_CHAR_HELPER
  1769  00A5  3A00               	xorlw	0
  1770  00A6  1D03               	btfss	3,2
  1771  00A7  0008               	return
  1772  00A8  0020               	movlb	0	; select bank0
  1773  00A9  0865               	movf	__x,w
  1774  00AA  3A11               	xorlw	17
  1775  00AB  1D03               	btfss	3,2
  1776  00AC  0008               	return
  1777                           
  1778                           ;protocol.c: 61: SEND_SOF();
  1779  00AD  267A               	fcall	_SEND_SOF
  1780                           
  1781                           ;protocol.c: 62: SEND_DATA_BYTE(0x02);
  1782  00AE  3002               	movlw	2
  1783  00AF  25E7               	fcall	_SEND_DATA_BYTE
  1784                           
  1785                           ;protocol.c: 63: SEND_DATA_BYTE(my_random_number);
  1786  00B0  0020               	movlb	0	; select bank0
  1787  00B1  0852               	movf	_my_random_number,w
  1788  00B2  25E7               	fcall	_SEND_DATA_BYTE
  1789                           
  1790                           ;protocol.c: 64: SEND_EOF();
  1791  00B3  2685               	fcall	_SEND_EOF
  1792                           
  1793                           ;protocol.c: 65: break;
  1794  00B4  0008               	return
  1795  00B5                     l1795:	
  1796                           ;protocol.c: 66: case 0x03:
  1797                           
  1798                           
  1799                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  1800  00B5  3065               	movlw	__x& (0+255)
  1801  00B6  2609               	fcall	_GET_CHAR_HELPER
  1802  00B7  3A00               	xorlw	0
  1803  00B8  1D03               	btfss	3,2
  1804  00B9  0008               	return
  1805  00BA  3066               	movlw	__y& (0+255)
  1806  00BB  2609               	fcall	_GET_CHAR_HELPER
  1807  00BC  3A00               	xorlw	0
  1808  00BD  1D03               	btfss	3,2
  1809  00BE  0008               	return
  1810  00BF  0020               	movlb	0	; select bank0
  1811  00C0  0865               	movf	__x,w
  1812  00C1  39F0               	andlw	240
  1813  00C2  1D03               	btfss	3,2
  1814  00C3  0008               	return
  1815  00C4  0866               	movf	__y,w
  1816  00C5  39F0               	andlw	240
  1817  00C6  1D03               	btfss	3,2
  1818  00C7  0008               	return
  1819  00C8  0866               	movf	__y,w
  1820  00C9  00F7               	movwf	??_control_transfer
  1821  00CA  3003               	movlw	3
  1822  00CB                     u1805:	
  1823  00CB  35F7               	lslf	??_control_transfer,f
  1824  00CC  3EFF               	addlw	-1
  1825  00CD  1D03               	skipz
  1826  00CE  28CB               	goto	u1805
  1827  00CF  3577               	lslf	??_control_transfer,w
  1828  00D0  0465               	iorwf	__x,w
  1829  00D1  00F8               	movwf	??_control_transfer+1
  1830  00D2  0878               	movf	??_control_transfer+1,w
  1831  00D3  00C1               	movwf	control_transfer@random_number
  1832  00D4  0841               	movf	control_transfer@random_number,w
  1833  00D5  00F7               	movwf	??_control_transfer
  1834  00D6  0877               	movf	??_control_transfer,w
  1835  00D7  07D1               	addwf	__checksum,f
  1836                           
  1837                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  1838  00D8  3065               	movlw	__x& (0+255)
  1839  00D9  2609               	fcall	_GET_CHAR_HELPER
  1840  00DA  3A00               	xorlw	0
  1841  00DB  1D03               	btfss	3,2
  1842  00DC  0008               	return
  1843  00DD  3066               	movlw	__y& (0+255)
  1844  00DE  2609               	fcall	_GET_CHAR_HELPER
  1845  00DF  3A00               	xorlw	0
  1846  00E0  1D03               	btfss	3,2
  1847  00E1  0008               	return
  1848  00E2  0020               	movlb	0	; select bank0
  1849  00E3  0865               	movf	__x,w
  1850  00E4  39F0               	andlw	240
  1851  00E5  1D03               	btfss	3,2
  1852  00E6  0008               	return
  1853  00E7  0866               	movf	__y,w
  1854  00E8  39F0               	andlw	240
  1855  00E9  1D03               	btfss	3,2
  1856  00EA  0008               	return
  1857  00EB  0866               	movf	__y,w
  1858  00EC  00F7               	movwf	??_control_transfer
  1859  00ED  3003               	movlw	3
  1860  00EE                     u1855:	
  1861  00EE  35F7               	lslf	??_control_transfer,f
  1862  00EF  3EFF               	addlw	-1
  1863  00F0  1D03               	skipz
  1864  00F1  28EE               	goto	u1855
  1865  00F2  3577               	lslf	??_control_transfer,w
  1866  00F3  0465               	iorwf	__x,w
  1867  00F4  00F8               	movwf	??_control_transfer+1
  1868  00F5  0878               	movf	??_control_transfer+1,w
  1869  00F6  00C2               	movwf	control_transfer@id
  1870  00F7  0842               	movf	control_transfer@id,w
  1871  00F8  00F7               	movwf	??_control_transfer
  1872  00F9  0877               	movf	??_control_transfer,w
  1873  00FA  07D1               	addwf	__checksum,f
  1874                           
  1875                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1876  00FB  3065               	movlw	__x& (0+255)
  1877  00FC  2609               	fcall	_GET_CHAR_HELPER
  1878  00FD  3A00               	xorlw	0
  1879  00FE  1D03               	btfss	3,2
  1880  00FF  0008               	return
  1881  0100  3066               	movlw	__y& (0+255)
  1882  0101  2609               	fcall	_GET_CHAR_HELPER
  1883  0102  3A00               	xorlw	0
  1884  0103  1D03               	btfss	3,2
  1885  0104  0008               	return
  1886  0105  0020               	movlb	0	; select bank0
  1887  0106  0865               	movf	__x,w
  1888  0107  39F0               	andlw	240
  1889  0108  1D03               	btfss	3,2
  1890  0109  0008               	return
  1891  010A  0866               	movf	__y,w
  1892  010B  39F0               	andlw	240
  1893  010C  1D03               	btfss	3,2
  1894  010D  0008               	return
  1895  010E  0866               	movf	__y,w
  1896  010F  00F7               	movwf	??_control_transfer
  1897  0110  3003               	movlw	3
  1898  0111                     u1905:	
  1899  0111  35F7               	lslf	??_control_transfer,f
  1900  0112  3EFF               	addlw	-1
  1901  0113  1D03               	skipz
  1902  0114  2911               	goto	u1905
  1903  0115  3577               	lslf	??_control_transfer,w
  1904  0116  0465               	iorwf	__x,w
  1905  0117  00F8               	movwf	??_control_transfer+1
  1906  0118  0878               	movf	??_control_transfer+1,w
  1907  0119  00E5               	movwf	__x
  1908  011A  0865               	movf	__x,w
  1909  011B  00F7               	movwf	??_control_transfer
  1910  011C  0877               	movf	??_control_transfer,w
  1911  011D  07D1               	addwf	__checksum,f
  1912  011E  0851               	movf	__checksum,w
  1913  011F  1D03               	skipz
  1914  0120  0008               	return
  1915  0121  3065               	movlw	__x& (0+255)
  1916  0122  2609               	fcall	_GET_CHAR_HELPER
  1917  0123  3A00               	xorlw	0
  1918  0124  1D03               	btfss	3,2
  1919  0125  0008               	return
  1920  0126  0020               	movlb	0	; select bank0
  1921  0127  0865               	movf	__x,w
  1922  0128  3A11               	xorlw	17
  1923  0129  1D03               	btfss	3,2
  1924  012A  0008               	return
  1925                           
  1926                           ;protocol.c: 70: if(random_number != my_random_number) goto err;
  1927  012B  0841               	movf	control_transfer@random_number,w
  1928  012C  0652               	xorwf	_my_random_number,w
  1929  012D  1D03               	btfss	3,2
  1930  012E  0008               	return
  1931                           
  1932                           ;protocol.c: 71: SEND_SOF();
  1933  012F  267A               	fcall	_SEND_SOF
  1934                           
  1935                           ;protocol.c: 72: SEND_DATA_BYTE(0x00);
  1936  0130  3000               	movlw	0
  1937  0131  25E7               	fcall	_SEND_DATA_BYTE
  1938                           
  1939                           ;protocol.c: 73: SEND_EOF();
  1940  0132  2685               	fcall	_SEND_EOF
  1941                           
  1942                           ;protocol.c: 74: config.id=id;
  1943  0133  0020               	movlb	0	; select bank0
  1944  0134  0842               	movf	control_transfer@id,w
  1945  0135  00F7               	movwf	??_control_transfer
  1946  0136  01F8               	clrf	??_control_transfer+1
  1947  0137  0877               	movf	??_control_transfer,w
  1948  0138  00D5               	movwf	_config
  1949  0139  0878               	movf	??_control_transfer+1,w
  1950  013A  00D6               	movwf	_config+1
  1951                           
  1952                           ;protocol.c: 75: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  1953  013B  30D0               	movlw	208
  1954  013C  00F1               	movwf	Save@address
  1955  013D  3007               	movlw	7
  1956  013E  00F2               	movwf	Save@address+1
  1957  013F  3055               	movlw	_config& (0+255)
  1958  0140  00F7               	movwf	??_control_transfer
  1959  0141  0877               	movf	??_control_transfer,w
  1960  0142  00F3               	movwf	Save@ptr
  1961  0143  3008               	movlw	8
  1962  0144  00F8               	movwf	??_control_transfer+1
  1963  0145  0878               	movf	??_control_transfer+1,w
  1964  0146  00F4               	movwf	Save@data_length
  1965  0147  24D3               	fcall	_Save
  1966                           
  1967                           ;protocol.c: 76: break;
  1968  0148  0008               	return
  1969  0149                     l1859:	
  1970                           ;protocol.c: 77: case 0x04:
  1971                           
  1972                           
  1973                           ;protocol.c: 78: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  1974  0149  3065               	movlw	__x& (0+255)
  1975  014A  2609               	fcall	_GET_CHAR_HELPER
  1976  014B  3A00               	xorlw	0
  1977  014C  1D03               	btfss	3,2
  1978  014D  0008               	return
  1979  014E  3066               	movlw	__y& (0+255)
  1980  014F  2609               	fcall	_GET_CHAR_HELPER
  1981  0150  3A00               	xorlw	0
  1982  0151  1D03               	btfss	3,2
  1983  0152  0008               	return
  1984  0153  0020               	movlb	0	; select bank0
  1985  0154  0865               	movf	__x,w
  1986  0155  39F0               	andlw	240
  1987  0156  1D03               	btfss	3,2
  1988  0157  0008               	return
  1989  0158  0866               	movf	__y,w
  1990  0159  39F0               	andlw	240
  1991  015A  1D03               	btfss	3,2
  1992  015B  0008               	return
  1993  015C  0866               	movf	__y,w
  1994  015D  00F7               	movwf	??_control_transfer
  1995  015E  3003               	movlw	3
  1996  015F                     u1995:	
  1997  015F  35F7               	lslf	??_control_transfer,f
  1998  0160  3EFF               	addlw	-1
  1999  0161  1D03               	skipz
  2000  0162  295F               	goto	u1995
  2001  0163  3577               	lslf	??_control_transfer,w
  2002  0164  0465               	iorwf	__x,w
  2003  0165  00F8               	movwf	??_control_transfer+1
  2004  0166  0878               	movf	??_control_transfer+1,w
  2005  0167  00C7               	movwf	control_transfer@x
  2006  0168  0847               	movf	control_transfer@x,w
  2007  0169  00F7               	movwf	??_control_transfer
  2008  016A  0877               	movf	??_control_transfer,w
  2009  016B  07D1               	addwf	__checksum,f
  2010                           
  2011                           ;protocol.c: 79: *((uint8_t*)(&page))=x;
  2012  016C  0847               	movf	control_transfer@x,w
  2013  016D  00F7               	movwf	??_control_transfer
  2014  016E  0877               	movf	??_control_transfer,w
  2015  016F  00C5               	movwf	control_transfer@page
  2016                           
  2017                           ;protocol.c: 80: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2018  0170  3065               	movlw	__x& (0+255)
  2019  0171  2609               	fcall	_GET_CHAR_HELPER
  2020  0172  3A00               	xorlw	0
  2021  0173  1D03               	btfss	3,2
  2022  0174  0008               	return
  2023  0175  3066               	movlw	__y& (0+255)
  2024  0176  2609               	fcall	_GET_CHAR_HELPER
  2025  0177  3A00               	xorlw	0
  2026  0178  1D03               	btfss	3,2
  2027  0179  0008               	return
  2028  017A  0020               	movlb	0	; select bank0
  2029  017B  0865               	movf	__x,w
  2030  017C  39F0               	andlw	240
  2031  017D  1D03               	btfss	3,2
  2032  017E  0008               	return
  2033  017F  0866               	movf	__y,w
  2034  0180  39F0               	andlw	240
  2035  0181  1D03               	btfss	3,2
  2036  0182  0008               	return
  2037  0183  0866               	movf	__y,w
  2038  0184  00F7               	movwf	??_control_transfer
  2039  0185  3003               	movlw	3
  2040  0186                     u2045:	
  2041  0186  35F7               	lslf	??_control_transfer,f
  2042  0187  3EFF               	addlw	-1
  2043  0188  1D03               	skipz
  2044  0189  2986               	goto	u2045
  2045  018A  3577               	lslf	??_control_transfer,w
  2046  018B  0465               	iorwf	__x,w
  2047  018C  00F8               	movwf	??_control_transfer+1
  2048  018D  0878               	movf	??_control_transfer+1,w
  2049  018E  00C7               	movwf	control_transfer@x
  2050  018F  0847               	movf	control_transfer@x,w
  2051  0190  00F7               	movwf	??_control_transfer
  2052  0191  0877               	movf	??_control_transfer,w
  2053  0192  07D1               	addwf	__checksum,f
  2054                           
  2055                           ;protocol.c: 81: *(((uint8_t*)(&page))+1)=x;
  2056  0193  0847               	movf	control_transfer@x,w
  2057  0194  00F7               	movwf	??_control_transfer
  2058  0195  0877               	movf	??_control_transfer,w
  2059  0196  00C6               	movwf	control_transfer@page+1
  2060                           
  2061                           ;protocol.c: 82: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2062  0197  3065               	movlw	__x& (0+255)
  2063  0198  2609               	fcall	_GET_CHAR_HELPER
  2064  0199  3A00               	xorlw	0
  2065  019A  1D03               	btfss	3,2
  2066  019B  0008               	return
  2067  019C  3066               	movlw	__y& (0+255)
  2068  019D  2609               	fcall	_GET_CHAR_HELPER
  2069  019E  3A00               	xorlw	0
  2070  019F  1D03               	btfss	3,2
  2071  01A0  0008               	return
  2072  01A1  0020               	movlb	0	; select bank0
  2073  01A2  0865               	movf	__x,w
  2074  01A3  39F0               	andlw	240
  2075  01A4  1D03               	btfss	3,2
  2076  01A5  0008               	return
  2077  01A6  0866               	movf	__y,w
  2078  01A7  39F0               	andlw	240
  2079  01A8  1D03               	btfss	3,2
  2080  01A9  0008               	return
  2081  01AA  0866               	movf	__y,w
  2082  01AB  00F7               	movwf	??_control_transfer
  2083  01AC  3003               	movlw	3
  2084  01AD                     u2095:	
  2085  01AD  35F7               	lslf	??_control_transfer,f
  2086  01AE  3EFF               	addlw	-1
  2087  01AF  1D03               	skipz
  2088  01B0  29AD               	goto	u2095
  2089  01B1  3577               	lslf	??_control_transfer,w
  2090  01B2  0465               	iorwf	__x,w
  2091  01B3  00F8               	movwf	??_control_transfer+1
  2092  01B4  0878               	movf	??_control_transfer+1,w
  2093  01B5  00E5               	movwf	__x
  2094  01B6  0865               	movf	__x,w
  2095  01B7  00F7               	movwf	??_control_transfer
  2096  01B8  0877               	movf	??_control_transfer,w
  2097  01B9  07D1               	addwf	__checksum,f
  2098  01BA  0851               	movf	__checksum,w
  2099  01BB  1D03               	skipz
  2100  01BC  0008               	return
  2101  01BD  3065               	movlw	__x& (0+255)
  2102  01BE  2609               	fcall	_GET_CHAR_HELPER
  2103  01BF  3A00               	xorlw	0
  2104  01C0  1D03               	btfss	3,2
  2105  01C1  0008               	return
  2106  01C2  0020               	movlb	0	; select bank0
  2107  01C3  0865               	movf	__x,w
  2108  01C4  3A11               	xorlw	17
  2109  01C5  1D03               	btfss	3,2
  2110  01C6  0008               	return
  2111                           
  2112                           ;protocol.c: 83: Load(page,data,16);
  2113  01C7  0846               	movf	control_transfer@page+1,w
  2114  01C8  01F2               	clrf	Load@address+1
  2115  01C9  07F2               	addwf	Load@address+1,f
  2116  01CA  0845               	movf	control_transfer@page,w
  2117  01CB  01F1               	clrf	Load@address
  2118  01CC  07F1               	addwf	Load@address,f
  2119  01CD  3020               	movlw	control_transfer@data& (0+255)
  2120  01CE  00F7               	movwf	??_control_transfer
  2121  01CF  0877               	movf	??_control_transfer,w
  2122  01D0  00F3               	movwf	Load@ptr
  2123  01D1  3010               	movlw	16
  2124  01D2  00F8               	movwf	??_control_transfer+1
  2125  01D3  0878               	movf	??_control_transfer+1,w
  2126  01D4  00F4               	movwf	Load@data_length
  2127  01D5  25C2               	fcall	_Load
  2128                           
  2129                           ;protocol.c: 84: SEND_SOF();
  2130  01D6  267A               	fcall	_SEND_SOF
  2131                           
  2132                           ;protocol.c: 85: SEND_DATA_BYTE(0x05);
  2133  01D7  3005               	movlw	5
  2134  01D8  25E7               	fcall	_SEND_DATA_BYTE
  2135                           
  2136                           ;protocol.c: 86: dptr=(uint8_t*)data;
  2137  01D9  3020               	movlw	control_transfer@data& (0+255)
  2138  01DA  00F7               	movwf	??_control_transfer
  2139  01DB  0877               	movf	??_control_transfer,w
  2140  01DC  0020               	movlb	0	; select bank0
  2141  01DD  00C3               	movwf	control_transfer@dptr
  2142                           
  2143                           ;protocol.c: 87: for(i=0;i<32;i++)
  2144  01DE  01C4               	clrf	control_transfer@i
  2145  01DF  3020               	movlw	32
  2146  01E0  0244               	subwf	control_transfer@i,w
  2147  01E1  1803               	btfsc	3,0
  2148  01E2  29F5               	goto	l1939
  2149  01E3                     l1931:	
  2150                           
  2151                           ;protocol.c: 88: {
  2152                           ;protocol.c: 89: SEND_DATA_BYTE(*dptr++);
  2153  01E3  0843               	movf	control_transfer@dptr,w
  2154  01E4  0086               	movwf	6
  2155  01E5  0187               	clrf	7
  2156  01E6  0801               	movf	1,w
  2157  01E7  25E7               	fcall	_SEND_DATA_BYTE
  2158  01E8  3001               	movlw	1
  2159  01E9  00F7               	movwf	??_control_transfer
  2160  01EA  0877               	movf	??_control_transfer,w
  2161  01EB  0020               	movlb	0	; select bank0
  2162  01EC  07C3               	addwf	control_transfer@dptr,f
  2163  01ED  3001               	movlw	1
  2164  01EE  00F7               	movwf	??_control_transfer
  2165  01EF  0877               	movf	??_control_transfer,w
  2166  01F0  07C4               	addwf	control_transfer@i,f
  2167  01F1  3020               	movlw	32
  2168  01F2  0244               	subwf	control_transfer@i,w
  2169  01F3  1C03               	skipc
  2170  01F4  29E3               	goto	l1931
  2171  01F5                     l1939:	
  2172                           
  2173                           ;protocol.c: 90: }
  2174                           ;protocol.c: 91: SEND_EOF();
  2175  01F5  2685               	fcall	_SEND_EOF
  2176                           
  2177                           ;protocol.c: 92: break;
  2178  01F6  0008               	return
  2179  01F7                     l1941:	
  2180                           ;protocol.c: 93: case 0x06:
  2181                           
  2182                           
  2183                           ;protocol.c: 94: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2184  01F7  3065               	movlw	__x& (0+255)
  2185  01F8  2609               	fcall	_GET_CHAR_HELPER
  2186  01F9  3A00               	xorlw	0
  2187  01FA  1D03               	btfss	3,2
  2188  01FB  0008               	return
  2189  01FC  3066               	movlw	__y& (0+255)
  2190  01FD  2609               	fcall	_GET_CHAR_HELPER
  2191  01FE  3A00               	xorlw	0
  2192  01FF  1D03               	btfss	3,2
  2193  0200  0008               	return
  2194  0201  0020               	movlb	0	; select bank0
  2195  0202  0865               	movf	__x,w
  2196  0203  39F0               	andlw	240
  2197  0204  1D03               	btfss	3,2
  2198  0205  0008               	return
  2199  0206  0866               	movf	__y,w
  2200  0207  39F0               	andlw	240
  2201  0208  1D03               	btfss	3,2
  2202  0209  0008               	return
  2203  020A  0866               	movf	__y,w
  2204  020B  00F7               	movwf	??_control_transfer
  2205  020C  3003               	movlw	3
  2206  020D                     u2195:	
  2207  020D  35F7               	lslf	??_control_transfer,f
  2208  020E  3EFF               	addlw	-1
  2209  020F  1D03               	skipz
  2210  0210  2A0D               	goto	u2195
  2211  0211  3577               	lslf	??_control_transfer,w
  2212  0212  0465               	iorwf	__x,w
  2213  0213  00F8               	movwf	??_control_transfer+1
  2214  0214  0878               	movf	??_control_transfer+1,w
  2215  0215  00C7               	movwf	control_transfer@x
  2216  0216  0847               	movf	control_transfer@x,w
  2217  0217  00F7               	movwf	??_control_transfer
  2218  0218  0877               	movf	??_control_transfer,w
  2219  0219  07D1               	addwf	__checksum,f
  2220                           
  2221                           ;protocol.c: 95: *((uint8_t*)(&page))=x;
  2222  021A  0847               	movf	control_transfer@x,w
  2223  021B  00F7               	movwf	??_control_transfer
  2224  021C  0877               	movf	??_control_transfer,w
  2225  021D  00C5               	movwf	control_transfer@page
  2226                           
  2227                           ;protocol.c: 96: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2228  021E  3065               	movlw	__x& (0+255)
  2229  021F  2609               	fcall	_GET_CHAR_HELPER
  2230  0220  3A00               	xorlw	0
  2231  0221  1D03               	btfss	3,2
  2232  0222  0008               	return
  2233  0223  3066               	movlw	__y& (0+255)
  2234  0224  2609               	fcall	_GET_CHAR_HELPER
  2235  0225  3A00               	xorlw	0
  2236  0226  1D03               	btfss	3,2
  2237  0227  0008               	return
  2238  0228  0020               	movlb	0	; select bank0
  2239  0229  0865               	movf	__x,w
  2240  022A  39F0               	andlw	240
  2241  022B  1D03               	btfss	3,2
  2242  022C  0008               	return
  2243  022D  0866               	movf	__y,w
  2244  022E  39F0               	andlw	240
  2245  022F  1D03               	btfss	3,2
  2246  0230  0008               	return
  2247  0231  0866               	movf	__y,w
  2248  0232  00F7               	movwf	??_control_transfer
  2249  0233  3003               	movlw	3
  2250  0234                     u2245:	
  2251  0234  35F7               	lslf	??_control_transfer,f
  2252  0235  3EFF               	addlw	-1
  2253  0236  1D03               	skipz
  2254  0237  2A34               	goto	u2245
  2255  0238  3577               	lslf	??_control_transfer,w
  2256  0239  0465               	iorwf	__x,w
  2257  023A  00F8               	movwf	??_control_transfer+1
  2258  023B  0878               	movf	??_control_transfer+1,w
  2259  023C  00C7               	movwf	control_transfer@x
  2260  023D  0847               	movf	control_transfer@x,w
  2261  023E  00F7               	movwf	??_control_transfer
  2262  023F  0877               	movf	??_control_transfer,w
  2263  0240  07D1               	addwf	__checksum,f
  2264                           
  2265                           ;protocol.c: 97: *(((uint8_t*)(&page))+1)=x;
  2266  0241  0847               	movf	control_transfer@x,w
  2267  0242  00F7               	movwf	??_control_transfer
  2268  0243  0877               	movf	??_control_transfer,w
  2269  0244  00C6               	movwf	control_transfer@page+1
  2270                           
  2271                           ;protocol.c: 98: dptr=(uint8_t*)data;
  2272  0245  3020               	movlw	control_transfer@data& (0+255)
  2273  0246  00F7               	movwf	??_control_transfer
  2274  0247  0877               	movf	??_control_transfer,w
  2275  0248  00C3               	movwf	control_transfer@dptr
  2276                           
  2277                           ;protocol.c: 99: for(i=0;i<32;i++)
  2278  0249  01C4               	clrf	control_transfer@i
  2279  024A  3020               	movlw	32
  2280  024B  0244               	subwf	control_transfer@i,w
  2281  024C  1803               	btfsc	3,0
  2282  024D  2A84               	goto	l2003
  2283  024E                     l1981:	
  2284                           
  2285                           ;protocol.c: 100: {
  2286                           ;protocol.c: 101: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2287  024E  3065               	movlw	__x& (0+255)
  2288  024F  2609               	fcall	_GET_CHAR_HELPER
  2289  0250  3A00               	xorlw	0
  2290  0251  1D03               	btfss	3,2
  2291  0252  0008               	return
  2292  0253  3066               	movlw	__y& (0+255)
  2293  0254  2609               	fcall	_GET_CHAR_HELPER
  2294  0255  3A00               	xorlw	0
  2295  0256  1D03               	btfss	3,2
  2296  0257  0008               	return
  2297  0258  0020               	movlb	0	; select bank0
  2298  0259  0865               	movf	__x,w
  2299  025A  39F0               	andlw	240
  2300  025B  1D03               	btfss	3,2
  2301  025C  0008               	return
  2302  025D  0866               	movf	__y,w
  2303  025E  39F0               	andlw	240
  2304  025F  1D03               	btfss	3,2
  2305  0260  0008               	return
  2306  0261  0866               	movf	__y,w
  2307  0262  00F7               	movwf	??_control_transfer
  2308  0263  3003               	movlw	3
  2309  0264                     u2305:	
  2310  0264  35F7               	lslf	??_control_transfer,f
  2311  0265  3EFF               	addlw	-1
  2312  0266  1D03               	skipz
  2313  0267  2A64               	goto	u2305
  2314  0268  3577               	lslf	??_control_transfer,w
  2315  0269  0465               	iorwf	__x,w
  2316  026A  00F8               	movwf	??_control_transfer+1
  2317  026B  0878               	movf	??_control_transfer+1,w
  2318  026C  00C7               	movwf	control_transfer@x
  2319  026D  0847               	movf	control_transfer@x,w
  2320  026E  00F7               	movwf	??_control_transfer
  2321  026F  0877               	movf	??_control_transfer,w
  2322  0270  07D1               	addwf	__checksum,f
  2323                           
  2324                           ;protocol.c: 102: *dptr++=x;
  2325  0271  0847               	movf	control_transfer@x,w
  2326  0272  00F7               	movwf	??_control_transfer
  2327  0273  0843               	movf	control_transfer@dptr,w
  2328  0274  0086               	movwf	6
  2329  0275  0187               	clrf	7
  2330  0276  0877               	movf	??_control_transfer,w
  2331  0277  0081               	movwf	1
  2332  0278  3001               	movlw	1
  2333  0279  00F7               	movwf	??_control_transfer
  2334  027A  0877               	movf	??_control_transfer,w
  2335  027B  07C3               	addwf	control_transfer@dptr,f
  2336  027C  3001               	movlw	1
  2337  027D  00F7               	movwf	??_control_transfer
  2338  027E  0877               	movf	??_control_transfer,w
  2339  027F  07C4               	addwf	control_transfer@i,f
  2340  0280  3020               	movlw	32
  2341  0281  0244               	subwf	control_transfer@i,w
  2342  0282  1C03               	skipc
  2343  0283  2A4E               	goto	l1981
  2344  0284                     l2003:	
  2345                           
  2346                           ;protocol.c: 103: }
  2347                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2348  0284  3065               	movlw	__x& (0+255)
  2349  0285  2609               	fcall	_GET_CHAR_HELPER
  2350  0286  3A00               	xorlw	0
  2351  0287  1D03               	btfss	3,2
  2352  0288  0008               	return
  2353  0289  3066               	movlw	__y& (0+255)
  2354  028A  2609               	fcall	_GET_CHAR_HELPER
  2355  028B  3A00               	xorlw	0
  2356  028C  1D03               	btfss	3,2
  2357  028D  0008               	return
  2358  028E  0020               	movlb	0	; select bank0
  2359  028F  0865               	movf	__x,w
  2360  0290  39F0               	andlw	240
  2361  0291  1D03               	btfss	3,2
  2362  0292  0008               	return
  2363  0293  0866               	movf	__y,w
  2364  0294  39F0               	andlw	240
  2365  0295  1D03               	btfss	3,2
  2366  0296  0008               	return
  2367  0297  0866               	movf	__y,w
  2368  0298  00F7               	movwf	??_control_transfer
  2369  0299  3003               	movlw	3
  2370  029A                     u2365:	
  2371  029A  35F7               	lslf	??_control_transfer,f
  2372  029B  3EFF               	addlw	-1
  2373  029C  1D03               	skipz
  2374  029D  2A9A               	goto	u2365
  2375  029E  3577               	lslf	??_control_transfer,w
  2376  029F  0465               	iorwf	__x,w
  2377  02A0  00F8               	movwf	??_control_transfer+1
  2378  02A1  0878               	movf	??_control_transfer+1,w
  2379  02A2  00E5               	movwf	__x
  2380  02A3  0865               	movf	__x,w
  2381  02A4  00F7               	movwf	??_control_transfer
  2382  02A5  0877               	movf	??_control_transfer,w
  2383  02A6  07D1               	addwf	__checksum,f
  2384  02A7  0851               	movf	__checksum,w
  2385  02A8  1D03               	skipz
  2386  02A9  0008               	return
  2387  02AA  3065               	movlw	__x& (0+255)
  2388  02AB  2609               	fcall	_GET_CHAR_HELPER
  2389  02AC  3A00               	xorlw	0
  2390  02AD  1D03               	btfss	3,2
  2391  02AE  0008               	return
  2392  02AF  0020               	movlb	0	; select bank0
  2393  02B0  0865               	movf	__x,w
  2394  02B1  3A11               	xorlw	17
  2395  02B2  1D03               	btfss	3,2
  2396  02B3  0008               	return
  2397                           
  2398                           ;protocol.c: 105: Save(page,data,16);
  2399  02B4  0846               	movf	control_transfer@page+1,w
  2400  02B5  01F2               	clrf	Save@address+1
  2401  02B6  07F2               	addwf	Save@address+1,f
  2402  02B7  0845               	movf	control_transfer@page,w
  2403  02B8  01F1               	clrf	Save@address
  2404  02B9  07F1               	addwf	Save@address,f
  2405  02BA  3020               	movlw	control_transfer@data& (0+255)
  2406  02BB  00F7               	movwf	??_control_transfer
  2407  02BC  0877               	movf	??_control_transfer,w
  2408  02BD  00F3               	movwf	Save@ptr
  2409  02BE  3010               	movlw	16
  2410  02BF  00F8               	movwf	??_control_transfer+1
  2411  02C0  0878               	movf	??_control_transfer+1,w
  2412  02C1  00F4               	movwf	Save@data_length
  2413  02C2  24D3               	fcall	_Save
  2414                           
  2415                           ;protocol.c: 106: switch(page)
  2416  02C3  2AE0               	goto	l2037
  2417  02C4                     l2031:	
  2418                           ;protocol.c: 107: {
  2419                           ;protocol.c: 108: case 0x7D0:
  2420                           
  2421                           
  2422                           ;protocol.c: 109: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2423  02C4  30D0               	movlw	208
  2424  02C5  00F1               	movwf	Load@address
  2425  02C6  3007               	movlw	7
  2426  02C7  00F2               	movwf	Load@address+1
  2427  02C8  3055               	movlw	_config& (0+255)
  2428  02C9  00F7               	movwf	??_control_transfer
  2429  02CA  0877               	movf	??_control_transfer,w
  2430  02CB  00F3               	movwf	Load@ptr
  2431  02CC  3008               	movlw	8
  2432  02CD  00F8               	movwf	??_control_transfer+1
  2433  02CE  0878               	movf	??_control_transfer+1,w
  2434  02CF  00F4               	movwf	Load@data_length
  2435  02D0  25C2               	fcall	_Load
  2436                           
  2437                           ;protocol.c: 110: break;
  2438  02D1  2AEE               	goto	l2039
  2439  02D2                     l2033:	
  2440                           ;protocol.c: 111: case 0x7E0:
  2441                           
  2442                           
  2443                           ;protocol.c: 112: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2444  02D2  30E0               	movlw	224
  2445  02D3  00F1               	movwf	Load@address
  2446  02D4  3007               	movlw	7
  2447  02D5  00F2               	movwf	Load@address+1
  2448  02D6  30A0               	movlw	_hitlist& (0+255)
  2449  02D7  00F7               	movwf	??_control_transfer
  2450  02D8  0877               	movf	??_control_transfer,w
  2451  02D9  00F3               	movwf	Load@ptr
  2452  02DA  3010               	movlw	16
  2453  02DB  00F8               	movwf	??_control_transfer+1
  2454  02DC  0878               	movf	??_control_transfer+1,w
  2455  02DD  00F4               	movwf	Load@data_length
  2456  02DE  25C2               	fcall	_Load
  2457                           
  2458                           ;protocol.c: 114: }
  2459                           
  2460                           ;protocol.c: 113: break;
  2461  02DF  2AEE               	goto	l2039
  2462  02E0                     l2037:	
  2463                           
  2464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2465                           ; Switch size 1, requested type "space"
  2466                           ; Number of cases is 1, Range of values is 7 to 7
  2467                           ; switch strategies available:
  2468                           ; Name         Instructions Cycles
  2469                           ; simple_byte            4     3 (average)
  2470                           ; direct_byte           11     9 (fixed)
  2471                           ; jumptable            263     9 (fixed)
  2472                           ;	Chosen strategy is simple_byte
  2473  02E0  0020               	movlb	0	; select bank0
  2474  02E1  0846               	movf	control_transfer@page+1,w
  2475  02E2  3A07               	xorlw	7	; case 7
  2476  02E3  1903               	skipnz
  2477  02E4  2AE6               	goto	l2189
  2478  02E5  2AEE               	goto	l2039
  2479  02E6                     l2189:	
  2480                           
  2481                           ; Switch size 1, requested type "space"
  2482                           ; Number of cases is 2, Range of values is 208 to 224
  2483                           ; switch strategies available:
  2484                           ; Name         Instructions Cycles
  2485                           ; simple_byte            7     4 (average)
  2486                           ; direct_byte           43     9 (fixed)
  2487                           ; jumptable            263     9 (fixed)
  2488                           ;	Chosen strategy is simple_byte
  2489  02E6  0845               	movf	control_transfer@page,w
  2490  02E7  3AD0               	xorlw	208	; case 208
  2491  02E8  1903               	skipnz
  2492  02E9  2AC4               	goto	l2031
  2493  02EA  3A30               	xorlw	48	; case 224
  2494  02EB  1903               	skipnz
  2495  02EC  2AD2               	goto	l2033
  2496  02ED  2AEE               	goto	l2039
  2497  02EE                     l2039:	
  2498                           
  2499                           ;protocol.c: 115: SEND_SOF();
  2500  02EE  267A               	fcall	_SEND_SOF
  2501                           
  2502                           ;protocol.c: 116: SEND_DATA_BYTE(0x00);
  2503  02EF  3000               	movlw	0
  2504  02F0  25E7               	fcall	_SEND_DATA_BYTE
  2505                           
  2506                           ;protocol.c: 117: SEND_EOF();
  2507  02F1  2685               	fcall	_SEND_EOF
  2508                           
  2509                           ;protocol.c: 121: }
  2510                           
  2511                           ;protocol.c: 120: goto err;
  2512                           
  2513                           ;protocol.c: 119: default:
  2514                           
  2515                           ;protocol.c: 118: break;
  2516  02F2  0008               	return
  2517  02F3                     l2043:	
  2518  02F3  0020               	movlb	0	; select bank0
  2519  02F4  0840               	movf	control_transfer@cmd,w
  2520                           
  2521                           ; Switch size 1, requested type "space"
  2522                           ; Number of cases is 4, Range of values is 1 to 6
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte           13     7 (average)
  2526                           ; direct_byte           21     9 (fixed)
  2527                           ; jumptable            263     9 (fixed)
  2528                           ;	Chosen strategy is simple_byte
  2529  02F5  3A01               	xorlw	1	; case 1
  2530  02F6  1903               	skipnz
  2531  02F7  287D               	goto	l1767
  2532  02F8  3A02               	xorlw	2	; case 3
  2533  02F9  1903               	skipnz
  2534  02FA  28B5               	goto	l1795
  2535  02FB  3A07               	xorlw	7	; case 4
  2536  02FC  1903               	skipnz
  2537  02FD  2949               	goto	l1859
  2538  02FE  3A02               	xorlw	2	; case 6
  2539  02FF  1903               	skipnz
  2540  0300  29F7               	goto	l1941
  2541  0301  2B03               	goto	l337
  2542  0302  0008               	return
  2543  0303                     l337:	
  2544                           ;protocol.c: 123: return;
  2545                           
  2546                           ;protocol.c: 122: err:
  2547                           
  2548  0303  0008               	return
  2549  0304                     __end_of_control_transfer:	
  2550                           
  2551                           	psect	text6
  2552  067A                     __ptext6:	
  2553 ;; *************** function _SEND_SOF *****************
  2554 ;; Defined at:
  2555 ;;		line 35 in file "protocol.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;		None
  2560 ;; Return value:  Size  Location     Type
  2561 ;;		None               void
  2562 ;; Registers used:
  2563 ;;		wreg, status,2, status,0, pclath, cstack
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2569 ;;      Params:         0       0       0       0
  2570 ;;      Locals:         0       0       0       0
  2571 ;;      Temps:          1       0       0       0
  2572 ;;      Totals:         1       0       0       0
  2573 ;;Total ram usage:        1 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    4
  2576 ;; This function calls:
  2577 ;;		_SEND_DATA_BYTE
  2578 ;;		_Send_Byte
  2579 ;; This function is called by:
  2580 ;;		_control_transfer
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _SEND_SOF
  2586  067A                     _SEND_SOF:	
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2590  067A  3010               	movlw	16
  2591  067B  265E               	fcall	_Send_Byte
  2592  067C  3085               	movlw	133
  2593  067D  00F5               	movwf	??_SEND_SOF
  2594  067E                     u2527:	
  2595  067E  0BF5               	decfsz	??_SEND_SOF,f
  2596  067F  2E7E               	goto	u2527
  2597  0680  0020               	movlb	0	; select bank0
  2598  0681  01D1               	clrf	__checksum
  2599  0682  0855               	movf	_config,w
  2600  0683  25E7               	fcall	_SEND_DATA_BYTE
  2601  0684  0008               	return
  2602  0685                     __end_of_SEND_SOF:	
  2603                           
  2604                           	psect	text7
  2605  0685                     __ptext7:	
  2606 ;; *************** function _SEND_EOF *****************
  2607 ;; Defined at:
  2608 ;;		line 36 in file "protocol.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;		None               void
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0
  2623 ;;      Locals:         0       0       0       0
  2624 ;;      Temps:          1       0       0       0
  2625 ;;      Totals:         1       0       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    4
  2629 ;; This function calls:
  2630 ;;		_SEND_DATA_BYTE
  2631 ;;		_Send_Byte
  2632 ;; This function is called by:
  2633 ;;		_control_transfer
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function _SEND_EOF
  2639  0685                     _SEND_EOF:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2643  0685  0020               	movlb	0	; select bank0
  2644  0686  0851               	movf	__checksum,w
  2645  0687  25E7               	fcall	_SEND_DATA_BYTE
  2646  0688  3011               	movlw	17
  2647  0689  265E               	fcall	_Send_Byte
  2648  068A  3085               	movlw	133
  2649  068B  00F5               	movwf	??_SEND_EOF
  2650  068C                     u2537:	
  2651  068C  0BF5               	decfsz	??_SEND_EOF,f
  2652  068D  2E8C               	goto	u2537
  2653  068E  0008               	return
  2654  068F                     __end_of_SEND_EOF:	
  2655                           
  2656                           	psect	text8
  2657  05E7                     __ptext8:	
  2658 ;; *************** function _SEND_DATA_BYTE *****************
  2659 ;; Defined at:
  2660 ;;		line 34 in file "protocol.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  b               1    wreg     unsigned char 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  b               1    4[COMMON] unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		wreg, status,2, status,0, pclath, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2674 ;;      Params:         0       0       0       0
  2675 ;;      Locals:         1       0       0       0
  2676 ;;      Temps:          2       0       0       0
  2677 ;;      Totals:         3       0       0       0
  2678 ;;Total ram usage:        3 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    3
  2681 ;; This function calls:
  2682 ;;		_Send_Byte
  2683 ;; This function is called by:
  2684 ;;		_SEND_SOF
  2685 ;;		_SEND_EOF
  2686 ;;		_control_transfer
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           
  2691                           ;psect for function _SEND_DATA_BYTE
  2692  05E7                     _SEND_DATA_BYTE:	
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  2696                           ;SEND_DATA_BYTE@b stored from wreg
  2697  05E7  00F4               	movwf	SEND_DATA_BYTE@b
  2698  05E8  0874               	movf	SEND_DATA_BYTE@b,w
  2699  05E9  390F               	andlw	15
  2700  05EA  00F2               	movwf	??_SEND_DATA_BYTE
  2701  05EB  0872               	movf	??_SEND_DATA_BYTE,w
  2702  05EC  0020               	movlb	0	; select bank0
  2703  05ED  00E5               	movwf	__x
  2704  05EE  0874               	movf	SEND_DATA_BYTE@b,w
  2705  05EF  00F2               	movwf	??_SEND_DATA_BYTE
  2706  05F0  3004               	movlw	4
  2707  05F1                     u1285:	
  2708  05F1  36F2               	lsrf	??_SEND_DATA_BYTE,f
  2709  05F2  0B89               	decfsz	9,f
  2710  05F3  2DF1               	goto	u1285
  2711  05F4  0872               	movf	??_SEND_DATA_BYTE,w
  2712  05F5  00F3               	movwf	??_SEND_DATA_BYTE+1
  2713  05F6  0873               	movf	??_SEND_DATA_BYTE+1,w
  2714  05F7  00E6               	movwf	__y
  2715  05F8  0865               	movf	__x,w
  2716  05F9  265E               	fcall	_Send_Byte
  2717  05FA  3085               	movlw	133
  2718  05FB  00F2               	movwf	??_SEND_DATA_BYTE
  2719  05FC                     u2547:	
  2720  05FC  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  2721  05FD  2DFC               	goto	u2547
  2722  05FE  0020               	movlb	0	; select bank0
  2723  05FF  0866               	movf	__y,w
  2724  0600  265E               	fcall	_Send_Byte
  2725  0601  3085               	movlw	133
  2726  0602  00F2               	movwf	??_SEND_DATA_BYTE
  2727  0603                     u2557:	
  2728  0603  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  2729  0604  2E03               	goto	u2557
  2730  0605  0874               	movf	SEND_DATA_BYTE@b,w
  2731  0606  0020               	movlb	0	; select bank0
  2732  0607  02D1               	subwf	__checksum,f
  2733  0608  0008               	return
  2734  0609                     __end_of_SEND_DATA_BYTE:	
  2735                           
  2736                           	psect	text9
  2737  0609                     __ptext9:	
  2738 ;; *************** function _GET_CHAR_HELPER *****************
  2739 ;; Defined at:
  2740 ;;		line 28 in file "protocol.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  val             1    wreg     PTR unsigned char 
  2743 ;;		 -> _y(1), _x(1), 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  val             1    2[COMMON] PTR unsigned char 
  2746 ;;		 -> _y(1), _x(1), 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      unsigned char 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr1l, fsr1h, status,2
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2756 ;;      Params:         0       0       0       0
  2757 ;;      Locals:         1       0       0       0
  2758 ;;      Temps:          1       0       0       0
  2759 ;;      Totals:         2       0       0       0
  2760 ;;Total ram usage:        2 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_control_transfer
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _GET_CHAR_HELPER
  2772  0609                     _GET_CHAR_HELPER:	
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  2776                           ;GET_CHAR_HELPER@val stored from wreg
  2777  0609  00F2               	movwf	GET_CHAR_HELPER@val
  2778  060A  0020               	movlb	0	; select bank0
  2779  060B  01CF               	clrf	__i
  2780  060C  01D0               	clrf	__i+1
  2781  060D                     l224:	
  2782  060D  1A91               	btfsc	17,5	;volatile
  2783  060E  2E1C               	goto	l1691
  2784  060F  3001               	movlw	1
  2785  0610  07CF               	addwf	__i,f
  2786  0611  3000               	movlw	0
  2787  0612  3DD0               	addwfc	__i+1,f
  2788  0613  3027               	movlw	39
  2789  0614  0250               	subwf	__i+1,w
  2790  0615  3010               	movlw	16
  2791  0616  1903               	skipnz
  2792  0617  024F               	subwf	__i,w
  2793  0618  1C03               	skipc
  2794  0619  2E0D               	goto	l224
  2795  061A  3001               	movlw	1
  2796  061B  0008               	return
  2797  061C                     l1691:	
  2798  061C  0023               	movlb	3	; select bank3
  2799  061D  0819               	movf	25,w	;volatile
  2800  061E  00F1               	movwf	??_GET_CHAR_HELPER
  2801  061F  0872               	movf	GET_CHAR_HELPER@val,w
  2802  0620  0086               	movwf	6
  2803  0621  0187               	clrf	7
  2804  0622  0871               	movf	??_GET_CHAR_HELPER,w
  2805  0623  0081               	movwf	1
  2806  0624  3000               	movlw	0
  2807  0625  0008               	return
  2808  0626                     __end_of_GET_CHAR_HELPER:	
  2809                           
  2810                           	psect	text10
  2811  0643                     __ptext10:	
  2812 ;; *************** function _Setup *****************
  2813 ;; Defined at:
  2814 ;;		line 10 in file "user.c"
  2815 ;; Parameters:    Size  Location     Type
  2816 ;;		None
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;		None
  2819 ;; Return value:  Size  Location     Type
  2820 ;;		None               void
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2828 ;;      Params:         0       0       0       0
  2829 ;;      Locals:         0       0       0       0
  2830 ;;      Temps:          1       0       0       0
  2831 ;;      Totals:         1       0       0       0
  2832 ;;Total ram usage:        1 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    1
  2835 ;; This function calls:
  2836 ;;		Nothing
  2837 ;; This function is called by:
  2838 ;;		_main
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           
  2843                           ;psect for function _Setup
  2844  0643                     _Setup:	
  2845                           
  2846                           ;user.c: 12: OSCCON = 0b01111010;
  2847                           
  2848                           ;incstack = 0
  2849                           ; Regs used in _Setup: [wreg+status,2+status,0]
  2850  0643  307A               	movlw	122
  2851  0644  0021               	movlb	1	; select bank1
  2852  0645  0099               	movwf	25	;volatile
  2853                           
  2854                           ;user.c: 14: ANSELA = 0x00;
  2855  0646  0023               	movlb	3	; select bank3
  2856  0647  018C               	clrf	12	;volatile
  2857                           
  2858                           ;user.c: 15: TRISAbits.TRISA5 = 0;
  2859  0648  0021               	movlb	1	; select bank1
  2860  0649  128C               	bcf	12,5	;volatile
  2861                           
  2862                           ;user.c: 16: TRISAbits.TRISA2 = 0;
  2863  064A  110C               	bcf	12,2	;volatile
  2864                           
  2865                           ;user.c: 17: TRISAbits.TRISA0 = 0;
  2866  064B  100C               	bcf	12,0	;volatile
  2867                           
  2868                           ;user.c: 18: PORTAbits.RA5 = 1;
  2869  064C  0020               	movlb	0	; select bank0
  2870  064D  168C               	bsf	12,5	;volatile
  2871                           
  2872                           ;user.c: 21: ANSELAbits.ANSA4 = 1;
  2873  064E  0023               	movlb	3	; select bank3
  2874  064F  160C               	bsf	12,4	;volatile
  2875                           
  2876                           ;user.c: 22: ADCON1 |= 0b00110000;
  2877  0650  3030               	movlw	48
  2878  0651  00F1               	movwf	??_Setup
  2879  0652  0871               	movf	??_Setup,w
  2880  0653  0021               	movlb	1	; select bank1
  2881  0654  049E               	iorwf	30,f	;volatile
  2882                           
  2883                           ;user.c: 25: SPBRGL = 103;
  2884  0655  3067               	movlw	103
  2885  0656  0023               	movlb	3	; select bank3
  2886  0657  009B               	movwf	27	;volatile
  2887                           
  2888                           ;user.c: 26: TXSTAbits.SYNC = 0;
  2889  0658  121E               	bcf	30,4	;volatile
  2890                           
  2891                           ;user.c: 27: RCSTAbits.SPEN = 1;
  2892  0659  179D               	bsf	29,7	;volatile
  2893                           
  2894                           ;user.c: 28: BAUDCONbits.SCKP = 1;
  2895  065A  161F               	bsf	31,4	;volatile
  2896                           
  2897                           ;user.c: 29: TXSTAbits.TXEN = 1;
  2898  065B  169E               	bsf	30,5	;volatile
  2899                           
  2900                           ;user.c: 32: RCSTAbits.CREN = 1;
  2901  065C  161D               	bsf	29,4	;volatile
  2902  065D  0008               	return
  2903  065E                     __end_of_Setup:	
  2904                           
  2905                           	psect	text11
  2906  0386                     __ptext11:	
  2907 ;; *************** function _LoadFromFlash *****************
  2908 ;; Defined at:
  2909 ;;		line 28 in file "main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;		None               void
  2916 ;; Registers used:
  2917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2923 ;;      Params:         0       0       0       0
  2924 ;;      Locals:         0       0       0       0
  2925 ;;      Temps:          2       0       0       0
  2926 ;;      Totals:         2       0       0       0
  2927 ;;Total ram usage:        2 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    2
  2930 ;; This function calls:
  2931 ;;		_Load
  2932 ;;		_Save
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           
  2939                           ;psect for function _LoadFromFlash
  2940  0386                     _LoadFromFlash:	
  2941                           
  2942                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2946  0386  30D0               	movlw	208
  2947  0387  00F1               	movwf	Load@address
  2948  0388  3007               	movlw	7
  2949  0389  00F2               	movwf	Load@address+1
  2950  038A  3055               	movlw	_config& (0+255)
  2951  038B  00F7               	movwf	??_LoadFromFlash
  2952  038C  0877               	movf	??_LoadFromFlash,w
  2953  038D  00F3               	movwf	Load@ptr
  2954  038E  3008               	movlw	8
  2955  038F  00F8               	movwf	??_LoadFromFlash+1
  2956  0390  0878               	movf	??_LoadFromFlash+1,w
  2957  0391  00F4               	movwf	Load@data_length
  2958  0392  25C2               	fcall	_Load
  2959                           
  2960                           ;main.c: 31: if(config.id == 0x3FFF)
  2961  0393  303F               	movlw	63
  2962  0394  0020               	movlb	0	; select bank0
  2963  0395  0656               	xorwf	_config+1,w
  2964  0396  1D03               	skipz
  2965  0397  2B9A               	goto	u2405
  2966  0398  30FF               	movlw	255
  2967  0399  0655               	xorwf	_config,w
  2968  039A                     u2405:	
  2969  039A  1D03               	skipz
  2970  039B  2BD4               	goto	l2071
  2971                           
  2972                           ;main.c: 32: {
  2973                           ;main.c: 33: config.health = 16;
  2974  039C  3010               	movlw	16
  2975  039D  00D9               	movwf	_config+4
  2976  039E  3000               	movlw	0
  2977  039F  00DA               	movwf	_config+5
  2978                           
  2979                           ;main.c: 34: config.id = 0x80;
  2980  03A0  3080               	movlw	128
  2981  03A1  00D5               	movwf	_config
  2982  03A2  3000               	movlw	0
  2983  03A3  00D6               	movwf	_config+1
  2984                           
  2985                           ;main.c: 35: config.power = 0;
  2986  03A4  01D7               	clrf	_config+2
  2987  03A5  01D8               	clrf	_config+3
  2988                           
  2989                           ;main.c: 36: config.respawn_timer = 10;
  2990  03A6  300A               	movlw	10
  2991  03A7  00DD               	movwf	_config+8
  2992  03A8  3000               	movlw	0
  2993  03A9  00DE               	movwf	_config+9
  2994                           
  2995                           ;main.c: 37: config.fire_threshold = 500;
  2996  03AA  30F4               	movlw	244
  2997  03AB  00DF               	movwf	_config+10
  2998  03AC  3001               	movlw	1
  2999  03AD  00E0               	movwf	_config+11
  3000                           
  3001                           ;main.c: 38: config.fire_holdoff = 8000;
  3002  03AE  3040               	movlw	64
  3003  03AF  00E3               	movwf	_config+14
  3004  03B0  301F               	movlw	31
  3005  03B1  00E4               	movwf	_config+15
  3006                           
  3007                           ;main.c: 39: config.shield = 1;
  3008  03B2  3001               	movlw	1
  3009  03B3  00DB               	movwf	_config+6
  3010  03B4  3000               	movlw	0
  3011  03B5  00DC               	movwf	_config+7
  3012                           
  3013                           ;main.c: 40: config.fire_cheating = 1000;
  3014  03B6  30E8               	movlw	232
  3015  03B7  00E1               	movwf	_config+12
  3016  03B8  3003               	movlw	3
  3017  03B9  00E2               	movwf	_config+13
  3018                           
  3019                           ;main.c: 41: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  3020  03BA  30D0               	movlw	208
  3021  03BB  00F1               	movwf	Save@address
  3022  03BC  3007               	movlw	7
  3023  03BD  00F2               	movwf	Save@address+1
  3024  03BE  3055               	movlw	_config& (0+255)
  3025  03BF  00F7               	movwf	??_LoadFromFlash
  3026  03C0  0877               	movf	??_LoadFromFlash,w
  3027  03C1  00F3               	movwf	Save@ptr
  3028  03C2  3008               	movlw	8
  3029  03C3  00F8               	movwf	??_LoadFromFlash+1
  3030  03C4  0878               	movf	??_LoadFromFlash+1,w
  3031  03C5  00F4               	movwf	Save@data_length
  3032  03C6  24D3               	fcall	_Save
  3033                           
  3034                           ;main.c: 42: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3035  03C7  30E0               	movlw	224
  3036  03C8  00F1               	movwf	Save@address
  3037  03C9  3007               	movlw	7
  3038  03CA  00F2               	movwf	Save@address+1
  3039  03CB  30A0               	movlw	_hitlist& (0+255)
  3040  03CC  00F7               	movwf	??_LoadFromFlash
  3041  03CD  0877               	movf	??_LoadFromFlash,w
  3042  03CE  00F3               	movwf	Save@ptr
  3043  03CF  3010               	movlw	16
  3044  03D0  00F8               	movwf	??_LoadFromFlash+1
  3045  03D1  0878               	movf	??_LoadFromFlash+1,w
  3046  03D2  00F4               	movwf	Save@data_length
  3047  03D3  24D3               	fcall	_Save
  3048  03D4                     l2071:	
  3049                           
  3050                           ;main.c: 43: }
  3051                           ;main.c: 44: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3052  03D4  30E0               	movlw	224
  3053  03D5  00F1               	movwf	Load@address
  3054  03D6  3007               	movlw	7
  3055  03D7  00F2               	movwf	Load@address+1
  3056  03D8  30A0               	movlw	_hitlist& (0+255)
  3057  03D9  00F7               	movwf	??_LoadFromFlash
  3058  03DA  0877               	movf	??_LoadFromFlash,w
  3059  03DB  00F3               	movwf	Load@ptr
  3060  03DC  3010               	movlw	16
  3061  03DD  00F8               	movwf	??_LoadFromFlash+1
  3062  03DE  0878               	movf	??_LoadFromFlash+1,w
  3063  03DF  00F4               	movwf	Load@data_length
  3064  03E0  25C2               	fcall	_Load
  3065  03E1  0008               	return
  3066  03E2                     __end_of_LoadFromFlash:	
  3067                           
  3068                           	psect	text12
  3069  04D3                     __ptext12:	
  3070 ;; *************** function _Save *****************
  3071 ;; Defined at:
  3072 ;;		line 121 in file "user.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  address         2    1[COMMON] unsigned int 
  3075 ;;  ptr             1    3[COMMON] PTR unsigned int 
  3076 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  3077 ;;  data_length     1    4[COMMON] unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  i               1    6[COMMON] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;		None               void
  3082 ;; Registers used:
  3083 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3089 ;;      Params:         4       0       0       0
  3090 ;;      Locals:         1       0       0       0
  3091 ;;      Temps:          1       0       0       0
  3092 ;;      Totals:         6       0       0       0
  3093 ;;Total ram usage:        6 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_LoadFromFlash
  3100 ;;		_hit_by
  3101 ;;		_control_transfer
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _Save
  3107  04D3                     _Save:	
  3108                           
  3109                           ;user.c: 123: INTCONbits.GIE = 0;
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  3113  04D3  138B               	bcf	11,7	;volatile
  3114                           
  3115                           ;user.c: 124: PMADR = address;
  3116  04D4  0872               	movf	Save@address+1,w
  3117  04D5  0023               	movlb	3	; select bank3
  3118  04D6  0192               	clrf	18	;volatile
  3119  04D7  0792               	addwf	18,f	;volatile
  3120  04D8  0871               	movf	Save@address,w
  3121  04D9  0191               	clrf	17	;volatile
  3122  04DA  0791               	addwf	17,f	;volatile
  3123                           
  3124                           ;user.c: 125: PMCON1bits.CFGS = 0;
  3125  04DB  1315               	bcf	21,6	;volatile
  3126                           
  3127                           ;user.c: 126: PMCON1bits.FREE = 1;
  3128  04DC  1615               	bsf	21,4	;volatile
  3129                           
  3130                           ;user.c: 127: PMCON1bits.WREN = 1;
  3131  04DD  1515               	bsf	21,2	;volatile
  3132                           
  3133                           ;user.c: 128: PMCON2 = 0x55;
  3134  04DE  3055               	movlw	85
  3135  04DF  0096               	movwf	22	;volatile
  3136                           
  3137                           ;user.c: 129: PMCON2 = 0xAA;
  3138  04E0  30AA               	movlw	170
  3139  04E1  0096               	movwf	22	;volatile
  3140                           
  3141                           ;user.c: 130: PMCON1bits.WR = 1;
  3142  04E2  1495               	bsf	21,1	;volatile
  3143                           
  3144                           ;user.c: 131: __nop();
  3145  04E3  0000               	nop
  3146                           
  3147                           ;user.c: 132: __nop();
  3148  04E4  0000               	nop
  3149                           
  3150                           ;user.c: 133: PMCON1bits.WREN = 0;
  3151  04E5  0023               	movlb	3	; select bank3
  3152  04E6  1115               	bcf	21,2	;volatile
  3153                           
  3154                           ;user.c: 135: PMADR = address;
  3155  04E7  0872               	movf	Save@address+1,w
  3156  04E8  0192               	clrf	18	;volatile
  3157  04E9  0792               	addwf	18,f	;volatile
  3158  04EA  0871               	movf	Save@address,w
  3159  04EB  0191               	clrf	17	;volatile
  3160  04EC  0791               	addwf	17,f	;volatile
  3161                           
  3162                           ;user.c: 136: PMCON1bits.CFGS = 0;
  3163  04ED  1315               	bcf	21,6	;volatile
  3164                           
  3165                           ;user.c: 137: PMCON1bits.FREE = 0;
  3166  04EE  1215               	bcf	21,4	;volatile
  3167                           
  3168                           ;user.c: 138: PMCON1bits.WREN = 1;
  3169  04EF  1515               	bsf	21,2	;volatile
  3170                           
  3171                           ;user.c: 139: PMCON1bits.LWLO = 1;
  3172  04F0  1695               	bsf	21,5	;volatile
  3173                           
  3174                           ;user.c: 141: for (uint8_t i=1; i<=data_length; i++){
  3175  04F1  01F6               	clrf	Save@i
  3176  04F2  0AF6               	incf	Save@i,f
  3177  04F3                     l152:	
  3178  04F3  0876               	movf	Save@i,w
  3179  04F4  0274               	subwf	Save@data_length,w
  3180  04F5  1C03               	btfss	3,0
  3181  04F6  2D17               	goto	l155
  3182                           
  3183                           ;user.c: 142: PMDAT = *ptr++;
  3184  04F7  0873               	movf	Save@ptr,w
  3185  04F8  0086               	movwf	6
  3186  04F9  0187               	clrf	7
  3187  04FA  3F40               	moviw [0]fsr1
  3188  04FB  0093               	movwf	19	;volatile
  3189  04FC  3F41               	moviw [1]fsr1
  3190  04FD  0094               	movwf	20	;volatile
  3191  04FE  3002               	movlw	2
  3192  04FF  00F5               	movwf	??_Save
  3193  0500  0875               	movf	??_Save,w
  3194  0501  07F3               	addwf	Save@ptr,f
  3195                           
  3196                           ;user.c: 143: if(i == data_length) PMCON1bits.LWLO = 0;
  3197  0502  0876               	movf	Save@i,w
  3198  0503  0674               	xorwf	Save@data_length,w
  3199  0504  1903               	btfsc	3,2
  3200  0505  1295               	bcf	21,5	;volatile
  3201                           
  3202                           ;user.c: 144: PMCON2 = 0x55;
  3203  0506  3055               	movlw	85
  3204  0507  0096               	movwf	22	;volatile
  3205                           
  3206                           ;user.c: 145: PMCON2 = 0xAA;
  3207  0508  30AA               	movlw	170
  3208  0509  0096               	movwf	22	;volatile
  3209                           
  3210                           ;user.c: 146: PMCON1bits.WR = 1;
  3211  050A  1495               	bsf	21,1	;volatile
  3212                           
  3213                           ;user.c: 147: __nop();
  3214  050B  0000               	nop
  3215                           
  3216                           ;user.c: 148: __nop();
  3217  050C  0000               	nop
  3218                           
  3219                           ;user.c: 149: PMADRL++;
  3220  050D  3001               	movlw	1
  3221  050E  00F5               	movwf	??_Save
  3222  050F  0875               	movf	??_Save,w
  3223  0510  0023               	movlb	3	; select bank3
  3224  0511  0791               	addwf	17,f	;volatile
  3225  0512  3001               	movlw	1
  3226  0513  00F5               	movwf	??_Save
  3227  0514  0875               	movf	??_Save,w
  3228  0515  07F6               	addwf	Save@i,f
  3229  0516  2CF3               	goto	l152
  3230  0517                     l155:	
  3231                           
  3232                           ;user.c: 150: }
  3233                           ;user.c: 151: PMCON1bits.WREN = 0;
  3234  0517  1115               	bcf	21,2	;volatile
  3235                           
  3236                           ;user.c: 152: INTCONbits.GIE = 1;
  3237  0518  178B               	bsf	11,7	;volatile
  3238  0519  0008               	return
  3239  051A                     __end_of_Save:	
  3240                           
  3241                           	psect	text13
  3242  05C2                     __ptext13:	
  3243 ;; *************** function _Load *****************
  3244 ;; Defined at:
  3245 ;;		line 109 in file "user.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  address         2    1[COMMON] unsigned int 
  3248 ;;  ptr             1    3[COMMON] PTR unsigned int 
  3249 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  3250 ;;  data_length     1    4[COMMON] unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  i               1    6[COMMON] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3262 ;;      Params:         4       0       0       0
  3263 ;;      Locals:         1       0       0       0
  3264 ;;      Temps:          1       0       0       0
  3265 ;;      Totals:         6       0       0       0
  3266 ;;Total ram usage:        6 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    1
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_LoadFromFlash
  3273 ;;		_control_transfer
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function _Load
  3279  05C2                     _Load:	
  3280                           
  3281                           ;user.c: 110: PMCON1bits.CFGS = 0;
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  3285  05C2  0023               	movlb	3	; select bank3
  3286  05C3  1315               	bcf	21,6	;volatile
  3287                           
  3288                           ;user.c: 111: PMADR = address;
  3289  05C4  0872               	movf	Load@address+1,w
  3290  05C5  0192               	clrf	18	;volatile
  3291  05C6  0792               	addwf	18,f	;volatile
  3292  05C7  0871               	movf	Load@address,w
  3293  05C8  0191               	clrf	17	;volatile
  3294  05C9  0791               	addwf	17,f	;volatile
  3295                           
  3296                           ;user.c: 112: for (uint8_t i=0; i<data_length; i++){
  3297  05CA  01F6               	clrf	Load@i
  3298  05CB                     l1567:	
  3299  05CB  0874               	movf	Load@data_length,w
  3300  05CC  0276               	subwf	Load@i,w
  3301  05CD  1803               	btfsc	3,0
  3302  05CE  0008               	return
  3303                           
  3304                           ;user.c: 113: PMCON1bits.RD = 1;
  3305  05CF  1415               	bsf	21,0	;volatile
  3306                           
  3307                           ;user.c: 114: __nop();
  3308  05D0  0000               	nop
  3309                           
  3310                           ;user.c: 115: __nop();
  3311  05D1  0000               	nop
  3312                           
  3313                           ;user.c: 116: *ptr++ = PMDAT;
  3314  05D2  0873               	movf	Load@ptr,w
  3315  05D3  0086               	movwf	6
  3316  05D4  0187               	clrf	7
  3317  05D5  0023               	movlb	3	; select bank3
  3318  05D6  0813               	movf	19,w	;volatile
  3319  05D7  3FC0               	movwi [0]fsr1
  3320  05D8  0814               	movf	20,w	;volatile
  3321  05D9  3FC1               	movwi [1]fsr1
  3322  05DA  3002               	movlw	2
  3323  05DB  00F5               	movwf	??_Load
  3324  05DC  0875               	movf	??_Load,w
  3325  05DD  07F3               	addwf	Load@ptr,f
  3326                           
  3327                           ;user.c: 117: PMADR ++;
  3328  05DE  3001               	movlw	1
  3329  05DF  0791               	addwf	17,f	;volatile
  3330  05E0  3000               	movlw	0
  3331  05E1  3D92               	addwfc	18,f	;volatile
  3332  05E2  3001               	movlw	1
  3333  05E3  00F5               	movwf	??_Load
  3334  05E4  0875               	movf	??_Load,w
  3335  05E5  07F6               	addwf	Load@i,f
  3336  05E6  2DCB               	goto	l1567
  3337  05E7                     __end_of_Load:	
  3338                           
  3339                           	psect	text14
  3340  03E2                     __ptext14:	
  3341 ;; *************** function _Fire *****************
  3342 ;; Defined at:
  3343 ;;		line 169 in file "user.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  a               2   12[BANK0 ] unsigned int 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      unsigned char 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3357 ;;      Params:         0       0       0       0
  3358 ;;      Locals:         0       2       0       0
  3359 ;;      Temps:          0       0       0       0
  3360 ;;      Totals:         0       2       0       0
  3361 ;;Total ram usage:        2 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    3
  3364 ;; This function calls:
  3365 ;;		_ADC_read
  3366 ;;		_Buzz
  3367 ;;		_LED_off
  3368 ;;		_LED_on
  3369 ;;		_Send_Byte
  3370 ;; This function is called by:
  3371 ;;		_main
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           
  3376                           ;psect for function _Fire
  3377  03E2                     _Fire:	
  3378                           
  3379                           ;user.c: 170: static uint16_t timer = 0;
  3380                           ;user.c: 171: static uint16_t counter = 0;
  3381                           ;user.c: 172: uint16_t a;
  3382                           ;user.c: 173: a=ADC_read();
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _Fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3386  03E2  2626               	fcall	_ADC_read
  3387  03E3  0872               	movf	?_ADC_read+1,w
  3388  03E4  0020               	movlb	0	; select bank0
  3389  03E5  01AD               	clrf	Fire@a+1
  3390  03E6  07AD               	addwf	Fire@a+1,f
  3391  03E7  0871               	movf	?_ADC_read,w
  3392  03E8  01AC               	clrf	Fire@a
  3393  03E9  07AC               	addwf	Fire@a,f
  3394                           
  3395                           ;user.c: 174: if (a > config.fire_threshold && a < config.fire_cheating)
  3396  03EA  082D               	movf	Fire@a+1,w
  3397  03EB  0260               	subwf	_config+11,w
  3398  03EC  1D03               	skipz
  3399  03ED  2BF0               	goto	u2475
  3400  03EE  082C               	movf	Fire@a,w
  3401  03EF  025F               	subwf	_config+10,w
  3402  03F0                     u2475:	
  3403  03F0  1803               	skipnc
  3404  03F1  2C2D               	goto	l2129
  3405  03F2  0862               	movf	_config+13,w
  3406  03F3  022D               	subwf	Fire@a+1,w
  3407  03F4  1D03               	skipz
  3408  03F5  2BF8               	goto	u2485
  3409  03F6  0861               	movf	_config+12,w
  3410  03F7  022C               	subwf	Fire@a,w
  3411  03F8                     u2485:	
  3412  03F8  1803               	skipnc
  3413  03F9  2C2D               	goto	l2129
  3414                           
  3415                           ;user.c: 175: {
  3416                           ;user.c: 176: if(timer < config.fire_holdoff)
  3417  03FA  0864               	movf	_config+15,w
  3418  03FB  024E               	subwf	Fire@timer+1,w
  3419  03FC  1D03               	skipz
  3420  03FD  2C00               	goto	u2495
  3421  03FE  0863               	movf	_config+14,w
  3422  03FF  024D               	subwf	Fire@timer,w
  3423  0400                     u2495:	
  3424  0400  1803               	skipnc
  3425  0401  2C07               	goto	l2115
  3426                           
  3427                           ;user.c: 177: {
  3428                           ;user.c: 178: timer ++;
  3429  0402  3001               	movlw	1
  3430  0403  07CD               	addwf	Fire@timer,f
  3431  0404  3000               	movlw	0
  3432  0405  3DCE               	addwfc	Fire@timer+1,f
  3433                           
  3434                           ;user.c: 179: }
  3435  0406  2C35               	goto	l2139
  3436  0407                     l2115:	
  3437                           
  3438                           ;user.c: 180: else
  3439                           ;user.c: 181: {
  3440                           ;user.c: 182: if(!config.power || counter <= config.power)
  3441  0407  3002               	movlw	2
  3442  0408  3E55               	addlw	_config& (0+255)
  3443  0409  0086               	movwf	6
  3444  040A  0187               	clrf	7
  3445  040B  0016               	moviw fsr1++
  3446  040C  0401               	iorwf	1,w
  3447  040D  1903               	skipnz
  3448  040E  2C17               	goto	l2119
  3449  040F  084C               	movf	Fire@counter+1,w
  3450  0410  0258               	subwf	_config+3,w
  3451  0411  1D03               	skipz
  3452  0412  2C15               	goto	u2515
  3453  0413  084B               	movf	Fire@counter,w
  3454  0414  0257               	subwf	_config+2,w
  3455  0415                     u2515:	
  3456  0415  1C03               	skipc
  3457  0416  2C2B               	goto	l2127
  3458  0417                     l2119:	
  3459                           
  3460                           ;user.c: 183: {
  3461                           ;user.c: 184: LED_on();
  3462  0417  26A0               	fcall	_LED_on
  3463                           
  3464                           ;user.c: 185: Send_Byte(config.id);
  3465  0418  0020               	movlb	0	; select bank0
  3466  0419  0855               	movf	_config,w
  3467  041A  265E               	fcall	_Send_Byte
  3468                           
  3469                           ;user.c: 186: Buzz(4000, 50);
  3470  041B  30A0               	movlw	160
  3471  041C  0020               	movlb	0	; select bank0
  3472  041D  00A6               	movwf	Buzz@freq
  3473  041E  300F               	movlw	15
  3474  041F  00A7               	movwf	Buzz@freq+1
  3475  0420  3032               	movlw	50
  3476  0421  00A8               	movwf	Buzz@dur_ms
  3477  0422  3000               	movlw	0
  3478  0423  00A9               	movwf	Buzz@dur_ms+1
  3479  0424  248B               	fcall	_Buzz
  3480                           
  3481                           ;user.c: 187: counter++;
  3482  0425  3001               	movlw	1
  3483  0426  0020               	movlb	0	; select bank0
  3484  0427  07CB               	addwf	Fire@counter,f
  3485  0428  3000               	movlw	0
  3486  0429  3DCC               	addwfc	Fire@counter+1,f
  3487                           
  3488                           ;user.c: 188: }
  3489  042A  2C35               	goto	l2139
  3490  042B                     l2127:	
  3491                           
  3492                           ;user.c: 189: else
  3493                           ;user.c: 190: {
  3494                           ;user.c: 191: LED_off();
  3495  042B  26A3               	fcall	_LED_off
  3496                           
  3497                           ;user.c: 192: }
  3498                           ;user.c: 193: }
  3499                           ;user.c: 194: }
  3500  042C  2C35               	goto	l2139
  3501  042D                     l2129:	
  3502                           
  3503                           ;user.c: 195: else
  3504                           ;user.c: 196: {
  3505                           ;user.c: 197: LED_off();
  3506  042D  26A3               	fcall	_LED_off
  3507                           
  3508                           ;user.c: 198: timer = 0;
  3509  042E  0020               	movlb	0	; select bank0
  3510  042F  01CD               	clrf	Fire@timer
  3511  0430  01CE               	clrf	Fire@timer+1
  3512                           
  3513                           ;user.c: 199: counter = 0;
  3514  0431  01CB               	clrf	Fire@counter
  3515  0432  01CC               	clrf	Fire@counter+1
  3516                           
  3517                           ;user.c: 200: return 0;
  3518  0433  3000               	movlw	0
  3519  0434  0008               	return
  3520  0435                     l2139:	
  3521                           
  3522                           ;user.c: 201: }
  3523                           ;user.c: 202: return 1;
  3524  0435  3001               	movlw	1
  3525  0436  0008               	return
  3526  0437                     __end_of_Fire:	
  3527                           
  3528                           	psect	text15
  3529  065E                     __ptext15:	
  3530 ;; *************** function _Send_Byte *****************
  3531 ;; Defined at:
  3532 ;;		line 71 in file "user.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  data            1    wreg     unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  data            1    1[COMMON] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;		None               void
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, pclath, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3546 ;;      Params:         0       0       0       0
  3547 ;;      Locals:         1       0       0       0
  3548 ;;      Temps:          0       0       0       0
  3549 ;;      Totals:         1       0       0       0
  3550 ;;Total ram usage:        1 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    2
  3553 ;; This function calls:
  3554 ;;		_Disable_Modulation
  3555 ;;		_Modulate_Serial
  3556 ;; This function is called by:
  3557 ;;		_Fire
  3558 ;;		_SEND_DATA_BYTE
  3559 ;;		_SEND_SOF
  3560 ;;		_SEND_EOF
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           
  3565                           ;psect for function _Send_Byte
  3566  065E                     _Send_Byte:	
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3570                           ;Send_Byte@data stored from wreg
  3571  065E  00F1               	movwf	Send_Byte@data
  3572                           
  3573                           ;user.c: 73: RCSTAbits.CREN = 0;
  3574  065F  0023               	movlb	3	; select bank3
  3575  0660  121D               	bcf	29,4	;volatile
  3576                           
  3577                           ;user.c: 74: Modulate_Serial();
  3578  0661  266C               	fcall	_Modulate_Serial
  3579                           
  3580                           ;user.c: 75: TXREG = data;
  3581  0662  0871               	movf	Send_Byte@data,w
  3582  0663  0023               	movlb	3	; select bank3
  3583  0664  009A               	movwf	26	;volatile
  3584  0665                     l131:	
  3585                           ;user.c: 76: while(!TXSTAbits.TRMT);
  3586                           
  3587  0665  1C9E               	btfss	30,1	;volatile
  3588  0666  2E65               	goto	l131
  3589                           
  3590                           ;user.c: 77: Disable_Modulation();
  3591  0667  2695               	fcall	_Disable_Modulation
  3592                           
  3593                           ;user.c: 78: RCSTAbits.CREN = 1;
  3594  0668  0023               	movlb	3	; select bank3
  3595  0669  161D               	bsf	29,4	;volatile
  3596                           
  3597                           ;user.c: 79: RCREG;
  3598  066A  0819               	movf	25,w	;volatile
  3599  066B  0008               	return
  3600  066C                     __end_of_Send_Byte:	
  3601                           
  3602                           	psect	text16
  3603  066C                     __ptext16:	
  3604 ;; *************** function _Modulate_Serial *****************
  3605 ;; Defined at:
  3606 ;;		line 82 in file "user.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		None
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3620 ;;      Params:         0       0       0       0
  3621 ;;      Locals:         0       0       0       0
  3622 ;;      Temps:          0       0       0       0
  3623 ;;      Totals:         0       0       0       0
  3624 ;;Total ram usage:        0 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    1
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_Send_Byte
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _Modulate_Serial
  3636  066C                     _Modulate_Serial:	
  3637                           
  3638                           ;user.c: 83: DACCON0bits.DACEN = 1;
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _Modulate_Serial: []
  3642  066C  0022               	movlb	2	; select bank2
  3643  066D  1798               	bsf	24,7	;volatile
  3644                           
  3645                           ;user.c: 85: INTCONbits.GIE = 1;
  3646  066E  178B               	bsf	11,7	;volatile
  3647                           
  3648                           ;user.c: 86: INTCONbits.PEIE = 1;
  3649  066F  170B               	bsf	11,6	;volatile
  3650                           
  3651                           ;user.c: 87: PIE1bits.TMR1IE = 1;
  3652  0670  0021               	movlb	1	; select bank1
  3653  0671  1411               	bsf	17,0	;volatile
  3654                           
  3655                           ;user.c: 89: T1CONbits.nT1SYNC = 1;
  3656  0672  0020               	movlb	0	; select bank0
  3657  0673  1518               	bsf	24,2	;volatile
  3658                           
  3659                           ;user.c: 90: T1CONbits.TMR1ON = 1;
  3660  0674  1418               	bsf	24,0	;volatile
  3661                           
  3662                           ;user.c: 91: TMR1 = 65486;
  3663  0675  30FF               	movlw	255
  3664  0676  0097               	movwf	23	;volatile
  3665  0677  30CE               	movlw	206
  3666  0678  0096               	movwf	22	;volatile
  3667  0679  0008               	return
  3668  067A                     __end_of_Modulate_Serial:	
  3669                           
  3670                           	psect	text17
  3671  0695                     __ptext17:	
  3672 ;; *************** function _Disable_Modulation *****************
  3673 ;; Defined at:
  3674 ;;		line 94 in file "user.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;		None               void
  3681 ;; Registers used:
  3682 ;;		None
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3688 ;;      Params:         0       0       0       0
  3689 ;;      Locals:         0       0       0       0
  3690 ;;      Temps:          0       0       0       0
  3691 ;;      Totals:         0       0       0       0
  3692 ;;Total ram usage:        0 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    1
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_Send_Byte
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _Disable_Modulation
  3704  0695                     _Disable_Modulation:	
  3705                           
  3706                           ;user.c: 95: INTCONbits.GIE = 0;
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _Disable_Modulation: []
  3710  0695  138B               	bcf	11,7	;volatile
  3711                           
  3712                           ;user.c: 96: T1CONbits.TMR1ON = 0;
  3713  0696  0020               	movlb	0	; select bank0
  3714  0697  1018               	bcf	24,0	;volatile
  3715                           
  3716                           ;user.c: 97: DACCON0bits.DACEN = 0;
  3717  0698  0022               	movlb	2	; select bank2
  3718  0699  1398               	bcf	24,7	;volatile
  3719  069A  0008               	return
  3720  069B                     __end_of_Disable_Modulation:	
  3721                           
  3722                           	psect	text18
  3723  06A0                     __ptext18:	
  3724 ;; *************** function _LED_on *****************
  3725 ;; Defined at:
  3726 ;;		line 46 in file "user.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		None
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3740 ;;      Params:         0       0       0       0
  3741 ;;      Locals:         0       0       0       0
  3742 ;;      Temps:          0       0       0       0
  3743 ;;      Totals:         0       0       0       0
  3744 ;;Total ram usage:        0 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    1
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_Fire
  3751 ;;		_Get_hit
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           
  3756                           ;psect for function _LED_on
  3757  06A0                     _LED_on:	
  3758                           
  3759                           ;user.c: 48: PORTAbits.RA5 = 0;
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _LED_on: []
  3763  06A0  0020               	movlb	0	; select bank0
  3764  06A1  128C               	bcf	12,5	;volatile
  3765  06A2  0008               	return
  3766  06A3                     __end_of_LED_on:	
  3767                           
  3768                           	psect	text19
  3769  06A3                     __ptext19:	
  3770 ;; *************** function _LED_off *****************
  3771 ;; Defined at:
  3772 ;;		line 51 in file "user.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		None
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3786 ;;      Params:         0       0       0       0
  3787 ;;      Locals:         0       0       0       0
  3788 ;;      Temps:          0       0       0       0
  3789 ;;      Totals:         0       0       0       0
  3790 ;;Total ram usage:        0 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    1
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_Fire
  3797 ;;		_Get_hit
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           
  3802                           ;psect for function _LED_off
  3803  06A3                     _LED_off:	
  3804                           
  3805                           ;user.c: 53: PORTAbits.RA5 = 1;
  3806                           
  3807                           ;incstack = 0
  3808                           ; Regs used in _LED_off: []
  3809  06A3  0020               	movlb	0	; select bank0
  3810  06A4  168C               	bsf	12,5	;volatile
  3811  06A5  0008               	return
  3812  06A6                     __end_of_LED_off:	
  3813                           
  3814                           	psect	text20
  3815  048B                     __ptext20:	
  3816 ;; *************** function _Buzz *****************
  3817 ;; Defined at:
  3818 ;;		line 56 in file "user.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  freq            2    6[BANK0 ] unsigned int 
  3821 ;;  dur_ms          2    8[BANK0 ] unsigned int 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  i               2   10[BANK0 ] unsigned int 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;		None               void
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0, pclath, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3833 ;;      Params:         0       4       0       0
  3834 ;;      Locals:         0       2       0       0
  3835 ;;      Temps:          2       0       0       0
  3836 ;;      Totals:         2       6       0       0
  3837 ;;Total ram usage:        8 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    2
  3840 ;; This function calls:
  3841 ;;		___aldiv
  3842 ;; This function is called by:
  3843 ;;		_hit_by
  3844 ;;		_Fire
  3845 ;;		_Get_hit
  3846 ;;		_Sleep
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _Buzz
  3852  048B                     _Buzz:	
  3853                           
  3854                           ;user.c: 58: PWM3CONbits.PWM3EN = 1;
  3855                           
  3856                           ;incstack = 0
  3857                           ; Regs used in _Buzz: [wreg+status,2+status,0+pclath+cstack]
  3858  048B  003B               	movlb	27	; select bank27
  3859  048C  17BB               	bsf	59,7	;volatile
  3860                           
  3861                           ;user.c: 59: PWM3CONbits.PWM3OE = 1;
  3862  048D  173B               	bsf	59,6	;volatile
  3863                           
  3864                           ;user.c: 60: PWM3PR = (16000000 / freq) - 1;
  3865  048E  0020               	movlb	0	; select bank0
  3866  048F  0826               	movf	Buzz@freq,w
  3867  0490  00F1               	movwf	___aldiv@divisor
  3868  0491  0827               	movf	Buzz@freq+1,w
  3869  0492  00F2               	movwf	___aldiv@divisor+1
  3870  0493  01F3               	clrf	___aldiv@divisor+2
  3871  0494  01F4               	clrf	___aldiv@divisor+3
  3872  0495  3000               	movlw	0
  3873  0496  00F8               	movwf	___aldiv@dividend+3
  3874  0497  30F4               	movlw	244
  3875  0498  00F7               	movwf	___aldiv@dividend+2
  3876  0499  3024               	movlw	36
  3877  049A  00F6               	movwf	___aldiv@dividend+1
  3878  049B  3000               	movlw	0
  3879  049C  00F5               	movwf	___aldiv@dividend
  3880  049D  2304               	fcall	___aldiv
  3881  049E  0871               	movf	?___aldiv,w
  3882  049F  3EFF               	addlw	255
  3883  04A0  00FA               	movwf	??_Buzz
  3884  04A1  30FF               	movlw	255
  3885  04A2  3D72               	addwfc	?___aldiv+1,w
  3886  04A3  00FB               	movwf	??_Buzz+1
  3887  04A4  087A               	movf	??_Buzz,w
  3888  04A5  003B               	movlb	27	; select bank27
  3889  04A6  00B5               	movwf	53	;volatile
  3890  04A7  087B               	movf	??_Buzz+1,w
  3891  04A8  00B6               	movwf	54	;volatile
  3892                           
  3893                           ;user.c: 61: PWM3DC = PWM3PR >> 1;
  3894  04A9  0836               	movf	54,w	;volatile
  3895  04AA  00FB               	movwf	??_Buzz+1
  3896  04AB  0835               	movf	53,w	;volatile
  3897  04AC  00FA               	movwf	??_Buzz
  3898  04AD  36FB               	lsrf	??_Buzz+1,f
  3899  04AE  0CFA               	rrf	??_Buzz,f
  3900  04AF  087A               	movf	??_Buzz,w
  3901  04B0  00B3               	movwf	51	;volatile
  3902  04B1  087B               	movf	??_Buzz+1,w
  3903  04B2  00B4               	movwf	52	;volatile
  3904                           
  3905                           ;user.c: 62: PWM3PH = 0x0000;
  3906  04B3  01B1               	clrf	49	;volatile
  3907  04B4  01B2               	clrf	50	;volatile
  3908                           
  3909                           ;user.c: 63: PWM3LDCONbits.LDA = 1;
  3910  04B5  17BF               	bsf	63,7	;volatile
  3911                           
  3912                           ;user.c: 65: for(uint16_t i = 0; i <= dur_ms; i++){
  3913  04B6  0020               	movlb	0	; select bank0
  3914  04B7  01AA               	clrf	Buzz@i
  3915  04B8  01AB               	clrf	Buzz@i+1
  3916  04B9                     l125:	
  3917  04B9  082B               	movf	Buzz@i+1,w
  3918  04BA  0229               	subwf	Buzz@dur_ms+1,w
  3919  04BB  1D03               	skipz
  3920  04BC  2CBF               	goto	u1475
  3921  04BD  082A               	movf	Buzz@i,w
  3922  04BE  0228               	subwf	Buzz@dur_ms,w
  3923  04BF                     u1475:	
  3924  04BF  1C03               	btfss	3,0
  3925  04C0  2CD0               	goto	l127
  3926                           
  3927                           ;user.c: 66: _delay((unsigned long)((1)*(16000000/4000.0)));
  3928  04C1  3006               	movlw	6
  3929  04C2  00FB               	movwf	??_Buzz+1
  3930  04C3  3030               	movlw	48
  3931  04C4  00FA               	movwf	??_Buzz
  3932  04C5                     u2567:	
  3933  04C5  0BFA               	decfsz	??_Buzz,f
  3934  04C6  2CC5               	goto	u2567
  3935  04C7  0BFB               	decfsz	??_Buzz+1,f
  3936  04C8  2CC5               	goto	u2567
  3937  04C9  0000               	nop
  3938  04CA  3001               	movlw	1
  3939  04CB  0020               	movlb	0	; select bank0
  3940  04CC  07AA               	addwf	Buzz@i,f
  3941  04CD  3000               	movlw	0
  3942  04CE  3DAB               	addwfc	Buzz@i+1,f
  3943  04CF  2CB9               	goto	l125
  3944  04D0                     l127:	
  3945                           
  3946                           ;user.c: 67: }
  3947                           ;user.c: 68: PWM3CONbits.PWM3OE = 0;
  3948  04D0  003B               	movlb	27	; select bank27
  3949  04D1  133B               	bcf	59,6	;volatile
  3950  04D2  0008               	return
  3951  04D3                     __end_of_Buzz:	
  3952                           
  3953                           	psect	text21
  3954  0304                     __ptext21:	
  3955 ;; *************** function ___aldiv *****************
  3956 ;; Defined at:
  3957 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\aldiv.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  divisor         4    1[COMMON] long 
  3960 ;;  dividend        4    5[COMMON] long 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  quotient        4    2[BANK0 ] long 
  3963 ;;  sign            1    1[BANK0 ] unsigned char 
  3964 ;;  counter         1    0[BANK0 ] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  4    1[COMMON] long 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3974 ;;      Params:         8       0       0       0
  3975 ;;      Locals:         0       6       0       0
  3976 ;;      Temps:          1       0       0       0
  3977 ;;      Totals:         9       6       0       0
  3978 ;;Total ram usage:       15 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_Buzz
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function ___aldiv
  3990  0304                     ___aldiv:	
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3994  0304  0020               	movlb	0	; select bank0
  3995  0305  01A1               	clrf	___aldiv@sign
  3996  0306  1FF4               	btfss	___aldiv@divisor+3,7
  3997  0307  2B15               	goto	l409
  3998  0308  09F1               	comf	___aldiv@divisor,f
  3999  0309  09F2               	comf	___aldiv@divisor+1,f
  4000  030A  09F3               	comf	___aldiv@divisor+2,f
  4001  030B  09F4               	comf	___aldiv@divisor+3,f
  4002  030C  0AF1               	incf	___aldiv@divisor,f
  4003  030D  1903               	skipnz
  4004  030E  0AF2               	incf	___aldiv@divisor+1,f
  4005  030F  1903               	skipnz
  4006  0310  0AF3               	incf	___aldiv@divisor+2,f
  4007  0311  1903               	skipnz
  4008  0312  0AF4               	incf	___aldiv@divisor+3,f
  4009  0313  01A1               	clrf	___aldiv@sign
  4010  0314  0AA1               	incf	___aldiv@sign,f
  4011  0315                     l409:	
  4012  0315  1FF8               	btfss	___aldiv@dividend+3,7
  4013  0316  2B26               	goto	l1523
  4014  0317  09F5               	comf	___aldiv@dividend,f
  4015  0318  09F6               	comf	___aldiv@dividend+1,f
  4016  0319  09F7               	comf	___aldiv@dividend+2,f
  4017  031A  09F8               	comf	___aldiv@dividend+3,f
  4018  031B  0AF5               	incf	___aldiv@dividend,f
  4019  031C  1903               	skipnz
  4020  031D  0AF6               	incf	___aldiv@dividend+1,f
  4021  031E  1903               	skipnz
  4022  031F  0AF7               	incf	___aldiv@dividend+2,f
  4023  0320  1903               	skipnz
  4024  0321  0AF8               	incf	___aldiv@dividend+3,f
  4025  0322  3001               	movlw	1
  4026  0323  00F9               	movwf	??___aldiv
  4027  0324  0879               	movf	??___aldiv,w
  4028  0325  06A1               	xorwf	___aldiv@sign,f
  4029  0326                     l1523:	
  4030  0326  3000               	movlw	0
  4031  0327  00A5               	movwf	___aldiv@quotient+3
  4032  0328  3000               	movlw	0
  4033  0329  00A4               	movwf	___aldiv@quotient+2
  4034  032A  3000               	movlw	0
  4035  032B  00A3               	movwf	___aldiv@quotient+1
  4036  032C  3000               	movlw	0
  4037  032D  00A2               	movwf	___aldiv@quotient
  4038  032E  0874               	movf	___aldiv@divisor+3,w
  4039  032F  0473               	iorwf	___aldiv@divisor+2,w
  4040  0330  0472               	iorwf	___aldiv@divisor+1,w
  4041  0331  0471               	iorwf	___aldiv@divisor,w
  4042  0332  1903               	skipnz
  4043  0333  2B6F               	goto	l1545
  4044  0334  01A0               	clrf	___aldiv@counter
  4045  0335  0AA0               	incf	___aldiv@counter,f
  4046  0336                     l1531:	
  4047  0336  1BF4               	btfsc	___aldiv@divisor+3,7
  4048  0337  2B44               	goto	l1533
  4049  0338  3001               	movlw	1
  4050  0339                     u1325:	
  4051  0339  35F1               	lslf	___aldiv@divisor,f
  4052  033A  0DF2               	rlf	___aldiv@divisor+1,f
  4053  033B  0DF3               	rlf	___aldiv@divisor+2,f
  4054  033C  0DF4               	rlf	___aldiv@divisor+3,f
  4055  033D  0B89               	decfsz	9,f
  4056  033E  2B39               	goto	u1325
  4057  033F  3001               	movlw	1
  4058  0340  00F9               	movwf	??___aldiv
  4059  0341  0879               	movf	??___aldiv,w
  4060  0342  07A0               	addwf	___aldiv@counter,f
  4061  0343  2B36               	goto	l1531
  4062  0344                     l1533:	
  4063  0344  3001               	movlw	1
  4064  0345                     u1345:	
  4065  0345  35A2               	lslf	___aldiv@quotient,f
  4066  0346  0DA3               	rlf	___aldiv@quotient+1,f
  4067  0347  0DA4               	rlf	___aldiv@quotient+2,f
  4068  0348  0DA5               	rlf	___aldiv@quotient+3,f
  4069  0349  0B89               	decfsz	9,f
  4070  034A  2B45               	goto	u1345
  4071  034B  0874               	movf	___aldiv@divisor+3,w
  4072  034C  0278               	subwf	___aldiv@dividend+3,w
  4073  034D  1D03               	skipz
  4074  034E  2B59               	goto	u1355
  4075  034F  0873               	movf	___aldiv@divisor+2,w
  4076  0350  0277               	subwf	___aldiv@dividend+2,w
  4077  0351  1D03               	skipz
  4078  0352  2B59               	goto	u1355
  4079  0353  0872               	movf	___aldiv@divisor+1,w
  4080  0354  0276               	subwf	___aldiv@dividend+1,w
  4081  0355  1D03               	skipz
  4082  0356  2B59               	goto	u1355
  4083  0357  0871               	movf	___aldiv@divisor,w
  4084  0358  0275               	subwf	___aldiv@dividend,w
  4085  0359                     u1355:	
  4086  0359  1C03               	skipc
  4087  035A  2B64               	goto	l1541
  4088  035B  0871               	movf	___aldiv@divisor,w
  4089  035C  02F5               	subwf	___aldiv@dividend,f
  4090  035D  0872               	movf	___aldiv@divisor+1,w
  4091  035E  3BF6               	subwfb	___aldiv@dividend+1,f
  4092  035F  0873               	movf	___aldiv@divisor+2,w
  4093  0360  3BF7               	subwfb	___aldiv@dividend+2,f
  4094  0361  0874               	movf	___aldiv@divisor+3,w
  4095  0362  3BF8               	subwfb	___aldiv@dividend+3,f
  4096  0363  1422               	bsf	___aldiv@quotient,0
  4097  0364                     l1541:	
  4098  0364  3001               	movlw	1
  4099  0365                     u1365:	
  4100  0365  36F4               	lsrf	___aldiv@divisor+3,f
  4101  0366  0CF3               	rrf	___aldiv@divisor+2,f
  4102  0367  0CF2               	rrf	___aldiv@divisor+1,f
  4103  0368  0CF1               	rrf	___aldiv@divisor,f
  4104  0369  0B89               	decfsz	9,f
  4105  036A  2B65               	goto	u1365
  4106  036B  3001               	movlw	1
  4107  036C  02A0               	subwf	___aldiv@counter,f
  4108  036D  1D03               	btfss	3,2
  4109  036E  2B44               	goto	l1533
  4110  036F                     l1545:	
  4111  036F  0821               	movf	___aldiv@sign,w
  4112  0370  1903               	btfsc	3,2
  4113  0371  2B7D               	goto	l1549
  4114  0372  09A2               	comf	___aldiv@quotient,f
  4115  0373  09A3               	comf	___aldiv@quotient+1,f
  4116  0374  09A4               	comf	___aldiv@quotient+2,f
  4117  0375  09A5               	comf	___aldiv@quotient+3,f
  4118  0376  0AA2               	incf	___aldiv@quotient,f
  4119  0377  1903               	skipnz
  4120  0378  0AA3               	incf	___aldiv@quotient+1,f
  4121  0379  1903               	skipnz
  4122  037A  0AA4               	incf	___aldiv@quotient+2,f
  4123  037B  1903               	skipnz
  4124  037C  0AA5               	incf	___aldiv@quotient+3,f
  4125  037D                     l1549:	
  4126  037D  0825               	movf	___aldiv@quotient+3,w
  4127  037E  00F4               	movwf	?___aldiv+3
  4128  037F  0824               	movf	___aldiv@quotient+2,w
  4129  0380  00F3               	movwf	?___aldiv+2
  4130  0381  0823               	movf	___aldiv@quotient+1,w
  4131  0382  00F2               	movwf	?___aldiv+1
  4132  0383  0822               	movf	___aldiv@quotient,w
  4133  0384  00F1               	movwf	?___aldiv
  4134  0385  0008               	return
  4135  0386                     __end_of___aldiv:	
  4136                           
  4137                           	psect	text22
  4138  0626                     __ptext22:	
  4139 ;; *************** function _ADC_read *****************
  4140 ;; Defined at:
  4141 ;;		line 36 in file "user.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  2    1[COMMON] unsigned int 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4155 ;;      Params:         2       0       0       0
  4156 ;;      Locals:         0       0       0       0
  4157 ;;      Temps:          2       0       0       0
  4158 ;;      Totals:         4       0       0       0
  4159 ;;Total ram usage:        4 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    1
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_Fire
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _ADC_read
  4171  0626                     _ADC_read:	
  4172                           
  4173                           ;user.c: 38: ADCON0bits.CHS = 3;
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4177  0626  0021               	movlb	1	; select bank1
  4178  0627  081D               	movf	29,w	;volatile
  4179  0628  3983               	andlw	-125
  4180  0629  380C               	iorlw	12
  4181  062A  009D               	movwf	29	;volatile
  4182                           
  4183                           ;user.c: 39: ADCON0bits.ADON = 1;
  4184  062B  141D               	bsf	29,0	;volatile
  4185                           
  4186                           ;user.c: 40: _delay((unsigned long)((6)*(16000000/4000000.0)));
  4187  062C  3007               	movlw	7
  4188  062D  00F3               	movwf	??_ADC_read
  4189  062E                     u2577:	
  4190  062E  0BF3               	decfsz	??_ADC_read,f
  4191  062F  2E2E               	goto	u2577
  4192  0630  3200               	nop2	;nop
  4193                           
  4194                           ;user.c: 41: ADCON0bits.GO = 1;
  4195  0631  0021               	movlb	1	; select bank1
  4196  0632  149D               	bsf	29,1	;volatile
  4197  0633                     l113:	
  4198                           ;user.c: 42: while(ADCON0bits.GO){};
  4199                           
  4200  0633  189D               	btfsc	29,1	;volatile
  4201  0634  2E33               	goto	l113
  4202                           
  4203                           ;user.c: 43: return ADRES >> 6;
  4204  0635  081C               	movf	28,w	;volatile
  4205  0636  00F4               	movwf	??_ADC_read+1
  4206  0637  081B               	movf	27,w	;volatile
  4207  0638  00F3               	movwf	??_ADC_read
  4208  0639  3006               	movlw	6
  4209  063A                     u1565:	
  4210  063A  36F4               	lsrf	??_ADC_read+1,f
  4211  063B  0CF3               	rrf	??_ADC_read,f
  4212  063C  0B89               	decfsz	9,f
  4213  063D  2E3A               	goto	u1565
  4214  063E  0873               	movf	??_ADC_read,w
  4215  063F  00F1               	movwf	?_ADC_read
  4216  0640  0874               	movf	??_ADC_read+1,w
  4217  0641  00F2               	movwf	?_ADC_read+1
  4218  0642  0008               	return
  4219  0643                     __end_of_ADC_read:	


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     43      71
    BANK1            80      0      32
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 


Critical Paths under _main in COMMON

    _handle_serial->_hit_by
    _hit_by->_Buzz
    _control_transfer->_Load
    _control_transfer->_Save
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save
    _Fire->_Buzz
    _Buzz->___aldiv

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_control_transfer
    _hit_by->_Buzz
    _Fire->_Buzz
    _Buzz->___aldiv

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9913
                               _Fire
                      _LoadFromFlash
                              _Setup
                      _handle_serial
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0    6580
                                             40 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               3     3      0    2759
                                             12 COMMON     1     1      0
                                             12 BANK0      2     2      0
                               _Buzz
                               _Save
                     _add_to_hitlist
                 _get_hitlist_length
 ---------------------------------------------------------------------------------
 (3) _get_hitlist_length                                   5     5      0     156
                                              1 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    3688
                                              7 COMMON     2     2      0
                                              0 BANK0     40    40      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0      88
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     832
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1838
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4     952
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Fire                                                 2     2      0    1495
                                             12 BANK0      2     2      0
                           _ADC_read
                               _Buzz
                            _LED_off
                             _LED_on
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            1     1      0      22
                                              1 COMMON     1     1      0
                 _Disable_Modulation
                    _Modulate_Serial
 ---------------------------------------------------------------------------------
 (5) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_on                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Buzz                                                 8     4      4    1428
                                             10 COMMON     2     2      0
                                              6 BANK0      6     2      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     406
                                              1 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Fire
     _ADC_read
     _Buzz
       ___aldiv
     _LED_off
     _LED_on
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
   _LoadFromFlash
     _Load
     _Save
   _Setup
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _Save
     _hit_by
       _Buzz
         ___aldiv
       _Save
       _add_to_hitlist
       _get_hitlist_length

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      74       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      74      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Aug 18 03:02:10 2014

     __size_of_get_hitlist_length 0038                       __CFG_CP$OFF 0000                                __i 004F  
                              __x 0065                                __y 0066                     _LoadFromFlash 0386  
                             l113 0633                               l131 0665                               l125 04B9  
                             l127 04D0                               l152 04F3                               l224 060D  
                             l155 0517                               l409 0315                               l337 0303  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_LVP$OFF 0000  
                            l2003 0284                              l2101 0557                              l2031 02C4  
                            l2033 02D2                              l2115 0407                              l2043 02F3  
                            l2037 02E0                              l2127 042B                              l2119 0417  
                            l2071 03D4                              l2039 02EE                       Load@address 0071  
                 __end_of_LED_off 06A6                              l2129 042D                              l1531 0336  
                            l1523 0326                              l2139 0435                              l2091 0540  
                            l2083 052B                              l2147 069D                              l1541 0364  
                            l1533 0344                              l2079 051F                              l1545 036F  
                            l1633 0461                              l1549 037D                              l2189 02E6  
                            l1567 05CB                              l1639 0486                              l1663 055E  
                            l1691 061C                              l1931 01E3                              l1675 0587  
                            l1941 01F7                              l1669 0572                              l1767 007D  
                            l1679 058F                              l1939 01F5                              l1859 0149  
                            l1795 00B5                              l1981 024E                              u1325 0339  
                            u2045 0186                              u1345 0345                              u2305 0264  
                            u1355 0359                              u1365 0365                              u2405 039A  
                            u1285 05F1                              u2245 0234                              u2095 01AD  
                            u1615 0041                              u1455 0478                              u1625 0057  
                            u1545 05B6                              u1475 04BF                              u2515 0415  
                            u2195 020D                              u1565 063A                              u2365 029A  
                            u1805 00CB                              u1725 0093                              u2445 0539  
                            u2527 067E                              u2537 068C                              u1905 0111  
                            u2465 0551                              u2475 03F0                              u2547 05FC  
                            u1675 006F                              u2485 03F8                              u2557 0603  
                            u2567 04C5                              u2495 0400                              u1855 00EE  
                            u2577 062E                              u1995 015F              control_transfer@data 0020  
                            _TMR1 0016              control_transfer@page 0045              control_transfer@dptr 0043  
                            _Fire 03E2                              _Load 05C2                              _Buzz 048B  
                    __CFG_WRT$OFF 0000                              _Save 04D3                              _main 069B  
                   Send_Byte@data 0071                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E                              start 0019                              ttemp 007E  
                            wtemp 007E                  __end_of_ADC_read 0643                        Buzz@dur_ms 0028  
               ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000                    ?_LoadFromFlash 0070  
                           ?_Fire 0070                             ?_Load 0071                             ?_Buzz 0026  
                           ?_Save 0071                   __end_of___aldiv 0386                             ?_main 0070  
                           _ADRES 009B                     __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0015  
                           i1l181 0015                             _PMADR 0191                             _PMDAT 0193  
                           _RCREG 0199                             Fire@a 002C                  __end_of_SEND_EOF 068F  
                __end_of_SEND_SOF 0685                             Load@i 0076                             _TXREG 019A  
                           Buzz@i 002A                             Save@i 0076                             _Setup 0643  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0304                      __end_of_Fire 0437                   __initialization 001A  
                    __end_of_Load 05E7                      __end_of_Buzz 04D3                      __end_of_Save 051A  
                    __end_of_main 06A0                            DACCON0 0118                            ??_Fire 007C  
                          ??_Load 0075                            ??_Buzz 007A                            ??_Save 0075  
                          ??_main 007D                    __CFG_PLLEN$OFF 0000                         ??_LED_off 0071  
                          ?_Setup 0070                            _ADCON1 009E                            _ANSELA 018C  
                          _LED_on 06A0                            _PMADRL 0191                            _PMCON2 0196  
                          _OSCCON 0099                            _PWM3DC 0DB3                            _PWM3PH 0DB1  
                          _SPBRGL 019B                            _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000  
                 ??_LoadFromFlash 0077                         ??___aldiv 0079                __size_of_Send_Byte 000E  
                  __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0072                            _config 0055  
                          _hit_by 0591        __end_of_Disable_Modulation 069B                       Save@address 0071  
                _my_random_number 0052                         ?_ADC_read 0071          __size_of_Modulate_Serial 000E  
         __end_of__initialization 0026           handle_serial@rx_counter 0053                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 065E  
         _High_Priority_Interrupt 0004                        ??_ADC_read 0073                           ??_Setup 0071  
                 _GET_CHAR_HELPER 0609                 __end_of_Send_Byte 066C           __size_of_add_to_hitlist 0054  
                      __pbssBANK0 004B                        __pbssBANK1 00A0                           ?_LED_on 0070  
           __end_of_handle_serial 0559        __end_of_get_hitlist_length 0591                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 069B                        __pintentry 0004  
                         ?_hit_by 0070                           _LED_off 06A3                           Load@ptr 0073  
                 __size_of_LED_on 0003                 ??_Modulate_Serial 0071                           Save@ptr 0073  
               ?_control_transfer 0070                ??_control_transfer 0077                   SEND_DATA_BYTE@b 0074  
       ??_High_Priority_Interrupt 0070                           ___aldiv 0304                   __size_of_hit_by 0031  
                         __ptext1 051A                           __ptext2 0591                           __ptext3 0559  
                         __ptext4 0437                           __ptext5 0029                           __ptext6 067A  
                         __ptext7 0685                           __ptext8 05E7                           __ptext9 0609  
                       _T1CONbits 0018           __end_of_GET_CHAR_HELPER 0626                           _hitlist 00A0  
                ___aldiv@dividend 0075                           clrloop0 0690                 add_to_hitlist@gun 0075  
            end_of_initialization 0026                         _RCSTAbits 019D                  ___aldiv@quotient 0022  
                       Fire@timer 004D                         _PORTAbits 000C                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 0437  
               __size_of_ADC_read 001D                _Disable_Modulation 0695                    __end_of_LED_on 06A3  
                       _TXSTAbits 019E               control_transfer@cmd 0040               ?_Disable_Modulation 0070  
               __size_of_SEND_EOF 000A                 __size_of_SEND_SOF 000B             __end_of_LoadFromFlash 03E2  
                     _BAUDCONbits 019F                    __end_of_hit_by 05C2                GET_CHAR_HELPER@val 0072  
                ?_GET_CHAR_HELPER 0070               start_initialization 001A              ??_Disable_Modulation 0071  
          __end_of_add_to_hitlist 048B                          ??_LED_on 0071                         _Send_Byte 065E  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                          ??_hit_by 002C  
              _get_hitlist_length 0559                          ?_LED_off 0070                         ___latbits 0000  
                 _Modulate_Serial 066C                     __pcstackBANK0 0020                   ?_add_to_hitlist 0070  
         __size_of_SEND_DATA_BYTE 0022                         __checksum 0051               ?_get_hitlist_length 0070  
                 Save@data_length 0074                        ?_Send_Byte 0070              ??_get_hitlist_length 0071  
                        ?___aldiv 0071                    handle_serial@b 004A            __size_of_handle_serial 003F  
       __size_of_control_transfer 02DB                          _ADC_read 0626                    __size_of_Setup 001B  
                 ___aldiv@divisor 0071                   ___aldiv@counter 0020                         clear_ram0 068F  
                        _PIE1bits 0091                   Load@data_length 0074                          _PIR1bits 0011  
                        _SEND_EOF 0685                          _SEND_SOF 067A           __end_of_Modulate_Serial 067A  
                      _ADCON0bits 009D               get_hitlist_length@i 0075                control_transfer@id 0042  
                        Buzz@freq 0026               add_to_hitlist@gun16 0076                  __size_of_LED_off 0003  
                       hit_by@who 007C                       ??_Send_Byte 0071                     _handle_serial 051A  
        ?_High_Priority_Interrupt 0070                  __size_of___aldiv 0082                        _ANSELAbits 018C  
                  _SEND_DATA_BYTE 05E7     control_transfer@random_number 0041                          __ptext10 0643  
                        __ptext11 0386                          __ptext20 048B                          __ptext12 04D3  
                        __ptext21 0304                          __ptext13 05C2                          __ptext22 0626  
                        __ptext14 03E2                          __ptext15 065E                          __ptext16 066C  
                        __ptext17 0695                          __ptext18 06A0                          __ptext19 06A3  
                   __size_of_Fire 0055                     __size_of_Load 0025                    ?_handle_serial 0070  
                   __size_of_Buzz 0048                     __size_of_Save 0047                     __size_of_main 0005  
               control_transfer@i 0044                 control_transfer@x 0047                  ?_Modulate_Serial 0070  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 0609                  _control_transfer 0029  
                      _INTCONbits 000B                       Fire@counter 004B       __size_of_Disable_Modulation 0006  
                     _PWM3CONbits 0DBB                       pic14e$flags 007E                          intlevel1 0000  
        __size_of_GET_CHAR_HELPER 001D   __end_of_High_Priority_Interrupt 0019            __size_of_LoadFromFlash 005C  
                      _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000                   ?_SEND_DATA_BYTE 0070  
                    ___aldiv@sign 0021                   ??_handle_serial 0048                handle_serial@rx_id 0054  
