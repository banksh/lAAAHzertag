

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Aug 25 08:46:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0197                     	;# 
   100  0199                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019C                     	;# 
   105  019D                     	;# 
   106  019E                     	;# 
   107  019F                     	;# 
   108  020C                     	;# 
   109  028C                     	;# 
   110  030C                     	;# 
   111  038C                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0691                     	;# 
   116  0692                     	;# 
   117  0693                     	;# 
   118  0694                     	;# 
   119  0695                     	;# 
   120  0D8E                     	;# 
   121  0D8F                     	;# 
   122  0D90                     	;# 
   123  0D91                     	;# 
   124  0D91                     	;# 
   125  0D92                     	;# 
   126  0D93                     	;# 
   127  0D93                     	;# 
   128  0D94                     	;# 
   129  0D95                     	;# 
   130  0D95                     	;# 
   131  0D96                     	;# 
   132  0D97                     	;# 
   133  0D97                     	;# 
   134  0D98                     	;# 
   135  0D99                     	;# 
   136  0D99                     	;# 
   137  0D9A                     	;# 
   138  0D9B                     	;# 
   139  0D9C                     	;# 
   140  0D9C                     	;# 
   141  0D9D                     	;# 
   142  0D9D                     	;# 
   143  0D9E                     	;# 
   144  0D9F                     	;# 
   145  0DA0                     	;# 
   146  0DA1                     	;# 
   147  0DA1                     	;# 
   148  0DA2                     	;# 
   149  0DA3                     	;# 
   150  0DA3                     	;# 
   151  0DA4                     	;# 
   152  0DA5                     	;# 
   153  0DA5                     	;# 
   154  0DA6                     	;# 
   155  0DA7                     	;# 
   156  0DA7                     	;# 
   157  0DA8                     	;# 
   158  0DA9                     	;# 
   159  0DA9                     	;# 
   160  0DAA                     	;# 
   161  0DAB                     	;# 
   162  0DAC                     	;# 
   163  0DAC                     	;# 
   164  0DAD                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBC                     	;# 
   187  0DBD                     	;# 
   188  0DBD                     	;# 
   189  0DBE                     	;# 
   190  0DBF                     	;# 
   191  0DC0                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  028C                     	;# 
   277  030C                     	;# 
   278  038C                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0691                     	;# 
   283  0692                     	;# 
   284  0693                     	;# 
   285  0694                     	;# 
   286  0695                     	;# 
   287  0D8E                     	;# 
   288  0D8F                     	;# 
   289  0D90                     	;# 
   290  0D91                     	;# 
   291  0D91                     	;# 
   292  0D92                     	;# 
   293  0D93                     	;# 
   294  0D93                     	;# 
   295  0D94                     	;# 
   296  0D95                     	;# 
   297  0D95                     	;# 
   298  0D96                     	;# 
   299  0D97                     	;# 
   300  0D97                     	;# 
   301  0D98                     	;# 
   302  0D99                     	;# 
   303  0D99                     	;# 
   304  0D9A                     	;# 
   305  0D9B                     	;# 
   306  0D9C                     	;# 
   307  0D9C                     	;# 
   308  0D9D                     	;# 
   309  0D9D                     	;# 
   310  0D9E                     	;# 
   311  0D9F                     	;# 
   312  0DA0                     	;# 
   313  0DA1                     	;# 
   314  0DA1                     	;# 
   315  0DA2                     	;# 
   316  0DA3                     	;# 
   317  0DA3                     	;# 
   318  0DA4                     	;# 
   319  0DA5                     	;# 
   320  0DA5                     	;# 
   321  0DA6                     	;# 
   322  0DA7                     	;# 
   323  0DA7                     	;# 
   324  0DA8                     	;# 
   325  0DA9                     	;# 
   326  0DA9                     	;# 
   327  0DAA                     	;# 
   328  0DAB                     	;# 
   329  0DAC                     	;# 
   330  0DAC                     	;# 
   331  0DAD                     	;# 
   332  0DAD                     	;# 
   333  0DAE                     	;# 
   334  0DAF                     	;# 
   335  0DB0                     	;# 
   336  0DB1                     	;# 
   337  0DB1                     	;# 
   338  0DB2                     	;# 
   339  0DB3                     	;# 
   340  0DB3                     	;# 
   341  0DB4                     	;# 
   342  0DB5                     	;# 
   343  0DB5                     	;# 
   344  0DB6                     	;# 
   345  0DB7                     	;# 
   346  0DB7                     	;# 
   347  0DB8                     	;# 
   348  0DB9                     	;# 
   349  0DB9                     	;# 
   350  0DBA                     	;# 
   351  0DBB                     	;# 
   352  0DBC                     	;# 
   353  0DBC                     	;# 
   354  0DBD                     	;# 
   355  0DBD                     	;# 
   356  0DBE                     	;# 
   357  0DBF                     	;# 
   358  0DC0                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  028C                     	;# 
   444  030C                     	;# 
   445  038C                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  0695                     	;# 
   454  0D8E                     	;# 
   455  0D8F                     	;# 
   456  0D90                     	;# 
   457  0D91                     	;# 
   458  0D91                     	;# 
   459  0D92                     	;# 
   460  0D93                     	;# 
   461  0D93                     	;# 
   462  0D94                     	;# 
   463  0D95                     	;# 
   464  0D95                     	;# 
   465  0D96                     	;# 
   466  0D97                     	;# 
   467  0D97                     	;# 
   468  0D98                     	;# 
   469  0D99                     	;# 
   470  0D99                     	;# 
   471  0D9A                     	;# 
   472  0D9B                     	;# 
   473  0D9C                     	;# 
   474  0D9C                     	;# 
   475  0D9D                     	;# 
   476  0D9D                     	;# 
   477  0D9E                     	;# 
   478  0D9F                     	;# 
   479  0DA0                     	;# 
   480  0DA1                     	;# 
   481  0DA1                     	;# 
   482  0DA2                     	;# 
   483  0DA3                     	;# 
   484  0DA3                     	;# 
   485  0DA4                     	;# 
   486  0DA5                     	;# 
   487  0DA5                     	;# 
   488  0DA6                     	;# 
   489  0DA7                     	;# 
   490  0DA7                     	;# 
   491  0DA8                     	;# 
   492  0DA9                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAC                     	;# 
   498  0DAD                     	;# 
   499  0DAD                     	;# 
   500  0DAE                     	;# 
   501  0DAF                     	;# 
   502  0DB0                     	;# 
   503  0DB1                     	;# 
   504  0DB1                     	;# 
   505  0DB2                     	;# 
   506  0DB3                     	;# 
   507  0DB3                     	;# 
   508  0DB4                     	;# 
   509  0DB5                     	;# 
   510  0DB5                     	;# 
   511  0DB6                     	;# 
   512  0DB7                     	;# 
   513  0DB7                     	;# 
   514  0DB8                     	;# 
   515  0DB9                     	;# 
   516  0DB9                     	;# 
   517  0DBA                     	;# 
   518  0DBB                     	;# 
   519  0DBC                     	;# 
   520  0DBC                     	;# 
   521  0DBD                     	;# 
   522  0DBD                     	;# 
   523  0DBE                     	;# 
   524  0DBF                     	;# 
   525  0DC0                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540                           
   541                           	psect	stringtext
   542  0500                     __pstringtext:	
   543  0500                     _death_song:	
   544  0500  3462               	retlw	98
   545  0501  34F0               	retlw	240
   546  0502  3400               	retlw	0
   547  0503  34FA               	retlw	250
   548  0504  3400               	retlw	0
   549  0505  3400               	retlw	0
   550  0506  3400               	retlw	0
   551  0507  3400               	retlw	0
   552  0508  3400               	retlw	0
   553  0509  3400               	retlw	0
   554  050A  3400               	retlw	0
   555  050B  3400               	retlw	0
   556  050C  346F               	retlw	111
   557  050D  3477               	retlw	119
   558  050E  347A               	retlw	122
   559  050F  3459               	retlw	89
   560  0510  3400               	retlw	0
   561  0511  3400               	retlw	0
   562  0512  34CC               	retlw	204
   563  0513  345E               	retlw	94
   564  0514  347A               	retlw	122
   565  0515  3459               	retlw	89
   566  0516  34CC               	retlw	204
   567  0517  345E               	retlw	94
   568  0518  346B               	retlw	107
   569  0519  346A               	retlw	106
   570  051A  3400               	retlw	0
   571  051B  3400               	retlw	0
   572  051C  346F               	retlw	111
   573  051D  3477               	retlw	119
   574  051E  3470               	retlw	112
   575  051F  349F               	retlw	159
   576  0520  3400               	retlw	0
   577  0521  3400               	retlw	0
   578  0522  3470               	retlw	112
   579  0523  349F               	retlw	159
   580  0524  34EA               	retlw	234
   581  0525  34EE               	retlw	238
   582  0526                     __end_of_death_song:	
   583  0526                     _fire_song:	
   584  0526  34A0               	retlw	160
   585  0527  340F               	retlw	15
   586  0528  34DB               	retlw	219
   587  0529  3411               	retlw	17
   588  052A  34D5               	retlw	213
   589  052B  3414               	retlw	20
   590  052C  3400               	retlw	0
   591  052D  3419               	retlw	25
   592  052E  3440               	retlw	64
   593  052F  341F               	retlw	31
   594  0530  34AA               	retlw	170
   595  0531  3429               	retlw	41
   596  0532  3480               	retlw	128
   597  0533  343E               	retlw	62
   598  0534  3400               	retlw	0
   599  0535  347D               	retlw	125
   600  0536  34E3               	retlw	227
   601  0537  348A               	retlw	138
   602  0538  3440               	retlw	64
   603  0539  349C               	retlw	156
   604  053A  3492               	retlw	146
   605  053B  34B2               	retlw	178
   606  053C  3455               	retlw	85
   607  053D  34D0               	retlw	208
   608  053E  3400               	retlw	0
   609  053F  34FA               	retlw	250
   610  0540  3400               	retlw	0
   611  0541  3400               	retlw	0
   612  0542  3400               	retlw	0
   613  0543  3400               	retlw	0
   614  0544  3400               	retlw	0
   615  0545  3400               	retlw	0
   616  0546                     __end_of_fire_song:	
   617  0546                     _one_up:	
   618  0546  34CC               	retlw	204
   619  0547  345E               	retlw	94
   620  0548  34B8               	retlw	184
   621  0549  344F               	retlw	79
   622  054A  3467               	retlw	103
   623  054B  342F               	retlw	47
   624  054C  34B9               	retlw	185
   625  054D  343B               	retlw	59
   626  054E  3434               	retlw	52
   627  054F  3435               	retlw	53
   628  0550  34DC               	retlw	220
   629  0551  3427               	retlw	39
   630  0552                     __end_of_one_up:	
   631  0552                     _dead_song:	
   632  0552  346F               	retlw	111
   633  0553  3477               	retlw	119
   634  0554  3470               	retlw	112
   635  0555  349F               	retlw	159
   636  0556  34EA               	retlw	234
   637  0557  34EE               	retlw	238
   638  0558                     __end_of_dead_song:	
   639  0016                     _TMR1	set	22
   640  000B                     _INTCONbits	set	11
   641  0011                     _PIR1bits	set	17
   642  000C                     _PORTAbits	set	12
   643  0018                     _T1CONbits	set	24
   644  001C                     _T2CONbits	set	28
   645  0015                     _TMR0	set	21
   646  001A                     _TMR2	set	26
   647  009B                     _ADRES	set	155
   648  009D                     _ADCON0bits	set	157
   649  009E                     _ADCON1	set	158
   650  0095                     _OPTION_REGbits	set	149
   651  0099                     _OSCCON	set	153
   652  008C                     _TRISAbits	set	140
   653  0118                     _DACCON0bits	set	280
   654  0191                     _PMADR	set	401
   655  0193                     _PMDAT	set	403
   656  018C                     _ANSELA	set	396
   657  018C                     _ANSELAbits	set	396
   658  019F                     _BAUDCONbits	set	415
   659  0191                     _PMADRL	set	401
   660  0195                     _PMCON1bits	set	405
   661  0196                     _PMCON2	set	406
   662  0199                     _RCREG	set	409
   663  019D                     _RCSTAbits	set	413
   664  019B                     _SPBRGL	set	411
   665  019A                     _TXREG	set	410
   666  019E                     _TXSTAbits	set	414
   667  0DB3                     _PWM3DC	set	3507
   668  0DB1                     _PWM3PH	set	3505
   669  0DB5                     _PWM3PR	set	3509
   670  0DBB                     _PWM3CONbits	set	3515
   671  0DBF                     _PWM3LDCONbits	set	3519
   672                           
   673                           ; #config settings
   674  0000                     
   675                           	psect	cinit
   676  0016                     start_initialization:	
   677  0016                     __initialization:	
   678                           
   679                           ; Clear objects allocated to COMMON
   680  0016  01FC               	clrf	__pbssCOMMON& (0+127)
   681                           
   682                           ; Clear objects allocated to BANK0
   683  0017  305C               	movlw	low __pbssBANK0
   684  0018  0084               	movwf	4
   685  0019  3000               	movlw	high __pbssBANK0
   686  001A  0085               	movwf	5
   687  001B  3012               	movlw	18
   688  001C  24E4               	fcall	clear_ram0
   689                           
   690                           ; Clear objects allocated to BANK1
   691  001D  30A0               	movlw	low __pbssBANK1
   692  001E  0084               	movwf	4
   693  001F  3000               	movlw	high __pbssBANK1
   694  0020  0085               	movwf	5
   695  0021  3032               	movlw	50
   696  0022  24E4               	fcall	clear_ram0
   697  0023                     end_of_initialization:	
   698                           ;End of C runtime variable initialization code
   699                           
   700  0023                     __end_of__initialization:	
   701  0023  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   702  0024  0020               	movlb	0
   703  0025  2CD0               	ljmp	_main	;jump to C main() function
   704                           
   705                           	psect	bssCOMMON
   706  007C                     __pbssCOMMON:	
   707  007C                     __x:	
   708  007C                     	ds	1
   709                           
   710                           	psect	bssBANK0
   711  005C                     __pbssBANK0:	
   712  005C                     __i:	
   713  005C                     	ds	2
   714  005E                     _cur_song:	
   715  005E                     	ds	2
   716  0060                     _cur_song_duration:	
   717  0060                     	ds	2
   718  0062                     handle_fire@counter:	
   719  0062                     	ds	2
   720  0064                     handle_fire@timer:	
   721  0064                     	ds	2
   722  0066                     __checksum:	
   723  0066                     	ds	1
   724  0067                     _cur_song_length:	
   725  0067                     	ds	1
   726  0068                     _cur_song_ptr:	
   727  0068                     	ds	1
   728  0069                     _cur_song_repeat:	
   729  0069                     	ds	1
   730  006A                     _my_random_number:	
   731  006A                     	ds	1
   732  006B                     handle_serial@rx_counter:	
   733  006B                     	ds	1
   734  006C                     handle_serial@rx_id:	
   735  006C                     	ds	1
   736  006D                     __y:	
   737  006D                     	ds	1
   738                           
   739                           	psect	bssBANK1
   740  00A0                     __pbssBANK1:	
   741  00A0                     _hitlist:	
   742  00A0                     	ds	32
   743  00C0                     _config:	
   744  00C0                     	ds	18
   745                           
   746                           	psect	clrtext
   747  04E4                     clear_ram0:	
   748                           ;	Called with FSR0 containing the base address, and
   749                           ;	WREG with the size to clear
   750                           
   751  04E4  0064               	clrwdt	;clear the watchdog before getting into this loop
   752  04E5                     clrloop0:	
   753  04E5  0180               	clrf	0	;clear RAM location pointed to by FSR
   754  04E6  3101               	addfsr 0,1
   755  04E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   756  04E8  2CE5               	goto	clrloop0	;have we reached the end yet?
   757  04E9  3400               	retlw	0	;all done for this memory range, return
   758                           
   759                           	psect	cstackCOMMON
   760  0070                     __pcstackCOMMON:	
   761  0070                     ?_Setup:	
   762  0070                     ?_super_dead_mode:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_handle_music:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_delay_1_ms:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_cheat:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_control_transfer:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_LoadFromFlash:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_main:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?_red_led_on:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ?_green_led_on:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_stop_song:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ?_Send_Byte:	
   793                           ; 0 bytes @ 0x0
   794                           
   795  0070                     ?_High_Priority_Interrupt:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ??_High_Priority_Interrupt:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_add_to_hitlist:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ?_hit_by:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ?_SEND_DATA_BYTE:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?_SEND_SOF:	
   811                           ; 0 bytes @ 0x0
   812                           
   813  0070                     ?_SEND_EOF:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?_handle_serial:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ?_handle_fire:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0070                     ?_GET_CHAR_HELPER:	
   823                           ; 1 bytes @ 0x0
   824                           
   825                           
   826                           ; 1 bytes @ 0x0
   827  0070                     	ds	1
   828  0071                     ?_Load:	
   829  0071                     ?_Save:	
   830                           ; 0 bytes @ 0x1
   831                           
   832  0071                     ??_delay_1_ms:	
   833                           ; 0 bytes @ 0x1
   834                           
   835  0071                     ?_tone:	
   836                           ; 0 bytes @ 0x1
   837                           
   838  0071                     ??_red_led_on:	
   839                           ; 0 bytes @ 0x1
   840                           
   841  0071                     ??_green_led_on:	
   842                           ; 0 bytes @ 0x1
   843                           
   844  0071                     ?_play_song:	
   845                           ; 0 bytes @ 0x1
   846                           
   847  0071                     ??_stop_song:	
   848                           ; 0 bytes @ 0x1
   849                           
   850  0071                     ??_add_to_hitlist:	
   851                           ; 0 bytes @ 0x1
   852                           
   853  0071                     ??_GET_CHAR_HELPER:	
   854                           ; 0 bytes @ 0x1
   855                           
   856  0071                     ?_ADC_read:	
   857                           ; 0 bytes @ 0x1
   858                           
   859  0071                     play_song@song:	
   860                           ; 2 bytes @ 0x1
   861                           
   862  0071                     tone@period:	
   863                           ; 2 bytes @ 0x1
   864                           
   865  0071                     Load@address:	
   866                           ; 2 bytes @ 0x1
   867                           
   868  0071                     Save@address:	
   869                           ; 2 bytes @ 0x1
   870                           
   871  0071                     delay_1_ms@i:	
   872                           ; 2 bytes @ 0x1
   873                           
   874                           
   875                           ; 2 bytes @ 0x1
   876  0071                     	ds	1
   877  0072                     GET_CHAR_HELPER@val:	
   878                           
   879                           ; 1 bytes @ 0x2
   880  0072                     	ds	1
   881  0073                     ??_Setup:	
   882  0073                     ??_tone:	
   883                           ; 0 bytes @ 0x3
   884                           
   885  0073                     ??_ADC_read:	
   886                           ; 0 bytes @ 0x3
   887                           
   888  0073                     play_song@length:	
   889                           ; 0 bytes @ 0x3
   890                           
   891  0073                     Load@ptr:	
   892                           ; 1 bytes @ 0x3
   893                           
   894  0073                     Save@ptr:	
   895                           ; 1 bytes @ 0x3
   896                           
   897                           
   898                           ; 1 bytes @ 0x3
   899  0073                     	ds	1
   900  0074                     Load@data_length:	
   901  0074                     Save@data_length:	
   902                           ; 1 bytes @ 0x4
   903                           
   904  0074                     play_song@note_duration:	
   905                           ; 1 bytes @ 0x4
   906                           
   907                           
   908                           ; 2 bytes @ 0x4
   909  0074                     	ds	1
   910  0075                     ??_Load:	
   911  0075                     ??_Save:	
   912                           ; 0 bytes @ 0x5
   913                           
   914  0075                     ??_handle_music:	
   915                           ; 0 bytes @ 0x5
   916                           
   917  0075                     ??_cheat:	
   918                           ; 0 bytes @ 0x5
   919                           
   920  0075                     add_to_hitlist@gun:	
   921                           ; 0 bytes @ 0x5
   922                           
   923                           
   924                           ; 1 bytes @ 0x5
   925  0075                     	ds	1
   926  0076                     play_song@repeat:	
   927  0076                     Load@i:	
   928                           ; 1 bytes @ 0x6
   929                           
   930  0076                     Save@i:	
   931                           ; 1 bytes @ 0x6
   932                           
   933  0076                     cheat@i:	
   934                           ; 1 bytes @ 0x6
   935                           
   936  0076                     add_to_hitlist@gun16:	
   937                           ; 1 bytes @ 0x6
   938                           
   939                           
   940                           ; 2 bytes @ 0x6
   941  0076                     	ds	1
   942  0077                     ??_LoadFromFlash:	
   943  0077                     ??_play_song:	
   944                           ; 0 bytes @ 0x7
   945                           
   946  0077                     cheat@i_724:	
   947                           ; 0 bytes @ 0x7
   948                           
   949                           
   950                           ; 1 bytes @ 0x7
   951  0077                     	ds	1
   952  0078                     ??_Send_Byte:	
   953  0078                     add_to_hitlist@i:	
   954                           ; 0 bytes @ 0x8
   955                           
   956                           
   957                           ; 1 bytes @ 0x8
   958  0078                     	ds	1
   959  0079                     Send_Byte@data:	
   960                           
   961                           ; 1 bytes @ 0x9
   962  0079                     	ds	1
   963  007A                     Send_Byte@i:	
   964                           
   965                           ; 2 bytes @ 0xA
   966  007A                     	ds	2
   967  007C                     ??_main:	
   968  007C                     ??_SEND_SOF:	
   969                           ; 0 bytes @ 0xC
   970                           
   971  007C                     ??_SEND_EOF:	
   972                           ; 0 bytes @ 0xC
   973                           
   974                           
   975                           	psect	cstackBANK0
   976  0020                     __pcstackBANK0:	
   977                           ; 0 bytes @ 0xC
   978                           
   979  0020                     ??_handle_fire:	
   980  0020                     ??_SEND_DATA_BYTE:	
   981                           ; 0 bytes @ 0x0
   982                           
   983                           
   984                           ; 0 bytes @ 0x0
   985  0020                     	ds	2
   986  0022                     SEND_DATA_BYTE@b:	
   987  0022                     handle_fire@a:	
   988                           ; 1 bytes @ 0x2
   989                           
   990                           
   991                           ; 2 bytes @ 0x2
   992  0022                     	ds	1
   993  0023                     ??_control_transfer:	
   994                           
   995                           ; 0 bytes @ 0x3
   996  0023                     	ds	2
   997  0025                     control_transfer@data:	
   998                           
   999                           ; 32 bytes @ 0x5
  1000  0025                     	ds	32
  1001  0045                     control_transfer@cmd:	
  1002                           
  1003                           ; 1 bytes @ 0x25
  1004  0045                     	ds	1
  1005  0046                     control_transfer@random_number:	
  1006                           
  1007                           ; 1 bytes @ 0x26
  1008  0046                     	ds	1
  1009  0047                     control_transfer@id:	
  1010                           
  1011                           ; 1 bytes @ 0x27
  1012  0047                     	ds	1
  1013  0048                     control_transfer@dptr:	
  1014                           
  1015                           ; 1 bytes @ 0x28
  1016  0048                     	ds	1
  1017  0049                     control_transfer@i:	
  1018                           
  1019                           ; 1 bytes @ 0x29
  1020  0049                     	ds	1
  1021  004A                     control_transfer@page:	
  1022                           
  1023                           ; 2 bytes @ 0x2A
  1024  004A                     	ds	2
  1025  004C                     control_transfer@x:	
  1026                           
  1027                           ; 1 bytes @ 0x2C
  1028  004C                     	ds	1
  1029  004D                     ??_super_dead_mode:	
  1030                           
  1031                           ; 0 bytes @ 0x2D
  1032  004D                     	ds	2
  1033  004F                     super_dead_mode@b:	
  1034                           
  1035                           ; 1 bytes @ 0x2F
  1036  004F                     	ds	1
  1037  0050                     super_dead_mode@counter:	
  1038                           
  1039                           ; 2 bytes @ 0x30
  1040  0050                     	ds	2
  1041  0052                     ??_hit_by:	
  1042                           
  1043                           ; 0 bytes @ 0x32
  1044  0052                     	ds	2
  1045  0054                     hit_by@who:	
  1046                           
  1047                           ; 1 bytes @ 0x34
  1048  0054                     	ds	1
  1049  0055                     hit_by@respawn_timer:	
  1050                           
  1051                           ; 2 bytes @ 0x35
  1052  0055                     	ds	2
  1053  0057                     hit_by@i:	
  1054                           
  1055                           ; 1 bytes @ 0x37
  1056  0057                     	ds	1
  1057  0058                     hit_by@i_747:	
  1058                           
  1059                           ; 1 bytes @ 0x38
  1060  0058                     	ds	1
  1061  0059                     ??_handle_serial:	
  1062                           
  1063                           ; 0 bytes @ 0x39
  1064  0059                     	ds	2
  1065  005B                     handle_serial@b:	
  1066                           
  1067                           ; 1 bytes @ 0x3B
  1068  005B                     	ds	1
  1069                           
  1070                           	psect	maintext
  1071  04D0                     __pmaintext:	
  1072 ;;
  1073 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1074 ;;
  1075 ;; *************** function _main *****************
  1076 ;; Defined at:
  1077 ;;		line 49 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;		None               void
  1084 ;; Registers used:
  1085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 17F/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1091 ;;      Params:         0       0       0       0
  1092 ;;      Locals:         0       0       0       0
  1093 ;;      Temps:          0       0       0       0
  1094 ;;      Totals:         0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels required when called:   10
  1097 ;; This function calls:
  1098 ;;		_LoadFromFlash
  1099 ;;		_Setup
  1100 ;;		_handle_fire
  1101 ;;		_handle_music
  1102 ;;		_handle_serial
  1103 ;;		_super_dead_mode
  1104 ;; This function is called by:
  1105 ;;		Startup code after reset
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           
  1110                           ;psect for function _main
  1111  04D0                     _main:	
  1112                           
  1113                           ;main.c: 51: Setup();
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1117  04D0  275A               	fcall	_Setup
  1118                           
  1119                           ;main.c: 52: LoadFromFlash();
  1120  04D1  2656               	fcall	_LoadFromFlash
  1121                           
  1122                           ;main.c: 53: if(!config.health) {
  1123  04D2  0021               	movlb	1	; select bank1
  1124  04D3  0845               	movf	((_config+1)^(0+128)+4),w
  1125  04D4  0444               	iorwf	(_config^(0+128)+4),w
  1126  04D5  1D03               	skipz
  1127  04D6  2CD8               	goto	l26
  1128                           
  1129                           ;main.c: 54: super_dead_mode();
  1130  04D7  2558               	fcall	_super_dead_mode
  1131  04D8                     l26:	
  1132                           ;main.c: 55: }
  1133                           ;main.c: 57: while(1)
  1134                           
  1135                           
  1136                           ;main.c: 58: {
  1137                           ;main.c: 59: handle_serial();
  1138  04D8  2603               	fcall	_handle_serial
  1139                           
  1140                           ;main.c: 60: handle_fire();
  1141  04D9  2346               	fcall	_handle_fire
  1142                           
  1143                           ;main.c: 61: handle_music();
  1144  04DA  2729               	fcall	_handle_music
  1145  04DB  2CD8               	goto	l26
  1146  04DC                     __end_of_main:	
  1147                           
  1148                           	psect	text1
  1149  0603                     __ptext1:	
  1150 ;; *************** function _handle_serial *****************
  1151 ;; Defined at:
  1152 ;;		line 133 in file "protocol.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  b               1   59[BANK0 ] unsigned char 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      unsigned char 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1166 ;;      Params:         0       0       0       0
  1167 ;;      Locals:         0       1       0       0
  1168 ;;      Temps:          0       2       0       0
  1169 ;;      Totals:         0       3       0       0
  1170 ;;Total ram usage:        3 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    9
  1173 ;; This function calls:
  1174 ;;		_control_transfer
  1175 ;;		_hit_by
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _handle_serial
  1183  0603                     _handle_serial:	
  1184                           
  1185                           ;protocol.c: 135: static uint8_t rx_id=0;
  1186                           ;protocol.c: 136: static uint8_t rx_counter=0;
  1187                           ;protocol.c: 137: uint8_t b;
  1188                           ;protocol.c: 139: if(!(PIR1bits.RCIF)) return 0;
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1192  0603  0020               	movlb	0	; select bank0
  1193  0604  1E91               	btfss	17,5	;volatile
  1194  0605  0008               	return
  1195                           
  1196                           ;protocol.c: 140: b=(RCREG^0b10101010);
  1197                           
  1198                           ;	Return value of _handle_serial is never used
  1199  0606  0023               	movlb	3	; select bank3
  1200  0607  0819               	movf	25,w	;volatile
  1201  0608  3AAA               	xorlw	170
  1202  0609  0020               	movlb	0	; select bank0
  1203  060A  00D9               	movwf	??_handle_serial
  1204  060B  0859               	movf	??_handle_serial,w
  1205  060C  00DB               	movwf	handle_serial@b
  1206                           
  1207                           ;protocol.c: 141: if(b == 0x10) {
  1208  060D  085B               	movf	handle_serial@b,w
  1209  060E  3A10               	xorlw	16
  1210  060F  1D03               	skipz
  1211  0610  2E13               	goto	l3159
  1212                           
  1213                           ;protocol.c: 142: control_transfer();
  1214  0611  2026               	fcall	_control_transfer
  1215                           
  1216                           ;protocol.c: 143: }
  1217  0612  0008               	return
  1218  0613                     l3159:	
  1219                           
  1220                           ;protocol.c: 145: else if((b > 0x80) && (b != config.id) && (config.id != 0x80)) {
  1221  0613  3081               	movlw	129
  1222  0614  0020               	movlb	0	; select bank0
  1223  0615  025B               	subwf	handle_serial@b,w
  1224  0616  1C03               	skipc
  1225  0617  0008               	return
  1226  0618  085B               	movf	handle_serial@b,w
  1227  0619  00D9               	movwf	??_handle_serial
  1228  061A  01DA               	clrf	??_handle_serial+1
  1229  061B  0021               	movlb	1	; select bank1
  1230  061C  0841               	movf	(_config+1)^(0+128),w
  1231  061D  0020               	movlb	0	; select bank0
  1232  061E  065A               	xorwf	??_handle_serial+1,w
  1233  061F  1D03               	skipz
  1234  0620  2E25               	goto	u4225
  1235  0621  0021               	movlb	1	; select bank1
  1236  0622  0840               	movf	_config^(0+128),w
  1237  0623  0020               	movlb	0	; select bank0
  1238  0624  0659               	xorwf	??_handle_serial,w
  1239  0625                     u4225:	
  1240  0625  1903               	skipnz
  1241  0626  0008               	return
  1242  0627  3080               	movlw	128
  1243  0628  0021               	movlb	1	; select bank1
  1244  0629  0640               	xorwf	_config^(0+128),w
  1245  062A  0441               	iorwf	(_config+1)^(0+128),w
  1246  062B  1903               	skipnz
  1247  062C  0008               	return
  1248                           
  1249                           ;protocol.c: 146: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1250  062D  0020               	movlb	0	; select bank0
  1251  062E  085B               	movf	handle_serial@b,w
  1252  062F  066C               	xorwf	handle_serial@rx_id,w
  1253  0630  1903               	btfsc	3,2
  1254  0631  1891               	btfsc	17,1	;volatile
  1255  0632  01EB               	clrf	handle_serial@rx_counter
  1256                           
  1257                           ;protocol.c: 147: TMR2 = 0;
  1258  0633  019A               	clrf	26	;volatile
  1259                           
  1260                           ;protocol.c: 148: PIR1bits.TMR2IF = 0;
  1261  0634  1091               	bcf	17,1	;volatile
  1262                           
  1263                           ;protocol.c: 149: rx_id = b;
  1264  0635  085B               	movf	handle_serial@b,w
  1265  0636  00D9               	movwf	??_handle_serial
  1266  0637  0859               	movf	??_handle_serial,w
  1267  0638  00EC               	movwf	handle_serial@rx_id
  1268                           
  1269                           ;protocol.c: 150: rx_counter++;
  1270  0639  3001               	movlw	1
  1271  063A  00D9               	movwf	??_handle_serial
  1272  063B  0859               	movf	??_handle_serial,w
  1273  063C  07EB               	addwf	handle_serial@rx_counter,f
  1274                           
  1275                           ;protocol.c: 151: if(rx_counter > config.shield) {
  1276  063D  086B               	movf	handle_serial@rx_counter,w
  1277  063E  00D9               	movwf	??_handle_serial
  1278  063F  01DA               	clrf	??_handle_serial+1
  1279  0640  085A               	movf	??_handle_serial+1,w
  1280  0641  0021               	movlb	1	; select bank1
  1281  0642  0247               	subwf	((_config+1)^(0+128)+6),w
  1282  0643  1D03               	skipz
  1283  0644  2E49               	goto	u4265
  1284  0645  0020               	movlb	0	; select bank0
  1285  0646  0859               	movf	??_handle_serial,w
  1286  0647  0021               	movlb	1	; select bank1
  1287  0648  0246               	subwf	(_config^(0+128)+6),w
  1288  0649                     u4265:	
  1289  0649  1803               	skipnc
  1290  064A  0008               	return
  1291                           
  1292                           ;protocol.c: 152: RCSTAbits.CREN = 0;
  1293  064B  0023               	movlb	3	; select bank3
  1294  064C  121D               	bcf	29,4	;volatile
  1295                           
  1296                           ;protocol.c: 153: hit_by(b);
  1297  064D  0020               	movlb	0	; select bank0
  1298  064E  085B               	movf	handle_serial@b,w
  1299  064F  23DA               	fcall	_hit_by
  1300                           
  1301                           ;protocol.c: 154: rx_id = 0;
  1302  0650  0020               	movlb	0	; select bank0
  1303  0651  01EC               	clrf	handle_serial@rx_id
  1304                           
  1305                           ;protocol.c: 155: (RCREG^0b10101010);
  1306  0652  0023               	movlb	3	; select bank3
  1307  0653  0819               	movf	25,w	;volatile
  1308                           
  1309                           ;protocol.c: 156: RCSTAbits.CREN = 1;
  1310  0654  161D               	bsf	29,4	;volatile
  1311  0655  0008               	return
  1312  0656                     __end_of_handle_serial:	
  1313                           ;protocol.c: 157: }
  1314                           ;protocol.c: 158: }
  1315                           ;protocol.c: 159: return 1;
  1316                           ;	Return value of _handle_serial is never used
  1317                           
  1318                           
  1319                           	psect	text2
  1320  03DA                     __ptext2:	
  1321 ;; *************** function _hit_by *****************
  1322 ;; Defined at:
  1323 ;;		line 349 in file "user.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  who             1    wreg     unsigned char 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  who             1   52[BANK0 ] unsigned char 
  1328 ;;  i               1   56[BANK0 ] unsigned char 
  1329 ;;  i               1   55[BANK0 ] unsigned char 
  1330 ;;  respawn_time    2   53[BANK0 ] unsigned int 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;		None               void
  1333 ;; Registers used:
  1334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1340 ;;      Params:         0       0       0       0
  1341 ;;      Locals:         0       5       0       0
  1342 ;;      Temps:          0       2       0       0
  1343 ;;      Totals:         0       7       0       0
  1344 ;;Total ram usage:        7 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    8
  1347 ;; This function calls:
  1348 ;;		_Save
  1349 ;;		_add_to_hitlist
  1350 ;;		_delay_1_ms
  1351 ;;		_handle_music
  1352 ;;		_play_song
  1353 ;;		_red_led_on
  1354 ;;		_super_dead_mode
  1355 ;; This function is called by:
  1356 ;;		_handle_serial
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           
  1361                           ;psect for function _hit_by
  1362  03DA                     _hit_by:	
  1363                           
  1364                           ;incstack = 0
  1365                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1366                           ;hit_by@who stored from wreg
  1367  03DA  0020               	movlb	0	; select bank0
  1368  03DB  00D4               	movwf	hit_by@who
  1369                           
  1370                           ;user.c: 351: uint16_t respawn_timer;
  1371                           ;user.c: 353: add_to_hitlist(who);
  1372  03DC  0854               	movf	hit_by@who,w
  1373  03DD  25AF               	fcall	_add_to_hitlist
  1374                           
  1375                           ;user.c: 354: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1376  03DE  30E0               	movlw	224
  1377  03DF  00F1               	movwf	Save@address
  1378  03E0  3007               	movlw	7
  1379  03E1  00F2               	movwf	Save@address+1
  1380  03E2  30A0               	movlw	_hitlist& (0+255)
  1381  03E3  0020               	movlb	0	; select bank0
  1382  03E4  00D2               	movwf	??_hit_by
  1383  03E5  0852               	movf	??_hit_by,w
  1384  03E6  00F3               	movwf	Save@ptr
  1385  03E7  3010               	movlw	16
  1386  03E8  00D3               	movwf	??_hit_by+1
  1387  03E9  0853               	movf	??_hit_by+1,w
  1388  03EA  00F4               	movwf	Save@data_length
  1389  03EB  26A8               	fcall	_Save
  1390                           
  1391                           ;user.c: 356: config.health --;
  1392  03EC  3001               	movlw	1
  1393  03ED  0021               	movlb	1	; select bank1
  1394  03EE  02C4               	subwf	(_config^(0+128)+4),f
  1395  03EF  3000               	movlw	0
  1396  03F0  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1397                           
  1398                           ;user.c: 357: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1399  03F1  30F0               	movlw	240
  1400  03F2  00F1               	movwf	Save@address
  1401  03F3  3007               	movlw	7
  1402  03F4  00F2               	movwf	Save@address+1
  1403  03F5  30C0               	movlw	_config& (0+255)
  1404  03F6  0020               	movlb	0	; select bank0
  1405  03F7  00D2               	movwf	??_hit_by
  1406  03F8  0852               	movf	??_hit_by,w
  1407  03F9  00F3               	movwf	Save@ptr
  1408  03FA  3009               	movlw	9
  1409  03FB  00D3               	movwf	??_hit_by+1
  1410  03FC  0853               	movf	??_hit_by+1,w
  1411  03FD  00F4               	movwf	Save@data_length
  1412  03FE  26A8               	fcall	_Save
  1413                           
  1414                           ;user.c: 359: play_song((uint16_t*)death_song,sizeof(death_song)/sizeof(uint16_t),60000,
      +                          0);
  1415  03FF  3000               	movlw	low (_death_song| (0+32768))
  1416  0400  00F1               	movwf	play_song@song
  1417  0401  3085               	movlw	high (_death_song| (0+32768))
  1418  0402  00F2               	movwf	play_song@song+1
  1419  0403  3013               	movlw	19
  1420  0404  0020               	movlb	0	; select bank0
  1421  0405  00D2               	movwf	??_hit_by
  1422  0406  0852               	movf	??_hit_by,w
  1423  0407  00F3               	movwf	play_song@length
  1424  0408  3060               	movlw	96
  1425  0409  00F4               	movwf	play_song@note_duration
  1426  040A  30EA               	movlw	234
  1427  040B  00F5               	movwf	play_song@note_duration+1
  1428  040C  01F6               	clrf	play_song@repeat
  1429  040D  27A9               	fcall	_play_song
  1430                           
  1431                           ;user.c: 361: if(!config.health)
  1432  040E  0021               	movlb	1	; select bank1
  1433  040F  0845               	movf	((_config+1)^(0+128)+4),w
  1434  0410  0444               	iorwf	(_config^(0+128)+4),w
  1435  0411  1D03               	skipz
  1436  0412  2C16               	goto	l3067
  1437                           
  1438                           ;user.c: 362: {
  1439                           ;user.c: 363: red_led_on();
  1440  0413  24FB               	fcall	_red_led_on
  1441                           
  1442                           ;user.c: 364: super_dead_mode();
  1443  0414  2558               	fcall	_super_dead_mode
  1444                           
  1445                           ;user.c: 365: return;
  1446  0415  0008               	return
  1447  0416                     l3067:	
  1448                           
  1449                           ;user.c: 366: }
  1450                           ;user.c: 368: respawn_timer = config.respawn_delay;
  1451  0416  0021               	movlb	1	; select bank1
  1452  0417  0849               	movf	((_config+1)^(0+128)+8),w
  1453  0418  0020               	movlb	0	; select bank0
  1454  0419  01D6               	clrf	hit_by@respawn_timer+1
  1455  041A  07D6               	addwf	hit_by@respawn_timer+1,f
  1456  041B  0021               	movlb	1	; select bank1
  1457  041C  0848               	movf	(_config^(0+128)+8),w
  1458  041D  0020               	movlb	0	; select bank0
  1459  041E  01D5               	clrf	hit_by@respawn_timer
  1460  041F  07D5               	addwf	hit_by@respawn_timer,f
  1461  0420                     l3105:	
  1462                           ;user.c: 369: while(respawn_timer)
  1463                           
  1464  0420  0856               	movf	hit_by@respawn_timer+1,w
  1465  0421  0455               	iorwf	hit_by@respawn_timer,w
  1466  0422  1903               	btfsc	3,2
  1467  0423  0008               	return
  1468                           
  1469                           ;user.c: 370: {
  1470                           ;user.c: 371: respawn_timer--;
  1471  0424  3001               	movlw	1
  1472  0425  02D5               	subwf	hit_by@respawn_timer,f
  1473  0426  3000               	movlw	0
  1474  0427  3BD6               	subwfb	hit_by@respawn_timer+1,f
  1475                           
  1476                           ;user.c: 372: red_led_on();
  1477  0428  24FB               	fcall	_red_led_on
  1478                           
  1479                           ;user.c: 373: for(uint8_t i=0;i<50;i++)
  1480  0429  0020               	movlb	0	; select bank0
  1481  042A  01D7               	clrf	hit_by@i
  1482  042B  3032               	movlw	50
  1483  042C  0257               	subwf	hit_by@i,w
  1484  042D  1803               	btfsc	3,0
  1485  042E  2C3A               	goto	l3087
  1486  042F                     l3079:	
  1487                           
  1488                           ;user.c: 374: {
  1489                           ;user.c: 375: handle_music();
  1490  042F  2729               	fcall	_handle_music
  1491                           
  1492                           ;user.c: 376: delay_1_ms();
  1493  0430  24C1               	fcall	_delay_1_ms
  1494  0431  3001               	movlw	1
  1495  0432  0020               	movlb	0	; select bank0
  1496  0433  00D2               	movwf	??_hit_by
  1497  0434  0852               	movf	??_hit_by,w
  1498  0435  07D7               	addwf	hit_by@i,f
  1499  0436  3032               	movlw	50
  1500  0437  0257               	subwf	hit_by@i,w
  1501  0438  1C03               	skipc
  1502  0439  2C2F               	goto	l3079
  1503  043A                     l3087:	
  1504                           
  1505                           ;user.c: 377: }
  1506                           ;user.c: 379: if(respawn_timer < 30)
  1507  043A  3000               	movlw	0
  1508  043B  0256               	subwf	hit_by@respawn_timer+1,w
  1509  043C  301E               	movlw	30
  1510  043D  1903               	skipnz
  1511  043E  0255               	subwf	hit_by@respawn_timer,w
  1512  043F  1803               	skipnc
  1513  0440  2C43               	goto	l3091
  1514                           
  1515                           ;user.c: 380: {
  1516                           ;user.c: 381: {TRISAbits.TRISA5 = 1;};
  1517  0441  0021               	movlb	1	; select bank1
  1518  0442  168C               	bsf	12,5	;volatile
  1519  0443                     l3091:	
  1520                           
  1521                           ;user.c: 382: }
  1522                           ;user.c: 383: for(uint8_t i=0;i<50;i++)
  1523  0443  0020               	movlb	0	; select bank0
  1524  0444  01D8               	clrf	hit_by@i_747
  1525  0445                     L1:	
  1526  0445  3032               	movlw	50
  1527  0446  0258               	subwf	hit_by@i_747,w
  1528  0447  1803               	btfsc	3,0
  1529  0448  2C20               	goto	l3105
  1530                           
  1531                           ;user.c: 384: {
  1532                           ;user.c: 385: handle_music();
  1533  0449  2729               	fcall	_handle_music
  1534                           
  1535                           ;user.c: 386: delay_1_ms();
  1536  044A  24C1               	fcall	_delay_1_ms
  1537  044B  3001               	movlw	1
  1538  044C  0020               	movlb	0	; select bank0
  1539  044D  00D2               	movwf	??_hit_by
  1540  044E  0852               	movf	??_hit_by,w
  1541  044F  07D8               	addwf	hit_by@i_747,f
  1542  0450  2C45               	goto	L1
  1543  0451                     __end_of_hit_by:	
  1544                           
  1545                           	psect	text3
  1546  0558                     __ptext3:	
  1547 ;; *************** function _super_dead_mode *****************
  1548 ;; Defined at:
  1549 ;;		line 323 in file "user.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;		None
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  b               1   47[BANK0 ] unsigned char 
  1554 ;;  counter         2   48[BANK0 ] unsigned int 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;		None               void
  1557 ;; Registers used:
  1558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1564 ;;      Params:         0       0       0       0
  1565 ;;      Locals:         0       3       0       0
  1566 ;;      Temps:          0       2       0       0
  1567 ;;      Totals:         0       5       0       0
  1568 ;;Total ram usage:        5 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    7
  1571 ;; This function calls:
  1572 ;;		_Send_Byte
  1573 ;;		_control_transfer
  1574 ;;		_delay_1_ms
  1575 ;;		_handle_music
  1576 ;;		_play_song
  1577 ;;		_red_led_on
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;;		_hit_by
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           
  1585                           ;psect for function _super_dead_mode
  1586  0558                     _super_dead_mode:	
  1587                           
  1588                           ;user.c: 324: uint16_t counter = 0;
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1592  0558  0020               	movlb	0	; select bank0
  1593  0559  01D0               	clrf	super_dead_mode@counter
  1594  055A  01D1               	clrf	super_dead_mode@counter+1
  1595  055B                     l3049:	
  1596                           ;user.c: 325: while(!config.health){
  1597                           
  1598  055B  3004               	movlw	4
  1599  055C  3EC0               	addlw	_config& (0+255)
  1600  055D  0086               	movwf	6
  1601  055E  0187               	clrf	7
  1602  055F  0016               	moviw fsr1++
  1603  0560  0401               	iorwf	1,w
  1604  0561  1D03               	btfss	3,2
  1605  0562  0008               	return
  1606                           
  1607                           ;user.c: 326: handle_music();
  1608  0563  2729               	fcall	_handle_music
  1609                           
  1610                           ;user.c: 328: uint8_t b;
  1611                           ;user.c: 329: if((PIR1bits.RCIF)){
  1612  0564  0020               	movlb	0	; select bank0
  1613  0565  1E91               	btfss	17,5	;volatile
  1614  0566  2D73               	goto	l3031
  1615                           
  1616                           ;user.c: 330: b=(RCREG^0b10101010);
  1617  0567  0023               	movlb	3	; select bank3
  1618  0568  0819               	movf	25,w	;volatile
  1619  0569  3AAA               	xorlw	170
  1620  056A  0020               	movlb	0	; select bank0
  1621  056B  00CD               	movwf	??_super_dead_mode
  1622  056C  084D               	movf	??_super_dead_mode,w
  1623  056D  00CF               	movwf	super_dead_mode@b
  1624                           
  1625                           ;user.c: 331: if(b == 0x10) {
  1626  056E  084F               	movf	super_dead_mode@b,w
  1627  056F  3A10               	xorlw	16
  1628  0570  1D03               	skipz
  1629  0571  2D73               	goto	l3031
  1630                           
  1631                           ;user.c: 332: control_transfer();
  1632  0572  2026               	fcall	_control_transfer
  1633  0573                     l3031:	
  1634                           
  1635                           ;user.c: 333: }
  1636                           ;user.c: 334: }
  1637                           ;user.c: 335: counter++;
  1638  0573  3001               	movlw	1
  1639  0574  0020               	movlb	0	; select bank0
  1640  0575  07D0               	addwf	super_dead_mode@counter,f
  1641  0576  3000               	movlw	0
  1642  0577  3DD1               	addwfc	super_dead_mode@counter+1,f
  1643                           
  1644                           ;user.c: 336: delay_1_ms();
  1645  0578  24C1               	fcall	_delay_1_ms
  1646                           
  1647                           ;user.c: 337: if(counter > config.death_period){
  1648  0579  0020               	movlb	0	; select bank0
  1649  057A  0851               	movf	super_dead_mode@counter+1,w
  1650  057B  0021               	movlb	1	; select bank1
  1651  057C  0251               	subwf	((_config+1)^(0+128)+16),w
  1652  057D  1D03               	skipz
  1653  057E  2D83               	goto	u4095
  1654  057F  0020               	movlb	0	; select bank0
  1655  0580  0850               	movf	super_dead_mode@counter,w
  1656  0581  0021               	movlb	1	; select bank1
  1657  0582  0250               	subwf	(_config^(0+128)+16),w
  1658  0583                     u4095:	
  1659  0583  1803               	skipnc
  1660  0584  2D9B               	goto	l3045
  1661                           
  1662                           ;user.c: 338: counter = 0;
  1663  0585  0020               	movlb	0	; select bank0
  1664  0586  01D0               	clrf	super_dead_mode@counter
  1665  0587  01D1               	clrf	super_dead_mode@counter+1
  1666                           
  1667                           ;user.c: 339: {TRISAbits.TRISA5 = 1;};
  1668  0588  0021               	movlb	1	; select bank1
  1669  0589  168C               	bsf	12,5	;volatile
  1670                           
  1671                           ;user.c: 340: Send_Byte(config.id);
  1672  058A  0840               	movf	_config^(0+128),w
  1673  058B  26EF               	fcall	_Send_Byte
  1674                           
  1675                           ;user.c: 341: play_song((uint16_t*)dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0)
      +                          ;
  1676  058C  3052               	movlw	low (_dead_song| (0+32768))
  1677  058D  00F1               	movwf	play_song@song
  1678  058E  3085               	movlw	high (_dead_song| (0+32768))
  1679  058F  00F2               	movwf	play_song@song+1
  1680  0590  3003               	movlw	3
  1681  0591  0020               	movlb	0	; select bank0
  1682  0592  00CD               	movwf	??_super_dead_mode
  1683  0593  084D               	movf	??_super_dead_mode,w
  1684  0594  00F3               	movwf	play_song@length
  1685  0595  3010               	movlw	16
  1686  0596  00F4               	movwf	play_song@note_duration
  1687  0597  3027               	movlw	39
  1688  0598  00F5               	movwf	play_song@note_duration+1
  1689  0599  01F6               	clrf	play_song@repeat
  1690  059A  27A9               	fcall	_play_song
  1691  059B                     l3045:	
  1692                           
  1693                           ;user.c: 342: }
  1694                           ;user.c: 343: if(counter == config.death_period-50){
  1695  059B  0021               	movlb	1	; select bank1
  1696  059C  0850               	movf	(_config^(0+128)+16),w
  1697  059D  3ECE               	addlw	206
  1698  059E  0020               	movlb	0	; select bank0
  1699  059F  00CD               	movwf	??_super_dead_mode
  1700  05A0  30FF               	movlw	255
  1701  05A1  0021               	movlb	1	; select bank1
  1702  05A2  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1703  05A3  0020               	movlb	0	; select bank0
  1704  05A4  00CE               	movwf	??_super_dead_mode+1
  1705  05A5  0851               	movf	super_dead_mode@counter+1,w
  1706  05A6  064E               	xorwf	??_super_dead_mode+1,w
  1707  05A7  1D03               	skipz
  1708  05A8  2DAB               	goto	u4105
  1709  05A9  0850               	movf	super_dead_mode@counter,w
  1710  05AA  064D               	xorwf	??_super_dead_mode,w
  1711  05AB                     u4105:	
  1712  05AB  1D03               	skipz
  1713  05AC  2D5B               	goto	l3049
  1714                           
  1715                           ;user.c: 344: red_led_on();
  1716  05AD  24FB               	fcall	_red_led_on
  1717  05AE  2D5B               	goto	l3049
  1718  05AF                     __end_of_super_dead_mode:	
  1719                           
  1720                           	psect	text4
  1721  0729                     __ptext4:	
  1722 ;; *************** function _handle_music *****************
  1723 ;; Defined at:
  1724 ;;		line 112 in file "user.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;		None               void
  1731 ;; Registers used:
  1732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1738 ;;      Params:         0       0       0       0
  1739 ;;      Locals:         0       0       0       0
  1740 ;;      Temps:          2       0       0       0
  1741 ;;      Totals:         2       0       0       0
  1742 ;;Total ram usage:        2 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		_stop_song
  1747 ;;		_tone
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;;		_super_dead_mode
  1751 ;;		_hit_by
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _handle_music
  1757  0729                     _handle_music:	
  1758                           
  1759                           ;user.c: 114: if(!PIR1bits.TMR1IF) return;
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1763  0729  0020               	movlb	0	; select bank0
  1764  072A  1C11               	btfss	17,0	;volatile
  1765  072B  0008               	return
  1766                           
  1767                           ;user.c: 115: if(cur_song_ptr >= cur_song_length)
  1768  072C  0867               	movf	_cur_song_length,w
  1769  072D  0268               	subwf	_cur_song_ptr,w
  1770  072E  1C03               	skipc
  1771  072F  2F37               	goto	l2667
  1772                           
  1773                           ;user.c: 116: {
  1774                           ;user.c: 117: if(cur_song_repeat)
  1775  0730  0869               	movf	_cur_song_repeat,w
  1776  0731  1903               	btfsc	3,2
  1777  0732  2F35               	goto	l2663
  1778                           
  1779                           ;user.c: 118: {
  1780                           ;user.c: 119: cur_song_ptr=0;
  1781  0733  01E8               	clrf	_cur_song_ptr
  1782                           
  1783                           ;user.c: 120: }
  1784  0734  2F37               	goto	l2667
  1785  0735                     l2663:	
  1786                           
  1787                           ;user.c: 121: else
  1788                           ;user.c: 122: {
  1789                           ;user.c: 123: stop_song();
  1790  0735  24F0               	fcall	_stop_song
  1791                           
  1792                           ;user.c: 124: return;
  1793  0736  0008               	return
  1794  0737                     l2667:	
  1795                           
  1796                           ;user.c: 125: }
  1797                           ;user.c: 126: }
  1798                           ;user.c: 127: tone(cur_song[cur_song_ptr]);
  1799  0737  0020               	movlb	0	; select bank0
  1800  0738  0868               	movf	_cur_song_ptr,w
  1801  0739  00F5               	movwf	??_handle_music
  1802  073A  01F6               	clrf	??_handle_music+1
  1803  073B  35F5               	lslf	??_handle_music,f
  1804  073C  0DF6               	rlf	??_handle_music+1,f
  1805  073D  085E               	movf	_cur_song,w
  1806  073E  0775               	addwf	??_handle_music,w
  1807  073F  0084               	movwf	4
  1808  0740  085F               	movf	_cur_song+1,w
  1809  0741  3D76               	addwfc	??_handle_music+1,w
  1810  0742  0085               	movwf	5
  1811  0743  3F00               	moviw [0]fsr0
  1812  0744  00F1               	movwf	tone@period
  1813  0745  3F01               	moviw [1]fsr0
  1814  0746  00F2               	movwf	tone@period+1
  1815  0747  24AA               	fcall	_tone
  1816                           
  1817                           ;user.c: 128: TMR1 = -cur_song_duration;
  1818  0748  0020               	movlb	0	; select bank0
  1819  0749  0960               	comf	_cur_song_duration,w
  1820  074A  00F5               	movwf	??_handle_music
  1821  074B  0961               	comf	_cur_song_duration+1,w
  1822  074C  00F6               	movwf	??_handle_music+1
  1823  074D  0AF5               	incf	??_handle_music,f
  1824  074E  1903               	skipnz
  1825  074F  0AF6               	incf	??_handle_music+1,f
  1826  0750  0875               	movf	??_handle_music,w
  1827  0751  0096               	movwf	22	;volatile
  1828  0752  0876               	movf	??_handle_music+1,w
  1829  0753  0097               	movwf	23	;volatile
  1830                           
  1831                           ;user.c: 129: cur_song_ptr++;
  1832  0754  3001               	movlw	1
  1833  0755  00F5               	movwf	??_handle_music
  1834  0756  0875               	movf	??_handle_music,w
  1835  0757  07E8               	addwf	_cur_song_ptr,f
  1836                           
  1837                           ;user.c: 130: PIR1bits.TMR1IF=0;
  1838  0758  1011               	bcf	17,0	;volatile
  1839  0759  0008               	return
  1840  075A                     __end_of_handle_music:	
  1841                           
  1842                           	psect	text5
  1843  0026                     __ptext5:	
  1844 ;; *************** function _control_transfer *****************
  1845 ;; Defined at:
  1846 ;;		line 42 in file "protocol.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  data           32    5[BANK0 ] unsigned int [16]
  1851 ;;  page            2   42[BANK0 ] unsigned int 
  1852 ;;  x               1   44[BANK0 ] unsigned char 
  1853 ;;  i               1   41[BANK0 ] unsigned char 
  1854 ;;  dptr            1   40[BANK0 ] PTR unsigned char 
  1855 ;;		 -> control_transfer@data(32), 
  1856 ;;  id              1   39[BANK0 ] unsigned char 
  1857 ;;  random_numbe    1   38[BANK0 ] unsigned char 
  1858 ;;  cmd             1   37[BANK0 ] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;		None               void
  1861 ;; Registers used:
  1862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0      40       0       0
  1870 ;;      Temps:          0       2       0       0
  1871 ;;      Totals:         0      42       0       0
  1872 ;;Total ram usage:       42 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    6
  1875 ;; This function calls:
  1876 ;;		_GET_CHAR_HELPER
  1877 ;;		_Load
  1878 ;;		_SEND_DATA_BYTE
  1879 ;;		_SEND_EOF
  1880 ;;		_SEND_SOF
  1881 ;;		_Save
  1882 ;;		_play_song
  1883 ;; This function is called by:
  1884 ;;		_super_dead_mode
  1885 ;;		_handle_serial
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function _control_transfer
  1891  0026                     _control_transfer:	
  1892                           
  1893                           ;protocol.c: 44: uint8_t i;
  1894                           ;protocol.c: 45: uint8_t cmd;
  1895                           ;protocol.c: 46: uint8_t random_number,id;
  1896                           ;protocol.c: 48: uint16_t page;
  1897                           ;protocol.c: 49: uint16_t data[16];
  1898                           ;protocol.c: 50: uint8_t* dptr;
  1899                           ;protocol.c: 51: uint8_t x;
  1900                           ;protocol.c: 53: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1904  0026  0020               	movlb	0	; select bank0
  1905  0027  01E6               	clrf	__checksum
  1906  0028  307C               	movlw	__x& (0+255)
  1907  0029  2472               	fcall	_GET_CHAR_HELPER
  1908  002A  3A00               	xorlw	0
  1909  002B  1D03               	btfss	3,2
  1910  002C  0008               	return
  1911  002D  306D               	movlw	__y& (0+255)
  1912  002E  2472               	fcall	_GET_CHAR_HELPER
  1913  002F  3A00               	xorlw	0
  1914  0030  1D03               	btfss	3,2
  1915  0031  0008               	return
  1916  0032  087C               	movf	__x,w
  1917  0033  39F0               	andlw	240
  1918  0034  1D03               	btfss	3,2
  1919  0035  0008               	return
  1920  0036  0020               	movlb	0	; select bank0
  1921  0037  086D               	movf	__y,w
  1922  0038  39F0               	andlw	240
  1923  0039  1D03               	btfss	3,2
  1924  003A  0008               	return
  1925  003B  086D               	movf	__y,w
  1926  003C  00A3               	movwf	??_control_transfer
  1927  003D  3003               	movlw	3
  1928  003E                     u3205:	
  1929  003E  35A3               	lslf	??_control_transfer,f
  1930  003F  3EFF               	addlw	-1
  1931  0040  1D03               	skipz
  1932  0041  283E               	goto	u3205
  1933  0042  3523               	lslf	??_control_transfer,w
  1934  0043  047C               	iorwf	__x,w
  1935  0044  00A4               	movwf	??_control_transfer+1
  1936  0045  0824               	movf	??_control_transfer+1,w
  1937  0046  00FC               	movwf	__x
  1938  0047  087C               	movf	__x,w
  1939  0048  00A3               	movwf	??_control_transfer
  1940  0049  0823               	movf	??_control_transfer,w
  1941  004A  07E6               	addwf	__checksum,f
  1942  004B  0021               	movlb	1	; select bank1
  1943  004C  0840               	movf	_config^(0+128),w
  1944  004D  067C               	xorwf	__x,w
  1945  004E  1D03               	btfss	3,2
  1946  004F  0008               	return
  1947                           
  1948                           ;protocol.c: 54: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1949  0050  307C               	movlw	__x& (0+255)
  1950  0051  2472               	fcall	_GET_CHAR_HELPER
  1951  0052  3A00               	xorlw	0
  1952  0053  1D03               	btfss	3,2
  1953  0054  0008               	return
  1954  0055  306D               	movlw	__y& (0+255)
  1955  0056  2472               	fcall	_GET_CHAR_HELPER
  1956  0057  3A00               	xorlw	0
  1957  0058  1D03               	btfss	3,2
  1958  0059  0008               	return
  1959  005A  087C               	movf	__x,w
  1960  005B  39F0               	andlw	240
  1961  005C  1D03               	btfss	3,2
  1962  005D  0008               	return
  1963  005E  0020               	movlb	0	; select bank0
  1964  005F  086D               	movf	__y,w
  1965  0060  39F0               	andlw	240
  1966  0061  1D03               	btfss	3,2
  1967  0062  0008               	return
  1968  0063  086D               	movf	__y,w
  1969  0064  00A3               	movwf	??_control_transfer
  1970  0065  3003               	movlw	3
  1971  0066                     u3265:	
  1972  0066  35A3               	lslf	??_control_transfer,f
  1973  0067  3EFF               	addlw	-1
  1974  0068  1D03               	skipz
  1975  0069  2866               	goto	u3265
  1976  006A  3523               	lslf	??_control_transfer,w
  1977  006B  047C               	iorwf	__x,w
  1978  006C  00A4               	movwf	??_control_transfer+1
  1979  006D  0824               	movf	??_control_transfer+1,w
  1980  006E  00C5               	movwf	control_transfer@cmd
  1981  006F  0845               	movf	control_transfer@cmd,w
  1982  0070  00A3               	movwf	??_control_transfer
  1983  0071  0823               	movf	??_control_transfer,w
  1984  0072  07E6               	addwf	__checksum,f
  1985                           
  1986                           ;protocol.c: 56: switch(cmd)
  1987  0073  2B32               	goto	l3013
  1988  0074                     l2709:	
  1989                           ;protocol.c: 57: {
  1990                           ;protocol.c: 58: case 0x01:
  1991                           
  1992                           
  1993                           ;protocol.c: 59: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1994  0074  307C               	movlw	__x& (0+255)
  1995  0075  2472               	fcall	_GET_CHAR_HELPER
  1996  0076  3A00               	xorlw	0
  1997  0077  1D03               	btfss	3,2
  1998  0078  0008               	return
  1999  0079  306D               	movlw	__y& (0+255)
  2000  007A  2472               	fcall	_GET_CHAR_HELPER
  2001  007B  3A00               	xorlw	0
  2002  007C  1D03               	btfss	3,2
  2003  007D  0008               	return
  2004  007E  087C               	movf	__x,w
  2005  007F  39F0               	andlw	240
  2006  0080  1D03               	btfss	3,2
  2007  0081  0008               	return
  2008  0082  0020               	movlb	0	; select bank0
  2009  0083  086D               	movf	__y,w
  2010  0084  39F0               	andlw	240
  2011  0085  1D03               	btfss	3,2
  2012  0086  0008               	return
  2013  0087  086D               	movf	__y,w
  2014  0088  00A3               	movwf	??_control_transfer
  2015  0089  3003               	movlw	3
  2016  008A                     u3315:	
  2017  008A  35A3               	lslf	??_control_transfer,f
  2018  008B  3EFF               	addlw	-1
  2019  008C  1D03               	skipz
  2020  008D  288A               	goto	u3315
  2021  008E  3523               	lslf	??_control_transfer,w
  2022  008F  047C               	iorwf	__x,w
  2023  0090  00A4               	movwf	??_control_transfer+1
  2024  0091  0824               	movf	??_control_transfer+1,w
  2025  0092  00FC               	movwf	__x
  2026  0093  087C               	movf	__x,w
  2027  0094  00A3               	movwf	??_control_transfer
  2028  0095  0823               	movf	??_control_transfer,w
  2029  0096  07E6               	addwf	__checksum,f
  2030  0097  0866               	movf	__checksum,w
  2031  0098  1D03               	skipz
  2032  0099  0008               	return
  2033  009A  307C               	movlw	__x& (0+255)
  2034  009B  2472               	fcall	_GET_CHAR_HELPER
  2035  009C  3A00               	xorlw	0
  2036  009D  1D03               	btfss	3,2
  2037  009E  0008               	return
  2038  009F  087C               	movf	__x,w
  2039  00A0  3A11               	xorlw	17
  2040  00A1  1D03               	btfss	3,2
  2041  00A2  0008               	return
  2042                           
  2043                           ;protocol.c: 60: SEND_SOF();
  2044  00A3  24DC               	fcall	_SEND_SOF
  2045                           
  2046                           ;protocol.c: 61: SEND_DATA_BYTE(0x02);
  2047  00A4  3002               	movlw	2
  2048  00A5  2490               	fcall	_SEND_DATA_BYTE
  2049                           
  2050                           ;protocol.c: 62: SEND_DATA_BYTE(my_random_number);
  2051  00A6  0020               	movlb	0	; select bank0
  2052  00A7  086A               	movf	_my_random_number,w
  2053  00A8  2490               	fcall	_SEND_DATA_BYTE
  2054                           
  2055                           ;protocol.c: 63: SEND_EOF();
  2056  00A9  24EA               	fcall	_SEND_EOF
  2057                           
  2058                           ;protocol.c: 64: break;
  2059  00AA  0008               	return
  2060  00AB                     l2737:	
  2061                           ;protocol.c: 65: case 0x03:
  2062                           
  2063                           
  2064                           ;protocol.c: 66: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2065  00AB  307C               	movlw	__x& (0+255)
  2066  00AC  2472               	fcall	_GET_CHAR_HELPER
  2067  00AD  3A00               	xorlw	0
  2068  00AE  1D03               	btfss	3,2
  2069  00AF  0008               	return
  2070  00B0  306D               	movlw	__y& (0+255)
  2071  00B1  2472               	fcall	_GET_CHAR_HELPER
  2072  00B2  3A00               	xorlw	0
  2073  00B3  1D03               	btfss	3,2
  2074  00B4  0008               	return
  2075  00B5  087C               	movf	__x,w
  2076  00B6  39F0               	andlw	240
  2077  00B7  1D03               	btfss	3,2
  2078  00B8  0008               	return
  2079  00B9  0020               	movlb	0	; select bank0
  2080  00BA  086D               	movf	__y,w
  2081  00BB  39F0               	andlw	240
  2082  00BC  1D03               	btfss	3,2
  2083  00BD  0008               	return
  2084  00BE  086D               	movf	__y,w
  2085  00BF  00A3               	movwf	??_control_transfer
  2086  00C0  3003               	movlw	3
  2087  00C1                     u3395:	
  2088  00C1  35A3               	lslf	??_control_transfer,f
  2089  00C2  3EFF               	addlw	-1
  2090  00C3  1D03               	skipz
  2091  00C4  28C1               	goto	u3395
  2092  00C5  3523               	lslf	??_control_transfer,w
  2093  00C6  047C               	iorwf	__x,w
  2094  00C7  00A4               	movwf	??_control_transfer+1
  2095  00C8  0824               	movf	??_control_transfer+1,w
  2096  00C9  00C6               	movwf	control_transfer@random_number
  2097  00CA  0846               	movf	control_transfer@random_number,w
  2098  00CB  00A3               	movwf	??_control_transfer
  2099  00CC  0823               	movf	??_control_transfer,w
  2100  00CD  07E6               	addwf	__checksum,f
  2101                           
  2102                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2103  00CE  307C               	movlw	__x& (0+255)
  2104  00CF  2472               	fcall	_GET_CHAR_HELPER
  2105  00D0  3A00               	xorlw	0
  2106  00D1  1D03               	btfss	3,2
  2107  00D2  0008               	return
  2108  00D3  306D               	movlw	__y& (0+255)
  2109  00D4  2472               	fcall	_GET_CHAR_HELPER
  2110  00D5  3A00               	xorlw	0
  2111  00D6  1D03               	btfss	3,2
  2112  00D7  0008               	return
  2113  00D8  087C               	movf	__x,w
  2114  00D9  39F0               	andlw	240
  2115  00DA  1D03               	btfss	3,2
  2116  00DB  0008               	return
  2117  00DC  0020               	movlb	0	; select bank0
  2118  00DD  086D               	movf	__y,w
  2119  00DE  39F0               	andlw	240
  2120  00DF  1D03               	btfss	3,2
  2121  00E0  0008               	return
  2122  00E1  086D               	movf	__y,w
  2123  00E2  00A3               	movwf	??_control_transfer
  2124  00E3  3003               	movlw	3
  2125  00E4                     u3445:	
  2126  00E4  35A3               	lslf	??_control_transfer,f
  2127  00E5  3EFF               	addlw	-1
  2128  00E6  1D03               	skipz
  2129  00E7  28E4               	goto	u3445
  2130  00E8  3523               	lslf	??_control_transfer,w
  2131  00E9  047C               	iorwf	__x,w
  2132  00EA  00A4               	movwf	??_control_transfer+1
  2133  00EB  0824               	movf	??_control_transfer+1,w
  2134  00EC  00C7               	movwf	control_transfer@id
  2135  00ED  0847               	movf	control_transfer@id,w
  2136  00EE  00A3               	movwf	??_control_transfer
  2137  00EF  0823               	movf	??_control_transfer,w
  2138  00F0  07E6               	addwf	__checksum,f
  2139                           
  2140                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2141  00F1  307C               	movlw	__x& (0+255)
  2142  00F2  2472               	fcall	_GET_CHAR_HELPER
  2143  00F3  3A00               	xorlw	0
  2144  00F4  1D03               	btfss	3,2
  2145  00F5  0008               	return
  2146  00F6  306D               	movlw	__y& (0+255)
  2147  00F7  2472               	fcall	_GET_CHAR_HELPER
  2148  00F8  3A00               	xorlw	0
  2149  00F9  1D03               	btfss	3,2
  2150  00FA  0008               	return
  2151  00FB  087C               	movf	__x,w
  2152  00FC  39F0               	andlw	240
  2153  00FD  1D03               	btfss	3,2
  2154  00FE  0008               	return
  2155  00FF  0020               	movlb	0	; select bank0
  2156  0100  086D               	movf	__y,w
  2157  0101  39F0               	andlw	240
  2158  0102  1D03               	btfss	3,2
  2159  0103  0008               	return
  2160  0104  086D               	movf	__y,w
  2161  0105  00A3               	movwf	??_control_transfer
  2162  0106  3003               	movlw	3
  2163  0107                     u3495:	
  2164  0107  35A3               	lslf	??_control_transfer,f
  2165  0108  3EFF               	addlw	-1
  2166  0109  1D03               	skipz
  2167  010A  2907               	goto	u3495
  2168  010B  3523               	lslf	??_control_transfer,w
  2169  010C  047C               	iorwf	__x,w
  2170  010D  00A4               	movwf	??_control_transfer+1
  2171  010E  0824               	movf	??_control_transfer+1,w
  2172  010F  00FC               	movwf	__x
  2173  0110  087C               	movf	__x,w
  2174  0111  00A3               	movwf	??_control_transfer
  2175  0112  0823               	movf	??_control_transfer,w
  2176  0113  07E6               	addwf	__checksum,f
  2177  0114  0866               	movf	__checksum,w
  2178  0115  1D03               	skipz
  2179  0116  0008               	return
  2180  0117  307C               	movlw	__x& (0+255)
  2181  0118  2472               	fcall	_GET_CHAR_HELPER
  2182  0119  3A00               	xorlw	0
  2183  011A  1D03               	btfss	3,2
  2184  011B  0008               	return
  2185  011C  087C               	movf	__x,w
  2186  011D  3A11               	xorlw	17
  2187  011E  1D03               	btfss	3,2
  2188  011F  0008               	return
  2189                           
  2190                           ;protocol.c: 69: if(random_number != my_random_number) goto err;
  2191  0120  0020               	movlb	0	; select bank0
  2192  0121  0846               	movf	control_transfer@random_number,w
  2193  0122  066A               	xorwf	_my_random_number,w
  2194  0123  1D03               	btfss	3,2
  2195  0124  0008               	return
  2196                           
  2197                           ;protocol.c: 70: SEND_SOF();
  2198  0125  24DC               	fcall	_SEND_SOF
  2199                           
  2200                           ;protocol.c: 71: SEND_DATA_BYTE(0x00);
  2201  0126  3000               	movlw	0
  2202  0127  2490               	fcall	_SEND_DATA_BYTE
  2203                           
  2204                           ;protocol.c: 72: SEND_EOF();
  2205  0128  24EA               	fcall	_SEND_EOF
  2206                           
  2207                           ;protocol.c: 73: config.id=id;
  2208  0129  0020               	movlb	0	; select bank0
  2209  012A  0847               	movf	control_transfer@id,w
  2210  012B  00A3               	movwf	??_control_transfer
  2211  012C  01A4               	clrf	??_control_transfer+1
  2212  012D  0823               	movf	??_control_transfer,w
  2213  012E  0021               	movlb	1	; select bank1
  2214  012F  00C0               	movwf	_config^(0+128)
  2215  0130  0020               	movlb	0	; select bank0
  2216  0131  0824               	movf	??_control_transfer+1,w
  2217  0132  0021               	movlb	1	; select bank1
  2218  0133  00C1               	movwf	(_config+1)^(0+128)
  2219                           
  2220                           ;protocol.c: 74: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2221  0134  30F0               	movlw	240
  2222  0135  00F1               	movwf	Save@address
  2223  0136  3007               	movlw	7
  2224  0137  00F2               	movwf	Save@address+1
  2225  0138  30C0               	movlw	_config& (0+255)
  2226  0139  0020               	movlb	0	; select bank0
  2227  013A  00A3               	movwf	??_control_transfer
  2228  013B  0823               	movf	??_control_transfer,w
  2229  013C  00F3               	movwf	Save@ptr
  2230  013D  3009               	movlw	9
  2231  013E  00A4               	movwf	??_control_transfer+1
  2232  013F  0824               	movf	??_control_transfer+1,w
  2233  0140  00F4               	movwf	Save@data_length
  2234  0141  26A8               	fcall	_Save
  2235                           
  2236                           ;protocol.c: 75: break;
  2237  0142  0008               	return
  2238  0143                     l2801:	
  2239                           ;protocol.c: 76: case 0x04:
  2240                           
  2241                           
  2242                           ;protocol.c: 77: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2243  0143  307C               	movlw	__x& (0+255)
  2244  0144  2472               	fcall	_GET_CHAR_HELPER
  2245  0145  3A00               	xorlw	0
  2246  0146  1D03               	btfss	3,2
  2247  0147  0008               	return
  2248  0148  306D               	movlw	__y& (0+255)
  2249  0149  2472               	fcall	_GET_CHAR_HELPER
  2250  014A  3A00               	xorlw	0
  2251  014B  1D03               	btfss	3,2
  2252  014C  0008               	return
  2253  014D  087C               	movf	__x,w
  2254  014E  39F0               	andlw	240
  2255  014F  1D03               	btfss	3,2
  2256  0150  0008               	return
  2257  0151  0020               	movlb	0	; select bank0
  2258  0152  086D               	movf	__y,w
  2259  0153  39F0               	andlw	240
  2260  0154  1D03               	btfss	3,2
  2261  0155  0008               	return
  2262  0156  086D               	movf	__y,w
  2263  0157  00A3               	movwf	??_control_transfer
  2264  0158  3003               	movlw	3
  2265  0159                     u3585:	
  2266  0159  35A3               	lslf	??_control_transfer,f
  2267  015A  3EFF               	addlw	-1
  2268  015B  1D03               	skipz
  2269  015C  2959               	goto	u3585
  2270  015D  3523               	lslf	??_control_transfer,w
  2271  015E  047C               	iorwf	__x,w
  2272  015F  00A4               	movwf	??_control_transfer+1
  2273  0160  0824               	movf	??_control_transfer+1,w
  2274  0161  00CC               	movwf	control_transfer@x
  2275  0162  084C               	movf	control_transfer@x,w
  2276  0163  00A3               	movwf	??_control_transfer
  2277  0164  0823               	movf	??_control_transfer,w
  2278  0165  07E6               	addwf	__checksum,f
  2279                           
  2280                           ;protocol.c: 78: *((uint8_t*)(&page))=x;
  2281  0166  084C               	movf	control_transfer@x,w
  2282  0167  00A3               	movwf	??_control_transfer
  2283  0168  0823               	movf	??_control_transfer,w
  2284  0169  00CA               	movwf	control_transfer@page
  2285                           
  2286                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2287  016A  307C               	movlw	__x& (0+255)
  2288  016B  2472               	fcall	_GET_CHAR_HELPER
  2289  016C  3A00               	xorlw	0
  2290  016D  1D03               	btfss	3,2
  2291  016E  0008               	return
  2292  016F  306D               	movlw	__y& (0+255)
  2293  0170  2472               	fcall	_GET_CHAR_HELPER
  2294  0171  3A00               	xorlw	0
  2295  0172  1D03               	btfss	3,2
  2296  0173  0008               	return
  2297  0174  087C               	movf	__x,w
  2298  0175  39F0               	andlw	240
  2299  0176  1D03               	btfss	3,2
  2300  0177  0008               	return
  2301  0178  0020               	movlb	0	; select bank0
  2302  0179  086D               	movf	__y,w
  2303  017A  39F0               	andlw	240
  2304  017B  1D03               	btfss	3,2
  2305  017C  0008               	return
  2306  017D  086D               	movf	__y,w
  2307  017E  00A3               	movwf	??_control_transfer
  2308  017F  3003               	movlw	3
  2309  0180                     u3635:	
  2310  0180  35A3               	lslf	??_control_transfer,f
  2311  0181  3EFF               	addlw	-1
  2312  0182  1D03               	skipz
  2313  0183  2980               	goto	u3635
  2314  0184  3523               	lslf	??_control_transfer,w
  2315  0185  047C               	iorwf	__x,w
  2316  0186  00A4               	movwf	??_control_transfer+1
  2317  0187  0824               	movf	??_control_transfer+1,w
  2318  0188  00CC               	movwf	control_transfer@x
  2319  0189  084C               	movf	control_transfer@x,w
  2320  018A  00A3               	movwf	??_control_transfer
  2321  018B  0823               	movf	??_control_transfer,w
  2322  018C  07E6               	addwf	__checksum,f
  2323                           
  2324                           ;protocol.c: 80: *(((uint8_t*)(&page))+1)=x;
  2325  018D  084C               	movf	control_transfer@x,w
  2326  018E  00A3               	movwf	??_control_transfer
  2327  018F  0823               	movf	??_control_transfer,w
  2328  0190  00CB               	movwf	control_transfer@page+1
  2329                           
  2330                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2331  0191  307C               	movlw	__x& (0+255)
  2332  0192  2472               	fcall	_GET_CHAR_HELPER
  2333  0193  3A00               	xorlw	0
  2334  0194  1D03               	btfss	3,2
  2335  0195  0008               	return
  2336  0196  306D               	movlw	__y& (0+255)
  2337  0197  2472               	fcall	_GET_CHAR_HELPER
  2338  0198  3A00               	xorlw	0
  2339  0199  1D03               	btfss	3,2
  2340  019A  0008               	return
  2341  019B  087C               	movf	__x,w
  2342  019C  39F0               	andlw	240
  2343  019D  1D03               	btfss	3,2
  2344  019E  0008               	return
  2345  019F  0020               	movlb	0	; select bank0
  2346  01A0  086D               	movf	__y,w
  2347  01A1  39F0               	andlw	240
  2348  01A2  1D03               	btfss	3,2
  2349  01A3  0008               	return
  2350  01A4  086D               	movf	__y,w
  2351  01A5  00A3               	movwf	??_control_transfer
  2352  01A6  3003               	movlw	3
  2353  01A7                     u3685:	
  2354  01A7  35A3               	lslf	??_control_transfer,f
  2355  01A8  3EFF               	addlw	-1
  2356  01A9  1D03               	skipz
  2357  01AA  29A7               	goto	u3685
  2358  01AB  3523               	lslf	??_control_transfer,w
  2359  01AC  047C               	iorwf	__x,w
  2360  01AD  00A4               	movwf	??_control_transfer+1
  2361  01AE  0824               	movf	??_control_transfer+1,w
  2362  01AF  00FC               	movwf	__x
  2363  01B0  087C               	movf	__x,w
  2364  01B1  00A3               	movwf	??_control_transfer
  2365  01B2  0823               	movf	??_control_transfer,w
  2366  01B3  07E6               	addwf	__checksum,f
  2367  01B4  0866               	movf	__checksum,w
  2368  01B5  1D03               	skipz
  2369  01B6  0008               	return
  2370  01B7  307C               	movlw	__x& (0+255)
  2371  01B8  2472               	fcall	_GET_CHAR_HELPER
  2372  01B9  3A00               	xorlw	0
  2373  01BA  1D03               	btfss	3,2
  2374  01BB  0008               	return
  2375  01BC  087C               	movf	__x,w
  2376  01BD  3A11               	xorlw	17
  2377  01BE  1D03               	btfss	3,2
  2378  01BF  0008               	return
  2379                           
  2380                           ;protocol.c: 82: Load(page,data,16);
  2381  01C0  0020               	movlb	0	; select bank0
  2382  01C1  084B               	movf	control_transfer@page+1,w
  2383  01C2  01F2               	clrf	Load@address+1
  2384  01C3  07F2               	addwf	Load@address+1,f
  2385  01C4  084A               	movf	control_transfer@page,w
  2386  01C5  01F1               	clrf	Load@address
  2387  01C6  07F1               	addwf	Load@address,f
  2388  01C7  3025               	movlw	control_transfer@data& (0+255)
  2389  01C8  00A3               	movwf	??_control_transfer
  2390  01C9  0823               	movf	??_control_transfer,w
  2391  01CA  00F3               	movwf	Load@ptr
  2392  01CB  3010               	movlw	16
  2393  01CC  00A4               	movwf	??_control_transfer+1
  2394  01CD  0824               	movf	??_control_transfer+1,w
  2395  01CE  00F4               	movwf	Load@data_length
  2396  01CF  2784               	fcall	_Load
  2397                           
  2398                           ;protocol.c: 83: SEND_SOF();
  2399  01D0  24DC               	fcall	_SEND_SOF
  2400                           
  2401                           ;protocol.c: 84: SEND_DATA_BYTE(0x05);
  2402  01D1  3005               	movlw	5
  2403  01D2  2490               	fcall	_SEND_DATA_BYTE
  2404                           
  2405                           ;protocol.c: 85: dptr=(uint8_t*)data;
  2406  01D3  3025               	movlw	control_transfer@data& (0+255)
  2407  01D4  0020               	movlb	0	; select bank0
  2408  01D5  00A3               	movwf	??_control_transfer
  2409  01D6  0823               	movf	??_control_transfer,w
  2410  01D7  00C8               	movwf	control_transfer@dptr
  2411                           
  2412                           ;protocol.c: 86: for(i=0;i<32;i++)
  2413  01D8  01C9               	clrf	control_transfer@i
  2414  01D9  3020               	movlw	32
  2415  01DA  0249               	subwf	control_transfer@i,w
  2416  01DB  1803               	btfsc	3,0
  2417  01DC  29EF               	goto	l2881
  2418  01DD                     l2873:	
  2419                           
  2420                           ;protocol.c: 87: {
  2421                           ;protocol.c: 88: SEND_DATA_BYTE(*dptr++);
  2422  01DD  0848               	movf	control_transfer@dptr,w
  2423  01DE  0086               	movwf	6
  2424  01DF  0187               	clrf	7
  2425  01E0  0801               	movf	1,w
  2426  01E1  2490               	fcall	_SEND_DATA_BYTE
  2427  01E2  3001               	movlw	1
  2428  01E3  0020               	movlb	0	; select bank0
  2429  01E4  00A3               	movwf	??_control_transfer
  2430  01E5  0823               	movf	??_control_transfer,w
  2431  01E6  07C8               	addwf	control_transfer@dptr,f
  2432  01E7  3001               	movlw	1
  2433  01E8  00A3               	movwf	??_control_transfer
  2434  01E9  0823               	movf	??_control_transfer,w
  2435  01EA  07C9               	addwf	control_transfer@i,f
  2436  01EB  3020               	movlw	32
  2437  01EC  0249               	subwf	control_transfer@i,w
  2438  01ED  1C03               	skipc
  2439  01EE  29DD               	goto	l2873
  2440  01EF                     l2881:	
  2441                           
  2442                           ;protocol.c: 89: }
  2443                           ;protocol.c: 90: SEND_EOF();
  2444  01EF  24EA               	fcall	_SEND_EOF
  2445                           
  2446                           ;protocol.c: 91: break;
  2447  01F0  0008               	return
  2448  01F1                     l2883:	
  2449                           ;protocol.c: 92: case 0x06:
  2450                           
  2451                           
  2452                           ;protocol.c: 93: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2453  01F1  307C               	movlw	__x& (0+255)
  2454  01F2  2472               	fcall	_GET_CHAR_HELPER
  2455  01F3  3A00               	xorlw	0
  2456  01F4  1D03               	btfss	3,2
  2457  01F5  0008               	return
  2458  01F6  306D               	movlw	__y& (0+255)
  2459  01F7  2472               	fcall	_GET_CHAR_HELPER
  2460  01F8  3A00               	xorlw	0
  2461  01F9  1D03               	btfss	3,2
  2462  01FA  0008               	return
  2463  01FB  087C               	movf	__x,w
  2464  01FC  39F0               	andlw	240
  2465  01FD  1D03               	btfss	3,2
  2466  01FE  0008               	return
  2467  01FF  0020               	movlb	0	; select bank0
  2468  0200  086D               	movf	__y,w
  2469  0201  39F0               	andlw	240
  2470  0202  1D03               	btfss	3,2
  2471  0203  0008               	return
  2472  0204  086D               	movf	__y,w
  2473  0205  00A3               	movwf	??_control_transfer
  2474  0206  3003               	movlw	3
  2475  0207                     u3785:	
  2476  0207  35A3               	lslf	??_control_transfer,f
  2477  0208  3EFF               	addlw	-1
  2478  0209  1D03               	skipz
  2479  020A  2A07               	goto	u3785
  2480  020B  3523               	lslf	??_control_transfer,w
  2481  020C  047C               	iorwf	__x,w
  2482  020D  00A4               	movwf	??_control_transfer+1
  2483  020E  0824               	movf	??_control_transfer+1,w
  2484  020F  00CC               	movwf	control_transfer@x
  2485  0210  084C               	movf	control_transfer@x,w
  2486  0211  00A3               	movwf	??_control_transfer
  2487  0212  0823               	movf	??_control_transfer,w
  2488  0213  07E6               	addwf	__checksum,f
  2489                           
  2490                           ;protocol.c: 94: *((uint8_t*)(&page))=x;
  2491  0214  084C               	movf	control_transfer@x,w
  2492  0215  00A3               	movwf	??_control_transfer
  2493  0216  0823               	movf	??_control_transfer,w
  2494  0217  00CA               	movwf	control_transfer@page
  2495                           
  2496                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2497  0218  307C               	movlw	__x& (0+255)
  2498  0219  2472               	fcall	_GET_CHAR_HELPER
  2499  021A  3A00               	xorlw	0
  2500  021B  1D03               	btfss	3,2
  2501  021C  0008               	return
  2502  021D  306D               	movlw	__y& (0+255)
  2503  021E  2472               	fcall	_GET_CHAR_HELPER
  2504  021F  3A00               	xorlw	0
  2505  0220  1D03               	btfss	3,2
  2506  0221  0008               	return
  2507  0222  087C               	movf	__x,w
  2508  0223  39F0               	andlw	240
  2509  0224  1D03               	btfss	3,2
  2510  0225  0008               	return
  2511  0226  0020               	movlb	0	; select bank0
  2512  0227  086D               	movf	__y,w
  2513  0228  39F0               	andlw	240
  2514  0229  1D03               	btfss	3,2
  2515  022A  0008               	return
  2516  022B  086D               	movf	__y,w
  2517  022C  00A3               	movwf	??_control_transfer
  2518  022D  3003               	movlw	3
  2519  022E                     u3835:	
  2520  022E  35A3               	lslf	??_control_transfer,f
  2521  022F  3EFF               	addlw	-1
  2522  0230  1D03               	skipz
  2523  0231  2A2E               	goto	u3835
  2524  0232  3523               	lslf	??_control_transfer,w
  2525  0233  047C               	iorwf	__x,w
  2526  0234  00A4               	movwf	??_control_transfer+1
  2527  0235  0824               	movf	??_control_transfer+1,w
  2528  0236  00CC               	movwf	control_transfer@x
  2529  0237  084C               	movf	control_transfer@x,w
  2530  0238  00A3               	movwf	??_control_transfer
  2531  0239  0823               	movf	??_control_transfer,w
  2532  023A  07E6               	addwf	__checksum,f
  2533                           
  2534                           ;protocol.c: 96: *(((uint8_t*)(&page))+1)=x;
  2535  023B  084C               	movf	control_transfer@x,w
  2536  023C  00A3               	movwf	??_control_transfer
  2537  023D  0823               	movf	??_control_transfer,w
  2538  023E  00CB               	movwf	control_transfer@page+1
  2539                           
  2540                           ;protocol.c: 97: dptr=(uint8_t*)data;
  2541  023F  3025               	movlw	control_transfer@data& (0+255)
  2542  0240  00A3               	movwf	??_control_transfer
  2543  0241  0823               	movf	??_control_transfer,w
  2544  0242  00C8               	movwf	control_transfer@dptr
  2545                           
  2546                           ;protocol.c: 98: for(i=0;i<32;i++)
  2547  0243  01C9               	clrf	control_transfer@i
  2548  0244  3020               	movlw	32
  2549  0245  0249               	subwf	control_transfer@i,w
  2550  0246  1803               	btfsc	3,0
  2551  0247  2A7E               	goto	l2945
  2552  0248                     l2923:	
  2553                           
  2554                           ;protocol.c: 99: {
  2555                           ;protocol.c: 100: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2556  0248  307C               	movlw	__x& (0+255)
  2557  0249  2472               	fcall	_GET_CHAR_HELPER
  2558  024A  3A00               	xorlw	0
  2559  024B  1D03               	btfss	3,2
  2560  024C  0008               	return
  2561  024D  306D               	movlw	__y& (0+255)
  2562  024E  2472               	fcall	_GET_CHAR_HELPER
  2563  024F  3A00               	xorlw	0
  2564  0250  1D03               	btfss	3,2
  2565  0251  0008               	return
  2566  0252  087C               	movf	__x,w
  2567  0253  39F0               	andlw	240
  2568  0254  1D03               	btfss	3,2
  2569  0255  0008               	return
  2570  0256  0020               	movlb	0	; select bank0
  2571  0257  086D               	movf	__y,w
  2572  0258  39F0               	andlw	240
  2573  0259  1D03               	btfss	3,2
  2574  025A  0008               	return
  2575  025B  086D               	movf	__y,w
  2576  025C  00A3               	movwf	??_control_transfer
  2577  025D  3003               	movlw	3
  2578  025E                     u3895:	
  2579  025E  35A3               	lslf	??_control_transfer,f
  2580  025F  3EFF               	addlw	-1
  2581  0260  1D03               	skipz
  2582  0261  2A5E               	goto	u3895
  2583  0262  3523               	lslf	??_control_transfer,w
  2584  0263  047C               	iorwf	__x,w
  2585  0264  00A4               	movwf	??_control_transfer+1
  2586  0265  0824               	movf	??_control_transfer+1,w
  2587  0266  00CC               	movwf	control_transfer@x
  2588  0267  084C               	movf	control_transfer@x,w
  2589  0268  00A3               	movwf	??_control_transfer
  2590  0269  0823               	movf	??_control_transfer,w
  2591  026A  07E6               	addwf	__checksum,f
  2592                           
  2593                           ;protocol.c: 101: *dptr++=x;
  2594  026B  084C               	movf	control_transfer@x,w
  2595  026C  00A3               	movwf	??_control_transfer
  2596  026D  0848               	movf	control_transfer@dptr,w
  2597  026E  0086               	movwf	6
  2598  026F  0187               	clrf	7
  2599  0270  0823               	movf	??_control_transfer,w
  2600  0271  0081               	movwf	1
  2601  0272  3001               	movlw	1
  2602  0273  00A3               	movwf	??_control_transfer
  2603  0274  0823               	movf	??_control_transfer,w
  2604  0275  07C8               	addwf	control_transfer@dptr,f
  2605  0276  3001               	movlw	1
  2606  0277  00A3               	movwf	??_control_transfer
  2607  0278  0823               	movf	??_control_transfer,w
  2608  0279  07C9               	addwf	control_transfer@i,f
  2609  027A  3020               	movlw	32
  2610  027B  0249               	subwf	control_transfer@i,w
  2611  027C  1C03               	skipc
  2612  027D  2A48               	goto	l2923
  2613  027E                     l2945:	
  2614                           
  2615                           ;protocol.c: 102: }
  2616                           ;protocol.c: 103: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2617  027E  307C               	movlw	__x& (0+255)
  2618  027F  2472               	fcall	_GET_CHAR_HELPER
  2619  0280  3A00               	xorlw	0
  2620  0281  1D03               	btfss	3,2
  2621  0282  0008               	return
  2622  0283  306D               	movlw	__y& (0+255)
  2623  0284  2472               	fcall	_GET_CHAR_HELPER
  2624  0285  3A00               	xorlw	0
  2625  0286  1D03               	btfss	3,2
  2626  0287  0008               	return
  2627  0288  087C               	movf	__x,w
  2628  0289  39F0               	andlw	240
  2629  028A  1D03               	btfss	3,2
  2630  028B  0008               	return
  2631  028C  0020               	movlb	0	; select bank0
  2632  028D  086D               	movf	__y,w
  2633  028E  39F0               	andlw	240
  2634  028F  1D03               	btfss	3,2
  2635  0290  0008               	return
  2636  0291  086D               	movf	__y,w
  2637  0292  00A3               	movwf	??_control_transfer
  2638  0293  3003               	movlw	3
  2639  0294                     u3955:	
  2640  0294  35A3               	lslf	??_control_transfer,f
  2641  0295  3EFF               	addlw	-1
  2642  0296  1D03               	skipz
  2643  0297  2A94               	goto	u3955
  2644  0298  3523               	lslf	??_control_transfer,w
  2645  0299  047C               	iorwf	__x,w
  2646  029A  00A4               	movwf	??_control_transfer+1
  2647  029B  0824               	movf	??_control_transfer+1,w
  2648  029C  00FC               	movwf	__x
  2649  029D  087C               	movf	__x,w
  2650  029E  00A3               	movwf	??_control_transfer
  2651  029F  0823               	movf	??_control_transfer,w
  2652  02A0  07E6               	addwf	__checksum,f
  2653  02A1  0866               	movf	__checksum,w
  2654  02A2  1D03               	skipz
  2655  02A3  0008               	return
  2656  02A4  307C               	movlw	__x& (0+255)
  2657  02A5  2472               	fcall	_GET_CHAR_HELPER
  2658  02A6  3A00               	xorlw	0
  2659  02A7  1D03               	btfss	3,2
  2660  02A8  0008               	return
  2661  02A9  087C               	movf	__x,w
  2662  02AA  3A11               	xorlw	17
  2663  02AB  1D03               	btfss	3,2
  2664  02AC  0008               	return
  2665                           
  2666                           ;protocol.c: 104: Save(page,data,16);
  2667  02AD  0020               	movlb	0	; select bank0
  2668  02AE  084B               	movf	control_transfer@page+1,w
  2669  02AF  01F2               	clrf	Save@address+1
  2670  02B0  07F2               	addwf	Save@address+1,f
  2671  02B1  084A               	movf	control_transfer@page,w
  2672  02B2  01F1               	clrf	Save@address
  2673  02B3  07F1               	addwf	Save@address,f
  2674  02B4  3025               	movlw	control_transfer@data& (0+255)
  2675  02B5  00A3               	movwf	??_control_transfer
  2676  02B6  0823               	movf	??_control_transfer,w
  2677  02B7  00F3               	movwf	Save@ptr
  2678  02B8  3010               	movlw	16
  2679  02B9  00A4               	movwf	??_control_transfer+1
  2680  02BA  0824               	movf	??_control_transfer+1,w
  2681  02BB  00F4               	movwf	Save@data_length
  2682  02BC  26A8               	fcall	_Save
  2683                           
  2684                           ;protocol.c: 105: switch(page)
  2685  02BD  2ADC               	goto	l2979
  2686  02BE                     l2973:	
  2687                           ;protocol.c: 106: {
  2688                           ;protocol.c: 107: case 0x7F0:
  2689                           
  2690                           
  2691                           ;protocol.c: 108: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2692  02BE  30F0               	movlw	240
  2693  02BF  00F1               	movwf	Load@address
  2694  02C0  3007               	movlw	7
  2695  02C1  00F2               	movwf	Load@address+1
  2696  02C2  30C0               	movlw	_config& (0+255)
  2697  02C3  0020               	movlb	0	; select bank0
  2698  02C4  00A3               	movwf	??_control_transfer
  2699  02C5  0823               	movf	??_control_transfer,w
  2700  02C6  00F3               	movwf	Load@ptr
  2701  02C7  3009               	movlw	9
  2702  02C8  00A4               	movwf	??_control_transfer+1
  2703  02C9  0824               	movf	??_control_transfer+1,w
  2704  02CA  00F4               	movwf	Load@data_length
  2705  02CB  2784               	fcall	_Load
  2706                           
  2707                           ;protocol.c: 109: break;
  2708  02CC  2AEA               	goto	l2981
  2709  02CD                     l2975:	
  2710                           ;protocol.c: 110: case 0x7E0:
  2711                           
  2712                           
  2713                           ;protocol.c: 111: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2714  02CD  30E0               	movlw	224
  2715  02CE  00F1               	movwf	Load@address
  2716  02CF  3007               	movlw	7
  2717  02D0  00F2               	movwf	Load@address+1
  2718  02D1  30A0               	movlw	_hitlist& (0+255)
  2719  02D2  0020               	movlb	0	; select bank0
  2720  02D3  00A3               	movwf	??_control_transfer
  2721  02D4  0823               	movf	??_control_transfer,w
  2722  02D5  00F3               	movwf	Load@ptr
  2723  02D6  3010               	movlw	16
  2724  02D7  00A4               	movwf	??_control_transfer+1
  2725  02D8  0824               	movf	??_control_transfer+1,w
  2726  02D9  00F4               	movwf	Load@data_length
  2727  02DA  2784               	fcall	_Load
  2728                           
  2729                           ;protocol.c: 113: }
  2730                           
  2731                           ;protocol.c: 112: break;
  2732  02DB  2AEA               	goto	l2981
  2733  02DC                     l2979:	
  2734                           
  2735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2736                           ; Switch size 1, requested type "space"
  2737                           ; Number of cases is 1, Range of values is 7 to 7
  2738                           ; switch strategies available:
  2739                           ; Name         Instructions Cycles
  2740                           ; simple_byte            4     3 (average)
  2741                           ; direct_byte           11     9 (fixed)
  2742                           ; jumptable            263     9 (fixed)
  2743                           ;	Chosen strategy is simple_byte
  2744  02DC  0020               	movlb	0	; select bank0
  2745  02DD  084B               	movf	control_transfer@page+1,w
  2746  02DE  3A07               	xorlw	7	; case 7
  2747  02DF  1903               	skipnz
  2748  02E0  2AE2               	goto	l3267
  2749  02E1  2AEA               	goto	l2981
  2750  02E2                     l3267:	
  2751                           
  2752                           ; Switch size 1, requested type "space"
  2753                           ; Number of cases is 2, Range of values is 224 to 240
  2754                           ; switch strategies available:
  2755                           ; Name         Instructions Cycles
  2756                           ; simple_byte            7     4 (average)
  2757                           ; direct_byte           43     9 (fixed)
  2758                           ; jumptable            263     9 (fixed)
  2759                           ;	Chosen strategy is simple_byte
  2760  02E2  084A               	movf	control_transfer@page,w
  2761  02E3  3AE0               	xorlw	224	; case 224
  2762  02E4  1903               	skipnz
  2763  02E5  2ACD               	goto	l2975
  2764  02E6  3A10               	xorlw	16	; case 240
  2765  02E7  1903               	skipnz
  2766  02E8  2ABE               	goto	l2973
  2767  02E9  2AEA               	goto	l2981
  2768  02EA                     l2981:	
  2769                           
  2770                           ;protocol.c: 114: SEND_SOF();
  2771  02EA  24DC               	fcall	_SEND_SOF
  2772                           
  2773                           ;protocol.c: 115: SEND_DATA_BYTE(0x00);
  2774  02EB  3000               	movlw	0
  2775  02EC  2490               	fcall	_SEND_DATA_BYTE
  2776                           
  2777                           ;protocol.c: 116: SEND_EOF();
  2778  02ED  24EA               	fcall	_SEND_EOF
  2779                           
  2780                           ;protocol.c: 117: break;
  2781  02EE  0008               	return
  2782  02EF                     l2983:	
  2783                           ;protocol.c: 118: case 0x7:
  2784                           
  2785                           
  2786                           ;protocol.c: 119: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2787  02EF  307C               	movlw	__x& (0+255)
  2788  02F0  2472               	fcall	_GET_CHAR_HELPER
  2789  02F1  3A00               	xorlw	0
  2790  02F2  1D03               	btfss	3,2
  2791  02F3  0008               	return
  2792  02F4  306D               	movlw	__y& (0+255)
  2793  02F5  2472               	fcall	_GET_CHAR_HELPER
  2794  02F6  3A00               	xorlw	0
  2795  02F7  1D03               	btfss	3,2
  2796  02F8  0008               	return
  2797  02F9  087C               	movf	__x,w
  2798  02FA  39F0               	andlw	240
  2799  02FB  1D03               	btfss	3,2
  2800  02FC  0008               	return
  2801  02FD  0020               	movlb	0	; select bank0
  2802  02FE  086D               	movf	__y,w
  2803  02FF  39F0               	andlw	240
  2804  0300  1D03               	btfss	3,2
  2805  0301  0008               	return
  2806  0302  086D               	movf	__y,w
  2807  0303  00A3               	movwf	??_control_transfer
  2808  0304  3003               	movlw	3
  2809  0305                     u4035:	
  2810  0305  35A3               	lslf	??_control_transfer,f
  2811  0306  3EFF               	addlw	-1
  2812  0307  1D03               	skipz
  2813  0308  2B05               	goto	u4035
  2814  0309  3523               	lslf	??_control_transfer,w
  2815  030A  047C               	iorwf	__x,w
  2816  030B  00A4               	movwf	??_control_transfer+1
  2817  030C  0824               	movf	??_control_transfer+1,w
  2818  030D  00FC               	movwf	__x
  2819  030E  087C               	movf	__x,w
  2820  030F  00A3               	movwf	??_control_transfer
  2821  0310  0823               	movf	??_control_transfer,w
  2822  0311  07E6               	addwf	__checksum,f
  2823  0312  0866               	movf	__checksum,w
  2824  0313  1D03               	skipz
  2825  0314  0008               	return
  2826  0315  307C               	movlw	__x& (0+255)
  2827  0316  2472               	fcall	_GET_CHAR_HELPER
  2828  0317  3A00               	xorlw	0
  2829  0318  1D03               	btfss	3,2
  2830  0319  0008               	return
  2831  031A  087C               	movf	__x,w
  2832  031B  3A11               	xorlw	17
  2833  031C  1D03               	btfss	3,2
  2834  031D  0008               	return
  2835                           
  2836                           ;protocol.c: 120: play_song((uint16_t*)one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2837  031E  3046               	movlw	low (_one_up| (0+32768))
  2838  031F  00F1               	movwf	play_song@song
  2839  0320  3085               	movlw	high (_one_up| (0+32768))
  2840  0321  00F2               	movwf	play_song@song+1
  2841  0322  3006               	movlw	6
  2842  0323  0020               	movlb	0	; select bank0
  2843  0324  00A3               	movwf	??_control_transfer
  2844  0325  0823               	movf	??_control_transfer,w
  2845  0326  00F3               	movwf	play_song@length
  2846  0327  30E8               	movlw	232
  2847  0328  00F4               	movwf	play_song@note_duration
  2848  0329  30FD               	movlw	253
  2849  032A  00F5               	movwf	play_song@note_duration+1
  2850  032B  01F6               	clrf	play_song@repeat
  2851  032C  27A9               	fcall	_play_song
  2852                           
  2853                           ;protocol.c: 121: SEND_SOF();
  2854  032D  24DC               	fcall	_SEND_SOF
  2855                           
  2856                           ;protocol.c: 122: SEND_DATA_BYTE(0x00);
  2857  032E  3000               	movlw	0
  2858  032F  2490               	fcall	_SEND_DATA_BYTE
  2859                           
  2860                           ;protocol.c: 123: SEND_EOF();
  2861  0330  24EA               	fcall	_SEND_EOF
  2862                           
  2863                           ;protocol.c: 128: }
  2864                           
  2865                           ;protocol.c: 127: goto err;
  2866                           
  2867                           ;protocol.c: 126: default:
  2868                           
  2869                           ;protocol.c: 124: break;
  2870  0331  0008               	return
  2871  0332                     l3013:	
  2872  0332  0020               	movlb	0	; select bank0
  2873  0333  0845               	movf	control_transfer@cmd,w
  2874                           
  2875                           ; Switch size 1, requested type "space"
  2876                           ; Number of cases is 5, Range of values is 1 to 7
  2877                           ; switch strategies available:
  2878                           ; Name         Instructions Cycles
  2879                           ; simple_byte           16     9 (average)
  2880                           ; direct_byte           23     9 (fixed)
  2881                           ; jumptable            263     9 (fixed)
  2882                           ;	Chosen strategy is simple_byte
  2883  0334  3A01               	xorlw	1	; case 1
  2884  0335  1903               	skipnz
  2885  0336  2874               	goto	l2709
  2886  0337  3A02               	xorlw	2	; case 3
  2887  0338  1903               	skipnz
  2888  0339  28AB               	goto	l2737
  2889  033A  3A07               	xorlw	7	; case 4
  2890  033B  1903               	skipnz
  2891  033C  2943               	goto	l2801
  2892  033D  3A02               	xorlw	2	; case 6
  2893  033E  1903               	skipnz
  2894  033F  29F1               	goto	l2883
  2895  0340  3A01               	xorlw	1	; case 7
  2896  0341  1903               	skipnz
  2897  0342  2AEF               	goto	l2983
  2898  0343  2B45               	goto	l407
  2899  0344  0008               	return
  2900  0345                     l407:	
  2901                           ;protocol.c: 130: return;
  2902                           
  2903                           ;protocol.c: 129: err:
  2904                           
  2905  0345  0008               	return
  2906  0346                     __end_of_control_transfer:	
  2907                           
  2908                           	psect	text6
  2909  04DC                     __ptext6:	
  2910 ;; *************** function _SEND_SOF *****************
  2911 ;; Defined at:
  2912 ;;		line 36 in file "protocol.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, pclath, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2926 ;;      Params:         0       0       0       0
  2927 ;;      Locals:         0       0       0       0
  2928 ;;      Temps:          0       0       0       0
  2929 ;;      Totals:         0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    5
  2933 ;; This function calls:
  2934 ;;		_SEND_DATA_BYTE
  2935 ;;		_Send_Byte
  2936 ;; This function is called by:
  2937 ;;		_control_transfer
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           
  2942                           ;psect for function _SEND_SOF
  2943  04DC                     _SEND_SOF:	
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2947  04DC  3010               	movlw	16
  2948  04DD  26EF               	fcall	_Send_Byte
  2949  04DE  0020               	movlb	0	; select bank0
  2950  04DF  01E6               	clrf	__checksum
  2951  04E0  0021               	movlb	1	; select bank1
  2952  04E1  0840               	movf	_config^(0+128),w
  2953  04E2  2490               	fcall	_SEND_DATA_BYTE
  2954  04E3  0008               	return
  2955  04E4                     __end_of_SEND_SOF:	
  2956                           
  2957                           	psect	text7
  2958  04EA                     __ptext7:	
  2959 ;; *************** function _SEND_EOF *****************
  2960 ;; Defined at:
  2961 ;;		line 37 in file "protocol.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, pclath, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2975 ;;      Params:         0       0       0       0
  2976 ;;      Locals:         0       0       0       0
  2977 ;;      Temps:          0       0       0       0
  2978 ;;      Totals:         0       0       0       0
  2979 ;;Total ram usage:        0 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    5
  2982 ;; This function calls:
  2983 ;;		_SEND_DATA_BYTE
  2984 ;;		_Send_Byte
  2985 ;; This function is called by:
  2986 ;;		_control_transfer
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           
  2991                           ;psect for function _SEND_EOF
  2992  04EA                     _SEND_EOF:	
  2993                           
  2994                           ;incstack = 0
  2995                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2996  04EA  0020               	movlb	0	; select bank0
  2997  04EB  0866               	movf	__checksum,w
  2998  04EC  2490               	fcall	_SEND_DATA_BYTE
  2999  04ED  3011               	movlw	17
  3000  04EE  26EF               	fcall	_Send_Byte
  3001  04EF  0008               	return
  3002  04F0                     __end_of_SEND_EOF:	
  3003                           
  3004                           	psect	text8
  3005  0490                     __ptext8:	
  3006 ;; *************** function _SEND_DATA_BYTE *****************
  3007 ;; Defined at:
  3008 ;;		line 35 in file "protocol.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  b               1    wreg     unsigned char 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  b               1    2[BANK0 ] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;		None               void
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0, pclath, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3022 ;;      Params:         0       0       0       0
  3023 ;;      Locals:         0       1       0       0
  3024 ;;      Temps:          0       2       0       0
  3025 ;;      Totals:         0       3       0       0
  3026 ;;Total ram usage:        3 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    4
  3029 ;; This function calls:
  3030 ;;		_Send_Byte
  3031 ;; This function is called by:
  3032 ;;		_SEND_SOF
  3033 ;;		_SEND_EOF
  3034 ;;		_control_transfer
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _SEND_DATA_BYTE
  3040  0490                     _SEND_DATA_BYTE:	
  3041                           
  3042                           ;incstack = 0
  3043                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3044                           ;SEND_DATA_BYTE@b stored from wreg
  3045  0490  0020               	movlb	0	; select bank0
  3046  0491  00A2               	movwf	SEND_DATA_BYTE@b
  3047  0492  0822               	movf	SEND_DATA_BYTE@b,w
  3048  0493  390F               	andlw	15
  3049  0494  00A0               	movwf	??_SEND_DATA_BYTE
  3050  0495  0820               	movf	??_SEND_DATA_BYTE,w
  3051  0496  00FC               	movwf	__x
  3052  0497  0822               	movf	SEND_DATA_BYTE@b,w
  3053  0498  00A0               	movwf	??_SEND_DATA_BYTE
  3054  0499  3004               	movlw	4
  3055  049A                     u3125:	
  3056  049A  36A0               	lsrf	??_SEND_DATA_BYTE,f
  3057  049B  0B89               	decfsz	9,f
  3058  049C  2C9A               	goto	u3125
  3059  049D  0820               	movf	??_SEND_DATA_BYTE,w
  3060  049E  00A1               	movwf	??_SEND_DATA_BYTE+1
  3061  049F  0821               	movf	??_SEND_DATA_BYTE+1,w
  3062  04A0  00ED               	movwf	__y
  3063  04A1  087C               	movf	__x,w
  3064  04A2  26EF               	fcall	_Send_Byte
  3065  04A3  0020               	movlb	0	; select bank0
  3066  04A4  086D               	movf	__y,w
  3067  04A5  26EF               	fcall	_Send_Byte
  3068  04A6  0020               	movlb	0	; select bank0
  3069  04A7  0822               	movf	SEND_DATA_BYTE@b,w
  3070  04A8  02E6               	subwf	__checksum,f
  3071  04A9  0008               	return
  3072  04AA                     __end_of_SEND_DATA_BYTE:	
  3073                           
  3074                           	psect	text9
  3075  0472                     __ptext9:	
  3076 ;; *************** function _GET_CHAR_HELPER *****************
  3077 ;; Defined at:
  3078 ;;		line 29 in file "protocol.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  val             1    wreg     PTR unsigned char 
  3081 ;;		 -> _y(1), _x(1), 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  val             1    2[COMMON] PTR unsigned char 
  3084 ;;		 -> _y(1), _x(1), 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, fsr1l, fsr1h, status,2
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3094 ;;      Params:         0       0       0       0
  3095 ;;      Locals:         1       0       0       0
  3096 ;;      Temps:          1       0       0       0
  3097 ;;      Totals:         2       0       0       0
  3098 ;;Total ram usage:        2 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    1
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_control_transfer
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function _GET_CHAR_HELPER
  3110  0472                     _GET_CHAR_HELPER:	
  3111                           
  3112                           ;incstack = 0
  3113                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3114                           ;GET_CHAR_HELPER@val stored from wreg
  3115  0472  00F2               	movwf	GET_CHAR_HELPER@val
  3116  0473  0020               	movlb	0	; select bank0
  3117  0474  01DC               	clrf	__i
  3118  0475  01DD               	clrf	__i+1
  3119  0476                     l287:	
  3120  0476  1A91               	btfsc	17,5	;volatile
  3121  0477  2C85               	goto	l1873
  3122  0478  3001               	movlw	1
  3123  0479  07DC               	addwf	__i,f
  3124  047A  3000               	movlw	0
  3125  047B  3DDD               	addwfc	__i+1,f
  3126  047C  3075               	movlw	117
  3127  047D  025D               	subwf	__i+1,w
  3128  047E  3030               	movlw	48
  3129  047F  1903               	skipnz
  3130  0480  025C               	subwf	__i,w
  3131  0481  1C03               	skipc
  3132  0482  2C76               	goto	l287
  3133  0483  3001               	movlw	1
  3134  0484  0008               	return
  3135  0485                     l1873:	
  3136  0485  0023               	movlb	3	; select bank3
  3137  0486  0819               	movf	25,w	;volatile
  3138  0487  3AAA               	xorlw	170
  3139  0488  00F1               	movwf	??_GET_CHAR_HELPER
  3140  0489  0872               	movf	GET_CHAR_HELPER@val,w
  3141  048A  0086               	movwf	6
  3142  048B  0187               	clrf	7
  3143  048C  0871               	movf	??_GET_CHAR_HELPER,w
  3144  048D  0081               	movwf	1
  3145  048E  3000               	movlw	0
  3146  048F  0008               	return
  3147  0490                     __end_of_GET_CHAR_HELPER:	
  3148                           
  3149                           	psect	text10
  3150  05AF                     __ptext10:	
  3151 ;; *************** function _add_to_hitlist *****************
  3152 ;; Defined at:
  3153 ;;		line 305 in file "user.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  gun             1    wreg     unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  gun             1    5[COMMON] unsigned char 
  3158 ;;  i               1    8[COMMON] unsigned char 
  3159 ;;  gun16           2    6[COMMON] unsigned int 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;		None               void
  3162 ;; Registers used:
  3163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3169 ;;      Params:         0       0       0       0
  3170 ;;      Locals:         4       0       0       0
  3171 ;;      Temps:          4       0       0       0
  3172 ;;      Totals:         8       0       0       0
  3173 ;;Total ram usage:        8 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    1
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_hit_by
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           
  3184                           ;psect for function _add_to_hitlist
  3185  05AF                     _add_to_hitlist:	
  3186                           
  3187                           ;incstack = 0
  3188                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3189                           ;add_to_hitlist@gun stored from wreg
  3190  05AF  00F5               	movwf	add_to_hitlist@gun
  3191                           
  3192                           ;user.c: 307: uint16_t gun16 = gun & 0x7F;
  3193  05B0  0875               	movf	add_to_hitlist@gun,w
  3194  05B1  397F               	andlw	127
  3195  05B2  00F1               	movwf	??_add_to_hitlist
  3196  05B3  01F2               	clrf	??_add_to_hitlist+1
  3197  05B4  0871               	movf	??_add_to_hitlist,w
  3198  05B5  00F6               	movwf	add_to_hitlist@gun16
  3199  05B6  0872               	movf	??_add_to_hitlist+1,w
  3200  05B7  00F7               	movwf	add_to_hitlist@gun16+1
  3201                           
  3202                           ;user.c: 308: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3203  05B8  01F8               	clrf	add_to_hitlist@i
  3204  05B9                     L2:	
  3205  05B9  3010               	movlw	16
  3206  05BA  0278               	subwf	add_to_hitlist@i,w
  3207  05BB  1803               	btfsc	3,0
  3208  05BC  0008               	return
  3209                           
  3210                           ;user.c: 309: {
  3211                           ;user.c: 310: if(!(hitlist[i] & 0x007F))
  3212  05BD  3578               	lslf	add_to_hitlist@i,w
  3213  05BE  3EA0               	addlw	_hitlist& (0+255)
  3214  05BF  0086               	movwf	6
  3215  05C0  0187               	clrf	7
  3216  05C1  3F40               	moviw [0]fsr1
  3217  05C2  00F1               	movwf	??_add_to_hitlist
  3218  05C3  3F41               	moviw [1]fsr1
  3219  05C4  00F2               	movwf	??_add_to_hitlist+1
  3220  05C5  307F               	movlw	127
  3221  05C6  0571               	andwf	??_add_to_hitlist,w
  3222  05C7  00F3               	movwf	??_add_to_hitlist+2
  3223  05C8  3000               	movlw	0
  3224  05C9  0572               	andwf	??_add_to_hitlist+1,w
  3225  05CA  00F4               	movwf	??_add_to_hitlist+3
  3226  05CB  0874               	movf	??_add_to_hitlist+3,w
  3227  05CC  0473               	iorwf	??_add_to_hitlist+2,w
  3228  05CD  1D03               	skipz
  3229  05CE  2DD9               	goto	l2297
  3230                           
  3231                           ;user.c: 311: {
  3232                           ;user.c: 312: hitlist[i] |= gun16;
  3233  05CF  3578               	lslf	add_to_hitlist@i,w
  3234  05D0  3EA0               	addlw	_hitlist& (0+255)
  3235  05D1  0086               	movwf	6
  3236  05D2  0187               	clrf	7
  3237  05D3  0876               	movf	add_to_hitlist@gun16,w
  3238  05D4  0481               	iorwf	1,f
  3239  05D5  3141               	addfsr 1,1
  3240  05D6  0877               	movf	add_to_hitlist@gun16+1,w
  3241  05D7  0481               	iorwf	1,f
  3242                           
  3243                           ;user.c: 313: return;
  3244  05D8  0008               	return
  3245  05D9                     l2297:	
  3246                           
  3247                           ;user.c: 314: }
  3248                           ;user.c: 315: if(!(hitlist[i] & 0x3F80))
  3249  05D9  3578               	lslf	add_to_hitlist@i,w
  3250  05DA  3EA0               	addlw	_hitlist& (0+255)
  3251  05DB  0086               	movwf	6
  3252  05DC  0187               	clrf	7
  3253  05DD  3F40               	moviw [0]fsr1
  3254  05DE  00F1               	movwf	??_add_to_hitlist
  3255  05DF  3F41               	moviw [1]fsr1
  3256  05E0  00F2               	movwf	??_add_to_hitlist+1
  3257  05E1  3080               	movlw	128
  3258  05E2  0571               	andwf	??_add_to_hitlist,w
  3259  05E3  00F3               	movwf	??_add_to_hitlist+2
  3260  05E4  303F               	movlw	63
  3261  05E5  0572               	andwf	??_add_to_hitlist+1,w
  3262  05E6  00F4               	movwf	??_add_to_hitlist+3
  3263  05E7  0874               	movf	??_add_to_hitlist+3,w
  3264  05E8  0473               	iorwf	??_add_to_hitlist+2,w
  3265  05E9  1D03               	skipz
  3266  05EA  2DFE               	goto	l2303
  3267                           
  3268                           ;user.c: 316: {
  3269                           ;user.c: 317: hitlist[i] |= gun16 << 7;
  3270  05EB  0877               	movf	add_to_hitlist@gun16+1,w
  3271  05EC  00F2               	movwf	??_add_to_hitlist+1
  3272  05ED  0876               	movf	add_to_hitlist@gun16,w
  3273  05EE  00F1               	movwf	??_add_to_hitlist
  3274  05EF  3007               	movlw	7
  3275  05F0                     u2705:	
  3276  05F0  35F1               	lslf	??_add_to_hitlist,f
  3277  05F1  0DF2               	rlf	??_add_to_hitlist+1,f
  3278  05F2  0B89               	decfsz	9,f
  3279  05F3  2DF0               	goto	u2705
  3280  05F4  3578               	lslf	add_to_hitlist@i,w
  3281  05F5  3EA0               	addlw	_hitlist& (0+255)
  3282  05F6  0086               	movwf	6
  3283  05F7  0187               	clrf	7
  3284  05F8  0871               	movf	??_add_to_hitlist,w
  3285  05F9  0481               	iorwf	1,f
  3286  05FA  3141               	addfsr 1,1
  3287  05FB  0872               	movf	??_add_to_hitlist+1,w
  3288  05FC  0481               	iorwf	1,f
  3289                           
  3290                           ;user.c: 318: return;
  3291  05FD  0008               	return
  3292  05FE                     l2303:	
  3293  05FE  3001               	movlw	1
  3294  05FF  00F1               	movwf	??_add_to_hitlist
  3295  0600  0871               	movf	??_add_to_hitlist,w
  3296  0601  07F8               	addwf	add_to_hitlist@i,f
  3297  0602  2DB9               	goto	L2
  3298  0603                     __end_of_add_to_hitlist:	
  3299                           
  3300                           	psect	text11
  3301  0346                     __ptext11:	
  3302 ;; *************** function _handle_fire *****************
  3303 ;; Defined at:
  3304 ;;		line 246 in file "user.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  a               2    2[BANK0 ] unsigned int 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      unsigned char 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3318 ;;      Params:         0       0       0       0
  3319 ;;      Locals:         0       2       0       0
  3320 ;;      Temps:          0       2       0       0
  3321 ;;      Totals:         0       4       0       0
  3322 ;;Total ram usage:        4 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    4
  3325 ;; This function calls:
  3326 ;;		_ADC_read
  3327 ;;		_Send_Byte
  3328 ;;		_cheat
  3329 ;;		_green_led_on
  3330 ;;		_play_song
  3331 ;;		_stop_song
  3332 ;; This function is called by:
  3333 ;;		_main
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _handle_fire
  3339  0346                     _handle_fire:	
  3340                           
  3341                           ;user.c: 247: static uint16_t timer = 0;
  3342                           ;user.c: 248: static uint16_t counter = 0;
  3343                           ;user.c: 249: uint16_t a;
  3344                           ;user.c: 251: a=ADC_read();
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3348  0346  27CD               	fcall	_ADC_read
  3349  0347  0872               	movf	?_ADC_read+1,w
  3350  0348  0020               	movlb	0	; select bank0
  3351  0349  01A3               	clrf	handle_fire@a+1
  3352  034A  07A3               	addwf	handle_fire@a+1,f
  3353  034B  0871               	movf	?_ADC_read,w
  3354  034C  01A2               	clrf	handle_fire@a
  3355  034D  07A2               	addwf	handle_fire@a,f
  3356                           
  3357                           ;user.c: 252: if (a > config.fire_cheating){
  3358  034E  0823               	movf	handle_fire@a+1,w
  3359  034F  0021               	movlb	1	; select bank1
  3360  0350  024D               	subwf	((_config+1)^(0+128)+12),w
  3361  0351  1D03               	skipz
  3362  0352  2B57               	goto	u4275
  3363  0353  0020               	movlb	0	; select bank0
  3364  0354  0822               	movf	handle_fire@a,w
  3365  0355  0021               	movlb	1	; select bank1
  3366  0356  024C               	subwf	(_config^(0+128)+12),w
  3367  0357                     u4275:	
  3368  0357  1803               	skipnc
  3369  0358  2B5A               	goto	l3197
  3370                           
  3371                           ;user.c: 253: cheat();
  3372  0359  2451               	fcall	_cheat
  3373  035A                     l3197:	
  3374                           
  3375                           ;user.c: 254: }
  3376                           ;user.c: 255: if (a > config.fire_threshold && a < config.fire_cheating)
  3377  035A  0020               	movlb	0	; select bank0
  3378  035B  0823               	movf	handle_fire@a+1,w
  3379  035C  0021               	movlb	1	; select bank1
  3380  035D  024B               	subwf	((_config+1)^(0+128)+10),w
  3381  035E  1D03               	skipz
  3382  035F  2B64               	goto	u4285
  3383  0360  0020               	movlb	0	; select bank0
  3384  0361  0822               	movf	handle_fire@a,w
  3385  0362  0021               	movlb	1	; select bank1
  3386  0363  024A               	subwf	(_config^(0+128)+10),w
  3387  0364                     u4285:	
  3388  0364  1803               	skipnc
  3389  0365  2BC8               	goto	l200
  3390  0366  084D               	movf	((_config+1)^(0+128)+12),w
  3391  0367  0020               	movlb	0	; select bank0
  3392  0368  0223               	subwf	handle_fire@a+1,w
  3393  0369  1D03               	skipz
  3394  036A  2B6F               	goto	u4295
  3395  036B  0021               	movlb	1	; select bank1
  3396  036C  084C               	movf	(_config^(0+128)+12),w
  3397  036D  0020               	movlb	0	; select bank0
  3398  036E  0222               	subwf	handle_fire@a,w
  3399  036F                     u4295:	
  3400  036F  1803               	skipnc
  3401  0370  2BC8               	goto	l200
  3402  0371                     l201:	
  3403                           ;user.c: 256: {
  3404                           ;user.c: 257: while(!my_random_number){
  3405                           
  3406  0371  086A               	movf	_my_random_number,w
  3407  0372  1D03               	skipz
  3408  0373  2B79               	goto	l3205
  3409                           
  3410                           ;user.c: 258: my_random_number = TMR0;
  3411  0374  0815               	movf	21,w	;volatile
  3412  0375  00A0               	movwf	??_handle_fire
  3413  0376  0820               	movf	??_handle_fire,w
  3414  0377  00EA               	movwf	_my_random_number
  3415  0378  2B71               	goto	l201
  3416  0379                     l3205:	
  3417                           
  3418                           ;user.c: 259: }
  3419                           ;user.c: 260: if(timer < config.fire_holdoff)
  3420  0379  0021               	movlb	1	; select bank1
  3421  037A  084F               	movf	((_config+1)^(0+128)+14),w
  3422  037B  0020               	movlb	0	; select bank0
  3423  037C  0265               	subwf	handle_fire@timer+1,w
  3424  037D  1D03               	skipz
  3425  037E  2B83               	goto	u4315
  3426  037F  0021               	movlb	1	; select bank1
  3427  0380  084E               	movf	(_config^(0+128)+14),w
  3428  0381  0020               	movlb	0	; select bank0
  3429  0382  0264               	subwf	handle_fire@timer,w
  3430  0383                     u4315:	
  3431  0383  1803               	skipnc
  3432  0384  2B8A               	goto	l3209
  3433                           
  3434                           ;user.c: 261: {
  3435                           ;user.c: 262: timer ++;
  3436  0385  3001               	movlw	1
  3437  0386  07E4               	addwf	handle_fire@timer,f
  3438  0387  3000               	movlw	0
  3439  0388  3DE5               	addwfc	handle_fire@timer+1,f
  3440                           
  3441                           ;user.c: 263: }
  3442  0389  0008               	return
  3443  038A                     l3209:	
  3444                           
  3445                           ;user.c: 264: else
  3446                           ;user.c: 265: {
  3447                           ;user.c: 266: if(!config.power || counter <= config.power)
  3448  038A  3002               	movlw	2
  3449  038B  3EC0               	addlw	_config& (0+255)
  3450  038C  0086               	movwf	6
  3451  038D  0187               	clrf	7
  3452  038E  0016               	moviw fsr1++
  3453  038F  0401               	iorwf	1,w
  3454  0390  1903               	skipnz
  3455  0391  2B9D               	goto	l3213
  3456  0392  0863               	movf	handle_fire@counter+1,w
  3457  0393  0021               	movlb	1	; select bank1
  3458  0394  0243               	subwf	((_config+1)^(0+128)+2),w
  3459  0395  1D03               	skipz
  3460  0396  2B9B               	goto	u4335
  3461  0397  0020               	movlb	0	; select bank0
  3462  0398  0862               	movf	handle_fire@counter,w
  3463  0399  0021               	movlb	1	; select bank1
  3464  039A  0242               	subwf	(_config^(0+128)+2),w
  3465  039B                     u4335:	
  3466  039B  1C03               	skipc
  3467  039C  2BC6               	goto	l206
  3468  039D                     l3213:	
  3469                           
  3470                           ;user.c: 267: {
  3471                           ;user.c: 268: if(!counter)
  3472  039D  0020               	movlb	0	; select bank0
  3473  039E  0863               	movf	handle_fire@counter+1,w
  3474  039F  0462               	iorwf	handle_fire@counter,w
  3475  03A0  1D03               	skipz
  3476  03A1  2BBD               	goto	l3219
  3477                           
  3478                           ;user.c: 269: {
  3479                           ;user.c: 270: green_led_on();
  3480  03A2  24F6               	fcall	_green_led_on
  3481                           
  3482                           ;user.c: 271: play_song((uint16_t*)fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(c
      +                          onfig.power));
  3483  03A3  3026               	movlw	low (_fire_song| (0+32768))
  3484  03A4  00F1               	movwf	play_song@song
  3485  03A5  3085               	movlw	high (_fire_song| (0+32768))
  3486  03A6  00F2               	movwf	play_song@song+1
  3487  03A7  3010               	movlw	16
  3488  03A8  0020               	movlb	0	; select bank0
  3489  03A9  00A0               	movwf	??_handle_fire
  3490  03AA  0820               	movf	??_handle_fire,w
  3491  03AB  00F3               	movwf	play_song@length
  3492  03AC  30B8               	movlw	184
  3493  03AD  00F4               	movwf	play_song@note_duration
  3494  03AE  300B               	movlw	11
  3495  03AF  00F5               	movwf	play_song@note_duration+1
  3496  03B0  3002               	movlw	2
  3497  03B1  3EC0               	addlw	_config& (0+255)
  3498  03B2  0086               	movwf	6
  3499  03B3  0187               	clrf	7
  3500  03B4  0016               	moviw fsr1++
  3501  03B5  0401               	iorwf	1,w
  3502  03B6  3000               	movlw	0
  3503  03B7  1903               	skipnz
  3504  03B8  3001               	movlw	1
  3505  03B9  00A1               	movwf	??_handle_fire+1
  3506  03BA  0821               	movf	??_handle_fire+1,w
  3507  03BB  00F6               	movwf	play_song@repeat
  3508  03BC  27A9               	fcall	_play_song
  3509  03BD                     l3219:	
  3510                           
  3511                           ;user.c: 272: }
  3512                           ;user.c: 273: Send_Byte(config.id);
  3513  03BD  0021               	movlb	1	; select bank1
  3514  03BE  0840               	movf	_config^(0+128),w
  3515  03BF  26EF               	fcall	_Send_Byte
  3516                           
  3517                           ;user.c: 274: counter++;
  3518  03C0  3001               	movlw	1
  3519  03C1  0020               	movlb	0	; select bank0
  3520  03C2  07E2               	addwf	handle_fire@counter,f
  3521  03C3  3000               	movlw	0
  3522  03C4  3DE3               	addwfc	handle_fire@counter+1,f
  3523                           
  3524                           ;user.c: 275: }
  3525  03C5  0008               	return
  3526  03C6                     l206:	
  3527                           
  3528                           ;user.c: 276: else
  3529                           ;user.c: 277: {
  3530                           ;user.c: 278: {TRISAbits.TRISA5 = 1;};
  3531  03C6  168C               	bsf	12,5	;volatile
  3532                           
  3533                           ;user.c: 279: }
  3534                           ;user.c: 280: }
  3535                           ;user.c: 281: }
  3536  03C7  0008               	return
  3537  03C8                     l200:	
  3538                           
  3539                           ;user.c: 282: else
  3540                           ;user.c: 283: {
  3541                           ;user.c: 284: {TRISAbits.TRISA5 = 1;};
  3542  03C8  0021               	movlb	1	; select bank1
  3543  03C9  168C               	bsf	12,5	;volatile
  3544                           
  3545                           ;user.c: 285: if(!config.power && counter) stop_song();
  3546  03CA  0843               	movf	((_config+1)^(0+128)+2),w
  3547  03CB  0442               	iorwf	(_config^(0+128)+2),w
  3548  03CC  1D03               	skipz
  3549  03CD  2BD4               	goto	l3229
  3550  03CE  0020               	movlb	0	; select bank0
  3551  03CF  0863               	movf	handle_fire@counter+1,w
  3552  03D0  0462               	iorwf	handle_fire@counter,w
  3553  03D1  1903               	skipnz
  3554  03D2  2BD4               	goto	l3229
  3555  03D3  24F0               	fcall	_stop_song
  3556  03D4                     l3229:	
  3557                           
  3558                           ;user.c: 286: timer = 0;
  3559  03D4  0020               	movlb	0	; select bank0
  3560  03D5  01E4               	clrf	handle_fire@timer
  3561  03D6  01E5               	clrf	handle_fire@timer+1
  3562                           
  3563                           ;user.c: 287: counter = 0;
  3564  03D7  01E2               	clrf	handle_fire@counter
  3565  03D8  01E3               	clrf	handle_fire@counter+1
  3566                           
  3567                           ;user.c: 288: return 0;
  3568                           ;	Return value of _handle_fire is never used
  3569  03D9  0008               	return
  3570  03DA                     __end_of_handle_fire:	
  3571                           ;user.c: 289: }
  3572                           ;user.c: 290: return 1;
  3573                           ;	Return value of _handle_fire is never used
  3574                           
  3575                           
  3576                           	psect	text12
  3577  04F0                     __ptext12:	
  3578 ;; *************** function _stop_song *****************
  3579 ;; Defined at:
  3580 ;;		line 105 in file "user.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		None
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3594 ;;      Params:         0       0       0       0
  3595 ;;      Locals:         0       0       0       0
  3596 ;;      Temps:          0       0       0       0
  3597 ;;      Totals:         0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    1
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_handle_music
  3605 ;;		_handle_fire
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           
  3610                           ;psect for function _stop_song
  3611  04F0                     _stop_song:	
  3612                           
  3613                           ;user.c: 107: {PWM3CONbits.PWM3OE = 0;};
  3614                           
  3615                           ;incstack = 0
  3616                           ; Regs used in _stop_song: []
  3617  04F0  003B               	movlb	27	; select bank27
  3618  04F1  133B               	bcf	59,6	;volatile
  3619                           
  3620                           ;user.c: 108: T1CONbits.TMR1ON=0;
  3621  04F2  0020               	movlb	0	; select bank0
  3622  04F3  1018               	bcf	24,0	;volatile
  3623                           
  3624                           ;user.c: 109: PIR1bits.TMR1IF=0;
  3625  04F4  1011               	bcf	17,0	;volatile
  3626  04F5  0008               	return
  3627  04F6                     __end_of_stop_song:	
  3628                           
  3629                           	psect	text13
  3630  07A9                     __ptext13:	
  3631 ;; *************** function _play_song *****************
  3632 ;; Defined at:
  3633 ;;		line 92 in file "user.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  song            2    1[COMMON] PTR unsigned int 
  3636 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3637 ;;  length          1    3[COMMON] unsigned char 
  3638 ;;  note_duratio    2    4[COMMON] unsigned int 
  3639 ;;  repeat          1    6[COMMON] unsigned char 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;		None               void
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3651 ;;      Params:         6       0       0       0
  3652 ;;      Locals:         0       0       0       0
  3653 ;;      Temps:          2       0       0       0
  3654 ;;      Totals:         8       0       0       0
  3655 ;;Total ram usage:        8 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    1
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_handle_fire
  3662 ;;		_super_dead_mode
  3663 ;;		_hit_by
  3664 ;;		_control_transfer
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function _play_song
  3670  07A9                     _play_song:	
  3671                           
  3672                           ;user.c: 94: cur_song=song;
  3673                           
  3674                           ;incstack = 0
  3675                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3676  07A9  0872               	movf	play_song@song+1,w
  3677  07AA  0020               	movlb	0	; select bank0
  3678  07AB  01DF               	clrf	_cur_song+1
  3679  07AC  07DF               	addwf	_cur_song+1,f
  3680  07AD  0871               	movf	play_song@song,w
  3681  07AE  01DE               	clrf	_cur_song
  3682  07AF  07DE               	addwf	_cur_song,f
  3683                           
  3684                           ;user.c: 95: cur_song_length=length;
  3685  07B0  0873               	movf	play_song@length,w
  3686  07B1  00F7               	movwf	??_play_song
  3687  07B2  0877               	movf	??_play_song,w
  3688  07B3  00E7               	movwf	_cur_song_length
  3689                           
  3690                           ;user.c: 96: cur_song_ptr=0;
  3691  07B4  01E8               	clrf	_cur_song_ptr
  3692                           
  3693                           ;user.c: 97: cur_song_repeat=repeat;
  3694  07B5  0876               	movf	play_song@repeat,w
  3695  07B6  00F7               	movwf	??_play_song
  3696  07B7  0877               	movf	??_play_song,w
  3697  07B8  00E9               	movwf	_cur_song_repeat
  3698                           
  3699                           ;user.c: 98: cur_song_duration=note_duration;
  3700  07B9  0875               	movf	play_song@note_duration+1,w
  3701  07BA  01E1               	clrf	_cur_song_duration+1
  3702  07BB  07E1               	addwf	_cur_song_duration+1,f
  3703  07BC  0874               	movf	play_song@note_duration,w
  3704  07BD  01E0               	clrf	_cur_song_duration
  3705  07BE  07E0               	addwf	_cur_song_duration,f
  3706                           
  3707                           ;user.c: 100: TMR1 = -cur_song_duration;
  3708  07BF  0960               	comf	_cur_song_duration,w
  3709  07C0  00F7               	movwf	??_play_song
  3710  07C1  0961               	comf	_cur_song_duration+1,w
  3711  07C2  00F8               	movwf	??_play_song+1
  3712  07C3  0AF7               	incf	??_play_song,f
  3713  07C4  1903               	skipnz
  3714  07C5  0AF8               	incf	??_play_song+1,f
  3715  07C6  0877               	movf	??_play_song,w
  3716  07C7  0096               	movwf	22	;volatile
  3717  07C8  0878               	movf	??_play_song+1,w
  3718  07C9  0097               	movwf	23	;volatile
  3719                           
  3720                           ;user.c: 101: PIR1bits.TMR1IF = 1;
  3721  07CA  1411               	bsf	17,0	;volatile
  3722                           
  3723                           ;user.c: 102: T1CONbits.TMR1ON = 1;
  3724  07CB  1418               	bsf	24,0	;volatile
  3725  07CC  0008               	return
  3726  07CD                     __end_of_play_song:	
  3727                           
  3728                           	psect	text14
  3729  04F6                     __ptext14:	
  3730 ;; *************** function _green_led_on *****************
  3731 ;; Defined at:
  3732 ;;		line 86 in file "user.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;		None
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;		None               void
  3739 ;; Registers used:
  3740 ;;		None
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3746 ;;      Params:         0       0       0       0
  3747 ;;      Locals:         0       0       0       0
  3748 ;;      Temps:          0       0       0       0
  3749 ;;      Totals:         0       0       0       0
  3750 ;;Total ram usage:        0 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    1
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_handle_fire
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           
  3761                           ;psect for function _green_led_on
  3762  04F6                     _green_led_on:	
  3763                           
  3764                           ;user.c: 88: TRISAbits.TRISA5 = 0;
  3765                           
  3766                           ;incstack = 0
  3767                           ; Regs used in _green_led_on: []
  3768  04F6  0021               	movlb	1	; select bank1
  3769  04F7  128C               	bcf	12,5	;volatile
  3770                           
  3771                           ;user.c: 89: PORTAbits.RA5 = 1;
  3772  04F8  0020               	movlb	0	; select bank0
  3773  04F9  168C               	bsf	12,5	;volatile
  3774  04FA  0008               	return
  3775  04FB                     __end_of_green_led_on:	
  3776                           
  3777                           	psect	text15
  3778  06EF                     __ptext15:	
  3779 ;; *************** function _Send_Byte *****************
  3780 ;; Defined at:
  3781 ;;		line 155 in file "user.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  data            1    wreg     unsigned char 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  data            1    9[COMMON] unsigned char 
  3786 ;;  i               2   10[COMMON] unsigned int 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;		None               void
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, pclath, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3796 ;;      Params:         0       0       0       0
  3797 ;;      Locals:         3       0       0       0
  3798 ;;      Temps:          1       0       0       0
  3799 ;;      Totals:         4       0       0       0
  3800 ;;Total ram usage:        4 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    3
  3803 ;; This function calls:
  3804 ;;		_cheat
  3805 ;;		_delay_1_ms
  3806 ;; This function is called by:
  3807 ;;		_handle_fire
  3808 ;;		_super_dead_mode
  3809 ;;		_SEND_DATA_BYTE
  3810 ;;		_SEND_SOF
  3811 ;;		_SEND_EOF
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           
  3816                           ;psect for function _Send_Byte
  3817  06EF                     _Send_Byte:	
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3821                           ;Send_Byte@data stored from wreg
  3822  06EF  00F9               	movwf	Send_Byte@data
  3823                           
  3824                           ;user.c: 157: data ^= 0b10101010;
  3825  06F0  30AA               	movlw	170
  3826  06F1  00F8               	movwf	??_Send_Byte
  3827  06F2  0878               	movf	??_Send_Byte,w
  3828  06F3  06F9               	xorwf	Send_Byte@data,f
  3829                           
  3830                           ;user.c: 158: delay_1_ms();
  3831  06F4  24C1               	fcall	_delay_1_ms
  3832                           
  3833                           ;user.c: 159: RCSTAbits.CREN = 0;
  3834  06F5  0023               	movlb	3	; select bank3
  3835  06F6  121D               	bcf	29,4	;volatile
  3836                           
  3837                           ;user.c: 161: for(uint16_t i=0; i<100; i++){
  3838  06F7  01FA               	clrf	Send_Byte@i
  3839  06F8  01FB               	clrf	Send_Byte@i+1
  3840  06F9  3000               	movlw	0
  3841  06FA  027B               	subwf	Send_Byte@i+1,w
  3842  06FB  3064               	movlw	100
  3843  06FC  1903               	skipnz
  3844  06FD  027A               	subwf	Send_Byte@i,w
  3845  06FE  1803               	btfsc	3,0
  3846  06FF  2F15               	goto	l160
  3847  0700                     l159:	
  3848                           
  3849                           ;user.c: 162: if(PORTAbits.RA1){break;}
  3850  0700  0020               	movlb	0	; select bank0
  3851  0701  188C               	btfsc	12,1	;volatile
  3852  0702  2F15               	goto	l160
  3853                           
  3854                           ;user.c: 163: delay_1_ms();
  3855  0703  24C1               	fcall	_delay_1_ms
  3856                           
  3857                           ;user.c: 164: if(i==99){cheat();}
  3858  0704  3063               	movlw	99
  3859  0705  067A               	xorwf	Send_Byte@i,w
  3860  0706  047B               	iorwf	Send_Byte@i+1,w
  3861  0707  1D03               	skipz
  3862  0708  2F0A               	goto	l2617
  3863  0709  2451               	fcall	_cheat
  3864  070A                     l2617:	
  3865  070A  3001               	movlw	1
  3866  070B  07FA               	addwf	Send_Byte@i,f
  3867  070C  3000               	movlw	0
  3868  070D  3DFB               	addwfc	Send_Byte@i+1,f
  3869  070E  3000               	movlw	0
  3870  070F  027B               	subwf	Send_Byte@i+1,w
  3871  0710  3064               	movlw	100
  3872  0711  1903               	skipnz
  3873  0712  027A               	subwf	Send_Byte@i,w
  3874  0713  1C03               	skipc
  3875  0714  2F00               	goto	l159
  3876  0715                     l160:	
  3877                           
  3878                           ;user.c: 165: }
  3879                           ;user.c: 167: { DACCON0bits.DACEN = 1; TMR0=0; INTCONbits.TMR0IF=1; INTCONbits.TMR0IE=1;
      +                          };
  3880  0715  0022               	movlb	2	; select bank2
  3881  0716  1798               	bsf	24,7	;volatile
  3882  0717  0020               	movlb	0	; select bank0
  3883  0718  0195               	clrf	21	;volatile
  3884  0719  150B               	bsf	11,2	;volatile
  3885  071A  168B               	bsf	11,5	;volatile
  3886                           
  3887                           ;user.c: 168: TXREG = data;
  3888  071B  0879               	movf	Send_Byte@data,w
  3889  071C  0023               	movlb	3	; select bank3
  3890  071D  009A               	movwf	26	;volatile
  3891  071E                     l163:	
  3892                           ;user.c: 169: while(!TXSTAbits.TRMT);
  3893                           
  3894  071E  1C9E               	btfss	30,1	;volatile
  3895  071F  2F1E               	goto	l163
  3896                           
  3897                           ;user.c: 170: { INTCONbits.TMR0IE=0; DACCON0bits.DACEN=0;};
  3898  0720  128B               	bcf	11,5	;volatile
  3899  0721  0022               	movlb	2	; select bank2
  3900  0722  1398               	bcf	24,7	;volatile
  3901                           
  3902                           ;user.c: 171: RCSTAbits.CREN = 1;
  3903  0723  0023               	movlb	3	; select bank3
  3904  0724  161D               	bsf	29,4	;volatile
  3905                           
  3906                           ;user.c: 172: RCREG;
  3907  0725  0819               	movf	25,w	;volatile
  3908                           
  3909                           ;user.c: 173: delay_1_ms();
  3910  0726  24C1               	fcall	_delay_1_ms
  3911                           
  3912                           ;user.c: 174: delay_1_ms();
  3913  0727  24C1               	fcall	_delay_1_ms
  3914  0728  0008               	return
  3915  0729                     __end_of_Send_Byte:	
  3916                           
  3917                           	psect	text16
  3918  0451                     __ptext16:	
  3919 ;; *************** function _cheat *****************
  3920 ;; Defined at:
  3921 ;;		line 232 in file "user.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  i               1    7[COMMON] unsigned char 
  3926 ;;  i               1    6[COMMON] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;		None               void
  3929 ;; Registers used:
  3930 ;;		wreg, status,2, status,0, pclath, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3936 ;;      Params:         0       0       0       0
  3937 ;;      Locals:         2       0       0       0
  3938 ;;      Temps:          1       0       0       0
  3939 ;;      Totals:         3       0       0       0
  3940 ;;Total ram usage:        3 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    2
  3943 ;; This function calls:
  3944 ;;		_delay_1_ms
  3945 ;;		_red_led_on
  3946 ;;		_tone
  3947 ;; This function is called by:
  3948 ;;		_Send_Byte
  3949 ;;		_handle_fire
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _cheat
  3955  0451                     _cheat:	
  3956  0451                     l185:	
  3957                           ;incstack = 0
  3958                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  3959                           ;user.c: 233: while(1){
  3960                           
  3961                           
  3962                           ;user.c: 234: red_led_on();
  3963  0451  24FB               	fcall	_red_led_on
  3964                           
  3965                           ;user.c: 235: tone(7813);
  3966  0452  3085               	movlw	133
  3967  0453  00F1               	movwf	tone@period
  3968  0454  301E               	movlw	30
  3969  0455  00F2               	movwf	tone@period+1
  3970  0456  24AA               	fcall	_tone
  3971                           
  3972                           ;user.c: 236: for(uint8_t i=0; i<200; i++){
  3973  0457  01F6               	clrf	cheat@i
  3974  0458  30C8               	movlw	200
  3975  0459  0276               	subwf	cheat@i,w
  3976  045A  1803               	btfsc	3,0
  3977  045B  2C65               	goto	l187
  3978  045C                     l2579:	
  3979                           
  3980                           ;user.c: 237: delay_1_ms();
  3981  045C  24C1               	fcall	_delay_1_ms
  3982  045D  3001               	movlw	1
  3983  045E  00F5               	movwf	??_cheat
  3984  045F  0875               	movf	??_cheat,w
  3985  0460  07F6               	addwf	cheat@i,f
  3986  0461  30C8               	movlw	200
  3987  0462  0276               	subwf	cheat@i,w
  3988  0463  1C03               	skipc
  3989  0464  2C5C               	goto	l2579
  3990  0465                     l187:	
  3991                           
  3992                           ;user.c: 238: }
  3993                           ;user.c: 239: {TRISAbits.TRISA5 = 1;};
  3994  0465  0021               	movlb	1	; select bank1
  3995  0466  168C               	bsf	12,5	;volatile
  3996                           
  3997                           ;user.c: 240: for(uint8_t i=0; i<200; i++){
  3998  0467  01F7               	clrf	cheat@i_724
  3999  0468                     L3:	
  4000  0468  30C8               	movlw	200
  4001  0469  0277               	subwf	cheat@i_724,w
  4002  046A  1803               	btfsc	3,0
  4003  046B  2C51               	goto	l185
  4004                           
  4005                           ;user.c: 241: delay_1_ms();
  4006  046C  24C1               	fcall	_delay_1_ms
  4007  046D  3001               	movlw	1
  4008  046E  00F5               	movwf	??_cheat
  4009  046F  0875               	movf	??_cheat,w
  4010  0470  07F7               	addwf	cheat@i_724,f
  4011  0471  2C68               	goto	L3
  4012  0472                     __end_of_cheat:	
  4013                           
  4014                           	psect	text17
  4015  04AA                     __ptext17:	
  4016 ;; *************** function _tone *****************
  4017 ;; Defined at:
  4018 ;;		line 133 in file "user.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  period          2    1[COMMON] unsigned int 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;		None               void
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4032 ;;      Params:         2       0       0       0
  4033 ;;      Locals:         0       0       0       0
  4034 ;;      Temps:          2       0       0       0
  4035 ;;      Totals:         4       0       0       0
  4036 ;;Total ram usage:        4 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    1
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_handle_music
  4043 ;;		_cheat
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _tone
  4049  04AA                     _tone:	
  4050                           
  4051                           ;user.c: 135: PWM3CONbits.PWM3EN = 1;
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _tone: [wreg+status,2+status,0]
  4055  04AA  003B               	movlb	27	; select bank27
  4056  04AB  17BB               	bsf	59,7	;volatile
  4057                           
  4058                           ;user.c: 136: PWM3CONbits.PWM3OE = 1;
  4059  04AC  173B               	bsf	59,6	;volatile
  4060                           
  4061                           ;user.c: 137: PWM3PR = period;
  4062  04AD  0872               	movf	tone@period+1,w
  4063  04AE  01B6               	clrf	54	;volatile
  4064  04AF  07B6               	addwf	54,f	;volatile
  4065  04B0  0871               	movf	tone@period,w
  4066  04B1  01B5               	clrf	53	;volatile
  4067  04B2  07B5               	addwf	53,f	;volatile
  4068                           
  4069                           ;user.c: 138: PWM3DC = period >> 1;
  4070  04B3  0872               	movf	tone@period+1,w
  4071  04B4  00F4               	movwf	??_tone+1
  4072  04B5  0871               	movf	tone@period,w
  4073  04B6  00F3               	movwf	??_tone
  4074  04B7  36F4               	lsrf	??_tone+1,f
  4075  04B8  0CF3               	rrf	??_tone,f
  4076  04B9  0873               	movf	??_tone,w
  4077  04BA  00B3               	movwf	51	;volatile
  4078  04BB  0874               	movf	??_tone+1,w
  4079  04BC  00B4               	movwf	52	;volatile
  4080                           
  4081                           ;user.c: 139: PWM3PH = 0x0000;
  4082  04BD  01B1               	clrf	49	;volatile
  4083  04BE  01B2               	clrf	50	;volatile
  4084                           
  4085                           ;user.c: 140: PWM3LDCONbits.PWM3LD = 1;
  4086  04BF  17BF               	bsf	63,7	;volatile
  4087  04C0  0008               	return
  4088  04C1                     __end_of_tone:	
  4089                           
  4090                           	psect	text18
  4091  04FB                     __ptext18:	
  4092 ;; *************** function _red_led_on *****************
  4093 ;; Defined at:
  4094 ;;		line 80 in file "user.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;		None               void
  4101 ;; Registers used:
  4102 ;;		None
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4108 ;;      Params:         0       0       0       0
  4109 ;;      Locals:         0       0       0       0
  4110 ;;      Temps:          0       0       0       0
  4111 ;;      Totals:         0       0       0       0
  4112 ;;Total ram usage:        0 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    1
  4115 ;; This function calls:
  4116 ;;		Nothing
  4117 ;; This function is called by:
  4118 ;;		_cheat
  4119 ;;		_super_dead_mode
  4120 ;;		_hit_by
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _red_led_on
  4126  04FB                     _red_led_on:	
  4127                           
  4128                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in _red_led_on: []
  4132  04FB  0021               	movlb	1	; select bank1
  4133  04FC  128C               	bcf	12,5	;volatile
  4134                           
  4135                           ;user.c: 83: PORTAbits.RA5 = 0;
  4136  04FD  0020               	movlb	0	; select bank0
  4137  04FE  128C               	bcf	12,5	;volatile
  4138  04FF  0008               	return
  4139  0500                     __end_of_red_led_on:	
  4140                           
  4141                           	psect	text19
  4142  07CD                     __ptext19:	
  4143 ;; *************** function _ADC_read *****************
  4144 ;; Defined at:
  4145 ;;		line 73 in file "user.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;		None
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;		None
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  2    1[COMMON] unsigned int 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4159 ;;      Params:         2       0       0       0
  4160 ;;      Locals:         0       0       0       0
  4161 ;;      Temps:          2       0       0       0
  4162 ;;      Totals:         4       0       0       0
  4163 ;;Total ram usage:        4 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    1
  4166 ;; This function calls:
  4167 ;;		Nothing
  4168 ;; This function is called by:
  4169 ;;		_handle_fire
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           
  4174                           ;psect for function _ADC_read
  4175  07CD                     _ADC_read:	
  4176                           
  4177                           ;user.c: 75: ADCON0bits.GO = 1;
  4178                           
  4179                           ;incstack = 0
  4180                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4181  07CD  0021               	movlb	1	; select bank1
  4182  07CE  149D               	bsf	29,1	;volatile
  4183  07CF                     l131:	
  4184                           ;user.c: 76: while(ADCON0bits.GO){};
  4185                           
  4186  07CF  189D               	btfsc	29,1	;volatile
  4187  07D0  2FCF               	goto	l131
  4188                           
  4189                           ;user.c: 77: return ADRES >> 6;
  4190  07D1  081C               	movf	28,w	;volatile
  4191  07D2  00F4               	movwf	??_ADC_read+1
  4192  07D3  081B               	movf	27,w	;volatile
  4193  07D4  00F3               	movwf	??_ADC_read
  4194  07D5  3006               	movlw	6
  4195  07D6                     u2735:	
  4196  07D6  36F4               	lsrf	??_ADC_read+1,f
  4197  07D7  0CF3               	rrf	??_ADC_read,f
  4198  07D8  0B89               	decfsz	9,f
  4199  07D9  2FD6               	goto	u2735
  4200  07DA  0873               	movf	??_ADC_read,w
  4201  07DB  00F1               	movwf	?_ADC_read
  4202  07DC  0874               	movf	??_ADC_read+1,w
  4203  07DD  00F2               	movwf	?_ADC_read+1
  4204  07DE  0008               	return
  4205  07DF                     __end_of_ADC_read:	
  4206                           
  4207                           	psect	text20
  4208  075A                     __ptext20:	
  4209 ;; *************** function _Setup *****************
  4210 ;; Defined at:
  4211 ;;		line 32 in file "user.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, pclath, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4225 ;;      Params:         0       0       0       0
  4226 ;;      Locals:         0       0       0       0
  4227 ;;      Temps:          1       0       0       0
  4228 ;;      Totals:         1       0       0       0
  4229 ;;Total ram usage:        1 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    2
  4232 ;; This function calls:
  4233 ;;		_delay_1_ms
  4234 ;; This function is called by:
  4235 ;;		_main
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           
  4240                           ;psect for function _Setup
  4241  075A                     _Setup:	
  4242                           
  4243                           ;user.c: 34: OSCCON = 0b01111010;
  4244                           
  4245                           ;incstack = 0
  4246                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  4247  075A  307A               	movlw	122
  4248  075B  0021               	movlb	1	; select bank1
  4249  075C  0099               	movwf	25	;volatile
  4250                           
  4251                           ;user.c: 36: ANSELA = 0x00;
  4252  075D  0023               	movlb	3	; select bank3
  4253  075E  018C               	clrf	12	;volatile
  4254                           
  4255                           ;user.c: 37: TRISAbits.TRISA2 = 0;
  4256  075F  0021               	movlb	1	; select bank1
  4257  0760  110C               	bcf	12,2	;volatile
  4258                           
  4259                           ;user.c: 38: TRISAbits.TRISA0 = 0;
  4260  0761  100C               	bcf	12,0	;volatile
  4261                           
  4262                           ;user.c: 41: ANSELAbits.ANSA4 = 1;
  4263  0762  0023               	movlb	3	; select bank3
  4264  0763  160C               	bsf	12,4	;volatile
  4265                           
  4266                           ;user.c: 42: ADCON1 |= 0b00110000;
  4267  0764  3030               	movlw	48
  4268  0765  00F3               	movwf	??_Setup
  4269  0766  0873               	movf	??_Setup,w
  4270  0767  0021               	movlb	1	; select bank1
  4271  0768  049E               	iorwf	30,f	;volatile
  4272                           
  4273                           ;user.c: 45: SPBRGL = 103;
  4274  0769  3067               	movlw	103
  4275  076A  0023               	movlb	3	; select bank3
  4276  076B  009B               	movwf	27	;volatile
  4277                           
  4278                           ;user.c: 46: TXSTAbits.SYNC = 0;
  4279  076C  121E               	bcf	30,4	;volatile
  4280                           
  4281                           ;user.c: 47: RCSTAbits.SPEN = 1;
  4282  076D  179D               	bsf	29,7	;volatile
  4283                           
  4284                           ;user.c: 48: BAUDCONbits.SCKP = 1;
  4285  076E  161F               	bsf	31,4	;volatile
  4286                           
  4287                           ;user.c: 49: TXSTAbits.TXEN = 1;
  4288  076F  169E               	bsf	30,5	;volatile
  4289                           
  4290                           ;user.c: 52: RCSTAbits.CREN = 1;
  4291  0770  161D               	bsf	29,4	;volatile
  4292                           
  4293                           ;user.c: 55: INTCONbits.GIE = 1;
  4294  0771  178B               	bsf	11,7	;volatile
  4295                           
  4296                           ;user.c: 58: OPTION_REGbits.TMR0CS = 0;
  4297  0772  0021               	movlb	1	; select bank1
  4298  0773  1295               	bcf	21,5	;volatile
  4299                           
  4300                           ;user.c: 61: T1CONbits.T1CKPS=3;
  4301  0774  3030               	movlw	48
  4302  0775  0020               	movlb	0	; select bank0
  4303  0776  0498               	iorwf	24,f	;volatile
  4304                           
  4305                           ;user.c: 64: T2CONbits.T2CKPS = 3;
  4306  0777  3003               	movlw	3
  4307  0778  049C               	iorwf	28,f	;volatile
  4308                           
  4309                           ;user.c: 65: T2CONbits.T2OUTPS = 15;
  4310  0779  3078               	movlw	120
  4311  077A  049C               	iorwf	28,f	;volatile
  4312                           
  4313                           ;user.c: 66: T2CONbits.TMR2ON = 1;
  4314  077B  151C               	bsf	28,2	;volatile
  4315                           
  4316                           ;user.c: 68: ADCON0bits.CHS = 3;
  4317  077C  0021               	movlb	1	; select bank1
  4318  077D  081D               	movf	29,w	;volatile
  4319  077E  3983               	andlw	-125
  4320  077F  380C               	iorlw	12
  4321  0780  009D               	movwf	29	;volatile
  4322                           
  4323                           ;user.c: 69: ADCON0bits.ADON = 1;
  4324  0781  141D               	bsf	29,0	;volatile
  4325                           
  4326                           ;user.c: 70: delay_1_ms();
  4327  0782  24C1               	fcall	_delay_1_ms
  4328  0783  0008               	return
  4329  0784                     __end_of_Setup:	
  4330                           
  4331                           	psect	text21
  4332  04C1                     __ptext21:	
  4333 ;; *************** function _delay_1_ms *****************
  4334 ;; Defined at:
  4335 ;;		line 391 in file "user.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  i               2    1[COMMON] unsigned int 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;		None               void
  4342 ;; Registers used:
  4343 ;;		wreg, status,2
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4349 ;;      Params:         0       0       0       0
  4350 ;;      Locals:         2       0       0       0
  4351 ;;      Temps:          0       0       0       0
  4352 ;;      Totals:         2       0       0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    1
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_Setup
  4360 ;;		_Send_Byte
  4361 ;;		_cheat
  4362 ;;		_super_dead_mode
  4363 ;;		_hit_by
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _delay_1_ms
  4369  04C1                     _delay_1_ms:	
  4370                           
  4371                           ;user.c: 392: for (uint16_t i=0; i<4000/14; i++){
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _delay_1_ms: [wreg+status,2]
  4375  04C1  01F1               	clrf	delay_1_ms@i
  4376  04C2  01F2               	clrf	delay_1_ms@i+1
  4377  04C3                     L4:	
  4378  04C3  3001               	movlw	1
  4379  04C4  0272               	subwf	delay_1_ms@i+1,w
  4380  04C5  301D               	movlw	29
  4381  04C6  1903               	skipnz
  4382  04C7  0271               	subwf	delay_1_ms@i,w
  4383  04C8  1803               	btfsc	3,0
  4384  04C9  0008               	return
  4385                           
  4386                           ;user.c: 393: __nop();
  4387  04CA  0000               	nop
  4388  04CB  3001               	movlw	1
  4389  04CC  07F1               	addwf	delay_1_ms@i,f
  4390  04CD  3000               	movlw	0
  4391  04CE  3DF2               	addwfc	delay_1_ms@i+1,f
  4392  04CF  2CC3               	goto	L4
  4393  04D0                     __end_of_delay_1_ms:	
  4394                           
  4395                           	psect	text22
  4396  0656                     __ptext22:	
  4397 ;; *************** function _LoadFromFlash *****************
  4398 ;; Defined at:
  4399 ;;		line 28 in file "main.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4413 ;;      Params:         0       0       0       0
  4414 ;;      Locals:         0       0       0       0
  4415 ;;      Temps:          2       0       0       0
  4416 ;;      Totals:         2       0       0       0
  4417 ;;Total ram usage:        2 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    2
  4420 ;; This function calls:
  4421 ;;		_Load
  4422 ;;		_Save
  4423 ;; This function is called by:
  4424 ;;		_main
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _LoadFromFlash
  4430  0656                     _LoadFromFlash:	
  4431                           
  4432                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4436  0656  30F0               	movlw	240
  4437  0657  00F1               	movwf	Load@address
  4438  0658  3007               	movlw	7
  4439  0659  00F2               	movwf	Load@address+1
  4440  065A  30C0               	movlw	_config& (0+255)
  4441  065B  00F7               	movwf	??_LoadFromFlash
  4442  065C  0877               	movf	??_LoadFromFlash,w
  4443  065D  00F3               	movwf	Load@ptr
  4444  065E  3009               	movlw	9
  4445  065F  00F8               	movwf	??_LoadFromFlash+1
  4446  0660  0878               	movf	??_LoadFromFlash+1,w
  4447  0661  00F4               	movwf	Load@data_length
  4448  0662  2784               	fcall	_Load
  4449                           
  4450                           ;main.c: 31: if(config.id == 0x3FFF)
  4451  0663  303F               	movlw	63
  4452  0664  0021               	movlb	1	; select bank1
  4453  0665  0641               	xorwf	(_config+1)^(0+128),w
  4454  0666  1D03               	skipz
  4455  0667  2E6A               	goto	u2815
  4456  0668  30FF               	movlw	255
  4457  0669  0640               	xorwf	_config^(0+128),w
  4458  066A                     u2815:	
  4459  066A  1D03               	skipz
  4460  066B  2E9A               	goto	l2389
  4461                           
  4462                           ;main.c: 32: {
  4463                           ;main.c: 33: config.id = 0x80;
  4464  066C  3080               	movlw	128
  4465  066D  00C0               	movwf	_config^(0+128)
  4466  066E  3000               	movlw	0
  4467  066F  00C1               	movwf	(_config^(0+128)+1)
  4468                           
  4469                           ;main.c: 34: config.power = 0;
  4470  0670  01C2               	clrf	(_config^(0+128)+2)
  4471  0671  01C3               	clrf	((_config+1)^(0+128)+2)
  4472                           
  4473                           ;main.c: 35: config.health = 1;
  4474  0672  3001               	movlw	1
  4475  0673  00C4               	movwf	(_config^(0+128)+4)
  4476  0674  3000               	movlw	0
  4477  0675  00C5               	movwf	(_config^(0+128)+5)
  4478                           
  4479                           ;main.c: 36: config.shield = 2;
  4480  0676  3002               	movlw	2
  4481  0677  00C6               	movwf	(_config^(0+128)+6)
  4482  0678  3000               	movlw	0
  4483  0679  00C7               	movwf	(_config^(0+128)+7)
  4484                           
  4485                           ;main.c: 38: config.fire_threshold = 500;
  4486  067A  30F4               	movlw	244
  4487  067B  00CA               	movwf	(_config^(0+128)+10)
  4488  067C  3001               	movlw	1
  4489  067D  00CB               	movwf	(_config^(0+128)+11)
  4490                           
  4491                           ;main.c: 42: config.fire_holdoff = 0;
  4492  067E  01CE               	clrf	(_config^(0+128)+14)
  4493  067F  01CF               	clrf	((_config+1)^(0+128)+14)
  4494                           
  4495                           ;main.c: 43: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4496  0680  30F0               	movlw	240
  4497  0681  00F1               	movwf	Save@address
  4498  0682  3007               	movlw	7
  4499  0683  00F2               	movwf	Save@address+1
  4500  0684  30C0               	movlw	_config& (0+255)
  4501  0685  00F7               	movwf	??_LoadFromFlash
  4502  0686  0877               	movf	??_LoadFromFlash,w
  4503  0687  00F3               	movwf	Save@ptr
  4504  0688  3009               	movlw	9
  4505  0689  00F8               	movwf	??_LoadFromFlash+1
  4506  068A  0878               	movf	??_LoadFromFlash+1,w
  4507  068B  00F4               	movwf	Save@data_length
  4508  068C  26A8               	fcall	_Save
  4509                           
  4510                           ;main.c: 44: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4511  068D  30E0               	movlw	224
  4512  068E  00F1               	movwf	Save@address
  4513  068F  3007               	movlw	7
  4514  0690  00F2               	movwf	Save@address+1
  4515  0691  30A0               	movlw	_hitlist& (0+255)
  4516  0692  00F7               	movwf	??_LoadFromFlash
  4517  0693  0877               	movf	??_LoadFromFlash,w
  4518  0694  00F3               	movwf	Save@ptr
  4519  0695  3010               	movlw	16
  4520  0696  00F8               	movwf	??_LoadFromFlash+1
  4521  0697  0878               	movf	??_LoadFromFlash+1,w
  4522  0698  00F4               	movwf	Save@data_length
  4523  0699  26A8               	fcall	_Save
  4524  069A                     l2389:	
  4525                           
  4526                           ;main.c: 45: }
  4527                           ;main.c: 46: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4528  069A  30E0               	movlw	224
  4529  069B  00F1               	movwf	Load@address
  4530  069C  3007               	movlw	7
  4531  069D  00F2               	movwf	Load@address+1
  4532  069E  30A0               	movlw	_hitlist& (0+255)
  4533  069F  00F7               	movwf	??_LoadFromFlash
  4534  06A0  0877               	movf	??_LoadFromFlash,w
  4535  06A1  00F3               	movwf	Load@ptr
  4536  06A2  3010               	movlw	16
  4537  06A3  00F8               	movwf	??_LoadFromFlash+1
  4538  06A4  0878               	movf	??_LoadFromFlash+1,w
  4539  06A5  00F4               	movwf	Load@data_length
  4540  06A6  2784               	fcall	_Load
  4541  06A7  0008               	return
  4542  06A8                     __end_of_LoadFromFlash:	
  4543                           
  4544                           	psect	text23
  4545  06A8                     __ptext23:	
  4546 ;; *************** function _Save *****************
  4547 ;; Defined at:
  4548 ;;		line 198 in file "user.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  address         2    1[COMMON] unsigned int 
  4551 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4552 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4553 ;;  data_length     1    4[COMMON] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  i               1    6[COMMON] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4565 ;;      Params:         4       0       0       0
  4566 ;;      Locals:         1       0       0       0
  4567 ;;      Temps:          1       0       0       0
  4568 ;;      Totals:         6       0       0       0
  4569 ;;Total ram usage:        6 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    1
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_LoadFromFlash
  4576 ;;		_hit_by
  4577 ;;		_control_transfer
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _Save
  4583  06A8                     _Save:	
  4584                           
  4585                           ;user.c: 200: INTCONbits.GIE = 0;
  4586                           
  4587                           ;incstack = 0
  4588                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4589  06A8  138B               	bcf	11,7	;volatile
  4590                           
  4591                           ;user.c: 201: PMADR = address;
  4592  06A9  0872               	movf	Save@address+1,w
  4593  06AA  0023               	movlb	3	; select bank3
  4594  06AB  0192               	clrf	18	;volatile
  4595  06AC  0792               	addwf	18,f	;volatile
  4596  06AD  0871               	movf	Save@address,w
  4597  06AE  0191               	clrf	17	;volatile
  4598  06AF  0791               	addwf	17,f	;volatile
  4599                           
  4600                           ;user.c: 202: PMCON1bits.CFGS = 0;
  4601  06B0  1315               	bcf	21,6	;volatile
  4602                           
  4603                           ;user.c: 203: PMCON1bits.FREE = 1;
  4604  06B1  1615               	bsf	21,4	;volatile
  4605                           
  4606                           ;user.c: 204: PMCON1bits.WREN = 1;
  4607  06B2  1515               	bsf	21,2	;volatile
  4608                           
  4609                           ;user.c: 205: PMCON2 = 0x55;
  4610  06B3  3055               	movlw	85
  4611  06B4  0096               	movwf	22	;volatile
  4612                           
  4613                           ;user.c: 206: PMCON2 = 0xAA;
  4614  06B5  30AA               	movlw	170
  4615  06B6  0096               	movwf	22	;volatile
  4616                           
  4617                           ;user.c: 207: PMCON1bits.WR = 1;
  4618  06B7  1495               	bsf	21,1	;volatile
  4619                           
  4620                           ;user.c: 208: __nop();
  4621  06B8  0000               	nop
  4622                           
  4623                           ;user.c: 209: __nop();
  4624  06B9  0000               	nop
  4625                           
  4626                           ;user.c: 210: PMCON1bits.WREN = 0;
  4627  06BA  0023               	movlb	3	; select bank3
  4628  06BB  1115               	bcf	21,2	;volatile
  4629                           
  4630                           ;user.c: 212: PMADR = address;
  4631  06BC  0872               	movf	Save@address+1,w
  4632  06BD  0192               	clrf	18	;volatile
  4633  06BE  0792               	addwf	18,f	;volatile
  4634  06BF  0871               	movf	Save@address,w
  4635  06C0  0191               	clrf	17	;volatile
  4636  06C1  0791               	addwf	17,f	;volatile
  4637                           
  4638                           ;user.c: 213: PMCON1bits.CFGS = 0;
  4639  06C2  1315               	bcf	21,6	;volatile
  4640                           
  4641                           ;user.c: 214: PMCON1bits.FREE = 0;
  4642  06C3  1215               	bcf	21,4	;volatile
  4643                           
  4644                           ;user.c: 215: PMCON1bits.WREN = 1;
  4645  06C4  1515               	bsf	21,2	;volatile
  4646                           
  4647                           ;user.c: 216: PMCON1bits.LWLO = 1;
  4648  06C5  1695               	bsf	21,5	;volatile
  4649                           
  4650                           ;user.c: 218: for (uint8_t i=1; i<=data_length; i++){
  4651  06C6  01F6               	clrf	Save@i
  4652  06C7  0AF6               	incf	Save@i,f
  4653  06C8                     l178:	
  4654  06C8  0876               	movf	Save@i,w
  4655  06C9  0274               	subwf	Save@data_length,w
  4656  06CA  1C03               	btfss	3,0
  4657  06CB  2EEC               	goto	l181
  4658                           
  4659                           ;user.c: 219: PMDAT = *ptr++;
  4660  06CC  0873               	movf	Save@ptr,w
  4661  06CD  0086               	movwf	6
  4662  06CE  0187               	clrf	7
  4663  06CF  3F40               	moviw [0]fsr1
  4664  06D0  0093               	movwf	19	;volatile
  4665  06D1  3F41               	moviw [1]fsr1
  4666  06D2  0094               	movwf	20	;volatile
  4667  06D3  3002               	movlw	2
  4668  06D4  00F5               	movwf	??_Save
  4669  06D5  0875               	movf	??_Save,w
  4670  06D6  07F3               	addwf	Save@ptr,f
  4671                           
  4672                           ;user.c: 220: if(i == data_length) PMCON1bits.LWLO = 0;
  4673  06D7  0876               	movf	Save@i,w
  4674  06D8  0674               	xorwf	Save@data_length,w
  4675  06D9  1903               	btfsc	3,2
  4676  06DA  1295               	bcf	21,5	;volatile
  4677                           
  4678                           ;user.c: 221: PMCON2 = 0x55;
  4679  06DB  3055               	movlw	85
  4680  06DC  0096               	movwf	22	;volatile
  4681                           
  4682                           ;user.c: 222: PMCON2 = 0xAA;
  4683  06DD  30AA               	movlw	170
  4684  06DE  0096               	movwf	22	;volatile
  4685                           
  4686                           ;user.c: 223: PMCON1bits.WR = 1;
  4687  06DF  1495               	bsf	21,1	;volatile
  4688                           
  4689                           ;user.c: 224: __nop();
  4690  06E0  0000               	nop
  4691                           
  4692                           ;user.c: 225: __nop();
  4693  06E1  0000               	nop
  4694                           
  4695                           ;user.c: 226: PMADRL++;
  4696  06E2  3001               	movlw	1
  4697  06E3  00F5               	movwf	??_Save
  4698  06E4  0875               	movf	??_Save,w
  4699  06E5  0023               	movlb	3	; select bank3
  4700  06E6  0791               	addwf	17,f	;volatile
  4701  06E7  3001               	movlw	1
  4702  06E8  00F5               	movwf	??_Save
  4703  06E9  0875               	movf	??_Save,w
  4704  06EA  07F6               	addwf	Save@i,f
  4705  06EB  2EC8               	goto	l178
  4706  06EC                     l181:	
  4707                           
  4708                           ;user.c: 227: }
  4709                           ;user.c: 228: PMCON1bits.WREN = 0;
  4710  06EC  1115               	bcf	21,2	;volatile
  4711                           
  4712                           ;user.c: 229: INTCONbits.GIE = 1;
  4713  06ED  178B               	bsf	11,7	;volatile
  4714  06EE  0008               	return
  4715  06EF                     __end_of_Save:	
  4716                           
  4717                           	psect	text24
  4718  0784                     __ptext24:	
  4719 ;; *************** function _Load *****************
  4720 ;; Defined at:
  4721 ;;		line 186 in file "user.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  address         2    1[COMMON] unsigned int 
  4724 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4725 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4726 ;;  data_length     1    4[COMMON] unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  i               1    6[COMMON] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;		None               void
  4731 ;; Registers used:
  4732 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4738 ;;      Params:         4       0       0       0
  4739 ;;      Locals:         1       0       0       0
  4740 ;;      Temps:          1       0       0       0
  4741 ;;      Totals:         6       0       0       0
  4742 ;;Total ram usage:        6 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    1
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_LoadFromFlash
  4749 ;;		_control_transfer
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _Load
  4755  0784                     _Load:	
  4756                           
  4757                           ;user.c: 187: PMCON1bits.CFGS = 0;
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4761  0784  0023               	movlb	3	; select bank3
  4762  0785  1315               	bcf	21,6	;volatile
  4763                           
  4764                           ;user.c: 188: PMADR = address;
  4765  0786  0872               	movf	Load@address+1,w
  4766  0787  0192               	clrf	18	;volatile
  4767  0788  0792               	addwf	18,f	;volatile
  4768  0789  0871               	movf	Load@address,w
  4769  078A  0191               	clrf	17	;volatile
  4770  078B  0791               	addwf	17,f	;volatile
  4771                           
  4772                           ;user.c: 189: for (uint8_t i=0; i<data_length; i++){
  4773  078C  01F6               	clrf	Load@i
  4774  078D                     l1793:	
  4775  078D  0874               	movf	Load@data_length,w
  4776  078E  0276               	subwf	Load@i,w
  4777  078F  1803               	btfsc	3,0
  4778  0790  0008               	return
  4779                           
  4780                           ;user.c: 190: PMCON1bits.RD = 1;
  4781  0791  1415               	bsf	21,0	;volatile
  4782                           
  4783                           ;user.c: 191: __nop();
  4784  0792  0000               	nop
  4785                           
  4786                           ;user.c: 192: __nop();
  4787  0793  0000               	nop
  4788                           
  4789                           ;user.c: 193: *ptr++ = PMDAT;
  4790  0794  0873               	movf	Load@ptr,w
  4791  0795  0086               	movwf	6
  4792  0796  0187               	clrf	7
  4793  0797  0023               	movlb	3	; select bank3
  4794  0798  0813               	movf	19,w	;volatile
  4795  0799  3FC0               	movwi [0]fsr1
  4796  079A  0814               	movf	20,w	;volatile
  4797  079B  3FC1               	movwi [1]fsr1
  4798  079C  3002               	movlw	2
  4799  079D  00F5               	movwf	??_Load
  4800  079E  0875               	movf	??_Load,w
  4801  079F  07F3               	addwf	Load@ptr,f
  4802                           
  4803                           ;user.c: 194: PMADR ++;
  4804  07A0  3001               	movlw	1
  4805  07A1  0791               	addwf	17,f	;volatile
  4806  07A2  3000               	movlw	0
  4807  07A3  3D92               	addwfc	18,f	;volatile
  4808  07A4  3001               	movlw	1
  4809  07A5  00F5               	movwf	??_Load
  4810  07A6  0875               	movf	??_Load,w
  4811  07A7  07F6               	addwf	Load@i,f
  4812  07A8  2F8D               	goto	l1793
  4813  07A9                     __end_of_Load:	
  4814                           
  4815                           	psect	intentry
  4816  0004                     __pintentry:	
  4817 ;; *************** function _High_Priority_Interrupt *****************
  4818 ;; Defined at:
  4819 ;;		line 295 in file "user.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;		None               void
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4833 ;;      Params:         0       0       0       0
  4834 ;;      Locals:         0       0       0       0
  4835 ;;      Temps:          1       0       0       0
  4836 ;;      Totals:         1       0       0       0
  4837 ;;Total ram usage:        1 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		Interrupt level 1
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846  0004                     _High_Priority_Interrupt:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4850  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4851  0005  3180               	pagesel	$
  4852  0006  0020               	movlb	0	; select bank0
  4853  0007  087F               	movf	127,w
  4854  0008  00F0               	movwf	??_High_Priority_Interrupt
  4855  0009  0022               	banksel	280	;# 
  4856  000A  0818               	movf	24,w	;# 
  4857  000B  3A20               	xorlw	32	;# 
  4858  000C  0098               	movwf	24	;# 
  4859                           
  4860                           ;user.c: 301: TMR0 -= 50;
  4861  000D  3032               	movlw	50
  4862  000E  0020               	movlb	0	; select bank0
  4863  000F  0295               	subwf	21,f	;volatile
  4864                           
  4865                           ;user.c: 302: INTCONbits.TMR0IF = 0;
  4866  0010  110B               	bcf	11,2	;volatile
  4867  0011  0870               	movf	??_High_Priority_Interrupt,w
  4868  0012  00FF               	movwf	127
  4869  0013  107E               	bcf	126,0	;clear compiler interrupt flag
  4870  0014  0009               	retfie
  4871  0015                     __end_of_High_Priority_Interrupt:	
  4872  007E                     btemp	set	126	;btemp
  4873  007E                     pic14e$flags	set	126
  4874  007E                     wtemp	set	126
  4875  007E                     wtemp0	set	126
  4876  0080                     wtemp1	set	128
  4877  0082                     wtemp2	set	130
  4878  0084                     wtemp3	set	132
  4879  0086                     wtemp4	set	134
  4880  0088                     wtemp5	set	136
  4881  007F                     wtemp6	set	127
  4882  007E                     ttemp	set	126
  4883  007E                     ttemp0	set	126
  4884  0081                     ttemp1	set	129
  4885  0084                     ttemp2	set	132
  4886  0087                     ttemp3	set	135
  4887  007F                     ttemp4	set	127
  4888  007E                     ltemp	set	126
  4889  007E                     ltemp0	set	126
  4890  0082                     ltemp1	set	130
  4891  0086                     ltemp2	set	134
  4892  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      78
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _super_dead_mode->_Send_Byte
    _handle_music->_tone
    _SEND_SOF->_Send_Byte
    _SEND_EOF->_Send_Byte
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _Setup->_delay_1_ms
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35475
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   21140
                                             57 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   12796
                                             50 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0   10053
                                             45 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    8155
                                              3 BANK0     42    42      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     690
                                              0 BANK0      3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     913
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    2025
                                              0 BANK0      4     4      0
                           _ADC_read
                          _Send_Byte
                              _cheat
                       _green_led_on
                          _play_song
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     936
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            4     4      0     597
                                              8 COMMON     4     4      0
                              _cheat
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (5) _cheat                                                3     3      0     396
                                              5 COMMON     3     3      0
                         _delay_1_ms
                         _red_led_on
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      68
                                              3 COMMON     1     1      0
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (2) _delay_1_ms                                           2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1997
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1111
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
     _delay_1_ms
   _handle_fire
     _ADC_read
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _cheat
       _delay_1_ms
       _red_led_on
       _tone
     _green_led_on
     _play_song
     _stop_song
   _handle_music
     _stop_song
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _delay_1_ms
       _handle_music
         _stop_song
         _tone
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _Save
           _play_song
         _delay_1_ms
         _handle_music
           _stop_song
           _tone
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _delay_1_ms
     _handle_music
       _stop_song
       _tone
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8D      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Aug 25 08:46:17 2014

                     __CFG_CP$OFF 0000                                l26 04D8                                __i 005C  
                              __x 007C                                __y 006D                     _LoadFromFlash 0656  
                             l200 03C8                               l201 0371                               l131 07CF  
                             l206 03C6                               l160 0715                               l163 071E  
                             l181 06EC                               l159 0700                               l407 0345  
                             l185 0451                               l178 06C8                               l187 0465  
                             l287 0476                      __CFG_BORV$LO 0000                               wreg 0009  
                 _super_dead_mode 0558                      __CFG_LVP$OFF 0000                              l3013 0332  
                            l2303 05FE                              l3031 0573                       Load@address 0071  
                            l3105 0420                              l3213 039D                              l3205 0379  
                            l3045 059B                              l3209 038A                              l3049 055B  
                            l3219 03BD                              l3091 0443                              l3067 0416  
                            l3229 03D4                              l3087 043A                              l3079 042F  
                            l3159 0613                              l2617 070A                              l2297 05D9  
                            l2801 0143                              l3267 02E2                              l2389 069A  
                            l3197 035A                              l2709 0074                              l2663 0735  
                            l1793 078D                              l1873 0485                              l2737 00AB  
                            l2579 045C                              l2923 0248                              l2667 0737  
                            l2945 027E                              l2881 01EF                              l2873 01DD  
                            l2883 01F1                              l2981 02EA                              l2973 02BE  
                            l2983 02EF                              l2975 02CD                              l2979 02DC  
                            u3125 049A                              u3205 003E                              u4105 05AB  
                            u4035 0305                              u3315 008A                              u2705 05F0  
                            u3265 0066                              u4225 0625                              u4315 0383  
                            u3445 00E4                              u2815 066A                              u2735 07D6  
                            u4335 039B                              u4095 0583                              u4265 0649  
                            u4275 0357                              u3635 0180                              u3395 00C1  
                            u4285 0364                              u4295 036F                              u3495 0107  
                            u3585 0159                              u3835 022E                              u3685 01A7  
                            u3785 0207                              u3955 0294                              u3895 025E  
            control_transfer@data 0025                              _TMR0 0015                              _TMR1 0016  
                            _TMR2 001A              control_transfer@page 004A              control_transfer@dptr 0048  
                            _Load 0784                      __CFG_WRT$OFF 0000                              _Save 06A8  
                            _main 04D0                     Send_Byte@data 0079                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 04AA                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0015                              ttemp 007E                              wtemp 007E  
                __end_of_ADC_read 07DF                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0055                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0071  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 04F0                  __end_of_SEND_SOF 04E4                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_747 0058  
                           _Setup 075A                             _cheat 0451                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0346                        Send_Byte@i 007A                   __initialization 0016  
                    __end_of_Load 07A9                      __end_of_Save 06EF                      __end_of_main 04DC  
                    __end_of_tone 04C1                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 05AF                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 075A                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071                            ?_cheat 0070  
            __size_of_handle_fire 0094                            _ADCON1 009E                            _ANSELA 018C  
                          _PMADRL 0191                            _PMCON2 0196                            _OSCCON 0099  
                          _PWM3DC 0DB3                            _PWM3PH 0DB1                            _SPBRGL 019B  
                          _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077  
              __size_of_Send_Byte 003A                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0020  
                          _config 00C0                            _hit_by 03DA                            cheat@i 0076  
                 play_song@length 0073                            _one_up 0546                   play_song@repeat 0076  
                     Save@address 0071                  _my_random_number 006A                         ?_ADC_read 0071  
         __end_of__initialization 0023           handle_serial@rx_counter 006B                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 0784  
                   __end_of_cheat 0472           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004F                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0073                           ??_cheat 0075                   _GET_CHAR_HELPER 0472  
               __end_of_Send_Byte 0729           __size_of_add_to_hitlist 0054                        __pbssBANK0 005C  
                      __pbssBANK1 00A0             __end_of_handle_serial 0656                        _death_song 0500  
                      _delay_1_ms 04C1                        ??_SEND_EOF 007C                        ??_SEND_SOF 007C  
                      __pmaintext 04D0              __end_of_green_led_on 04FB                 _cur_song_duration 0060  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0558                           Load@ptr 0073  
              __size_of_stop_song 0006                           Save@ptr 0073                        cheat@i_724 0077  
                    _handle_music 0729                 ?_control_transfer 0070                ??_control_transfer 0023  
                 SEND_DATA_BYTE@b 0022         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0546  
                 __size_of_hit_by 0077                           __ptext1 0603                           __ptext2 03DA  
                         __ptext3 0558                           __ptext4 0729                           __ptext5 0026  
                         __ptext6 04DC                           __ptext7 04EA                           __ptext8 0490  
                         __ptext9 0472                        _red_led_on 04FB                         _T1CONbits 0018  
         __end_of_GET_CHAR_HELPER 0490                           _hitlist 00A0                         _T2CONbits 001C  
                         clrloop0 04E5                 add_to_hitlist@gun 0075              end_of_initialization 0023  
                         hit_by@i 0057                 __end_of_play_song 07CD                       ?_delay_1_ms 0070  
                       _RCSTAbits 019D                      __pstringtext 0500                         _PORTAbits 000C  
               __end_of_stop_song 04F6                     ??_handle_fire 0020                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 05AF  
               __size_of_ADC_read 0012                         _TXSTAbits 019E               control_transfer@cmd 0045  
           __size_of_green_led_on 0005                handle_fire@counter 0062                 __size_of_SEND_EOF 0006  
               __size_of_SEND_SOF 0008             __end_of_LoadFromFlash 06A8                       _BAUDCONbits 019F  
                  __end_of_hit_by 0451                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0552                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             __size_of_delay_1_ms 000F               start_initialization 0016            __end_of_add_to_hitlist 0603  
                    _green_led_on 04F6               __end_of_handle_fire 03DA                         _Send_Byte 06EF  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0068  
                        ??_hit_by 0052                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 001A  
                       __checksum 0066                  handle_fire@timer 0064          __size_of_super_dead_mode 0057  
                 Save@data_length 0074                         _dead_song 0552                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 005B                         _fire_song 0526  
          __size_of_handle_serial 0053         __size_of_control_transfer 0320                       _handle_fire 0346  
                        _ADC_read 07CD                    __size_of_Setup 002A                    __size_of_cheat 0021  
                    ??_delay_1_ms 0071                         clear_ram0 04E4                   Load@data_length 0074  
                       _play_song 07A9                          _PIR1bits 0011                          _SEND_EOF 04EA  
                        _SEND_SOF 04DC                        _ADCON0bits 009D                __end_of_death_song 0526  
              control_transfer@id 0047                __end_of_delay_1_ms 04D0                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 04F0                         hit_by@who 0054  
          super_dead_mode@counter 0050                       ??_Send_Byte 0078                     _handle_serial 0603  
               ??_super_dead_mode 004D          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
                    ??_red_led_on 0071                        _ANSELAbits 018C                    _SEND_DATA_BYTE 0490  
                      ?_stop_song 0070                   _cur_song_length 0067     control_transfer@random_number 0046  
                        __ptext10 05AF                          __ptext11 0346                          __ptext20 075A  
                        __ptext12 04F0                          __ptext21 04C1                          __ptext13 07A9  
                        __ptext22 0656                          __ptext14 04F6                          __ptext23 06A8  
                        __ptext15 06EF                          __ptext24 0784                          __ptext16 0451  
                        __ptext17 04AA                          __ptext18 04FB                          __ptext19 07CD  
                 _cur_song_repeat 0069                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 005E                     __size_of_Save 0047                     __size_of_main 000C  
                     delay_1_ms@i 0071                     __size_of_tone 0017                __end_of_red_led_on 0500  
               control_transfer@i 0049                 control_transfer@x 004C            play_song@note_duration 0074  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 04AA                  _control_transfer 0026  
                      _INTCONbits 000B                       _PWM3CONbits 0DBB                       pic14e$flags 007E  
                        intlevel1 0000          __size_of_GET_CHAR_HELPER 001E   __end_of_High_Priority_Interrupt 0015  
                    handle_fire@a 0022            __size_of_LoadFromFlash 0052                        _PMCON1bits 0195  
               __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070                       ??_play_song 0077  
                 ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070                       ??_stop_song 0071  
                 ??_handle_serial 0059                handle_serial@rx_id 006C                    ??_handle_music 0075  
