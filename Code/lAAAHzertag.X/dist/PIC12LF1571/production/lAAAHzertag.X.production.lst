

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Tue Aug 19 01:01:40 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  008C                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0095                     	;# 
    75  0096                     	;# 
    76  0097                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009B                     	;# 
    82  009C                     	;# 
    83  009D                     	;# 
    84  009E                     	;# 
    85  009F                     	;# 
    86  010C                     	;# 
    87  0111                     	;# 
    88  0112                     	;# 
    89  0115                     	;# 
    90  0116                     	;# 
    91  0117                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011D                     	;# 
    95  011D                     	;# 
    96  018C                     	;# 
    97  0191                     	;# 
    98  0191                     	;# 
    99  0192                     	;# 
   100  0193                     	;# 
   101  0193                     	;# 
   102  0194                     	;# 
   103  0195                     	;# 
   104  0196                     	;# 
   105  0197                     	;# 
   106  0199                     	;# 
   107  019A                     	;# 
   108  019B                     	;# 
   109  019B                     	;# 
   110  019C                     	;# 
   111  019D                     	;# 
   112  019E                     	;# 
   113  019F                     	;# 
   114  020C                     	;# 
   115  028C                     	;# 
   116  030C                     	;# 
   117  038C                     	;# 
   118  0391                     	;# 
   119  0392                     	;# 
   120  0393                     	;# 
   121  0691                     	;# 
   122  0692                     	;# 
   123  0693                     	;# 
   124  0694                     	;# 
   125  0695                     	;# 
   126  0D8E                     	;# 
   127  0D8F                     	;# 
   128  0D90                     	;# 
   129  0D91                     	;# 
   130  0D91                     	;# 
   131  0D92                     	;# 
   132  0D93                     	;# 
   133  0D93                     	;# 
   134  0D94                     	;# 
   135  0D95                     	;# 
   136  0D95                     	;# 
   137  0D96                     	;# 
   138  0D97                     	;# 
   139  0D97                     	;# 
   140  0D98                     	;# 
   141  0D99                     	;# 
   142  0D99                     	;# 
   143  0D9A                     	;# 
   144  0D9B                     	;# 
   145  0D9C                     	;# 
   146  0D9D                     	;# 
   147  0D9E                     	;# 
   148  0D9F                     	;# 
   149  0DA0                     	;# 
   150  0DA1                     	;# 
   151  0DA1                     	;# 
   152  0DA2                     	;# 
   153  0DA3                     	;# 
   154  0DA3                     	;# 
   155  0DA4                     	;# 
   156  0DA5                     	;# 
   157  0DA5                     	;# 
   158  0DA6                     	;# 
   159  0DA7                     	;# 
   160  0DA7                     	;# 
   161  0DA8                     	;# 
   162  0DA9                     	;# 
   163  0DA9                     	;# 
   164  0DAA                     	;# 
   165  0DAB                     	;# 
   166  0DAC                     	;# 
   167  0DAD                     	;# 
   168  0DAE                     	;# 
   169  0DAF                     	;# 
   170  0DB0                     	;# 
   171  0DB1                     	;# 
   172  0DB1                     	;# 
   173  0DB2                     	;# 
   174  0DB3                     	;# 
   175  0DB3                     	;# 
   176  0DB4                     	;# 
   177  0DB5                     	;# 
   178  0DB5                     	;# 
   179  0DB6                     	;# 
   180  0DB7                     	;# 
   181  0DB7                     	;# 
   182  0DB8                     	;# 
   183  0DB9                     	;# 
   184  0DB9                     	;# 
   185  0DBA                     	;# 
   186  0DBB                     	;# 
   187  0DBC                     	;# 
   188  0DBD                     	;# 
   189  0DBE                     	;# 
   190  0DBF                     	;# 
   191  0DC0                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  028C                     	;# 
   277  030C                     	;# 
   278  038C                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0691                     	;# 
   283  0692                     	;# 
   284  0693                     	;# 
   285  0694                     	;# 
   286  0695                     	;# 
   287  0D8E                     	;# 
   288  0D8F                     	;# 
   289  0D90                     	;# 
   290  0D91                     	;# 
   291  0D91                     	;# 
   292  0D92                     	;# 
   293  0D93                     	;# 
   294  0D93                     	;# 
   295  0D94                     	;# 
   296  0D95                     	;# 
   297  0D95                     	;# 
   298  0D96                     	;# 
   299  0D97                     	;# 
   300  0D97                     	;# 
   301  0D98                     	;# 
   302  0D99                     	;# 
   303  0D99                     	;# 
   304  0D9A                     	;# 
   305  0D9B                     	;# 
   306  0D9C                     	;# 
   307  0D9D                     	;# 
   308  0D9E                     	;# 
   309  0D9F                     	;# 
   310  0DA0                     	;# 
   311  0DA1                     	;# 
   312  0DA1                     	;# 
   313  0DA2                     	;# 
   314  0DA3                     	;# 
   315  0DA3                     	;# 
   316  0DA4                     	;# 
   317  0DA5                     	;# 
   318  0DA5                     	;# 
   319  0DA6                     	;# 
   320  0DA7                     	;# 
   321  0DA7                     	;# 
   322  0DA8                     	;# 
   323  0DA9                     	;# 
   324  0DA9                     	;# 
   325  0DAA                     	;# 
   326  0DAB                     	;# 
   327  0DAC                     	;# 
   328  0DAD                     	;# 
   329  0DAE                     	;# 
   330  0DAF                     	;# 
   331  0DB0                     	;# 
   332  0DB1                     	;# 
   333  0DB1                     	;# 
   334  0DB2                     	;# 
   335  0DB3                     	;# 
   336  0DB3                     	;# 
   337  0DB4                     	;# 
   338  0DB5                     	;# 
   339  0DB5                     	;# 
   340  0DB6                     	;# 
   341  0DB7                     	;# 
   342  0DB7                     	;# 
   343  0DB8                     	;# 
   344  0DB9                     	;# 
   345  0DB9                     	;# 
   346  0DBA                     	;# 
   347  0DBB                     	;# 
   348  0DBC                     	;# 
   349  0DBD                     	;# 
   350  0DBE                     	;# 
   351  0DBF                     	;# 
   352  0DC0                     	;# 
   353  0FE4                     	;# 
   354  0FE5                     	;# 
   355  0FE6                     	;# 
   356  0FE7                     	;# 
   357  0FE8                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEE                     	;# 
   366  0FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0013                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  008C                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0093                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0098                     	;# 
   400  0099                     	;# 
   401  009A                     	;# 
   402  009B                     	;# 
   403  009B                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  010C                     	;# 
   409  0111                     	;# 
   410  0112                     	;# 
   411  0115                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  0118                     	;# 
   415  0119                     	;# 
   416  011D                     	;# 
   417  011D                     	;# 
   418  018C                     	;# 
   419  0191                     	;# 
   420  0191                     	;# 
   421  0192                     	;# 
   422  0193                     	;# 
   423  0193                     	;# 
   424  0194                     	;# 
   425  0195                     	;# 
   426  0196                     	;# 
   427  0197                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019C                     	;# 
   433  019D                     	;# 
   434  019E                     	;# 
   435  019F                     	;# 
   436  020C                     	;# 
   437  028C                     	;# 
   438  030C                     	;# 
   439  038C                     	;# 
   440  0391                     	;# 
   441  0392                     	;# 
   442  0393                     	;# 
   443  0691                     	;# 
   444  0692                     	;# 
   445  0693                     	;# 
   446  0694                     	;# 
   447  0695                     	;# 
   448  0D8E                     	;# 
   449  0D8F                     	;# 
   450  0D90                     	;# 
   451  0D91                     	;# 
   452  0D91                     	;# 
   453  0D92                     	;# 
   454  0D93                     	;# 
   455  0D93                     	;# 
   456  0D94                     	;# 
   457  0D95                     	;# 
   458  0D95                     	;# 
   459  0D96                     	;# 
   460  0D97                     	;# 
   461  0D97                     	;# 
   462  0D98                     	;# 
   463  0D99                     	;# 
   464  0D99                     	;# 
   465  0D9A                     	;# 
   466  0D9B                     	;# 
   467  0D9C                     	;# 
   468  0D9D                     	;# 
   469  0D9E                     	;# 
   470  0D9F                     	;# 
   471  0DA0                     	;# 
   472  0DA1                     	;# 
   473  0DA1                     	;# 
   474  0DA2                     	;# 
   475  0DA3                     	;# 
   476  0DA3                     	;# 
   477  0DA4                     	;# 
   478  0DA5                     	;# 
   479  0DA5                     	;# 
   480  0DA6                     	;# 
   481  0DA7                     	;# 
   482  0DA7                     	;# 
   483  0DA8                     	;# 
   484  0DA9                     	;# 
   485  0DA9                     	;# 
   486  0DAA                     	;# 
   487  0DAB                     	;# 
   488  0DAC                     	;# 
   489  0DAD                     	;# 
   490  0DAE                     	;# 
   491  0DAF                     	;# 
   492  0DB0                     	;# 
   493  0DB1                     	;# 
   494  0DB1                     	;# 
   495  0DB2                     	;# 
   496  0DB3                     	;# 
   497  0DB3                     	;# 
   498  0DB4                     	;# 
   499  0DB5                     	;# 
   500  0DB5                     	;# 
   501  0DB6                     	;# 
   502  0DB7                     	;# 
   503  0DB7                     	;# 
   504  0DB8                     	;# 
   505  0DB9                     	;# 
   506  0DB9                     	;# 
   507  0DBA                     	;# 
   508  0DBB                     	;# 
   509  0DBC                     	;# 
   510  0DBD                     	;# 
   511  0DBE                     	;# 
   512  0DBF                     	;# 
   513  0DC0                     	;# 
   514  0FE4                     	;# 
   515  0FE5                     	;# 
   516  0FE6                     	;# 
   517  0FE7                     	;# 
   518  0FE8                     	;# 
   519  0FE8                     	;# 
   520  0FE9                     	;# 
   521  0FEA                     	;# 
   522  0FEA                     	;# 
   523  0FEB                     	;# 
   524  0FED                     	;# 
   525  0FEE                     	;# 
   526  0FEE                     	;# 
   527  0FEF                     	;# 
   528                           
   529                           	psect	idataBANK1
   530  05FB                     __pidataBANK1:	
   531                           
   532                           ;initializer for _fire_song
   533  05FB  34A0               	retlw	160
   534  05FC  340F               	retlw	15
   535  05FD  34DB               	retlw	219
   536  05FE  3411               	retlw	17
   537  05FF  34D5               	retlw	213
   538  0600  3414               	retlw	20
   539  0601  3400               	retlw	0
   540  0602  3419               	retlw	25
   541  0603  3440               	retlw	64
   542  0604  341F               	retlw	31
   543  0605  34AA               	retlw	170
   544  0606  3429               	retlw	41
   545  0607  3480               	retlw	128
   546  0608  343E               	retlw	62
   547  0609  3400               	retlw	0
   548  060A  347D               	retlw	125
   549  060B  34E3               	retlw	227
   550  060C  348A               	retlw	138
   551  060D  3440               	retlw	64
   552  060E  349C               	retlw	156
   553  060F  3492               	retlw	146
   554  0610  34B2               	retlw	178
   555  0611  3455               	retlw	85
   556  0612  34D0               	retlw	208
   557  0613  3400               	retlw	0
   558  0614  34FA               	retlw	250
   559  0615  3400               	retlw	0
   560  0616  3400               	retlw	0
   561  0617  3400               	retlw	0
   562  0618  3400               	retlw	0
   563  0619  3400               	retlw	0
   564  061A  3400               	retlw	0
   565                           
   566                           	psect	idataBANK2
   567  056A                     __pidataBANK2:	
   568                           
   569                           ;initializer for _death_song
   570  056A  3462               	retlw	98
   571  056B  34F0               	retlw	240
   572  056C  3400               	retlw	0
   573  056D  34FA               	retlw	250
   574  056E  3400               	retlw	0
   575  056F  3400               	retlw	0
   576  0570  3400               	retlw	0
   577  0571  3400               	retlw	0
   578  0572  3400               	retlw	0
   579  0573  3400               	retlw	0
   580  0574  3400               	retlw	0
   581  0575  3400               	retlw	0
   582  0576  346F               	retlw	111
   583  0577  3477               	retlw	119
   584  0578  347A               	retlw	122
   585  0579  3459               	retlw	89
   586  057A  3400               	retlw	0
   587  057B  3400               	retlw	0
   588  057C  34CC               	retlw	204
   589  057D  345E               	retlw	94
   590  057E  347A               	retlw	122
   591  057F  3459               	retlw	89
   592  0580  34CC               	retlw	204
   593  0581  345E               	retlw	94
   594  0582  3400               	retlw	0
   595  0583  3400               	retlw	0
   596  0584  346B               	retlw	107
   597  0585  346A               	retlw	106
   598  0586  346F               	retlw	111
   599  0587  3477               	retlw	119
   600  0588  3470               	retlw	112
   601  0589  349F               	retlw	159
   602  058A  3400               	retlw	0
   603  058B  3400               	retlw	0
   604  058C  3470               	retlw	112
   605  058D  349F               	retlw	159
   606  058E  34EA               	retlw	234
   607  058F  34EE               	retlw	238
   608  0016                     _TMR1	set	22
   609  000B                     _INTCONbits	set	11
   610  0011                     _PIR1bits	set	17
   611  000C                     _PORTAbits	set	12
   612  0018                     _T1CONbits	set	24
   613  0015                     _TMR0	set	21
   614  009B                     _ADRES	set	155
   615  009D                     _ADCON0bits	set	157
   616  009E                     _ADCON1	set	158
   617  0095                     _OPTION_REGbits	set	149
   618  0099                     _OSCCON	set	153
   619  0091                     _PIE1bits	set	145
   620  008C                     _TRISAbits	set	140
   621  0118                     _DACCON0bits	set	280
   622  0191                     _PMADR	set	401
   623  0193                     _PMDAT	set	403
   624  018C                     _ANSELA	set	396
   625  018C                     _ANSELAbits	set	396
   626  019F                     _BAUDCONbits	set	415
   627  0191                     _PMADRL	set	401
   628  0195                     _PMCON1bits	set	405
   629  0196                     _PMCON2	set	406
   630  0199                     _RCREG	set	409
   631  019D                     _RCSTAbits	set	413
   632  019B                     _SPBRGL	set	411
   633  019A                     _TXREG	set	410
   634  019E                     _TXSTAbits	set	414
   635  0DB3                     _PWM3DC	set	3507
   636  0DB1                     _PWM3PH	set	3505
   637  0DB5                     _PWM3PR	set	3509
   638  0DBB                     _PWM3CONbits	set	3515
   639  0DBF                     _PWM3LDCONbits	set	3519
   640                           
   641                           ; #config settings
   642  0000                     
   643                           	psect	cinit
   644  0016                     start_initialization:	
   645  0016                     __initialization:	
   646                           
   647                           ; Clear objects allocated to COMMON
   648  0016  01FC               	clrf	__pbssCOMMON& (0+127)
   649                           
   650                           ; Clear objects allocated to BANK0
   651  0017  304A               	movlw	low __pbssBANK0
   652  0018  0084               	movwf	4
   653  0019  3000               	movlw	high __pbssBANK0
   654  001A  0085               	movwf	5
   655  001B  3022               	movlw	34
   656  001C  26B4               	fcall	clear_ram0
   657                           
   658                           ; Clear objects allocated to BANK1
   659  001D  30A0               	movlw	low __pbssBANK1
   660  001E  0084               	movwf	4
   661  001F  3000               	movlw	high __pbssBANK1
   662  0020  0085               	movwf	5
   663  0021  3020               	movlw	32
   664  0022  26B4               	fcall	clear_ram0
   665                           
   666                           ; Initialize objects allocated to BANK1
   667  0023  30FB               	movlw	low __pidataBANK1
   668  0024  0084               	movwf	4
   669  0025  3085               	movlw	(high __pidataBANK1)| (0+128)
   670  0026  0085               	movwf	5
   671  0027  30C0               	movlw	low __pdataBANK1
   672  0028  0086               	movwf	6
   673  0029  3000               	movlw	high __pdataBANK1
   674  002A  0087               	movwf	7
   675  002B  3020               	movlw	32
   676  002C  26BA               	fcall	init_ram
   677                           
   678                           ; Initialize objects allocated to BANK2
   679  002D  306A               	movlw	low __pidataBANK2
   680  002E  0084               	movwf	4
   681  002F  3085               	movlw	(high __pidataBANK2)| (0+128)
   682  0030  0085               	movwf	5
   683  0031  3020               	movlw	low __pdataBANK2
   684  0032  0086               	movwf	6
   685  0033  3001               	movlw	high __pdataBANK2
   686  0034  0087               	movwf	7
   687  0035  3026               	movlw	38
   688  0036  26BA               	fcall	init_ram
   689  0037                     end_of_initialization:	
   690                           ;End of C runtime variable initialization code
   691                           
   692  0037                     __end_of__initialization:	
   693  0037  0020               	movlb	0
   694  0038  2EC0               	ljmp	_main	;jump to C main() function
   695                           
   696                           	psect	bssCOMMON
   697  007C                     __pbssCOMMON:	
   698  007C                     _cur_song_ptr:	
   699  007C                     	ds	1
   700                           
   701                           	psect	bssBANK0
   702  004A                     __pbssBANK0:	
   703  004A                     __i:	
   704  004A                     	ds	2
   705  004C                     _cur_song:	
   706  004C                     	ds	2
   707  004E                     _cur_song_duration:	
   708  004E                     	ds	2
   709  0050                     handle_fire@counter:	
   710  0050                     	ds	2
   711  0052                     handle_fire@timer:	
   712  0052                     	ds	2
   713  0054                     __checksum:	
   714  0054                     	ds	1
   715  0055                     _cur_song_length:	
   716  0055                     	ds	1
   717  0056                     _cur_song_repeat:	
   718  0056                     	ds	1
   719  0057                     _my_random_number:	
   720  0057                     	ds	1
   721  0058                     handle_serial@rx_counter:	
   722  0058                     	ds	1
   723  0059                     handle_serial@rx_id:	
   724  0059                     	ds	1
   725  005A                     _config:	
   726  005A                     	ds	16
   727  006A                     __x:	
   728  006A                     	ds	1
   729  006B                     __y:	
   730  006B                     	ds	1
   731                           
   732                           	psect	bssBANK1
   733  00A0                     __pbssBANK1:	
   734  00A0                     _hitlist:	
   735  00A0                     	ds	32
   736                           
   737                           	psect	dataBANK1
   738  00C0                     __pdataBANK1:	
   739  00C0                     _fire_song:	
   740  00C0                     	ds	32
   741                           
   742                           	psect	dataBANK2
   743  0120                     __pdataBANK2:	
   744  0120                     _death_song:	
   745  0120                     	ds	38
   746                           
   747                           	psect	clrtext
   748  06B4                     clear_ram0:	
   749                           ;	Called with FSR0 containing the base address, and
   750                           ;	WREG with the size to clear
   751                           
   752  06B4  0064               	clrwdt	;clear the watchdog before getting into this loop
   753  06B5                     clrloop0:	
   754  06B5  0180               	clrf	0	;clear RAM location pointed to by FSR
   755  06B6  3101               	addfsr 0,1
   756  06B7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   757  06B8  2EB5               	goto	clrloop0	;have we reached the end yet?
   758  06B9  3400               	retlw	0	;all done for this memory range, return
   759                           
   760                           	psect	inittext
   761  06BA                     init_ram:	
   762  06BA  00FE               	movwf	126
   763  06BB                     initloop:	
   764  06BB  0012               	moviw fsr0++
   765  06BC  001E               	movwi fsr1++
   766  06BD  0BFE               	decfsz	126,f
   767  06BE  2EBB               	goto	initloop
   768  06BF  3400               	retlw	0
   769                           
   770                           	psect	cstackCOMMON
   771  0070                     __pcstackCOMMON:	
   772  0070                     ?_Setup:	
   773  0070                     ?_handle_music:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0070                     ?_tone_off:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0070                     ?_Modulate_Serial:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0070                     ?_Disable_Modulation:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0070                     ?_LoadFromFlash:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0070                     ?_main:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0070                     ?_red_led_on:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0070                     ?_green_led_on:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0070                     ?_led_off:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0070                     ?_stop_song:	
   801                           ; 0 bytes @ 0x0
   802                           
   803  0070                     ?_Send_Byte:	
   804                           ; 0 bytes @ 0x0
   805                           
   806  0070                     ?_High_Priority_Interrupt:	
   807                           ; 0 bytes @ 0x0
   808                           
   809  0070                     ??_High_Priority_Interrupt:	
   810                           ; 0 bytes @ 0x0
   811                           
   812  0070                     ?_add_to_hitlist:	
   813                           ; 0 bytes @ 0x0
   814                           
   815  0070                     ?_hit_by:	
   816                           ; 0 bytes @ 0x0
   817                           
   818  0070                     ?_SEND_DATA_BYTE:	
   819                           ; 0 bytes @ 0x0
   820                           
   821  0070                     ?_SEND_SOF:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0070                     ?_SEND_EOF:	
   825                           ; 0 bytes @ 0x0
   826                           
   827  0070                     ?_control_transfer:	
   828                           ; 0 bytes @ 0x0
   829                           
   830  0070                     ?_handle_serial:	
   831                           ; 0 bytes @ 0x0
   832                           
   833  0070                     ?_handle_fire:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_get_hitlist_length:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_GET_CHAR_HELPER:	
   840                           ; 1 bytes @ 0x0
   841                           
   842                           
   843                           ; 1 bytes @ 0x0
   844  0070                     	ds	1
   845  0071                     ?_Load:	
   846  0071                     ??_Setup:	
   847                           ; 0 bytes @ 0x1
   848                           
   849  0071                     ??_tone_off:	
   850                           ; 0 bytes @ 0x1
   851                           
   852  0071                     ?_tone:	
   853                           ; 0 bytes @ 0x1
   854                           
   855  0071                     ??_Modulate_Serial:	
   856                           ; 0 bytes @ 0x1
   857                           
   858  0071                     ??_Disable_Modulation:	
   859                           ; 0 bytes @ 0x1
   860                           
   861  0071                     ??_red_led_on:	
   862                           ; 0 bytes @ 0x1
   863                           
   864  0071                     ??_green_led_on:	
   865                           ; 0 bytes @ 0x1
   866                           
   867  0071                     ??_led_off:	
   868                           ; 0 bytes @ 0x1
   869                           
   870  0071                     ?_play_song:	
   871                           ; 0 bytes @ 0x1
   872                           
   873  0071                     ??_stop_song:	
   874                           ; 0 bytes @ 0x1
   875                           
   876  0071                     ??_Send_Byte:	
   877                           ; 0 bytes @ 0x1
   878                           
   879  0071                     ?_Save:	
   880                           ; 0 bytes @ 0x1
   881                           
   882  0071                     ??_get_hitlist_length:	
   883                           ; 0 bytes @ 0x1
   884                           
   885  0071                     ??_add_to_hitlist:	
   886                           ; 0 bytes @ 0x1
   887                           
   888  0071                     ??_GET_CHAR_HELPER:	
   889                           ; 0 bytes @ 0x1
   890                           
   891  0071                     ?_ADC_read:	
   892                           ; 0 bytes @ 0x1
   893                           
   894  0071                     Send_Byte@data:	
   895                           ; 2 bytes @ 0x1
   896                           
   897  0071                     play_song@song:	
   898                           ; 1 bytes @ 0x1
   899                           
   900  0071                     tone@period:	
   901                           ; 2 bytes @ 0x1
   902                           
   903  0071                     Load@address:	
   904                           ; 2 bytes @ 0x1
   905                           
   906  0071                     Save@address:	
   907                           ; 2 bytes @ 0x1
   908                           
   909                           
   910                           ; 2 bytes @ 0x1
   911  0071                     	ds	1
   912  0072                     ??_SEND_DATA_BYTE:	
   913  0072                     GET_CHAR_HELPER@val:	
   914                           ; 0 bytes @ 0x2
   915                           
   916                           
   917                           ; 1 bytes @ 0x2
   918  0072                     	ds	1
   919  0073                     ??_tone:	
   920  0073                     ??_ADC_read:	
   921                           ; 0 bytes @ 0x3
   922                           
   923  0073                     play_song@length:	
   924                           ; 0 bytes @ 0x3
   925                           
   926  0073                     Load@ptr:	
   927                           ; 1 bytes @ 0x3
   928                           
   929  0073                     Save@ptr:	
   930                           ; 1 bytes @ 0x3
   931                           
   932                           
   933                           ; 1 bytes @ 0x3
   934  0073                     	ds	1
   935  0074                     Load@data_length:	
   936  0074                     Save@data_length:	
   937                           ; 1 bytes @ 0x4
   938                           
   939  0074                     SEND_DATA_BYTE@b:	
   940                           ; 1 bytes @ 0x4
   941                           
   942  0074                     play_song@note_duration:	
   943                           ; 1 bytes @ 0x4
   944                           
   945                           
   946                           ; 2 bytes @ 0x4
   947  0074                     	ds	1
   948  0075                     ??_Load:	
   949  0075                     ??_handle_music:	
   950                           ; 0 bytes @ 0x5
   951                           
   952  0075                     ??_Save:	
   953                           ; 0 bytes @ 0x5
   954                           
   955  0075                     ??_SEND_SOF:	
   956                           ; 0 bytes @ 0x5
   957                           
   958  0075                     ??_SEND_EOF:	
   959                           ; 0 bytes @ 0x5
   960                           
   961  0075                     get_hitlist_length@i:	
   962                           ; 0 bytes @ 0x5
   963                           
   964  0075                     add_to_hitlist@gun:	
   965                           ; 1 bytes @ 0x5
   966                           
   967                           
   968                           ; 1 bytes @ 0x5
   969  0075                     	ds	1
   970  0076                     play_song@repeat:	
   971  0076                     Load@i:	
   972                           ; 1 bytes @ 0x6
   973                           
   974  0076                     Save@i:	
   975                           ; 1 bytes @ 0x6
   976                           
   977  0076                     add_to_hitlist@gun16:	
   978                           ; 1 bytes @ 0x6
   979                           
   980                           
   981                           ; 2 bytes @ 0x6
   982  0076                     	ds	1
   983  0077                     ??_LoadFromFlash:	
   984  0077                     ??_play_song:	
   985                           ; 0 bytes @ 0x7
   986                           
   987  0077                     ??_control_transfer:	
   988                           ; 0 bytes @ 0x7
   989                           
   990                           
   991                           ; 0 bytes @ 0x7
   992  0077                     	ds	1
   993  0078                     add_to_hitlist@i:	
   994                           
   995                           ; 1 bytes @ 0x8
   996  0078                     	ds	1
   997  0079                     ??_handle_fire:	
   998  0079                     ??_hit_by:	
   999                           ; 0 bytes @ 0x9
  1000                           
  1001                           
  1002                           ; 0 bytes @ 0x9
  1003  0079                     	ds	2
  1004  007B                     handle_serial@b:	
  1005                           
  1006                           ; 1 bytes @ 0xB
  1007  007B                     	ds	1
  1008  007C                     ??_main:	
  1009                           
  1010                           	psect	cstackBANK0
  1011  0020                     __pcstackBANK0:	
  1012                           ; 0 bytes @ 0xC
  1013                           
  1014  0020                     hit_by@who:	
  1015  0020                     handle_fire@a:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0020                     control_transfer@data:	
  1019                           ; 2 bytes @ 0x0
  1020                           
  1021                           
  1022                           ; 32 bytes @ 0x0
  1023  0020                     	ds	1
  1024  0021                     hit_by@respawn_timer:	
  1025                           
  1026                           ; 2 bytes @ 0x1
  1027  0021                     	ds	2
  1028  0023                     hit_by@i:	
  1029                           
  1030                           ; 1 bytes @ 0x3
  1031  0023                     	ds	1
  1032  0024                     hit_by@i_685:	
  1033                           
  1034                           ; 1 bytes @ 0x4
  1035  0024                     	ds	28
  1036  0040                     control_transfer@cmd:	
  1037                           
  1038                           ; 1 bytes @ 0x20
  1039  0040                     	ds	1
  1040  0041                     control_transfer@random_number:	
  1041                           
  1042                           ; 1 bytes @ 0x21
  1043  0041                     	ds	1
  1044  0042                     control_transfer@id:	
  1045                           
  1046                           ; 1 bytes @ 0x22
  1047  0042                     	ds	1
  1048  0043                     control_transfer@dptr:	
  1049                           
  1050                           ; 1 bytes @ 0x23
  1051  0043                     	ds	1
  1052  0044                     control_transfer@i:	
  1053                           
  1054                           ; 1 bytes @ 0x24
  1055  0044                     	ds	1
  1056  0045                     control_transfer@page:	
  1057                           
  1058                           ; 2 bytes @ 0x25
  1059  0045                     	ds	2
  1060  0047                     control_transfer@x:	
  1061                           
  1062                           ; 1 bytes @ 0x27
  1063  0047                     	ds	1
  1064  0048                     ??_handle_serial:	
  1065                           
  1066                           ; 0 bytes @ 0x28
  1067  0048                     	ds	2
  1068                           
  1069                           	psect	maintext
  1070  06C0                     __pmaintext:	
  1071 ;;
  1072 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1073 ;;
  1074 ;; *************** function _main *****************
  1075 ;; Defined at:
  1076 ;;		line 49 in file "main.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;		None
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;		None
  1081 ;; Return value:  Size  Location     Type
  1082 ;;		None               void
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 17F/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1090 ;;      Params:         0       0       0       0
  1091 ;;      Locals:         0       0       0       0
  1092 ;;      Temps:          0       0       0       0
  1093 ;;      Totals:         0       0       0       0
  1094 ;;Total ram usage:        0 bytes
  1095 ;; Hardware stack levels required when called:    7
  1096 ;; This function calls:
  1097 ;;		_LoadFromFlash
  1098 ;;		_Setup
  1099 ;;		_handle_serial
  1100 ;;		_handle_fire
  1101 ;;		_handle_music
  1102 ;; This function is called by:
  1103 ;;		Startup code after reset
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           
  1108                           ;psect for function _main
  1109  06C0                     _main:	
  1110                           
  1111                           ;main.c: 50: Setup();
  1112                           
  1113                           ;incstack = 0
  1114                           ; Regs used in _main: [allreg]
  1115  06C0  261B               	fcall	_Setup
  1116                           
  1117                           ;main.c: 51: LoadFromFlash();
  1118  06C1  2486               	fcall	_LoadFromFlash
  1119  06C2                     l2341:	
  1120                           ;main.c: 53: while(1)
  1121                           
  1122                           
  1123                           ;main.c: 54: {
  1124                           ;main.c: 55: handle_serial();
  1125  06C2  24C6               	fcall	_handle_serial
  1126                           
  1127                           ;main.c: 56: handle_fire();
  1128  06C3  2314               	fcall	_handle_fire
  1129                           
  1130                           ;main.c: 57: handle_music();
  1131  06C4  2539               	fcall	_handle_music
  1132  06C5  2EC2               	goto	l2341
  1133  06C6                     __end_of_main:	
  1134                           
  1135                           	psect	text1
  1136  0314                     __ptext1:	
  1137 ;; *************** function _handle_fire *****************
  1138 ;; Defined at:
  1139 ;;		line 226 in file "user.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  a               2    0[BANK0 ] unsigned int 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      unsigned char 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1153 ;;      Params:         0       0       0       0
  1154 ;;      Locals:         0       2       0       0
  1155 ;;      Temps:          2       0       0       0
  1156 ;;      Totals:         2       2       0       0
  1157 ;;Total ram usage:        4 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    3
  1160 ;; This function calls:
  1161 ;;		_ADC_read
  1162 ;;		_green_led_on
  1163 ;;		_led_off
  1164 ;;		_play_song
  1165 ;;		_stop_song
  1166 ;;		_Send_Byte
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           
  1173                           ;psect for function _handle_fire
  1174  0314                     _handle_fire:	
  1175                           
  1176                           ;user.c: 227: static uint16_t timer = 0;
  1177                           ;user.c: 228: static uint16_t counter = 0;
  1178                           ;user.c: 229: uint16_t a;
  1179                           ;user.c: 231: a=ADC_read();
  1180                           
  1181                           ;incstack = 0
  1182                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1183  0314  2639               	fcall	_ADC_read
  1184  0315  0872               	movf	?_ADC_read+1,w
  1185  0316  0020               	movlb	0	; select bank0
  1186  0317  01A1               	clrf	handle_fire@a+1
  1187  0318  07A1               	addwf	handle_fire@a+1,f
  1188  0319  0871               	movf	?_ADC_read,w
  1189  031A  01A0               	clrf	handle_fire@a
  1190  031B  07A0               	addwf	handle_fire@a,f
  1191                           
  1192                           ;user.c: 232: if (a > config.fire_threshold && a < config.fire_cheating)
  1193  031C  0821               	movf	handle_fire@a+1,w
  1194  031D  0265               	subwf	_config+11,w
  1195  031E  1D03               	skipz
  1196  031F  2B22               	goto	u2625
  1197  0320  0820               	movf	handle_fire@a,w
  1198  0321  0264               	subwf	_config+10,w
  1199  0322                     u2625:	
  1200  0322  1803               	skipnc
  1201  0323  2B72               	goto	l2401
  1202  0324  0867               	movf	_config+13,w
  1203  0325  0221               	subwf	handle_fire@a+1,w
  1204  0326  1D03               	skipz
  1205  0327  2B2A               	goto	u2635
  1206  0328  0866               	movf	_config+12,w
  1207  0329  0220               	subwf	handle_fire@a,w
  1208  032A                     u2635:	
  1209  032A  1803               	skipnc
  1210  032B  2B72               	goto	l2401
  1211                           
  1212                           ;user.c: 233: {
  1213                           ;user.c: 234: if(timer < config.fire_holdoff)
  1214  032C  0869               	movf	_config+15,w
  1215  032D  0253               	subwf	handle_fire@timer+1,w
  1216  032E  1D03               	skipz
  1217  032F  2B32               	goto	u2645
  1218  0330  0868               	movf	_config+14,w
  1219  0331  0252               	subwf	handle_fire@timer,w
  1220  0332                     u2645:	
  1221  0332  1803               	skipnc
  1222  0333  2B39               	goto	l2385
  1223                           
  1224                           ;user.c: 235: {
  1225                           ;user.c: 236: timer ++;
  1226  0334  3001               	movlw	1
  1227  0335  07D2               	addwf	handle_fire@timer,f
  1228  0336  3000               	movlw	0
  1229  0337  3DD3               	addwfc	handle_fire@timer+1,f
  1230                           
  1231                           ;user.c: 237: }
  1232  0338  0008               	return
  1233  0339                     l2385:	
  1234                           
  1235                           ;user.c: 238: else
  1236                           ;user.c: 239: {
  1237                           ;user.c: 240: if(!config.power || counter <= config.power)
  1238  0339  3002               	movlw	2
  1239  033A  3E5A               	addlw	_config& (0+255)
  1240  033B  0086               	movwf	6
  1241  033C  0187               	clrf	7
  1242  033D  0016               	moviw fsr1++
  1243  033E  0401               	iorwf	1,w
  1244  033F  1903               	skipnz
  1245  0340  2B49               	goto	l2389
  1246  0341  0851               	movf	handle_fire@counter+1,w
  1247  0342  025D               	subwf	_config+3,w
  1248  0343  1D03               	skipz
  1249  0344  2B47               	goto	u2665
  1250  0345  0850               	movf	handle_fire@counter,w
  1251  0346  025C               	subwf	_config+2,w
  1252  0347                     u2665:	
  1253  0347  1C03               	skipc
  1254  0348  2B70               	goto	l2399
  1255  0349                     l2389:	
  1256                           
  1257                           ;user.c: 241: {
  1258                           ;user.c: 242: if(!counter)
  1259  0349  0851               	movf	handle_fire@counter+1,w
  1260  034A  0450               	iorwf	handle_fire@counter,w
  1261  034B  1D03               	skipz
  1262  034C  2B67               	goto	l2395
  1263                           
  1264                           ;user.c: 243: {
  1265                           ;user.c: 244: green_led_on();
  1266  034D  26C6               	fcall	_green_led_on
  1267                           
  1268                           ;user.c: 245: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  1269  034E  30C0               	movlw	low _fire_song
  1270  034F  00F1               	movwf	?_play_song
  1271  0350  3000               	movlw	high _fire_song
  1272  0351  00F2               	movwf	?_play_song+1
  1273  0352  3010               	movlw	16
  1274  0353  00F9               	movwf	??_handle_fire
  1275  0354  0879               	movf	??_handle_fire,w
  1276  0355  00F3               	movwf	?_play_song+2
  1277  0356  30B8               	movlw	184
  1278  0357  00F4               	movwf	?_play_song+3
  1279  0358  300B               	movlw	11
  1280  0359  00F5               	movwf	?_play_song+4
  1281  035A  3002               	movlw	2
  1282  035B  3E5A               	addlw	_config& (0+255)
  1283  035C  0086               	movwf	6
  1284  035D  0187               	clrf	7
  1285  035E  0016               	moviw fsr1++
  1286  035F  0401               	iorwf	1,w
  1287  0360  3000               	movlw	0
  1288  0361  1903               	skipnz
  1289  0362  3001               	movlw	1
  1290  0363  00FA               	movwf	??_handle_fire+1
  1291  0364  087A               	movf	??_handle_fire+1,w
  1292  0365  00F6               	movwf	?_play_song+5
  1293  0366  25B5               	fcall	_play_song
  1294  0367                     l2395:	
  1295                           
  1296                           ;user.c: 246: }
  1297                           ;user.c: 247: Send_Byte(config.id);
  1298  0367  0020               	movlb	0	; select bank0
  1299  0368  085A               	movf	_config,w
  1300  0369  268A               	fcall	_Send_Byte
  1301                           
  1302                           ;user.c: 248: counter++;
  1303  036A  3001               	movlw	1
  1304  036B  0020               	movlb	0	; select bank0
  1305  036C  07D0               	addwf	handle_fire@counter,f
  1306  036D  3000               	movlw	0
  1307  036E  3DD1               	addwfc	handle_fire@counter+1,f
  1308                           
  1309                           ;user.c: 249: }
  1310  036F  0008               	return
  1311  0370                     l2399:	
  1312                           
  1313                           ;user.c: 250: else
  1314                           ;user.c: 251: {
  1315                           ;user.c: 252: led_off();
  1316  0370  26D9               	fcall	_led_off
  1317                           
  1318                           ;user.c: 253: }
  1319                           ;user.c: 254: }
  1320                           ;user.c: 255: }
  1321  0371  0008               	return
  1322  0372                     l2401:	
  1323                           
  1324                           ;user.c: 256: else
  1325                           ;user.c: 257: {
  1326                           ;user.c: 258: led_off();
  1327  0372  26D9               	fcall	_led_off
  1328                           
  1329                           ;user.c: 259: if(!config.power && counter) stop_song();
  1330  0373  0020               	movlb	0	; select bank0
  1331  0374  085D               	movf	_config+3,w
  1332  0375  045C               	iorwf	_config+2,w
  1333  0376  1D03               	skipz
  1334  0377  2B7D               	goto	l2409
  1335  0378  0851               	movf	handle_fire@counter+1,w
  1336  0379  0450               	iorwf	handle_fire@counter,w
  1337  037A  1903               	skipnz
  1338  037B  2B7D               	goto	l2409
  1339  037C  26D0               	fcall	_stop_song
  1340  037D                     l2409:	
  1341                           
  1342                           ;user.c: 260: timer = 0;
  1343  037D  0020               	movlb	0	; select bank0
  1344  037E  01D2               	clrf	handle_fire@timer
  1345  037F  01D3               	clrf	handle_fire@timer+1
  1346                           
  1347                           ;user.c: 261: counter = 0;
  1348  0380  01D0               	clrf	handle_fire@counter
  1349  0381  01D1               	clrf	handle_fire@counter+1
  1350                           
  1351                           ;user.c: 262: return 0;
  1352                           ;	Return value of _handle_fire is never used
  1353  0382  0008               	return
  1354  0383                     __end_of_handle_fire:	
  1355                           ;user.c: 263: }
  1356                           ;user.c: 264: return 1;
  1357                           ;	Return value of _handle_fire is never used
  1358                           
  1359                           
  1360                           	psect	text2
  1361  06C6                     __ptext2:	
  1362 ;; *************** function _green_led_on *****************
  1363 ;; Defined at:
  1364 ;;		line 75 in file "user.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;		None               void
  1371 ;; Registers used:
  1372 ;;		None
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1378 ;;      Params:         0       0       0       0
  1379 ;;      Locals:         0       0       0       0
  1380 ;;      Temps:          0       0       0       0
  1381 ;;      Totals:         0       0       0       0
  1382 ;;Total ram usage:        0 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_handle_fire
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           
  1393                           ;psect for function _green_led_on
  1394  06C6                     _green_led_on:	
  1395                           
  1396                           ;user.c: 76: TRISAbits.TRISA5 = 0;
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _green_led_on: []
  1400  06C6  0021               	movlb	1	; select bank1
  1401  06C7  128C               	bcf	12,5	;volatile
  1402                           
  1403                           ;user.c: 77: PORTAbits.RA5 = 1;
  1404  06C8  0020               	movlb	0	; select bank0
  1405  06C9  168C               	bsf	12,5	;volatile
  1406  06CA  0008               	return
  1407  06CB                     __end_of_green_led_on:	
  1408                           
  1409                           	psect	text3
  1410  0639                     __ptext3:	
  1411 ;; *************** function _ADC_read *****************
  1412 ;; Defined at:
  1413 ;;		line 59 in file "user.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  2    1[COMMON] unsigned int 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1427 ;;      Params:         2       0       0       0
  1428 ;;      Locals:         0       0       0       0
  1429 ;;      Temps:          2       0       0       0
  1430 ;;      Totals:         4       0       0       0
  1431 ;;Total ram usage:        4 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    1
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_handle_fire
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _ADC_read
  1443  0639                     _ADC_read:	
  1444                           
  1445                           ;user.c: 60: ADCON0bits.CHS = 3;
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1449  0639  0021               	movlb	1	; select bank1
  1450  063A  081D               	movf	29,w	;volatile
  1451  063B  3983               	andlw	-125
  1452  063C  380C               	iorlw	12
  1453  063D  009D               	movwf	29	;volatile
  1454                           
  1455                           ;user.c: 61: ADCON0bits.ADON = 1;
  1456  063E  141D               	bsf	29,0	;volatile
  1457                           
  1458                           ;user.c: 62: _delay((unsigned long)((6)*(16000000/4000000.0)));
  1459  063F  3007               	movlw	7
  1460  0640  00F3               	movwf	??_ADC_read
  1461  0641                     u3807:	
  1462  0641  0BF3               	decfsz	??_ADC_read,f
  1463  0642  2E41               	goto	u3807
  1464  0643  2E44               	nop2	;nop
  1465                           
  1466                           ;user.c: 63: ADCON0bits.GO = 1;
  1467  0644  0021               	movlb	1	; select bank1
  1468  0645  149D               	bsf	29,1	;volatile
  1469  0646                     l124:	
  1470                           ;user.c: 64: while(ADCON0bits.GO){};
  1471                           
  1472  0646  189D               	btfsc	29,1	;volatile
  1473  0647  2E46               	goto	l124
  1474                           
  1475                           ;user.c: 65: return ADRES >> 6;
  1476  0648  081C               	movf	28,w	;volatile
  1477  0649  00F4               	movwf	??_ADC_read+1
  1478  064A  081B               	movf	27,w	;volatile
  1479  064B  00F3               	movwf	??_ADC_read
  1480  064C  3006               	movlw	6
  1481  064D                     u2745:	
  1482  064D  36F4               	lsrf	??_ADC_read+1,f
  1483  064E  0CF3               	rrf	??_ADC_read,f
  1484  064F  0B89               	decfsz	9,f
  1485  0650  2E4D               	goto	u2745
  1486  0651  0873               	movf	??_ADC_read,w
  1487  0652  00F1               	movwf	?_ADC_read
  1488  0653  0874               	movf	??_ADC_read+1,w
  1489  0654  00F2               	movwf	?_ADC_read+1
  1490  0655  0008               	return
  1491  0656                     __end_of_ADC_read:	
  1492                           
  1493                           	psect	text4
  1494  04C6                     __ptext4:	
  1495 ;; *************** function _handle_serial *****************
  1496 ;; Defined at:
  1497 ;;		line 127 in file "protocol.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  b               1   11[COMMON] unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      unsigned char 
  1504 ;; Registers used:
  1505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1511 ;;      Params:         0       0       0       0
  1512 ;;      Locals:         1       0       0       0
  1513 ;;      Temps:          0       2       0       0
  1514 ;;      Totals:         1       2       0       0
  1515 ;;Total ram usage:        3 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    6
  1518 ;; This function calls:
  1519 ;;		_hit_by
  1520 ;;		_control_transfer
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           
  1527                           ;psect for function _handle_serial
  1528  04C6                     _handle_serial:	
  1529                           
  1530                           ;protocol.c: 128: static uint8_t rx_id=0;
  1531                           ;protocol.c: 129: static uint8_t rx_counter=0;
  1532                           ;protocol.c: 130: uint8_t b;
  1533                           ;protocol.c: 132: if(!(PIR1bits.RCIF)) return 0;
  1534                           
  1535                           ;incstack = 0
  1536                           ; Regs used in _handle_serial: [allreg]
  1537  04C6  0020               	movlb	0	; select bank0
  1538  04C7  1E91               	btfss	17,5	;volatile
  1539  04C8  0008               	return
  1540                           
  1541                           ;protocol.c: 133: b=(RCREG);
  1542                           
  1543                           ;	Return value of _handle_serial is never used
  1544  04C9  0023               	movlb	3	; select bank3
  1545  04CA  0819               	movf	25,w	;volatile
  1546  04CB  0020               	movlb	0	; select bank0
  1547  04CC  00C8               	movwf	??_handle_serial
  1548  04CD  0848               	movf	??_handle_serial,w
  1549  04CE  00FB               	movwf	handle_serial@b
  1550                           
  1551                           ;protocol.c: 134: if(b == 0x10) {
  1552  04CF  087B               	movf	handle_serial@b,w
  1553  04D0  3A10               	xorlw	16
  1554  04D1  1D03               	skipz
  1555  04D2  2CD5               	goto	l2355
  1556                           
  1557                           ;protocol.c: 135: control_transfer();
  1558  04D3  2039               	fcall	_control_transfer
  1559                           
  1560                           ;protocol.c: 136: }
  1561  04D4  0008               	return
  1562  04D5                     l2355:	
  1563                           
  1564                           ;protocol.c: 137: else if((b > 0x80) && (b != config.id)) {
  1565  04D5  3081               	movlw	129
  1566  04D6  027B               	subwf	handle_serial@b,w
  1567  04D7  1C03               	skipc
  1568  04D8  0008               	return
  1569  04D9  087B               	movf	handle_serial@b,w
  1570  04DA  0020               	movlb	0	; select bank0
  1571  04DB  00C8               	movwf	??_handle_serial
  1572  04DC  01C9               	clrf	??_handle_serial+1
  1573  04DD  085B               	movf	_config+1,w
  1574  04DE  0649               	xorwf	??_handle_serial+1,w
  1575  04DF  1D03               	skipz
  1576  04E0  2CE3               	goto	u2595
  1577  04E1  085A               	movf	_config,w
  1578  04E2  0648               	xorwf	??_handle_serial,w
  1579  04E3                     u2595:	
  1580  04E3  1903               	skipnz
  1581  04E4  0008               	return
  1582                           
  1583                           ;protocol.c: 138: if(b != rx_id) rx_counter=0;
  1584  04E5  087B               	movf	handle_serial@b,w
  1585  04E6  0659               	xorwf	handle_serial@rx_id,w
  1586  04E7  1D03               	btfss	3,2
  1587  04E8  01D8               	clrf	handle_serial@rx_counter
  1588                           
  1589                           ;protocol.c: 139: rx_id = b;
  1590  04E9  087B               	movf	handle_serial@b,w
  1591  04EA  00C8               	movwf	??_handle_serial
  1592  04EB  0848               	movf	??_handle_serial,w
  1593  04EC  00D9               	movwf	handle_serial@rx_id
  1594                           
  1595                           ;protocol.c: 140: rx_counter++;
  1596  04ED  3001               	movlw	1
  1597  04EE  00C8               	movwf	??_handle_serial
  1598  04EF  0848               	movf	??_handle_serial,w
  1599  04F0  07D8               	addwf	handle_serial@rx_counter,f
  1600                           
  1601                           ;protocol.c: 141: if(rx_counter > config.shield) {
  1602  04F1  0858               	movf	handle_serial@rx_counter,w
  1603  04F2  00C8               	movwf	??_handle_serial
  1604  04F3  01C9               	clrf	??_handle_serial+1
  1605  04F4  0849               	movf	??_handle_serial+1,w
  1606  04F5  0261               	subwf	_config+7,w
  1607  04F6  1D03               	skipz
  1608  04F7  2CFA               	goto	u2615
  1609  04F8  0848               	movf	??_handle_serial,w
  1610  04F9  0260               	subwf	_config+6,w
  1611  04FA                     u2615:	
  1612  04FA  1803               	skipnc
  1613  04FB  0008               	return
  1614                           
  1615                           ;protocol.c: 142: hit_by(b);
  1616  04FC  087B               	movf	handle_serial@b,w
  1617  04FD  2383               	fcall	_hit_by
  1618                           
  1619                           ;protocol.c: 143: rx_id = 0;
  1620  04FE  0020               	movlb	0	; select bank0
  1621  04FF  01D9               	clrf	handle_serial@rx_id
  1622  0500  0008               	return
  1623  0501                     __end_of_handle_serial:	
  1624                           ;protocol.c: 144: }
  1625                           ;protocol.c: 145: }
  1626                           ;protocol.c: 146: return 1;
  1627                           ;	Return value of _handle_serial is never used
  1628                           
  1629                           
  1630                           	psect	text5
  1631  0039                     __ptext5:	
  1632 ;; *************** function _control_transfer *****************
  1633 ;; Defined at:
  1634 ;;		line 44 in file "protocol.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  data           32    0[BANK0 ] unsigned int [16]
  1639 ;;  page            2   37[BANK0 ] unsigned int 
  1640 ;;  x               1   39[BANK0 ] unsigned char 
  1641 ;;  i               1   36[BANK0 ] unsigned char 
  1642 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1643 ;;		 -> control_transfer@data(32), 
  1644 ;;  id              1   34[BANK0 ] unsigned char 
  1645 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1646 ;;  cmd             1   32[BANK0 ] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1656 ;;      Params:         0       0       0       0
  1657 ;;      Locals:         0      40       0       0
  1658 ;;      Temps:          2       0       0       0
  1659 ;;      Totals:         2      40       0       0
  1660 ;;Total ram usage:       42 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    5
  1663 ;; This function calls:
  1664 ;;		_Load
  1665 ;;		_Save
  1666 ;;		_GET_CHAR_HELPER
  1667 ;;		_SEND_DATA_BYTE
  1668 ;;		_SEND_SOF
  1669 ;;		_SEND_EOF
  1670 ;; This function is called by:
  1671 ;;		_handle_serial
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function _control_transfer
  1677  0039                     _control_transfer:	
  1678                           
  1679                           ;protocol.c: 45: uint8_t i;
  1680                           ;protocol.c: 46: uint8_t cmd;
  1681                           ;protocol.c: 47: uint8_t random_number,id;
  1682                           ;protocol.c: 49: uint16_t page;
  1683                           ;protocol.c: 50: uint16_t data[16];
  1684                           ;protocol.c: 51: uint8_t* dptr;
  1685                           ;protocol.c: 52: uint8_t x;
  1686                           ;protocol.c: 54: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != config.id) goto err;
  1687                           
  1688                           ;incstack = 0
  1689                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1690  0039  0020               	movlb	0	; select bank0
  1691  003A  01D4               	clrf	__checksum
  1692  003B  306A               	movlw	__x& (0+255)
  1693  003C  2656               	fcall	_GET_CHAR_HELPER
  1694  003D  3A00               	xorlw	0
  1695  003E  1D03               	btfss	3,2
  1696  003F  0008               	return
  1697  0040  306B               	movlw	__y& (0+255)
  1698  0041  2656               	fcall	_GET_CHAR_HELPER
  1699  0042  3A00               	xorlw	0
  1700  0043  1D03               	btfss	3,2
  1701  0044  0008               	return
  1702  0045  0020               	movlb	0	; select bank0
  1703  0046  086A               	movf	__x,w
  1704  0047  39F0               	andlw	240
  1705  0048  1D03               	btfss	3,2
  1706  0049  0008               	return
  1707  004A  086B               	movf	__y,w
  1708  004B  39F0               	andlw	240
  1709  004C  1D03               	btfss	3,2
  1710  004D  0008               	return
  1711  004E  086B               	movf	__y,w
  1712  004F  00F7               	movwf	??_control_transfer
  1713  0050  3003               	movlw	3
  1714  0051                     u3015:	
  1715  0051  35F7               	lslf	??_control_transfer,f
  1716  0052  3EFF               	addlw	-1
  1717  0053  1D03               	skipz
  1718  0054  2851               	goto	u3015
  1719  0055  3577               	lslf	??_control_transfer,w
  1720  0056  046A               	iorwf	__x,w
  1721  0057  00F8               	movwf	??_control_transfer+1
  1722  0058  0878               	movf	??_control_transfer+1,w
  1723  0059  00EA               	movwf	__x
  1724  005A  086A               	movf	__x,w
  1725  005B  00F7               	movwf	??_control_transfer
  1726  005C  0877               	movf	??_control_transfer,w
  1727  005D  07D4               	addwf	__checksum,f
  1728  005E  086A               	movf	__x,w
  1729  005F  00F7               	movwf	??_control_transfer
  1730  0060  01F8               	clrf	??_control_transfer+1
  1731  0061  085B               	movf	_config+1,w
  1732  0062  0678               	xorwf	??_control_transfer+1,w
  1733  0063  1D03               	skipz
  1734  0064  2867               	goto	u3025
  1735  0065  085A               	movf	_config,w
  1736  0066  0677               	xorwf	??_control_transfer,w
  1737  0067                     u3025:	
  1738  0067  1D03               	btfss	3,2
  1739  0068  0008               	return
  1740                           
  1741                           ;protocol.c: 55: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd;
  1742  0069  306A               	movlw	__x& (0+255)
  1743  006A  2656               	fcall	_GET_CHAR_HELPER
  1744  006B  3A00               	xorlw	0
  1745  006C  1D03               	btfss	3,2
  1746  006D  0008               	return
  1747  006E  306B               	movlw	__y& (0+255)
  1748  006F  2656               	fcall	_GET_CHAR_HELPER
  1749  0070  3A00               	xorlw	0
  1750  0071  1D03               	btfss	3,2
  1751  0072  0008               	return
  1752  0073  0020               	movlb	0	; select bank0
  1753  0074  086A               	movf	__x,w
  1754  0075  39F0               	andlw	240
  1755  0076  1D03               	btfss	3,2
  1756  0077  0008               	return
  1757  0078  086B               	movf	__y,w
  1758  0079  39F0               	andlw	240
  1759  007A  1D03               	btfss	3,2
  1760  007B  0008               	return
  1761  007C  086B               	movf	__y,w
  1762  007D  00F7               	movwf	??_control_transfer
  1763  007E  3003               	movlw	3
  1764  007F                     u3075:	
  1765  007F  35F7               	lslf	??_control_transfer,f
  1766  0080  3EFF               	addlw	-1
  1767  0081  1D03               	skipz
  1768  0082  287F               	goto	u3075
  1769  0083  3577               	lslf	??_control_transfer,w
  1770  0084  046A               	iorwf	__x,w
  1771  0085  00F8               	movwf	??_control_transfer+1
  1772  0086  0878               	movf	??_control_transfer+1,w
  1773  0087  00C0               	movwf	control_transfer@cmd
  1774  0088  0840               	movf	control_transfer@cmd,w
  1775  0089  00F7               	movwf	??_control_transfer
  1776  008A  0877               	movf	??_control_transfer,w
  1777  008B  07D4               	addwf	__checksum,f
  1778                           
  1779                           ;protocol.c: 57: switch(cmd)
  1780  008C  2B03               	goto	l3017
  1781  008D                     l2741:	
  1782                           ;protocol.c: 58: {
  1783                           ;protocol.c: 59: case 0x01:
  1784                           
  1785                           
  1786                           ;protocol.c: 60: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1787  008D  306A               	movlw	__x& (0+255)
  1788  008E  2656               	fcall	_GET_CHAR_HELPER
  1789  008F  3A00               	xorlw	0
  1790  0090  1D03               	btfss	3,2
  1791  0091  0008               	return
  1792  0092  306B               	movlw	__y& (0+255)
  1793  0093  2656               	fcall	_GET_CHAR_HELPER
  1794  0094  3A00               	xorlw	0
  1795  0095  1D03               	btfss	3,2
  1796  0096  0008               	return
  1797  0097  0020               	movlb	0	; select bank0
  1798  0098  086A               	movf	__x,w
  1799  0099  39F0               	andlw	240
  1800  009A  1D03               	btfss	3,2
  1801  009B  0008               	return
  1802  009C  086B               	movf	__y,w
  1803  009D  39F0               	andlw	240
  1804  009E  1D03               	btfss	3,2
  1805  009F  0008               	return
  1806  00A0  086B               	movf	__y,w
  1807  00A1  00F7               	movwf	??_control_transfer
  1808  00A2  3003               	movlw	3
  1809  00A3                     u3125:	
  1810  00A3  35F7               	lslf	??_control_transfer,f
  1811  00A4  3EFF               	addlw	-1
  1812  00A5  1D03               	skipz
  1813  00A6  28A3               	goto	u3125
  1814  00A7  3577               	lslf	??_control_transfer,w
  1815  00A8  046A               	iorwf	__x,w
  1816  00A9  00F8               	movwf	??_control_transfer+1
  1817  00AA  0878               	movf	??_control_transfer+1,w
  1818  00AB  00EA               	movwf	__x
  1819  00AC  086A               	movf	__x,w
  1820  00AD  00F7               	movwf	??_control_transfer
  1821  00AE  0877               	movf	??_control_transfer,w
  1822  00AF  07D4               	addwf	__checksum,f
  1823  00B0  0854               	movf	__checksum,w
  1824  00B1  1D03               	skipz
  1825  00B2  0008               	return
  1826  00B3  306A               	movlw	__x& (0+255)
  1827  00B4  2656               	fcall	_GET_CHAR_HELPER
  1828  00B5  3A00               	xorlw	0
  1829  00B6  1D03               	btfss	3,2
  1830  00B7  0008               	return
  1831  00B8  0020               	movlb	0	; select bank0
  1832  00B9  086A               	movf	__x,w
  1833  00BA  3A11               	xorlw	17
  1834  00BB  1D03               	btfss	3,2
  1835  00BC  0008               	return
  1836                           
  1837                           ;protocol.c: 61: SEND_SOF();
  1838  00BD  2698               	fcall	_SEND_SOF
  1839                           
  1840                           ;protocol.c: 62: SEND_DATA_BYTE(0x02);
  1841  00BE  3002               	movlw	2
  1842  00BF  25D9               	fcall	_SEND_DATA_BYTE
  1843                           
  1844                           ;protocol.c: 63: SEND_DATA_BYTE(my_random_number);
  1845  00C0  0020               	movlb	0	; select bank0
  1846  00C1  0857               	movf	_my_random_number,w
  1847  00C2  25D9               	fcall	_SEND_DATA_BYTE
  1848                           
  1849                           ;protocol.c: 64: SEND_EOF();
  1850  00C3  26A3               	fcall	_SEND_EOF
  1851                           
  1852                           ;protocol.c: 65: break;
  1853  00C4  0008               	return
  1854  00C5                     l2769:	
  1855                           ;protocol.c: 66: case 0x03:
  1856                           
  1857                           
  1858                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  1859  00C5  306A               	movlw	__x& (0+255)
  1860  00C6  2656               	fcall	_GET_CHAR_HELPER
  1861  00C7  3A00               	xorlw	0
  1862  00C8  1D03               	btfss	3,2
  1863  00C9  0008               	return
  1864  00CA  306B               	movlw	__y& (0+255)
  1865  00CB  2656               	fcall	_GET_CHAR_HELPER
  1866  00CC  3A00               	xorlw	0
  1867  00CD  1D03               	btfss	3,2
  1868  00CE  0008               	return
  1869  00CF  0020               	movlb	0	; select bank0
  1870  00D0  086A               	movf	__x,w
  1871  00D1  39F0               	andlw	240
  1872  00D2  1D03               	btfss	3,2
  1873  00D3  0008               	return
  1874  00D4  086B               	movf	__y,w
  1875  00D5  39F0               	andlw	240
  1876  00D6  1D03               	btfss	3,2
  1877  00D7  0008               	return
  1878  00D8  086B               	movf	__y,w
  1879  00D9  00F7               	movwf	??_control_transfer
  1880  00DA  3003               	movlw	3
  1881  00DB                     u3205:	
  1882  00DB  35F7               	lslf	??_control_transfer,f
  1883  00DC  3EFF               	addlw	-1
  1884  00DD  1D03               	skipz
  1885  00DE  28DB               	goto	u3205
  1886  00DF  3577               	lslf	??_control_transfer,w
  1887  00E0  046A               	iorwf	__x,w
  1888  00E1  00F8               	movwf	??_control_transfer+1
  1889  00E2  0878               	movf	??_control_transfer+1,w
  1890  00E3  00C1               	movwf	control_transfer@random_number
  1891  00E4  0841               	movf	control_transfer@random_number,w
  1892  00E5  00F7               	movwf	??_control_transfer
  1893  00E6  0877               	movf	??_control_transfer,w
  1894  00E7  07D4               	addwf	__checksum,f
  1895                           
  1896                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  1897  00E8  306A               	movlw	__x& (0+255)
  1898  00E9  2656               	fcall	_GET_CHAR_HELPER
  1899  00EA  3A00               	xorlw	0
  1900  00EB  1D03               	btfss	3,2
  1901  00EC  0008               	return
  1902  00ED  306B               	movlw	__y& (0+255)
  1903  00EE  2656               	fcall	_GET_CHAR_HELPER
  1904  00EF  3A00               	xorlw	0
  1905  00F0  1D03               	btfss	3,2
  1906  00F1  0008               	return
  1907  00F2  0020               	movlb	0	; select bank0
  1908  00F3  086A               	movf	__x,w
  1909  00F4  39F0               	andlw	240
  1910  00F5  1D03               	btfss	3,2
  1911  00F6  0008               	return
  1912  00F7  086B               	movf	__y,w
  1913  00F8  39F0               	andlw	240
  1914  00F9  1D03               	btfss	3,2
  1915  00FA  0008               	return
  1916  00FB  086B               	movf	__y,w
  1917  00FC  00F7               	movwf	??_control_transfer
  1918  00FD  3003               	movlw	3
  1919  00FE                     u3255:	
  1920  00FE  35F7               	lslf	??_control_transfer,f
  1921  00FF  3EFF               	addlw	-1
  1922  0100  1D03               	skipz
  1923  0101  28FE               	goto	u3255
  1924  0102  3577               	lslf	??_control_transfer,w
  1925  0103  046A               	iorwf	__x,w
  1926  0104  00F8               	movwf	??_control_transfer+1
  1927  0105  0878               	movf	??_control_transfer+1,w
  1928  0106  00C2               	movwf	control_transfer@id
  1929  0107  0842               	movf	control_transfer@id,w
  1930  0108  00F7               	movwf	??_control_transfer
  1931  0109  0877               	movf	??_control_transfer,w
  1932  010A  07D4               	addwf	__checksum,f
  1933                           
  1934                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1935  010B  306A               	movlw	__x& (0+255)
  1936  010C  2656               	fcall	_GET_CHAR_HELPER
  1937  010D  3A00               	xorlw	0
  1938  010E  1D03               	btfss	3,2
  1939  010F  0008               	return
  1940  0110  306B               	movlw	__y& (0+255)
  1941  0111  2656               	fcall	_GET_CHAR_HELPER
  1942  0112  3A00               	xorlw	0
  1943  0113  1D03               	btfss	3,2
  1944  0114  0008               	return
  1945  0115  0020               	movlb	0	; select bank0
  1946  0116  086A               	movf	__x,w
  1947  0117  39F0               	andlw	240
  1948  0118  1D03               	btfss	3,2
  1949  0119  0008               	return
  1950  011A  086B               	movf	__y,w
  1951  011B  39F0               	andlw	240
  1952  011C  1D03               	btfss	3,2
  1953  011D  0008               	return
  1954  011E  086B               	movf	__y,w
  1955  011F  00F7               	movwf	??_control_transfer
  1956  0120  3003               	movlw	3
  1957  0121                     u3305:	
  1958  0121  35F7               	lslf	??_control_transfer,f
  1959  0122  3EFF               	addlw	-1
  1960  0123  1D03               	skipz
  1961  0124  2921               	goto	u3305
  1962  0125  3577               	lslf	??_control_transfer,w
  1963  0126  046A               	iorwf	__x,w
  1964  0127  00F8               	movwf	??_control_transfer+1
  1965  0128  0878               	movf	??_control_transfer+1,w
  1966  0129  00EA               	movwf	__x
  1967  012A  086A               	movf	__x,w
  1968  012B  00F7               	movwf	??_control_transfer
  1969  012C  0877               	movf	??_control_transfer,w
  1970  012D  07D4               	addwf	__checksum,f
  1971  012E  0854               	movf	__checksum,w
  1972  012F  1D03               	skipz
  1973  0130  0008               	return
  1974  0131  306A               	movlw	__x& (0+255)
  1975  0132  2656               	fcall	_GET_CHAR_HELPER
  1976  0133  3A00               	xorlw	0
  1977  0134  1D03               	btfss	3,2
  1978  0135  0008               	return
  1979  0136  0020               	movlb	0	; select bank0
  1980  0137  086A               	movf	__x,w
  1981  0138  3A11               	xorlw	17
  1982  0139  1D03               	btfss	3,2
  1983  013A  0008               	return
  1984                           
  1985                           ;protocol.c: 70: if(random_number != my_random_number) goto err;
  1986  013B  0841               	movf	control_transfer@random_number,w
  1987  013C  0657               	xorwf	_my_random_number,w
  1988  013D  1D03               	btfss	3,2
  1989  013E  0008               	return
  1990                           
  1991                           ;protocol.c: 71: SEND_SOF();
  1992  013F  2698               	fcall	_SEND_SOF
  1993                           
  1994                           ;protocol.c: 72: SEND_DATA_BYTE(0x00);
  1995  0140  3000               	movlw	0
  1996  0141  25D9               	fcall	_SEND_DATA_BYTE
  1997                           
  1998                           ;protocol.c: 73: SEND_EOF();
  1999  0142  26A3               	fcall	_SEND_EOF
  2000                           
  2001                           ;protocol.c: 74: config.id=id;
  2002  0143  0020               	movlb	0	; select bank0
  2003  0144  0842               	movf	control_transfer@id,w
  2004  0145  00F7               	movwf	??_control_transfer
  2005  0146  01F8               	clrf	??_control_transfer+1
  2006  0147  0877               	movf	??_control_transfer,w
  2007  0148  00DA               	movwf	_config
  2008  0149  0878               	movf	??_control_transfer+1,w
  2009  014A  00DB               	movwf	_config+1
  2010                           
  2011                           ;protocol.c: 75: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2012  014B  30D0               	movlw	208
  2013  014C  00F1               	movwf	?_Save
  2014  014D  3007               	movlw	7
  2015  014E  00F2               	movwf	?_Save+1
  2016  014F  305A               	movlw	_config& (0+255)
  2017  0150  00F7               	movwf	??_control_transfer
  2018  0151  0877               	movf	??_control_transfer,w
  2019  0152  00F3               	movwf	?_Save+2
  2020  0153  3008               	movlw	8
  2021  0154  00F8               	movwf	??_control_transfer+1
  2022  0155  0878               	movf	??_control_transfer+1,w
  2023  0156  00F4               	movwf	?_Save+3
  2024  0157  243F               	fcall	_Save
  2025                           
  2026                           ;protocol.c: 76: break;
  2027  0158  0008               	return
  2028  0159                     l2833:	
  2029                           ;protocol.c: 77: case 0x04:
  2030                           
  2031                           
  2032                           ;protocol.c: 78: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2033  0159  306A               	movlw	__x& (0+255)
  2034  015A  2656               	fcall	_GET_CHAR_HELPER
  2035  015B  3A00               	xorlw	0
  2036  015C  1D03               	btfss	3,2
  2037  015D  0008               	return
  2038  015E  306B               	movlw	__y& (0+255)
  2039  015F  2656               	fcall	_GET_CHAR_HELPER
  2040  0160  3A00               	xorlw	0
  2041  0161  1D03               	btfss	3,2
  2042  0162  0008               	return
  2043  0163  0020               	movlb	0	; select bank0
  2044  0164  086A               	movf	__x,w
  2045  0165  39F0               	andlw	240
  2046  0166  1D03               	btfss	3,2
  2047  0167  0008               	return
  2048  0168  086B               	movf	__y,w
  2049  0169  39F0               	andlw	240
  2050  016A  1D03               	btfss	3,2
  2051  016B  0008               	return
  2052  016C  086B               	movf	__y,w
  2053  016D  00F7               	movwf	??_control_transfer
  2054  016E  3003               	movlw	3
  2055  016F                     u3395:	
  2056  016F  35F7               	lslf	??_control_transfer,f
  2057  0170  3EFF               	addlw	-1
  2058  0171  1D03               	skipz
  2059  0172  296F               	goto	u3395
  2060  0173  3577               	lslf	??_control_transfer,w
  2061  0174  046A               	iorwf	__x,w
  2062  0175  00F8               	movwf	??_control_transfer+1
  2063  0176  0878               	movf	??_control_transfer+1,w
  2064  0177  00C7               	movwf	control_transfer@x
  2065  0178  0847               	movf	control_transfer@x,w
  2066  0179  00F7               	movwf	??_control_transfer
  2067  017A  0877               	movf	??_control_transfer,w
  2068  017B  07D4               	addwf	__checksum,f
  2069                           
  2070                           ;protocol.c: 79: *((uint8_t*)(&page))=x;
  2071  017C  0847               	movf	control_transfer@x,w
  2072  017D  00F7               	movwf	??_control_transfer
  2073  017E  0877               	movf	??_control_transfer,w
  2074  017F  00C5               	movwf	control_transfer@page
  2075                           
  2076                           ;protocol.c: 80: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2077  0180  306A               	movlw	__x& (0+255)
  2078  0181  2656               	fcall	_GET_CHAR_HELPER
  2079  0182  3A00               	xorlw	0
  2080  0183  1D03               	btfss	3,2
  2081  0184  0008               	return
  2082  0185  306B               	movlw	__y& (0+255)
  2083  0186  2656               	fcall	_GET_CHAR_HELPER
  2084  0187  3A00               	xorlw	0
  2085  0188  1D03               	btfss	3,2
  2086  0189  0008               	return
  2087  018A  0020               	movlb	0	; select bank0
  2088  018B  086A               	movf	__x,w
  2089  018C  39F0               	andlw	240
  2090  018D  1D03               	btfss	3,2
  2091  018E  0008               	return
  2092  018F  086B               	movf	__y,w
  2093  0190  39F0               	andlw	240
  2094  0191  1D03               	btfss	3,2
  2095  0192  0008               	return
  2096  0193  086B               	movf	__y,w
  2097  0194  00F7               	movwf	??_control_transfer
  2098  0195  3003               	movlw	3
  2099  0196                     u3445:	
  2100  0196  35F7               	lslf	??_control_transfer,f
  2101  0197  3EFF               	addlw	-1
  2102  0198  1D03               	skipz
  2103  0199  2996               	goto	u3445
  2104  019A  3577               	lslf	??_control_transfer,w
  2105  019B  046A               	iorwf	__x,w
  2106  019C  00F8               	movwf	??_control_transfer+1
  2107  019D  0878               	movf	??_control_transfer+1,w
  2108  019E  00C7               	movwf	control_transfer@x
  2109  019F  0847               	movf	control_transfer@x,w
  2110  01A0  00F7               	movwf	??_control_transfer
  2111  01A1  0877               	movf	??_control_transfer,w
  2112  01A2  07D4               	addwf	__checksum,f
  2113                           
  2114                           ;protocol.c: 81: *(((uint8_t*)(&page))+1)=x;
  2115  01A3  0847               	movf	control_transfer@x,w
  2116  01A4  00F7               	movwf	??_control_transfer
  2117  01A5  0877               	movf	??_control_transfer,w
  2118  01A6  00C6               	movwf	control_transfer@page+1
  2119                           
  2120                           ;protocol.c: 82: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2121  01A7  306A               	movlw	__x& (0+255)
  2122  01A8  2656               	fcall	_GET_CHAR_HELPER
  2123  01A9  3A00               	xorlw	0
  2124  01AA  1D03               	btfss	3,2
  2125  01AB  0008               	return
  2126  01AC  306B               	movlw	__y& (0+255)
  2127  01AD  2656               	fcall	_GET_CHAR_HELPER
  2128  01AE  3A00               	xorlw	0
  2129  01AF  1D03               	btfss	3,2
  2130  01B0  0008               	return
  2131  01B1  0020               	movlb	0	; select bank0
  2132  01B2  086A               	movf	__x,w
  2133  01B3  39F0               	andlw	240
  2134  01B4  1D03               	btfss	3,2
  2135  01B5  0008               	return
  2136  01B6  086B               	movf	__y,w
  2137  01B7  39F0               	andlw	240
  2138  01B8  1D03               	btfss	3,2
  2139  01B9  0008               	return
  2140  01BA  086B               	movf	__y,w
  2141  01BB  00F7               	movwf	??_control_transfer
  2142  01BC  3003               	movlw	3
  2143  01BD                     u3495:	
  2144  01BD  35F7               	lslf	??_control_transfer,f
  2145  01BE  3EFF               	addlw	-1
  2146  01BF  1D03               	skipz
  2147  01C0  29BD               	goto	u3495
  2148  01C1  3577               	lslf	??_control_transfer,w
  2149  01C2  046A               	iorwf	__x,w
  2150  01C3  00F8               	movwf	??_control_transfer+1
  2151  01C4  0878               	movf	??_control_transfer+1,w
  2152  01C5  00EA               	movwf	__x
  2153  01C6  086A               	movf	__x,w
  2154  01C7  00F7               	movwf	??_control_transfer
  2155  01C8  0877               	movf	??_control_transfer,w
  2156  01C9  07D4               	addwf	__checksum,f
  2157  01CA  0854               	movf	__checksum,w
  2158  01CB  1D03               	skipz
  2159  01CC  0008               	return
  2160  01CD  306A               	movlw	__x& (0+255)
  2161  01CE  2656               	fcall	_GET_CHAR_HELPER
  2162  01CF  3A00               	xorlw	0
  2163  01D0  1D03               	btfss	3,2
  2164  01D1  0008               	return
  2165  01D2  0020               	movlb	0	; select bank0
  2166  01D3  086A               	movf	__x,w
  2167  01D4  3A11               	xorlw	17
  2168  01D5  1D03               	btfss	3,2
  2169  01D6  0008               	return
  2170                           
  2171                           ;protocol.c: 83: Load(page,data,16);
  2172  01D7  0846               	movf	control_transfer@page+1,w
  2173  01D8  01F2               	clrf	?_Load+1
  2174  01D9  07F2               	addwf	?_Load+1,f
  2175  01DA  0845               	movf	control_transfer@page,w
  2176  01DB  01F1               	clrf	?_Load
  2177  01DC  07F1               	addwf	?_Load,f
  2178  01DD  3020               	movlw	control_transfer@data& (0+255)
  2179  01DE  00F7               	movwf	??_control_transfer
  2180  01DF  0877               	movf	??_control_transfer,w
  2181  01E0  00F3               	movwf	?_Load+2
  2182  01E1  3010               	movlw	16
  2183  01E2  00F8               	movwf	??_control_transfer+1
  2184  01E3  0878               	movf	??_control_transfer+1,w
  2185  01E4  00F4               	movwf	?_Load+3
  2186  01E5  2590               	fcall	_Load
  2187                           
  2188                           ;protocol.c: 84: SEND_SOF();
  2189  01E6  2698               	fcall	_SEND_SOF
  2190                           
  2191                           ;protocol.c: 85: SEND_DATA_BYTE(0x05);
  2192  01E7  3005               	movlw	5
  2193  01E8  25D9               	fcall	_SEND_DATA_BYTE
  2194                           
  2195                           ;protocol.c: 86: dptr=(uint8_t*)data;
  2196  01E9  3020               	movlw	control_transfer@data& (0+255)
  2197  01EA  00F7               	movwf	??_control_transfer
  2198  01EB  0877               	movf	??_control_transfer,w
  2199  01EC  0020               	movlb	0	; select bank0
  2200  01ED  00C3               	movwf	control_transfer@dptr
  2201                           
  2202                           ;protocol.c: 87: for(i=0;i<32;i++)
  2203  01EE  01C4               	clrf	control_transfer@i
  2204  01EF  3020               	movlw	32
  2205  01F0  0244               	subwf	control_transfer@i,w
  2206  01F1  1803               	btfsc	3,0
  2207  01F2  2A05               	goto	l2913
  2208  01F3                     l2905:	
  2209                           
  2210                           ;protocol.c: 88: {
  2211                           ;protocol.c: 89: SEND_DATA_BYTE(*dptr++);
  2212  01F3  0843               	movf	control_transfer@dptr,w
  2213  01F4  0086               	movwf	6
  2214  01F5  0187               	clrf	7
  2215  01F6  0801               	movf	1,w
  2216  01F7  25D9               	fcall	_SEND_DATA_BYTE
  2217  01F8  3001               	movlw	1
  2218  01F9  00F7               	movwf	??_control_transfer
  2219  01FA  0877               	movf	??_control_transfer,w
  2220  01FB  0020               	movlb	0	; select bank0
  2221  01FC  07C3               	addwf	control_transfer@dptr,f
  2222  01FD  3001               	movlw	1
  2223  01FE  00F7               	movwf	??_control_transfer
  2224  01FF  0877               	movf	??_control_transfer,w
  2225  0200  07C4               	addwf	control_transfer@i,f
  2226  0201  3020               	movlw	32
  2227  0202  0244               	subwf	control_transfer@i,w
  2228  0203  1C03               	skipc
  2229  0204  29F3               	goto	l2905
  2230  0205                     l2913:	
  2231                           
  2232                           ;protocol.c: 90: }
  2233                           ;protocol.c: 91: SEND_EOF();
  2234  0205  26A3               	fcall	_SEND_EOF
  2235                           
  2236                           ;protocol.c: 92: break;
  2237  0206  0008               	return
  2238  0207                     l2915:	
  2239                           ;protocol.c: 93: case 0x06:
  2240                           
  2241                           
  2242                           ;protocol.c: 94: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2243  0207  306A               	movlw	__x& (0+255)
  2244  0208  2656               	fcall	_GET_CHAR_HELPER
  2245  0209  3A00               	xorlw	0
  2246  020A  1D03               	btfss	3,2
  2247  020B  0008               	return
  2248  020C  306B               	movlw	__y& (0+255)
  2249  020D  2656               	fcall	_GET_CHAR_HELPER
  2250  020E  3A00               	xorlw	0
  2251  020F  1D03               	btfss	3,2
  2252  0210  0008               	return
  2253  0211  0020               	movlb	0	; select bank0
  2254  0212  086A               	movf	__x,w
  2255  0213  39F0               	andlw	240
  2256  0214  1D03               	btfss	3,2
  2257  0215  0008               	return
  2258  0216  086B               	movf	__y,w
  2259  0217  39F0               	andlw	240
  2260  0218  1D03               	btfss	3,2
  2261  0219  0008               	return
  2262  021A  086B               	movf	__y,w
  2263  021B  00F7               	movwf	??_control_transfer
  2264  021C  3003               	movlw	3
  2265  021D                     u3595:	
  2266  021D  35F7               	lslf	??_control_transfer,f
  2267  021E  3EFF               	addlw	-1
  2268  021F  1D03               	skipz
  2269  0220  2A1D               	goto	u3595
  2270  0221  3577               	lslf	??_control_transfer,w
  2271  0222  046A               	iorwf	__x,w
  2272  0223  00F8               	movwf	??_control_transfer+1
  2273  0224  0878               	movf	??_control_transfer+1,w
  2274  0225  00C7               	movwf	control_transfer@x
  2275  0226  0847               	movf	control_transfer@x,w
  2276  0227  00F7               	movwf	??_control_transfer
  2277  0228  0877               	movf	??_control_transfer,w
  2278  0229  07D4               	addwf	__checksum,f
  2279                           
  2280                           ;protocol.c: 95: *((uint8_t*)(&page))=x;
  2281  022A  0847               	movf	control_transfer@x,w
  2282  022B  00F7               	movwf	??_control_transfer
  2283  022C  0877               	movf	??_control_transfer,w
  2284  022D  00C5               	movwf	control_transfer@page
  2285                           
  2286                           ;protocol.c: 96: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2287  022E  306A               	movlw	__x& (0+255)
  2288  022F  2656               	fcall	_GET_CHAR_HELPER
  2289  0230  3A00               	xorlw	0
  2290  0231  1D03               	btfss	3,2
  2291  0232  0008               	return
  2292  0233  306B               	movlw	__y& (0+255)
  2293  0234  2656               	fcall	_GET_CHAR_HELPER
  2294  0235  3A00               	xorlw	0
  2295  0236  1D03               	btfss	3,2
  2296  0237  0008               	return
  2297  0238  0020               	movlb	0	; select bank0
  2298  0239  086A               	movf	__x,w
  2299  023A  39F0               	andlw	240
  2300  023B  1D03               	btfss	3,2
  2301  023C  0008               	return
  2302  023D  086B               	movf	__y,w
  2303  023E  39F0               	andlw	240
  2304  023F  1D03               	btfss	3,2
  2305  0240  0008               	return
  2306  0241  086B               	movf	__y,w
  2307  0242  00F7               	movwf	??_control_transfer
  2308  0243  3003               	movlw	3
  2309  0244                     u3645:	
  2310  0244  35F7               	lslf	??_control_transfer,f
  2311  0245  3EFF               	addlw	-1
  2312  0246  1D03               	skipz
  2313  0247  2A44               	goto	u3645
  2314  0248  3577               	lslf	??_control_transfer,w
  2315  0249  046A               	iorwf	__x,w
  2316  024A  00F8               	movwf	??_control_transfer+1
  2317  024B  0878               	movf	??_control_transfer+1,w
  2318  024C  00C7               	movwf	control_transfer@x
  2319  024D  0847               	movf	control_transfer@x,w
  2320  024E  00F7               	movwf	??_control_transfer
  2321  024F  0877               	movf	??_control_transfer,w
  2322  0250  07D4               	addwf	__checksum,f
  2323                           
  2324                           ;protocol.c: 97: *(((uint8_t*)(&page))+1)=x;
  2325  0251  0847               	movf	control_transfer@x,w
  2326  0252  00F7               	movwf	??_control_transfer
  2327  0253  0877               	movf	??_control_transfer,w
  2328  0254  00C6               	movwf	control_transfer@page+1
  2329                           
  2330                           ;protocol.c: 98: dptr=(uint8_t*)data;
  2331  0255  3020               	movlw	control_transfer@data& (0+255)
  2332  0256  00F7               	movwf	??_control_transfer
  2333  0257  0877               	movf	??_control_transfer,w
  2334  0258  00C3               	movwf	control_transfer@dptr
  2335                           
  2336                           ;protocol.c: 99: for(i=0;i<32;i++)
  2337  0259  01C4               	clrf	control_transfer@i
  2338  025A  3020               	movlw	32
  2339  025B  0244               	subwf	control_transfer@i,w
  2340  025C  1803               	btfsc	3,0
  2341  025D  2A94               	goto	l2977
  2342  025E                     l2955:	
  2343                           
  2344                           ;protocol.c: 100: {
  2345                           ;protocol.c: 101: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2346  025E  306A               	movlw	__x& (0+255)
  2347  025F  2656               	fcall	_GET_CHAR_HELPER
  2348  0260  3A00               	xorlw	0
  2349  0261  1D03               	btfss	3,2
  2350  0262  0008               	return
  2351  0263  306B               	movlw	__y& (0+255)
  2352  0264  2656               	fcall	_GET_CHAR_HELPER
  2353  0265  3A00               	xorlw	0
  2354  0266  1D03               	btfss	3,2
  2355  0267  0008               	return
  2356  0268  0020               	movlb	0	; select bank0
  2357  0269  086A               	movf	__x,w
  2358  026A  39F0               	andlw	240
  2359  026B  1D03               	btfss	3,2
  2360  026C  0008               	return
  2361  026D  086B               	movf	__y,w
  2362  026E  39F0               	andlw	240
  2363  026F  1D03               	btfss	3,2
  2364  0270  0008               	return
  2365  0271  086B               	movf	__y,w
  2366  0272  00F7               	movwf	??_control_transfer
  2367  0273  3003               	movlw	3
  2368  0274                     u3705:	
  2369  0274  35F7               	lslf	??_control_transfer,f
  2370  0275  3EFF               	addlw	-1
  2371  0276  1D03               	skipz
  2372  0277  2A74               	goto	u3705
  2373  0278  3577               	lslf	??_control_transfer,w
  2374  0279  046A               	iorwf	__x,w
  2375  027A  00F8               	movwf	??_control_transfer+1
  2376  027B  0878               	movf	??_control_transfer+1,w
  2377  027C  00C7               	movwf	control_transfer@x
  2378  027D  0847               	movf	control_transfer@x,w
  2379  027E  00F7               	movwf	??_control_transfer
  2380  027F  0877               	movf	??_control_transfer,w
  2381  0280  07D4               	addwf	__checksum,f
  2382                           
  2383                           ;protocol.c: 102: *dptr++=x;
  2384  0281  0847               	movf	control_transfer@x,w
  2385  0282  00F7               	movwf	??_control_transfer
  2386  0283  0843               	movf	control_transfer@dptr,w
  2387  0284  0086               	movwf	6
  2388  0285  0187               	clrf	7
  2389  0286  0877               	movf	??_control_transfer,w
  2390  0287  0081               	movwf	1
  2391  0288  3001               	movlw	1
  2392  0289  00F7               	movwf	??_control_transfer
  2393  028A  0877               	movf	??_control_transfer,w
  2394  028B  07C3               	addwf	control_transfer@dptr,f
  2395  028C  3001               	movlw	1
  2396  028D  00F7               	movwf	??_control_transfer
  2397  028E  0877               	movf	??_control_transfer,w
  2398  028F  07C4               	addwf	control_transfer@i,f
  2399  0290  3020               	movlw	32
  2400  0291  0244               	subwf	control_transfer@i,w
  2401  0292  1C03               	skipc
  2402  0293  2A5E               	goto	l2955
  2403  0294                     l2977:	
  2404                           
  2405                           ;protocol.c: 103: }
  2406                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2407  0294  306A               	movlw	__x& (0+255)
  2408  0295  2656               	fcall	_GET_CHAR_HELPER
  2409  0296  3A00               	xorlw	0
  2410  0297  1D03               	btfss	3,2
  2411  0298  0008               	return
  2412  0299  306B               	movlw	__y& (0+255)
  2413  029A  2656               	fcall	_GET_CHAR_HELPER
  2414  029B  3A00               	xorlw	0
  2415  029C  1D03               	btfss	3,2
  2416  029D  0008               	return
  2417  029E  0020               	movlb	0	; select bank0
  2418  029F  086A               	movf	__x,w
  2419  02A0  39F0               	andlw	240
  2420  02A1  1D03               	btfss	3,2
  2421  02A2  0008               	return
  2422  02A3  086B               	movf	__y,w
  2423  02A4  39F0               	andlw	240
  2424  02A5  1D03               	btfss	3,2
  2425  02A6  0008               	return
  2426  02A7  086B               	movf	__y,w
  2427  02A8  00F7               	movwf	??_control_transfer
  2428  02A9  3003               	movlw	3
  2429  02AA                     u3765:	
  2430  02AA  35F7               	lslf	??_control_transfer,f
  2431  02AB  3EFF               	addlw	-1
  2432  02AC  1D03               	skipz
  2433  02AD  2AAA               	goto	u3765
  2434  02AE  3577               	lslf	??_control_transfer,w
  2435  02AF  046A               	iorwf	__x,w
  2436  02B0  00F8               	movwf	??_control_transfer+1
  2437  02B1  0878               	movf	??_control_transfer+1,w
  2438  02B2  00EA               	movwf	__x
  2439  02B3  086A               	movf	__x,w
  2440  02B4  00F7               	movwf	??_control_transfer
  2441  02B5  0877               	movf	??_control_transfer,w
  2442  02B6  07D4               	addwf	__checksum,f
  2443  02B7  0854               	movf	__checksum,w
  2444  02B8  1D03               	skipz
  2445  02B9  0008               	return
  2446  02BA  306A               	movlw	__x& (0+255)
  2447  02BB  2656               	fcall	_GET_CHAR_HELPER
  2448  02BC  3A00               	xorlw	0
  2449  02BD  1D03               	btfss	3,2
  2450  02BE  0008               	return
  2451  02BF  0020               	movlb	0	; select bank0
  2452  02C0  086A               	movf	__x,w
  2453  02C1  3A11               	xorlw	17
  2454  02C2  1D03               	btfss	3,2
  2455  02C3  0008               	return
  2456                           
  2457                           ;protocol.c: 105: Save(page,data,16);
  2458  02C4  0846               	movf	control_transfer@page+1,w
  2459  02C5  01F2               	clrf	?_Save+1
  2460  02C6  07F2               	addwf	?_Save+1,f
  2461  02C7  0845               	movf	control_transfer@page,w
  2462  02C8  01F1               	clrf	?_Save
  2463  02C9  07F1               	addwf	?_Save,f
  2464  02CA  3020               	movlw	control_transfer@data& (0+255)
  2465  02CB  00F7               	movwf	??_control_transfer
  2466  02CC  0877               	movf	??_control_transfer,w
  2467  02CD  00F3               	movwf	?_Save+2
  2468  02CE  3010               	movlw	16
  2469  02CF  00F8               	movwf	??_control_transfer+1
  2470  02D0  0878               	movf	??_control_transfer+1,w
  2471  02D1  00F4               	movwf	?_Save+3
  2472  02D2  243F               	fcall	_Save
  2473                           
  2474                           ;protocol.c: 106: switch(page)
  2475  02D3  2AF0               	goto	l3011
  2476  02D4                     l3005:	
  2477                           ;protocol.c: 107: {
  2478                           ;protocol.c: 108: case 0x7D0:
  2479                           
  2480                           
  2481                           ;protocol.c: 109: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2482  02D4  30D0               	movlw	208
  2483  02D5  00F1               	movwf	?_Load
  2484  02D6  3007               	movlw	7
  2485  02D7  00F2               	movwf	?_Load+1
  2486  02D8  305A               	movlw	_config& (0+255)
  2487  02D9  00F7               	movwf	??_control_transfer
  2488  02DA  0877               	movf	??_control_transfer,w
  2489  02DB  00F3               	movwf	?_Load+2
  2490  02DC  3008               	movlw	8
  2491  02DD  00F8               	movwf	??_control_transfer+1
  2492  02DE  0878               	movf	??_control_transfer+1,w
  2493  02DF  00F4               	movwf	?_Load+3
  2494  02E0  2590               	fcall	_Load
  2495                           
  2496                           ;protocol.c: 110: break;
  2497  02E1  2AFE               	goto	l3013
  2498  02E2                     l3007:	
  2499                           ;protocol.c: 111: case 0x7E0:
  2500                           
  2501                           
  2502                           ;protocol.c: 112: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2503  02E2  30E0               	movlw	224
  2504  02E3  00F1               	movwf	?_Load
  2505  02E4  3007               	movlw	7
  2506  02E5  00F2               	movwf	?_Load+1
  2507  02E6  30A0               	movlw	_hitlist& (0+255)
  2508  02E7  00F7               	movwf	??_control_transfer
  2509  02E8  0877               	movf	??_control_transfer,w
  2510  02E9  00F3               	movwf	?_Load+2
  2511  02EA  3010               	movlw	16
  2512  02EB  00F8               	movwf	??_control_transfer+1
  2513  02EC  0878               	movf	??_control_transfer+1,w
  2514  02ED  00F4               	movwf	?_Load+3
  2515  02EE  2590               	fcall	_Load
  2516                           
  2517                           ;protocol.c: 114: }
  2518                           
  2519                           ;protocol.c: 113: break;
  2520  02EF  2AFE               	goto	l3013
  2521  02F0                     l3011:	
  2522                           
  2523                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2524                           ; Switch size 1, requested type "space"
  2525                           ; Number of cases is 1, Range of values is 7 to 7
  2526                           ; switch strategies available:
  2527                           ; Name         Instructions Cycles
  2528                           ; simple_byte            4     3 (average)
  2529                           ; direct_byte           11     9 (fixed)
  2530                           ; jumptable            263     9 (fixed)
  2531                           ;	Chosen strategy is simple_byte
  2532  02F0  0020               	movlb	0	; select bank0
  2533  02F1  0846               	movf	control_transfer@page+1,w
  2534  02F2  3A07               	xorlw	7	; case 7
  2535  02F3  1903               	skipnz
  2536  02F4  2AF6               	goto	l3043
  2537  02F5  2AFE               	goto	l3013
  2538  02F6                     l3043:	
  2539                           
  2540                           ; Switch size 1, requested type "space"
  2541                           ; Number of cases is 2, Range of values is 208 to 224
  2542                           ; switch strategies available:
  2543                           ; Name         Instructions Cycles
  2544                           ; simple_byte            7     4 (average)
  2545                           ; direct_byte           43     9 (fixed)
  2546                           ; jumptable            263     9 (fixed)
  2547                           ;	Chosen strategy is simple_byte
  2548  02F6  0845               	movf	control_transfer@page,w
  2549  02F7  3AD0               	xorlw	208	; case 208
  2550  02F8  1903               	skipnz
  2551  02F9  2AD4               	goto	l3005
  2552  02FA  3A30               	xorlw	48	; case 224
  2553  02FB  1903               	skipnz
  2554  02FC  2AE2               	goto	l3007
  2555  02FD  2AFE               	goto	l3013
  2556  02FE                     l3013:	
  2557                           
  2558                           ;protocol.c: 115: SEND_SOF();
  2559  02FE  2698               	fcall	_SEND_SOF
  2560                           
  2561                           ;protocol.c: 116: SEND_DATA_BYTE(0x00);
  2562  02FF  3000               	movlw	0
  2563  0300  25D9               	fcall	_SEND_DATA_BYTE
  2564                           
  2565                           ;protocol.c: 117: SEND_EOF();
  2566  0301  26A3               	fcall	_SEND_EOF
  2567                           
  2568                           ;protocol.c: 121: }
  2569                           
  2570                           ;protocol.c: 120: goto err;
  2571                           
  2572                           ;protocol.c: 119: default:
  2573                           
  2574                           ;protocol.c: 118: break;
  2575  0302  0008               	return
  2576  0303                     l3017:	
  2577  0303  0020               	movlb	0	; select bank0
  2578  0304  0840               	movf	control_transfer@cmd,w
  2579                           
  2580                           ; Switch size 1, requested type "space"
  2581                           ; Number of cases is 4, Range of values is 1 to 6
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte           13     7 (average)
  2585                           ; direct_byte           21     9 (fixed)
  2586                           ; jumptable            263     9 (fixed)
  2587                           ;	Chosen strategy is simple_byte
  2588  0305  3A01               	xorlw	1	; case 1
  2589  0306  1903               	skipnz
  2590  0307  288D               	goto	l2741
  2591  0308  3A02               	xorlw	2	; case 3
  2592  0309  1903               	skipnz
  2593  030A  28C5               	goto	l2769
  2594  030B  3A07               	xorlw	7	; case 4
  2595  030C  1903               	skipnz
  2596  030D  2959               	goto	l2833
  2597  030E  3A02               	xorlw	2	; case 6
  2598  030F  1903               	skipnz
  2599  0310  2A07               	goto	l2915
  2600  0311  2B13               	goto	l381
  2601  0312  0008               	return
  2602  0313                     l381:	
  2603                           ;protocol.c: 123: return;
  2604                           
  2605                           ;protocol.c: 122: err:
  2606                           
  2607  0313  0008               	return
  2608  0314                     __end_of_control_transfer:	
  2609                           
  2610                           	psect	text6
  2611  06A3                     __ptext6:	
  2612 ;; *************** function _SEND_EOF *****************
  2613 ;; Defined at:
  2614 ;;		line 36 in file "protocol.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;		None               void
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0, pclath, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2628 ;;      Params:         0       0       0       0
  2629 ;;      Locals:         0       0       0       0
  2630 ;;      Temps:          1       0       0       0
  2631 ;;      Totals:         1       0       0       0
  2632 ;;Total ram usage:        1 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    4
  2635 ;; This function calls:
  2636 ;;		_Send_Byte
  2637 ;;		_SEND_DATA_BYTE
  2638 ;; This function is called by:
  2639 ;;		_control_transfer
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           
  2644                           ;psect for function _SEND_EOF
  2645  06A3                     _SEND_EOF:	
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2649  06A3  0020               	movlb	0	; select bank0
  2650  06A4  0854               	movf	__checksum,w
  2651  06A5  25D9               	fcall	_SEND_DATA_BYTE
  2652  06A6  3011               	movlw	17
  2653  06A7  268A               	fcall	_Send_Byte
  2654  06A8  3085               	movlw	133
  2655  06A9  00F5               	movwf	??_SEND_EOF
  2656  06AA                     u3817:	
  2657  06AA  0BF5               	decfsz	??_SEND_EOF,f
  2658  06AB  2EAA               	goto	u3817
  2659  06AC  0008               	return
  2660  06AD                     __end_of_SEND_EOF:	
  2661                           
  2662                           	psect	text7
  2663  0698                     __ptext7:	
  2664 ;; *************** function _SEND_SOF *****************
  2665 ;; Defined at:
  2666 ;;		line 35 in file "protocol.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;		None
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;		None
  2671 ;; Return value:  Size  Location     Type
  2672 ;;		None               void
  2673 ;; Registers used:
  2674 ;;		wreg, status,2, status,0, pclath, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2680 ;;      Params:         0       0       0       0
  2681 ;;      Locals:         0       0       0       0
  2682 ;;      Temps:          1       0       0       0
  2683 ;;      Totals:         1       0       0       0
  2684 ;;Total ram usage:        1 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    4
  2687 ;; This function calls:
  2688 ;;		_Send_Byte
  2689 ;;		_SEND_DATA_BYTE
  2690 ;; This function is called by:
  2691 ;;		_control_transfer
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _SEND_SOF
  2697  0698                     _SEND_SOF:	
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2701  0698  3010               	movlw	16
  2702  0699  268A               	fcall	_Send_Byte
  2703  069A  3085               	movlw	133
  2704  069B  00F5               	movwf	??_SEND_SOF
  2705  069C                     u3827:	
  2706  069C  0BF5               	decfsz	??_SEND_SOF,f
  2707  069D  2E9C               	goto	u3827
  2708  069E  0020               	movlb	0	; select bank0
  2709  069F  01D4               	clrf	__checksum
  2710  06A0  085A               	movf	_config,w
  2711  06A1  25D9               	fcall	_SEND_DATA_BYTE
  2712  06A2  0008               	return
  2713  06A3                     __end_of_SEND_SOF:	
  2714                           
  2715                           	psect	text8
  2716  05D9                     __ptext8:	
  2717 ;; *************** function _SEND_DATA_BYTE *****************
  2718 ;; Defined at:
  2719 ;;		line 34 in file "protocol.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  b               1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  b               1    4[COMMON] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;		None               void
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, pclath, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2733 ;;      Params:         0       0       0       0
  2734 ;;      Locals:         1       0       0       0
  2735 ;;      Temps:          2       0       0       0
  2736 ;;      Totals:         3       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    3
  2740 ;; This function calls:
  2741 ;;		_Send_Byte
  2742 ;; This function is called by:
  2743 ;;		_SEND_SOF
  2744 ;;		_SEND_EOF
  2745 ;;		_control_transfer
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _SEND_DATA_BYTE
  2751  05D9                     _SEND_DATA_BYTE:	
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  2755                           ;SEND_DATA_BYTE@b stored from wreg
  2756  05D9  00F4               	movwf	SEND_DATA_BYTE@b
  2757  05DA  0874               	movf	SEND_DATA_BYTE@b,w
  2758  05DB  390F               	andlw	15
  2759  05DC  00F2               	movwf	??_SEND_DATA_BYTE
  2760  05DD  0872               	movf	??_SEND_DATA_BYTE,w
  2761  05DE  0020               	movlb	0	; select bank0
  2762  05DF  00EA               	movwf	__x
  2763  05E0  0874               	movf	SEND_DATA_BYTE@b,w
  2764  05E1  00F2               	movwf	??_SEND_DATA_BYTE
  2765  05E2  3004               	movlw	4
  2766  05E3                     u2965:	
  2767  05E3  36F2               	lsrf	??_SEND_DATA_BYTE,f
  2768  05E4  0B89               	decfsz	9,f
  2769  05E5  2DE3               	goto	u2965
  2770  05E6  0872               	movf	??_SEND_DATA_BYTE,w
  2771  05E7  00F3               	movwf	??_SEND_DATA_BYTE+1
  2772  05E8  0873               	movf	??_SEND_DATA_BYTE+1,w
  2773  05E9  00EB               	movwf	__y
  2774  05EA  086A               	movf	__x,w
  2775  05EB  268A               	fcall	_Send_Byte
  2776  05EC  3085               	movlw	133
  2777  05ED  00F2               	movwf	??_SEND_DATA_BYTE
  2778  05EE                     u3837:	
  2779  05EE  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  2780  05EF  2DEE               	goto	u3837
  2781  05F0  0020               	movlb	0	; select bank0
  2782  05F1  086B               	movf	__y,w
  2783  05F2  268A               	fcall	_Send_Byte
  2784  05F3  3085               	movlw	133
  2785  05F4  00F2               	movwf	??_SEND_DATA_BYTE
  2786  05F5                     u3847:	
  2787  05F5  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  2788  05F6  2DF5               	goto	u3847
  2789  05F7  0874               	movf	SEND_DATA_BYTE@b,w
  2790  05F8  0020               	movlb	0	; select bank0
  2791  05F9  02D4               	subwf	__checksum,f
  2792  05FA  0008               	return
  2793  05FB                     __end_of_SEND_DATA_BYTE:	
  2794                           
  2795                           	psect	text9
  2796  068A                     __ptext9:	
  2797 ;; *************** function _Send_Byte *****************
  2798 ;; Defined at:
  2799 ;;		line 149 in file "user.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  data            1    wreg     unsigned char 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  data            1    1[COMMON] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;		None               void
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, pclath, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2813 ;;      Params:         0       0       0       0
  2814 ;;      Locals:         1       0       0       0
  2815 ;;      Temps:          0       0       0       0
  2816 ;;      Totals:         1       0       0       0
  2817 ;;Total ram usage:        1 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    2
  2820 ;; This function calls:
  2821 ;;		_Modulate_Serial
  2822 ;;		_Disable_Modulation
  2823 ;; This function is called by:
  2824 ;;		_handle_fire
  2825 ;;		_SEND_DATA_BYTE
  2826 ;;		_SEND_SOF
  2827 ;;		_SEND_EOF
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           
  2832                           ;psect for function _Send_Byte
  2833  068A                     _Send_Byte:	
  2834                           
  2835                           ;incstack = 0
  2836                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  2837                           ;Send_Byte@data stored from wreg
  2838  068A  00F1               	movwf	Send_Byte@data
  2839                           
  2840                           ;user.c: 150: RCSTAbits.CREN = 0;
  2841  068B  0023               	movlb	3	; select bank3
  2842  068C  121D               	bcf	29,4	;volatile
  2843                           
  2844                           ;user.c: 151: Modulate_Serial();
  2845  068D  26AD               	fcall	_Modulate_Serial
  2846                           
  2847                           ;user.c: 152: TXREG = data;
  2848  068E  0871               	movf	Send_Byte@data,w
  2849  068F  0023               	movlb	3	; select bank3
  2850  0690  009A               	movwf	26	;volatile
  2851  0691                     l164:	
  2852                           ;user.c: 153: while(!TXSTAbits.TRMT);
  2853                           
  2854  0691  1C9E               	btfss	30,1	;volatile
  2855  0692  2E91               	goto	l164
  2856                           
  2857                           ;user.c: 154: Disable_Modulation();
  2858  0693  26D5               	fcall	_Disable_Modulation
  2859                           
  2860                           ;user.c: 155: RCSTAbits.CREN = 1;
  2861  0694  0023               	movlb	3	; select bank3
  2862  0695  161D               	bsf	29,4	;volatile
  2863                           
  2864                           ;user.c: 156: RCREG;
  2865  0696  0819               	movf	25,w	;volatile
  2866  0697  0008               	return
  2867  0698                     __end_of_Send_Byte:	
  2868                           
  2869                           	psect	text10
  2870  06D5                     __ptext10:	
  2871 ;; *************** function _Disable_Modulation *****************
  2872 ;; Defined at:
  2873 ;;		line 166 in file "user.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;		None               void
  2880 ;; Registers used:
  2881 ;;		None
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2887 ;;      Params:         0       0       0       0
  2888 ;;      Locals:         0       0       0       0
  2889 ;;      Temps:          0       0       0       0
  2890 ;;      Totals:         0       0       0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    1
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_Send_Byte
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           
  2902                           ;psect for function _Disable_Modulation
  2903  06D5                     _Disable_Modulation:	
  2904                           
  2905                           ;user.c: 167: INTCONbits.TMR0IE=0;
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _Disable_Modulation: []
  2909  06D5  128B               	bcf	11,5	;volatile
  2910                           
  2911                           ;user.c: 168: DACCON0bits.DACEN=0;
  2912  06D6  0022               	movlb	2	; select bank2
  2913  06D7  1398               	bcf	24,7	;volatile
  2914  06D8  0008               	return
  2915  06D9                     __end_of_Disable_Modulation:	
  2916                           
  2917                           	psect	text11
  2918  06AD                     __ptext11:	
  2919 ;; *************** function _Modulate_Serial *****************
  2920 ;; Defined at:
  2921 ;;		line 159 in file "user.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;		None
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;		None               void
  2928 ;; Registers used:
  2929 ;;		status,2
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2935 ;;      Params:         0       0       0       0
  2936 ;;      Locals:         0       0       0       0
  2937 ;;      Temps:          0       0       0       0
  2938 ;;      Totals:         0       0       0       0
  2939 ;;Total ram usage:        0 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    1
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_Send_Byte
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           
  2950                           ;psect for function _Modulate_Serial
  2951  06AD                     _Modulate_Serial:	
  2952                           
  2953                           ;user.c: 160: DACCON0bits.DACEN = 1;
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in _Modulate_Serial: [status,2]
  2957  06AD  0022               	movlb	2	; select bank2
  2958  06AE  1798               	bsf	24,7	;volatile
  2959                           
  2960                           ;user.c: 161: TMR0=0;
  2961  06AF  0020               	movlb	0	; select bank0
  2962  06B0  0195               	clrf	21	;volatile
  2963                           
  2964                           ;user.c: 162: INTCONbits.TMR0IF=1;
  2965  06B1  150B               	bsf	11,2	;volatile
  2966                           
  2967                           ;user.c: 163: INTCONbits.TMR0IE=1;
  2968  06B2  168B               	bsf	11,5	;volatile
  2969  06B3  0008               	return
  2970  06B4                     __end_of_Modulate_Serial:	
  2971                           
  2972                           	psect	text12
  2973  0656                     __ptext12:	
  2974 ;; *************** function _GET_CHAR_HELPER *****************
  2975 ;; Defined at:
  2976 ;;		line 28 in file "protocol.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  val             1    wreg     PTR unsigned char 
  2979 ;;		 -> _y(1), _x(1), 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  val             1    2[COMMON] PTR unsigned char 
  2982 ;;		 -> _y(1), _x(1), 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      unsigned char 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr1l, fsr1h, status,2
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2992 ;;      Params:         0       0       0       0
  2993 ;;      Locals:         1       0       0       0
  2994 ;;      Temps:          1       0       0       0
  2995 ;;      Totals:         2       0       0       0
  2996 ;;Total ram usage:        2 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_control_transfer
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           
  3007                           ;psect for function _GET_CHAR_HELPER
  3008  0656                     _GET_CHAR_HELPER:	
  3009                           
  3010                           ;incstack = 0
  3011                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3012                           ;GET_CHAR_HELPER@val stored from wreg
  3013  0656  00F2               	movwf	GET_CHAR_HELPER@val
  3014  0657  0020               	movlb	0	; select bank0
  3015  0658  01CA               	clrf	__i
  3016  0659  01CB               	clrf	__i+1
  3017  065A                     l268:	
  3018  065A  1A91               	btfsc	17,5	;volatile
  3019  065B  2E69               	goto	l2675
  3020  065C  3001               	movlw	1
  3021  065D  07CA               	addwf	__i,f
  3022  065E  3000               	movlw	0
  3023  065F  3DCB               	addwfc	__i+1,f
  3024  0660  3027               	movlw	39
  3025  0661  024B               	subwf	__i+1,w
  3026  0662  3010               	movlw	16
  3027  0663  1903               	skipnz
  3028  0664  024A               	subwf	__i,w
  3029  0665  1C03               	skipc
  3030  0666  2E5A               	goto	l268
  3031  0667  3001               	movlw	1
  3032  0668  0008               	return
  3033  0669                     l2675:	
  3034  0669  0023               	movlb	3	; select bank3
  3035  066A  0819               	movf	25,w	;volatile
  3036  066B  00F1               	movwf	??_GET_CHAR_HELPER
  3037  066C  0872               	movf	GET_CHAR_HELPER@val,w
  3038  066D  0086               	movwf	6
  3039  066E  0187               	clrf	7
  3040  066F  0871               	movf	??_GET_CHAR_HELPER,w
  3041  0670  0081               	movwf	1
  3042  0671  3000               	movlw	0
  3043  0672  0008               	return
  3044  0673                     __end_of_GET_CHAR_HELPER:	
  3045                           
  3046                           	psect	text13
  3047  0383                     __ptext13:	
  3048 ;; *************** function _hit_by *****************
  3049 ;; Defined at:
  3050 ;;		line 328 in file "user.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  who             1    wreg     unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  who             1    0[BANK0 ] unsigned char 
  3055 ;;  i               1    4[BANK0 ] unsigned char 
  3056 ;;  i               1    3[BANK0 ] unsigned char 
  3057 ;;  respawn_time    2    1[BANK0 ] unsigned int 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;		None               void
  3060 ;; Registers used:
  3061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3067 ;;      Params:         0       0       0       0
  3068 ;;      Locals:         0       5       0       0
  3069 ;;      Temps:          2       0       0       0
  3070 ;;      Totals:         2       5       0       0
  3071 ;;Total ram usage:        7 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    4
  3074 ;; This function calls:
  3075 ;;		_handle_music
  3076 ;;		_red_led_on
  3077 ;;		_led_off
  3078 ;;		_play_song
  3079 ;;		_Save
  3080 ;;		_get_hitlist_length
  3081 ;;		_add_to_hitlist
  3082 ;; This function is called by:
  3083 ;;		_handle_serial
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _hit_by
  3089  0383                     _hit_by:	
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in _hit_by: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3093                           ;hit_by@who stored from wreg
  3094  0383  0020               	movlb	0	; select bank0
  3095  0384  00A0               	movwf	hit_by@who
  3096                           
  3097                           ;user.c: 329: uint16_t respawn_timer;
  3098                           ;user.c: 331: add_to_hitlist(who);
  3099  0385  0820               	movf	hit_by@who,w
  3100  0386  23EB               	fcall	_add_to_hitlist
  3101                           
  3102                           ;user.c: 332: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3103  0387  30E0               	movlw	224
  3104  0388  00F1               	movwf	?_Save
  3105  0389  3007               	movlw	7
  3106  038A  00F2               	movwf	?_Save+1
  3107  038B  30A0               	movlw	_hitlist& (0+255)
  3108  038C  00F9               	movwf	??_hit_by
  3109  038D  0879               	movf	??_hit_by,w
  3110  038E  00F3               	movwf	?_Save+2
  3111  038F  3010               	movlw	16
  3112  0390  00FA               	movwf	??_hit_by+1
  3113  0391  087A               	movf	??_hit_by+1,w
  3114  0392  00F4               	movwf	?_Save+3
  3115  0393  243F               	fcall	_Save
  3116                           
  3117                           ;user.c: 333: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  3118  0394  3020               	movlw	low _death_song
  3119  0395  00F1               	movwf	?_play_song
  3120  0396  3001               	movlw	high _death_song
  3121  0397  00F2               	movwf	?_play_song+1
  3122  0398  3013               	movlw	19
  3123  0399  00F9               	movwf	??_hit_by
  3124  039A  0879               	movf	??_hit_by,w
  3125  039B  00F3               	movwf	?_play_song+2
  3126  039C  3060               	movlw	96
  3127  039D  00F4               	movwf	?_play_song+3
  3128  039E  30EA               	movlw	234
  3129  039F  00F5               	movwf	?_play_song+4
  3130  03A0  01F6               	clrf	?_play_song+5
  3131  03A1  25B5               	fcall	_play_song
  3132                           
  3133                           ;user.c: 335: respawn_timer = config.respawn_delay;
  3134  03A2  0020               	movlb	0	; select bank0
  3135  03A3  0863               	movf	_config+9,w
  3136  03A4  01A2               	clrf	hit_by@respawn_timer+1
  3137  03A5  07A2               	addwf	hit_by@respawn_timer+1,f
  3138  03A6  0862               	movf	_config+8,w
  3139  03A7  01A1               	clrf	hit_by@respawn_timer
  3140  03A8  07A1               	addwf	hit_by@respawn_timer,f
  3141  03A9                     l2663:	
  3142                           ;user.c: 336: while(respawn_timer)
  3143                           
  3144  03A9  0822               	movf	hit_by@respawn_timer+1,w
  3145  03AA  0421               	iorwf	hit_by@respawn_timer,w
  3146  03AB  1903               	btfsc	3,2
  3147  03AC  2BE9               	goto	l2665
  3148                           
  3149                           ;user.c: 337: {
  3150                           ;user.c: 338: respawn_timer--;
  3151  03AD  3001               	movlw	1
  3152  03AE  02A1               	subwf	hit_by@respawn_timer,f
  3153  03AF  3000               	movlw	0
  3154  03B0  3BA2               	subwfb	hit_by@respawn_timer+1,f
  3155                           
  3156                           ;user.c: 339: red_led_on();
  3157  03B1  26CB               	fcall	_red_led_on
  3158                           
  3159                           ;user.c: 340: for(uint8_t i=0;i<50;i++)
  3160  03B2  0020               	movlb	0	; select bank0
  3161  03B3  01A3               	clrf	hit_by@i
  3162  03B4  3032               	movlw	50
  3163  03B5  0223               	subwf	hit_by@i,w
  3164  03B6  1803               	btfsc	3,0
  3165  03B7  2BCB               	goto	l2645
  3166  03B8                     l2637:	
  3167                           
  3168                           ;user.c: 341: {
  3169                           ;user.c: 342: handle_music();
  3170  03B8  2539               	fcall	_handle_music
  3171                           
  3172                           ;user.c: 343: _delay((unsigned long)((1)*(16000000/4000.0)));
  3173  03B9  3006               	movlw	6
  3174  03BA  00FA               	movwf	??_hit_by+1
  3175  03BB  3030               	movlw	48
  3176  03BC  00F9               	movwf	??_hit_by
  3177  03BD                     u3857:	
  3178  03BD  0BF9               	decfsz	??_hit_by,f
  3179  03BE  2BBD               	goto	u3857
  3180  03BF  0BFA               	decfsz	??_hit_by+1,f
  3181  03C0  2BBD               	goto	u3857
  3182  03C1  0000               	nop
  3183  03C2  3001               	movlw	1
  3184  03C3  00F9               	movwf	??_hit_by
  3185  03C4  0879               	movf	??_hit_by,w
  3186  03C5  0020               	movlb	0	; select bank0
  3187  03C6  07A3               	addwf	hit_by@i,f
  3188  03C7  3032               	movlw	50
  3189  03C8  0223               	subwf	hit_by@i,w
  3190  03C9  1C03               	skipc
  3191  03CA  2BB8               	goto	l2637
  3192  03CB                     l2645:	
  3193                           
  3194                           ;user.c: 344: }
  3195                           ;user.c: 345: if(respawn_timer < 30) led_off();
  3196  03CB  3000               	movlw	0
  3197  03CC  0222               	subwf	hit_by@respawn_timer+1,w
  3198  03CD  301E               	movlw	30
  3199  03CE  1903               	skipnz
  3200  03CF  0221               	subwf	hit_by@respawn_timer,w
  3201  03D0  1803               	skipnc
  3202  03D1  2BD3               	goto	l2649
  3203  03D2  26D9               	fcall	_led_off
  3204  03D3                     l2649:	
  3205                           
  3206                           ;user.c: 346: for(uint8_t i=0;i<50;i++)
  3207  03D3  0020               	movlb	0	; select bank0
  3208  03D4  01A4               	clrf	hit_by@i_685
  3209  03D5                     L1:	
  3210  03D5  3032               	movlw	50
  3211  03D6  0224               	subwf	hit_by@i_685,w
  3212  03D7  1803               	btfsc	3,0
  3213  03D8  2BA9               	goto	l2663
  3214                           
  3215                           ;user.c: 347: {
  3216                           ;user.c: 348: handle_music();
  3217  03D9  2539               	fcall	_handle_music
  3218                           
  3219                           ;user.c: 349: _delay((unsigned long)((1)*(16000000/4000.0)));
  3220  03DA  3006               	movlw	6
  3221  03DB  00FA               	movwf	??_hit_by+1
  3222  03DC  3030               	movlw	48
  3223  03DD  00F9               	movwf	??_hit_by
  3224  03DE                     u3867:	
  3225  03DE  0BF9               	decfsz	??_hit_by,f
  3226  03DF  2BDE               	goto	u3867
  3227  03E0  0BFA               	decfsz	??_hit_by+1,f
  3228  03E1  2BDE               	goto	u3867
  3229  03E2  0000               	nop
  3230  03E3  3001               	movlw	1
  3231  03E4  00F9               	movwf	??_hit_by
  3232  03E5  0879               	movf	??_hit_by,w
  3233  03E6  0020               	movlb	0	; select bank0
  3234  03E7  07A4               	addwf	hit_by@i_685,f
  3235  03E8  2BD5               	goto	L1
  3236  03E9                     l2665:	
  3237                           
  3238                           ;user.c: 350: }
  3239                           ;user.c: 351: }
  3240                           ;user.c: 352: if(get_hitlist_length() > config.health)
  3241  03E9  2501               	fcall	_get_hitlist_length
  3242  03EA  0008               	return
  3243  03EB                     __end_of_hit_by:	
  3244                           ;user.c: 353: {
  3245                           
  3246                           
  3247                           	psect	text14
  3248  03EB                     __ptext14:	
  3249 ;; *************** function _add_to_hitlist *****************
  3250 ;; Defined at:
  3251 ;;		line 310 in file "user.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  gun             1    wreg     unsigned char 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  gun             1    5[COMMON] unsigned char 
  3256 ;;  i               1    8[COMMON] unsigned char 
  3257 ;;  gun16           2    6[COMMON] unsigned int 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3267 ;;      Params:         0       0       0       0
  3268 ;;      Locals:         4       0       0       0
  3269 ;;      Temps:          4       0       0       0
  3270 ;;      Totals:         8       0       0       0
  3271 ;;Total ram usage:        8 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    1
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_hit_by
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _add_to_hitlist
  3283  03EB                     _add_to_hitlist:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3287                           ;add_to_hitlist@gun stored from wreg
  3288  03EB  00F5               	movwf	add_to_hitlist@gun
  3289                           
  3290                           ;user.c: 311: uint16_t gun16 = gun & 0x7F;
  3291  03EC  0875               	movf	add_to_hitlist@gun,w
  3292  03ED  397F               	andlw	127
  3293  03EE  00F1               	movwf	??_add_to_hitlist
  3294  03EF  01F2               	clrf	??_add_to_hitlist+1
  3295  03F0  0871               	movf	??_add_to_hitlist,w
  3296  03F1  00F6               	movwf	add_to_hitlist@gun16
  3297  03F2  0872               	movf	??_add_to_hitlist+1,w
  3298  03F3  00F7               	movwf	add_to_hitlist@gun16+1
  3299                           
  3300                           ;user.c: 312: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3301  03F4  01F8               	clrf	add_to_hitlist@i
  3302  03F5                     L2:	
  3303  03F5  3010               	movlw	16
  3304  03F6  0278               	subwf	add_to_hitlist@i,w
  3305  03F7  1803               	btfsc	3,0
  3306  03F8  0008               	return
  3307                           
  3308                           ;user.c: 313: {
  3309                           ;user.c: 314: if(!(hitlist[i] & 0x007F))
  3310  03F9  3578               	lslf	add_to_hitlist@i,w
  3311  03FA  3EA0               	addlw	_hitlist& (0+255)
  3312  03FB  0086               	movwf	6
  3313  03FC  0187               	clrf	7
  3314  03FD  3F40               	moviw [0]fsr1
  3315  03FE  00F1               	movwf	??_add_to_hitlist
  3316  03FF  3F41               	moviw [1]fsr1
  3317  0400  00F2               	movwf	??_add_to_hitlist+1
  3318  0401  307F               	movlw	127
  3319  0402  0571               	andwf	??_add_to_hitlist,w
  3320  0403  00F3               	movwf	??_add_to_hitlist+2
  3321  0404  3000               	movlw	0
  3322  0405  0572               	andwf	??_add_to_hitlist+1,w
  3323  0406  00F4               	movwf	??_add_to_hitlist+3
  3324  0407  0874               	movf	??_add_to_hitlist+3,w
  3325  0408  0473               	iorwf	??_add_to_hitlist+2,w
  3326  0409  1D03               	skipz
  3327  040A  2C15               	goto	l2611
  3328                           
  3329                           ;user.c: 315: {
  3330                           ;user.c: 316: hitlist[i] |= gun16;
  3331  040B  3578               	lslf	add_to_hitlist@i,w
  3332  040C  3EA0               	addlw	_hitlist& (0+255)
  3333  040D  0086               	movwf	6
  3334  040E  0187               	clrf	7
  3335  040F  0876               	movf	add_to_hitlist@gun16,w
  3336  0410  0481               	iorwf	1,f
  3337  0411  3141               	addfsr 1,1
  3338  0412  0877               	movf	add_to_hitlist@gun16+1,w
  3339  0413  0481               	iorwf	1,f
  3340                           
  3341                           ;user.c: 317: return;
  3342  0414  0008               	return
  3343  0415                     l2611:	
  3344                           
  3345                           ;user.c: 318: }
  3346                           ;user.c: 319: if(!(hitlist[i] & 0x3F80))
  3347  0415  3578               	lslf	add_to_hitlist@i,w
  3348  0416  3EA0               	addlw	_hitlist& (0+255)
  3349  0417  0086               	movwf	6
  3350  0418  0187               	clrf	7
  3351  0419  3F40               	moviw [0]fsr1
  3352  041A  00F1               	movwf	??_add_to_hitlist
  3353  041B  3F41               	moviw [1]fsr1
  3354  041C  00F2               	movwf	??_add_to_hitlist+1
  3355  041D  3080               	movlw	128
  3356  041E  0571               	andwf	??_add_to_hitlist,w
  3357  041F  00F3               	movwf	??_add_to_hitlist+2
  3358  0420  303F               	movlw	63
  3359  0421  0572               	andwf	??_add_to_hitlist+1,w
  3360  0422  00F4               	movwf	??_add_to_hitlist+3
  3361  0423  0874               	movf	??_add_to_hitlist+3,w
  3362  0424  0473               	iorwf	??_add_to_hitlist+2,w
  3363  0425  1D03               	skipz
  3364  0426  2C3A               	goto	l2617
  3365                           
  3366                           ;user.c: 320: {
  3367                           ;user.c: 321: hitlist[i] |= gun16 << 7;
  3368  0427  0877               	movf	add_to_hitlist@gun16+1,w
  3369  0428  00F2               	movwf	??_add_to_hitlist+1
  3370  0429  0876               	movf	add_to_hitlist@gun16,w
  3371  042A  00F1               	movwf	??_add_to_hitlist
  3372  042B  3007               	movlw	7
  3373  042C                     u2865:	
  3374  042C  35F1               	lslf	??_add_to_hitlist,f
  3375  042D  0DF2               	rlf	??_add_to_hitlist+1,f
  3376  042E  0B89               	decfsz	9,f
  3377  042F  2C2C               	goto	u2865
  3378  0430  3578               	lslf	add_to_hitlist@i,w
  3379  0431  3EA0               	addlw	_hitlist& (0+255)
  3380  0432  0086               	movwf	6
  3381  0433  0187               	clrf	7
  3382  0434  0871               	movf	??_add_to_hitlist,w
  3383  0435  0481               	iorwf	1,f
  3384  0436  3141               	addfsr 1,1
  3385  0437  0872               	movf	??_add_to_hitlist+1,w
  3386  0438  0481               	iorwf	1,f
  3387                           
  3388                           ;user.c: 322: return;
  3389  0439  0008               	return
  3390  043A                     l2617:	
  3391  043A  3001               	movlw	1
  3392  043B  00F1               	movwf	??_add_to_hitlist
  3393  043C  0871               	movf	??_add_to_hitlist,w
  3394  043D  07F8               	addwf	add_to_hitlist@i,f
  3395  043E  2BF5               	goto	L2
  3396  043F                     __end_of_add_to_hitlist:	
  3397                           
  3398                           	psect	text15
  3399  0501                     __ptext15:	
  3400 ;; *************** function _get_hitlist_length *****************
  3401 ;; Defined at:
  3402 ;;		line 299 in file "user.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;		None
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  i               1    5[COMMON] unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      unsigned char 
  3409 ;; Registers used:
  3410 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3416 ;;      Params:         0       0       0       0
  3417 ;;      Locals:         1       0       0       0
  3418 ;;      Temps:          4       0       0       0
  3419 ;;      Totals:         5       0       0       0
  3420 ;;Total ram usage:        5 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    1
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_hit_by
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _get_hitlist_length
  3432  0501                     _get_hitlist_length:	
  3433                           
  3434                           ;user.c: 300: uint8_t i;
  3435                           ;user.c: 301: for(i=0;i<(sizeof(hitlist_t)/2);i++)
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _get_hitlist_length: [wreg+fsr1l+fsr1h+status,2+status,0]
  3439  0501  01F5               	clrf	get_hitlist_length@i
  3440  0502  3010               	movlw	16
  3441  0503  0275               	subwf	get_hitlist_length@i,w
  3442  0504  1803               	btfsc	3,0
  3443  0505  2D37               	goto	l2595
  3444  0506                     l2579:	
  3445                           
  3446                           ;user.c: 302: {
  3447                           ;user.c: 303: if(!(hitlist[i] & 0x007F)) return 2*i;
  3448  0506  3575               	lslf	get_hitlist_length@i,w
  3449  0507  3EA0               	addlw	_hitlist& (0+255)
  3450  0508  0086               	movwf	6
  3451  0509  0187               	clrf	7
  3452  050A  3F40               	moviw [0]fsr1
  3453  050B  00F1               	movwf	??_get_hitlist_length
  3454  050C  3F41               	moviw [1]fsr1
  3455  050D  00F2               	movwf	??_get_hitlist_length+1
  3456  050E  307F               	movlw	127
  3457  050F  0571               	andwf	??_get_hitlist_length,w
  3458  0510  00F3               	movwf	??_get_hitlist_length+2
  3459  0511  3000               	movlw	0
  3460  0512  0572               	andwf	??_get_hitlist_length+1,w
  3461  0513  00F4               	movwf	??_get_hitlist_length+3
  3462  0514  0874               	movf	??_get_hitlist_length+3,w
  3463  0515  0473               	iorwf	??_get_hitlist_length+2,w
  3464  0516  1D03               	skipz
  3465  0517  2D1A               	goto	l2585
  3466  0518  3575               	lslf	get_hitlist_length@i,w
  3467  0519  0008               	return
  3468  051A                     l2585:	
  3469                           
  3470                           ;user.c: 304: if(!(hitlist[i] & 0x3F80)) return 2*i+1;
  3471  051A  3575               	lslf	get_hitlist_length@i,w
  3472  051B  3EA0               	addlw	_hitlist& (0+255)
  3473  051C  0086               	movwf	6
  3474  051D  0187               	clrf	7
  3475  051E  3F40               	moviw [0]fsr1
  3476  051F  00F1               	movwf	??_get_hitlist_length
  3477  0520  3F41               	moviw [1]fsr1
  3478  0521  00F2               	movwf	??_get_hitlist_length+1
  3479  0522  3080               	movlw	128
  3480  0523  0571               	andwf	??_get_hitlist_length,w
  3481  0524  00F3               	movwf	??_get_hitlist_length+2
  3482  0525  303F               	movlw	63
  3483  0526  0572               	andwf	??_get_hitlist_length+1,w
  3484  0527  00F4               	movwf	??_get_hitlist_length+3
  3485  0528  0874               	movf	??_get_hitlist_length+3,w
  3486  0529  0473               	iorwf	??_get_hitlist_length+2,w
  3487  052A  1D03               	skipz
  3488  052B  2D2F               	goto	l2591
  3489  052C  1403               	setc
  3490  052D  0D75               	rlf	get_hitlist_length@i,w
  3491  052E  0008               	return
  3492  052F                     l2591:	
  3493  052F  3001               	movlw	1
  3494  0530  00F1               	movwf	??_get_hitlist_length
  3495  0531  0871               	movf	??_get_hitlist_length,w
  3496  0532  07F5               	addwf	get_hitlist_length@i,f
  3497  0533  3010               	movlw	16
  3498  0534  0275               	subwf	get_hitlist_length@i,w
  3499  0535  1C03               	skipc
  3500  0536  2D06               	goto	l2579
  3501  0537                     l2595:	
  3502                           
  3503                           ;user.c: 305: }
  3504                           ;user.c: 306: return 2*i;
  3505  0537  3575               	lslf	get_hitlist_length@i,w
  3506  0538  0008               	return
  3507  0539                     __end_of_get_hitlist_length:	
  3508                           
  3509                           	psect	text16
  3510  043F                     __ptext16:	
  3511 ;; *************** function _Save *****************
  3512 ;; Defined at:
  3513 ;;		line 192 in file "user.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  address         2    1[COMMON] unsigned int 
  3516 ;;  ptr             1    3[COMMON] PTR unsigned int 
  3517 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  3518 ;;  data_length     1    4[COMMON] unsigned char 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  i               1    6[COMMON] unsigned char 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;		None               void
  3523 ;; Registers used:
  3524 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3530 ;;      Params:         4       0       0       0
  3531 ;;      Locals:         1       0       0       0
  3532 ;;      Temps:          1       0       0       0
  3533 ;;      Totals:         6       0       0       0
  3534 ;;Total ram usage:        6 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    1
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		_hit_by
  3541 ;;		_control_transfer
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function _Save
  3547  043F                     _Save:	
  3548                           
  3549                           ;user.c: 194: INTCONbits.GIE = 0;
  3550                           
  3551                           ;incstack = 0
  3552                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  3553  043F  138B               	bcf	11,7	;volatile
  3554                           
  3555                           ;user.c: 195: PMADR = address;
  3556  0440  0872               	movf	Save@address+1,w
  3557  0441  0023               	movlb	3	; select bank3
  3558  0442  0192               	clrf	18	;volatile
  3559  0443  0792               	addwf	18,f	;volatile
  3560  0444  0871               	movf	Save@address,w
  3561  0445  0191               	clrf	17	;volatile
  3562  0446  0791               	addwf	17,f	;volatile
  3563                           
  3564                           ;user.c: 196: PMCON1bits.CFGS = 0;
  3565  0447  1315               	bcf	21,6	;volatile
  3566                           
  3567                           ;user.c: 197: PMCON1bits.FREE = 1;
  3568  0448  1615               	bsf	21,4	;volatile
  3569                           
  3570                           ;user.c: 198: PMCON1bits.WREN = 1;
  3571  0449  1515               	bsf	21,2	;volatile
  3572                           
  3573                           ;user.c: 199: PMCON2 = 0x55;
  3574  044A  3055               	movlw	85
  3575  044B  0096               	movwf	22	;volatile
  3576                           
  3577                           ;user.c: 200: PMCON2 = 0xAA;
  3578  044C  30AA               	movlw	170
  3579  044D  0096               	movwf	22	;volatile
  3580                           
  3581                           ;user.c: 201: PMCON1bits.WR = 1;
  3582  044E  1495               	bsf	21,1	;volatile
  3583                           
  3584                           ;user.c: 202: _nop();
  3585  044F  0000               	nop
  3586                           
  3587                           ;user.c: 203: _nop();
  3588  0450  0000               	nop
  3589                           
  3590                           ;user.c: 204: PMCON1bits.WREN = 0;
  3591  0451  0023               	movlb	3	; select bank3
  3592  0452  1115               	bcf	21,2	;volatile
  3593                           
  3594                           ;user.c: 206: PMADR = address;
  3595  0453  0872               	movf	Save@address+1,w
  3596  0454  0192               	clrf	18	;volatile
  3597  0455  0792               	addwf	18,f	;volatile
  3598  0456  0871               	movf	Save@address,w
  3599  0457  0191               	clrf	17	;volatile
  3600  0458  0791               	addwf	17,f	;volatile
  3601                           
  3602                           ;user.c: 207: PMCON1bits.CFGS = 0;
  3603  0459  1315               	bcf	21,6	;volatile
  3604                           
  3605                           ;user.c: 208: PMCON1bits.FREE = 0;
  3606  045A  1215               	bcf	21,4	;volatile
  3607                           
  3608                           ;user.c: 209: PMCON1bits.WREN = 1;
  3609  045B  1515               	bsf	21,2	;volatile
  3610                           
  3611                           ;user.c: 210: PMCON1bits.LWLO = 1;
  3612  045C  1695               	bsf	21,5	;volatile
  3613                           
  3614                           ;user.c: 212: for (uint8_t i=1; i<=data_length; i++){
  3615  045D  01F6               	clrf	Save@i
  3616  045E  0AF6               	incf	Save@i,f
  3617  045F                     l185:	
  3618  045F  0876               	movf	Save@i,w
  3619  0460  0274               	subwf	Save@data_length,w
  3620  0461  1C03               	btfss	3,0
  3621  0462  2C83               	goto	l188
  3622                           
  3623                           ;user.c: 213: PMDAT = *ptr++;
  3624  0463  0873               	movf	Save@ptr,w
  3625  0464  0086               	movwf	6
  3626  0465  0187               	clrf	7
  3627  0466  3F40               	moviw [0]fsr1
  3628  0467  0093               	movwf	19	;volatile
  3629  0468  3F41               	moviw [1]fsr1
  3630  0469  0094               	movwf	20	;volatile
  3631  046A  3002               	movlw	2
  3632  046B  00F5               	movwf	??_Save
  3633  046C  0875               	movf	??_Save,w
  3634  046D  07F3               	addwf	Save@ptr,f
  3635                           
  3636                           ;user.c: 214: if(i == data_length) PMCON1bits.LWLO = 0;
  3637  046E  0876               	movf	Save@i,w
  3638  046F  0674               	xorwf	Save@data_length,w
  3639  0470  1903               	btfsc	3,2
  3640  0471  1295               	bcf	21,5	;volatile
  3641                           
  3642                           ;user.c: 215: PMCON2 = 0x55;
  3643  0472  3055               	movlw	85
  3644  0473  0096               	movwf	22	;volatile
  3645                           
  3646                           ;user.c: 216: PMCON2 = 0xAA;
  3647  0474  30AA               	movlw	170
  3648  0475  0096               	movwf	22	;volatile
  3649                           
  3650                           ;user.c: 217: PMCON1bits.WR = 1;
  3651  0476  1495               	bsf	21,1	;volatile
  3652                           
  3653                           ;user.c: 218: _nop();
  3654  0477  0000               	nop
  3655                           
  3656                           ;user.c: 219: _nop();
  3657  0478  0000               	nop
  3658                           
  3659                           ;user.c: 220: PMADRL++;
  3660  0479  3001               	movlw	1
  3661  047A  00F5               	movwf	??_Save
  3662  047B  0875               	movf	??_Save,w
  3663  047C  0023               	movlb	3	; select bank3
  3664  047D  0791               	addwf	17,f	;volatile
  3665  047E  3001               	movlw	1
  3666  047F  00F5               	movwf	??_Save
  3667  0480  0875               	movf	??_Save,w
  3668  0481  07F6               	addwf	Save@i,f
  3669  0482  2C5F               	goto	l185
  3670  0483                     l188:	
  3671                           
  3672                           ;user.c: 221: }
  3673                           ;user.c: 222: PMCON1bits.WREN = 0;
  3674  0483  1115               	bcf	21,2	;volatile
  3675                           
  3676                           ;user.c: 223: INTCONbits.GIE = 1;
  3677  0484  178B               	bsf	11,7	;volatile
  3678  0485  0008               	return
  3679  0486                     __end_of_Save:	
  3680                           
  3681                           	psect	text17
  3682  05B5                     __ptext17:	
  3683 ;; *************** function _play_song *****************
  3684 ;; Defined at:
  3685 ;;		line 86 in file "user.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  song            2    1[COMMON] PTR unsigned int 
  3688 ;;		 -> death_song(38), fire_song(32), 
  3689 ;;  length          1    3[COMMON] unsigned char 
  3690 ;;  note_duratio    2    4[COMMON] unsigned int 
  3691 ;;  repeat          1    6[COMMON] unsigned char 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;		None
  3694 ;; Return value:  Size  Location     Type
  3695 ;;		None               void
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3703 ;;      Params:         6       0       0       0
  3704 ;;      Locals:         0       0       0       0
  3705 ;;      Temps:          2       0       0       0
  3706 ;;      Totals:         8       0       0       0
  3707 ;;Total ram usage:        8 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    1
  3710 ;; This function calls:
  3711 ;;		Nothing
  3712 ;; This function is called by:
  3713 ;;		_handle_fire
  3714 ;;		_hit_by
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _play_song
  3720  05B5                     _play_song:	
  3721                           
  3722                           ;user.c: 87: cur_song=song;
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3726  05B5  0872               	movf	play_song@song+1,w
  3727  05B6  0020               	movlb	0	; select bank0
  3728  05B7  01CD               	clrf	_cur_song+1
  3729  05B8  07CD               	addwf	_cur_song+1,f
  3730  05B9  0871               	movf	play_song@song,w
  3731  05BA  01CC               	clrf	_cur_song
  3732  05BB  07CC               	addwf	_cur_song,f
  3733                           
  3734                           ;user.c: 88: cur_song_length=length;
  3735  05BC  0873               	movf	play_song@length,w
  3736  05BD  00F7               	movwf	??_play_song
  3737  05BE  0877               	movf	??_play_song,w
  3738  05BF  00D5               	movwf	_cur_song_length
  3739                           
  3740                           ;user.c: 89: cur_song_ptr=0;
  3741  05C0  01FC               	clrf	_cur_song_ptr
  3742                           
  3743                           ;user.c: 90: cur_song_repeat=repeat;
  3744  05C1  0876               	movf	play_song@repeat,w
  3745  05C2  00F7               	movwf	??_play_song
  3746  05C3  0877               	movf	??_play_song,w
  3747  05C4  00D6               	movwf	_cur_song_repeat
  3748                           
  3749                           ;user.c: 91: cur_song_duration=note_duration;
  3750  05C5  0875               	movf	play_song@note_duration+1,w
  3751  05C6  01CF               	clrf	_cur_song_duration+1
  3752  05C7  07CF               	addwf	_cur_song_duration+1,f
  3753  05C8  0874               	movf	play_song@note_duration,w
  3754  05C9  01CE               	clrf	_cur_song_duration
  3755  05CA  07CE               	addwf	_cur_song_duration,f
  3756                           
  3757                           ;user.c: 93: TMR1 = -cur_song_duration;
  3758  05CB  094E               	comf	_cur_song_duration,w
  3759  05CC  00F7               	movwf	??_play_song
  3760  05CD  094F               	comf	_cur_song_duration+1,w
  3761  05CE  00F8               	movwf	??_play_song+1
  3762  05CF  0AF7               	incf	??_play_song,f
  3763  05D0  1903               	skipnz
  3764  05D1  0AF8               	incf	??_play_song+1,f
  3765  05D2  0877               	movf	??_play_song,w
  3766  05D3  0096               	movwf	22	;volatile
  3767  05D4  0878               	movf	??_play_song+1,w
  3768  05D5  0097               	movwf	23	;volatile
  3769                           
  3770                           ;user.c: 94: PIR1bits.TMR1IF = 1;
  3771  05D6  1411               	bsf	17,0	;volatile
  3772                           
  3773                           ;user.c: 95: T1CONbits.TMR1ON = 1;
  3774  05D7  1418               	bsf	24,0	;volatile
  3775  05D8  0008               	return
  3776  05D9                     __end_of_play_song:	
  3777                           
  3778                           	psect	text18
  3779  06D9                     __ptext18:	
  3780 ;; *************** function _led_off *****************
  3781 ;; Defined at:
  3782 ;;		line 81 in file "user.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;		None               void
  3789 ;; Registers used:
  3790 ;;		None
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3796 ;;      Params:         0       0       0       0
  3797 ;;      Locals:         0       0       0       0
  3798 ;;      Temps:          0       0       0       0
  3799 ;;      Totals:         0       0       0       0
  3800 ;;Total ram usage:        0 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    1
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_handle_fire
  3807 ;;		_hit_by
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function _led_off
  3813  06D9                     _led_off:	
  3814                           
  3815                           ;user.c: 82: TRISAbits.TRISA5 = 1;
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _led_off: []
  3819  06D9  0021               	movlb	1	; select bank1
  3820  06DA  168C               	bsf	12,5	;volatile
  3821  06DB  0008               	return
  3822  06DC                     __end_of_led_off:	
  3823                           
  3824                           	psect	text19
  3825  06CB                     __ptext19:	
  3826 ;; *************** function _red_led_on *****************
  3827 ;; Defined at:
  3828 ;;		line 69 in file "user.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		None
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3842 ;;      Params:         0       0       0       0
  3843 ;;      Locals:         0       0       0       0
  3844 ;;      Temps:          0       0       0       0
  3845 ;;      Totals:         0       0       0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    1
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_hit_by
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _red_led_on
  3858  06CB                     _red_led_on:	
  3859                           
  3860                           ;user.c: 70: TRISAbits.TRISA5 = 0;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _red_led_on: []
  3864  06CB  0021               	movlb	1	; select bank1
  3865  06CC  128C               	bcf	12,5	;volatile
  3866                           
  3867                           ;user.c: 71: PORTAbits.RA5 = 0;
  3868  06CD  0020               	movlb	0	; select bank0
  3869  06CE  128C               	bcf	12,5	;volatile
  3870  06CF  0008               	return
  3871  06D0                     __end_of_red_led_on:	
  3872                           
  3873                           	psect	text20
  3874  0539                     __ptext20:	
  3875 ;; *************** function _handle_music *****************
  3876 ;; Defined at:
  3877 ;;		line 106 in file "user.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;		None               void
  3884 ;; Registers used:
  3885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3891 ;;      Params:         0       0       0       0
  3892 ;;      Locals:         0       0       0       0
  3893 ;;      Temps:          2       0       0       0
  3894 ;;      Totals:         2       0       0       0
  3895 ;;Total ram usage:        2 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    3
  3898 ;; This function calls:
  3899 ;;		_stop_song
  3900 ;;		_tone
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;;		_hit_by
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           
  3908                           ;psect for function _handle_music
  3909  0539                     _handle_music:	
  3910                           
  3911                           ;user.c: 107: if(!PIR1bits.TMR1IF) return;
  3912                           
  3913                           ;incstack = 0
  3914                           ; Regs used in _handle_music: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3915  0539  0020               	movlb	0	; select bank0
  3916  053A  1C11               	btfss	17,0	;volatile
  3917  053B  0008               	return
  3918                           
  3919                           ;user.c: 108: if(cur_song_ptr >= cur_song_length)
  3920  053C  0855               	movf	_cur_song_length,w
  3921  053D  027C               	subwf	_cur_song_ptr,w
  3922  053E  1C03               	skipc
  3923  053F  2D47               	goto	l2429
  3924                           
  3925                           ;user.c: 109: {
  3926                           ;user.c: 110: if(cur_song_repeat)
  3927  0540  0856               	movf	_cur_song_repeat,w
  3928  0541  1903               	btfsc	3,2
  3929  0542  2D45               	goto	l2425
  3930                           
  3931                           ;user.c: 111: {
  3932                           ;user.c: 112: cur_song_ptr=0;
  3933  0543  01FC               	clrf	_cur_song_ptr
  3934                           
  3935                           ;user.c: 113: }
  3936  0544  2D47               	goto	l2429
  3937  0545                     l2425:	
  3938                           
  3939                           ;user.c: 114: else
  3940                           ;user.c: 115: {
  3941                           ;user.c: 116: stop_song();
  3942  0545  26D0               	fcall	_stop_song
  3943                           
  3944                           ;user.c: 117: return;
  3945  0546  0008               	return
  3946  0547                     l2429:	
  3947                           
  3948                           ;user.c: 118: }
  3949                           ;user.c: 119: }
  3950                           ;user.c: 120: tone(cur_song[cur_song_ptr]);
  3951  0547  087C               	movf	_cur_song_ptr,w
  3952  0548  00F5               	movwf	??_handle_music
  3953  0549  01F6               	clrf	??_handle_music+1
  3954  054A  35F5               	lslf	??_handle_music,f
  3955  054B  0DF6               	rlf	??_handle_music+1,f
  3956  054C  0875               	movf	??_handle_music,w
  3957  054D  0020               	movlb	0	; select bank0
  3958  054E  074C               	addwf	_cur_song,w
  3959  054F  0086               	movwf	6
  3960  0550  0876               	movf	??_handle_music+1,w
  3961  0551  3D4D               	addwfc	_cur_song+1,w
  3962  0552  0087               	movwf	7
  3963  0553  3F40               	moviw [0]fsr1
  3964  0554  00F1               	movwf	?_tone
  3965  0555  3F41               	moviw [1]fsr1
  3966  0556  00F2               	movwf	?_tone+1
  3967  0557  2673               	fcall	_tone
  3968                           
  3969                           ;user.c: 121: TMR1 = -cur_song_duration;
  3970  0558  0020               	movlb	0	; select bank0
  3971  0559  094E               	comf	_cur_song_duration,w
  3972  055A  00F5               	movwf	??_handle_music
  3973  055B  094F               	comf	_cur_song_duration+1,w
  3974  055C  00F6               	movwf	??_handle_music+1
  3975  055D  0AF5               	incf	??_handle_music,f
  3976  055E  1903               	skipnz
  3977  055F  0AF6               	incf	??_handle_music+1,f
  3978  0560  0875               	movf	??_handle_music,w
  3979  0561  0096               	movwf	22	;volatile
  3980  0562  0876               	movf	??_handle_music+1,w
  3981  0563  0097               	movwf	23	;volatile
  3982                           
  3983                           ;user.c: 122: cur_song_ptr++;
  3984  0564  3001               	movlw	1
  3985  0565  00F5               	movwf	??_handle_music
  3986  0566  0875               	movf	??_handle_music,w
  3987  0567  07FC               	addwf	_cur_song_ptr,f
  3988                           
  3989                           ;user.c: 123: PIR1bits.TMR1IF=0;
  3990  0568  1011               	bcf	17,0	;volatile
  3991  0569  0008               	return
  3992  056A                     __end_of_handle_music:	
  3993                           
  3994                           	psect	text21
  3995  0673                     __ptext21:	
  3996 ;; *************** function _tone *****************
  3997 ;; Defined at:
  3998 ;;		line 127 in file "user.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  period          2    1[COMMON] unsigned int 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;		None               void
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4012 ;;      Params:         2       0       0       0
  4013 ;;      Locals:         0       0       0       0
  4014 ;;      Temps:          2       0       0       0
  4015 ;;      Totals:         4       0       0       0
  4016 ;;Total ram usage:        4 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    1
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_handle_music
  4023 ;;		_Buzz
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _tone
  4029  0673                     _tone:	
  4030                           
  4031                           ;user.c: 128: PWM3CONbits.PWM3EN = 1;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _tone: [wreg+status,2+status,0]
  4035  0673  003B               	movlb	27	; select bank27
  4036  0674  17BB               	bsf	59,7	;volatile
  4037                           
  4038                           ;user.c: 129: PWM3CONbits.PWM3OE = 1;
  4039  0675  173B               	bsf	59,6	;volatile
  4040                           
  4041                           ;user.c: 130: PWM3PR = period;
  4042  0676  0872               	movf	tone@period+1,w
  4043  0677  01B6               	clrf	54	;volatile
  4044  0678  07B6               	addwf	54,f	;volatile
  4045  0679  0871               	movf	tone@period,w
  4046  067A  01B5               	clrf	53	;volatile
  4047  067B  07B5               	addwf	53,f	;volatile
  4048                           
  4049                           ;user.c: 131: PWM3DC = period >> 1;
  4050  067C  0872               	movf	tone@period+1,w
  4051  067D  00F4               	movwf	??_tone+1
  4052  067E  0871               	movf	tone@period,w
  4053  067F  00F3               	movwf	??_tone
  4054  0680  36F4               	lsrf	??_tone+1,f
  4055  0681  0CF3               	rrf	??_tone,f
  4056  0682  0873               	movf	??_tone,w
  4057  0683  00B3               	movwf	51	;volatile
  4058  0684  0874               	movf	??_tone+1,w
  4059  0685  00B4               	movwf	52	;volatile
  4060                           
  4061                           ;user.c: 132: PWM3PH = 0x0000;
  4062  0686  01B1               	clrf	49	;volatile
  4063  0687  01B2               	clrf	50	;volatile
  4064                           
  4065                           ;user.c: 133: PWM3LDCONbits.PWM3LD = 1;
  4066  0688  17BF               	bsf	63,7	;volatile
  4067  0689  0008               	return
  4068  068A                     __end_of_tone:	
  4069                           
  4070                           	psect	text22
  4071  06D0                     __ptext22:	
  4072 ;; *************** function _stop_song *****************
  4073 ;; Defined at:
  4074 ;;		line 99 in file "user.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;		None               void
  4081 ;; Registers used:
  4082 ;;		status,2, status,0, pclath, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4088 ;;      Params:         0       0       0       0
  4089 ;;      Locals:         0       0       0       0
  4090 ;;      Temps:          0       0       0       0
  4091 ;;      Totals:         0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    2
  4095 ;; This function calls:
  4096 ;;		_tone_off
  4097 ;; This function is called by:
  4098 ;;		_handle_music
  4099 ;;		_handle_fire
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _stop_song
  4105  06D0                     _stop_song:	
  4106                           
  4107                           ;user.c: 100: tone_off();
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  4111  06D0  26DC               	fcall	_tone_off
  4112                           
  4113                           ;user.c: 101: T1CONbits.TMR1ON=0;
  4114  06D1  0020               	movlb	0	; select bank0
  4115  06D2  1018               	bcf	24,0	;volatile
  4116                           
  4117                           ;user.c: 102: PIR1bits.TMR1IF=0;
  4118  06D3  1011               	bcf	17,0	;volatile
  4119  06D4  0008               	return
  4120  06D5                     __end_of_stop_song:	
  4121                           
  4122                           	psect	text23
  4123  06DC                     __ptext23:	
  4124 ;; *************** function _tone_off *****************
  4125 ;; Defined at:
  4126 ;;		line 137 in file "user.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;		None               void
  4133 ;; Registers used:
  4134 ;;		None
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4140 ;;      Params:         0       0       0       0
  4141 ;;      Locals:         0       0       0       0
  4142 ;;      Temps:          0       0       0       0
  4143 ;;      Totals:         0       0       0       0
  4144 ;;Total ram usage:        0 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    1
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_stop_song
  4151 ;;		_Buzz
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _tone_off
  4157  06DC                     _tone_off:	
  4158                           
  4159                           ;user.c: 138: PWM3CONbits.PWM3OE = 0;
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _tone_off: []
  4163  06DC  003B               	movlb	27	; select bank27
  4164  06DD  133B               	bcf	59,6	;volatile
  4165  06DE  0008               	return
  4166  06DF                     __end_of_tone_off:	
  4167                           
  4168                           	psect	text24
  4169  061B                     __ptext24:	
  4170 ;; *************** function _Setup *****************
  4171 ;; Defined at:
  4172 ;;		line 27 in file "user.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;		None               void
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4186 ;;      Params:         0       0       0       0
  4187 ;;      Locals:         0       0       0       0
  4188 ;;      Temps:          1       0       0       0
  4189 ;;      Totals:         1       0       0       0
  4190 ;;Total ram usage:        1 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    1
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_main
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _Setup
  4202  061B                     _Setup:	
  4203                           
  4204                           ;user.c: 28: OSCCON = 0b01111010;
  4205                           
  4206                           ;incstack = 0
  4207                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4208  061B  307A               	movlw	122
  4209  061C  0021               	movlb	1	; select bank1
  4210  061D  0099               	movwf	25	;volatile
  4211                           
  4212                           ;user.c: 30: ANSELA = 0x00;
  4213  061E  0023               	movlb	3	; select bank3
  4214  061F  018C               	clrf	12	;volatile
  4215                           
  4216                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  4217  0620  0021               	movlb	1	; select bank1
  4218  0621  110C               	bcf	12,2	;volatile
  4219                           
  4220                           ;user.c: 32: TRISAbits.TRISA0 = 0;
  4221  0622  100C               	bcf	12,0	;volatile
  4222                           
  4223                           ;user.c: 35: ANSELAbits.ANSA4 = 1;
  4224  0623  0023               	movlb	3	; select bank3
  4225  0624  160C               	bsf	12,4	;volatile
  4226                           
  4227                           ;user.c: 36: ADCON1 |= 0b00110000;
  4228  0625  3030               	movlw	48
  4229  0626  00F1               	movwf	??_Setup
  4230  0627  0871               	movf	??_Setup,w
  4231  0628  0021               	movlb	1	; select bank1
  4232  0629  049E               	iorwf	30,f	;volatile
  4233                           
  4234                           ;user.c: 39: SPBRGL = 103;
  4235  062A  3067               	movlw	103
  4236  062B  0023               	movlb	3	; select bank3
  4237  062C  009B               	movwf	27	;volatile
  4238                           
  4239                           ;user.c: 40: TXSTAbits.SYNC = 0;
  4240  062D  121E               	bcf	30,4	;volatile
  4241                           
  4242                           ;user.c: 41: RCSTAbits.SPEN = 1;
  4243  062E  179D               	bsf	29,7	;volatile
  4244                           
  4245                           ;user.c: 42: BAUDCONbits.SCKP = 1;
  4246  062F  161F               	bsf	31,4	;volatile
  4247                           
  4248                           ;user.c: 43: TXSTAbits.TXEN = 1;
  4249  0630  169E               	bsf	30,5	;volatile
  4250                           
  4251                           ;user.c: 46: RCSTAbits.CREN = 1;
  4252  0631  161D               	bsf	29,4	;volatile
  4253                           
  4254                           ;user.c: 49: INTCONbits.GIE = 1;
  4255  0632  178B               	bsf	11,7	;volatile
  4256                           
  4257                           ;user.c: 52: OPTION_REGbits.TMR0CS = 0;
  4258  0633  0021               	movlb	1	; select bank1
  4259  0634  1295               	bcf	21,5	;volatile
  4260                           
  4261                           ;user.c: 55: T1CONbits.T1CKPS=3;
  4262  0635  3030               	movlw	48
  4263  0636  0020               	movlb	0	; select bank0
  4264  0637  0498               	iorwf	24,f	;volatile
  4265  0638  0008               	return
  4266  0639                     __end_of_Setup:	
  4267                           
  4268                           	psect	text25
  4269  0486                     __ptext25:	
  4270 ;; *************** function _LoadFromFlash *****************
  4271 ;; Defined at:
  4272 ;;		line 29 in file "main.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4286 ;;      Params:         0       0       0       0
  4287 ;;      Locals:         0       0       0       0
  4288 ;;      Temps:          2       0       0       0
  4289 ;;      Totals:         2       0       0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    2
  4293 ;; This function calls:
  4294 ;;		_Load
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _LoadFromFlash
  4302  0486                     _LoadFromFlash:	
  4303                           
  4304                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4305                           
  4306                           ;incstack = 0
  4307                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4308  0486  30D0               	movlw	208
  4309  0487  00F1               	movwf	?_Load
  4310  0488  3007               	movlw	7
  4311  0489  00F2               	movwf	?_Load+1
  4312  048A  305A               	movlw	_config& (0+255)
  4313  048B  00F7               	movwf	??_LoadFromFlash
  4314  048C  0877               	movf	??_LoadFromFlash,w
  4315  048D  00F3               	movwf	?_Load+2
  4316  048E  3008               	movlw	8
  4317  048F  00F8               	movwf	??_LoadFromFlash+1
  4318  0490  0878               	movf	??_LoadFromFlash+1,w
  4319  0491  00F4               	movwf	?_Load+3
  4320  0492  2590               	fcall	_Load
  4321                           
  4322                           ;main.c: 31: if(config.id == 0x3FFF)
  4323  0493  303F               	movlw	63
  4324  0494  0020               	movlb	0	; select bank0
  4325  0495  065B               	xorwf	_config+1,w
  4326  0496  1D03               	skipz
  4327  0497  2C9A               	goto	u2545
  4328  0498  30FF               	movlw	255
  4329  0499  065A               	xorwf	_config,w
  4330  049A                     u2545:	
  4331  049A  1D03               	skipz
  4332  049B  2CB8               	goto	l2319
  4333                           
  4334                           ;main.c: 32: {
  4335                           ;main.c: 33: config.health = 16;
  4336  049C  3010               	movlw	16
  4337  049D  00DE               	movwf	_config+4
  4338  049E  3000               	movlw	0
  4339  049F  00DF               	movwf	_config+5
  4340                           
  4341                           ;main.c: 34: config.id = 0x80;
  4342  04A0  3080               	movlw	128
  4343  04A1  00DA               	movwf	_config
  4344  04A2  3000               	movlw	0
  4345  04A3  00DB               	movwf	_config+1
  4346                           
  4347                           ;main.c: 35: config.power = 0;
  4348  04A4  01DC               	clrf	_config+2
  4349  04A5  01DD               	clrf	_config+3
  4350                           
  4351                           ;main.c: 36: config.respawn_delay = 100;
  4352  04A6  3064               	movlw	100
  4353  04A7  00E2               	movwf	_config+8
  4354  04A8  3000               	movlw	0
  4355  04A9  00E3               	movwf	_config+9
  4356                           
  4357                           ;main.c: 37: config.fire_threshold = 500;
  4358  04AA  30F4               	movlw	244
  4359  04AB  00E4               	movwf	_config+10
  4360  04AC  3001               	movlw	1
  4361  04AD  00E5               	movwf	_config+11
  4362                           
  4363                           ;main.c: 39: config.fire_holdoff = 0;
  4364  04AE  01E8               	clrf	_config+14
  4365  04AF  01E9               	clrf	_config+15
  4366                           
  4367                           ;main.c: 40: config.shield = 1;
  4368  04B0  3001               	movlw	1
  4369  04B1  00E0               	movwf	_config+6
  4370  04B2  3000               	movlw	0
  4371  04B3  00E1               	movwf	_config+7
  4372                           
  4373                           ;main.c: 41: config.fire_cheating = 2000;
  4374  04B4  30D0               	movlw	208
  4375  04B5  00E6               	movwf	_config+12
  4376  04B6  3007               	movlw	7
  4377  04B7  00E7               	movwf	_config+13
  4378  04B8                     l2319:	
  4379                           
  4380                           ;main.c: 44: }
  4381                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4382  04B8  30E0               	movlw	224
  4383  04B9  00F1               	movwf	?_Load
  4384  04BA  3007               	movlw	7
  4385  04BB  00F2               	movwf	?_Load+1
  4386  04BC  30A0               	movlw	_hitlist& (0+255)
  4387  04BD  00F7               	movwf	??_LoadFromFlash
  4388  04BE  0877               	movf	??_LoadFromFlash,w
  4389  04BF  00F3               	movwf	?_Load+2
  4390  04C0  3010               	movlw	16
  4391  04C1  00F8               	movwf	??_LoadFromFlash+1
  4392  04C2  0878               	movf	??_LoadFromFlash+1,w
  4393  04C3  00F4               	movwf	?_Load+3
  4394  04C4  2590               	fcall	_Load
  4395  04C5  0008               	return
  4396  04C6                     __end_of_LoadFromFlash:	
  4397                           
  4398                           	psect	text26
  4399  0590                     __ptext26:	
  4400 ;; *************** function _Load *****************
  4401 ;; Defined at:
  4402 ;;		line 180 in file "user.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  address         2    1[COMMON] unsigned int 
  4405 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4406 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  4407 ;;  data_length     1    4[COMMON] unsigned char 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  i               1    6[COMMON] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;		None               void
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4419 ;;      Params:         4       0       0       0
  4420 ;;      Locals:         1       0       0       0
  4421 ;;      Temps:          1       0       0       0
  4422 ;;      Totals:         6       0       0       0
  4423 ;;Total ram usage:        6 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    1
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_LoadFromFlash
  4430 ;;		_control_transfer
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _Load
  4436  0590                     _Load:	
  4437                           
  4438                           ;user.c: 181: PMCON1bits.CFGS = 0;
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4442  0590  0023               	movlb	3	; select bank3
  4443  0591  1315               	bcf	21,6	;volatile
  4444                           
  4445                           ;user.c: 182: PMADR = address;
  4446  0592  0872               	movf	Load@address+1,w
  4447  0593  0192               	clrf	18	;volatile
  4448  0594  0792               	addwf	18,f	;volatile
  4449  0595  0871               	movf	Load@address,w
  4450  0596  0191               	clrf	17	;volatile
  4451  0597  0791               	addwf	17,f	;volatile
  4452                           
  4453                           ;user.c: 183: for (uint8_t i=0; i<data_length; i++){
  4454  0598  01F6               	clrf	Load@i
  4455  0599                     l2335:	
  4456  0599  0874               	movf	Load@data_length,w
  4457  059A  0276               	subwf	Load@i,w
  4458  059B  1803               	btfsc	3,0
  4459  059C  0008               	return
  4460                           
  4461                           ;user.c: 184: PMCON1bits.RD = 1;
  4462  059D  1415               	bsf	21,0	;volatile
  4463                           
  4464                           ;user.c: 185: _nop();
  4465  059E  0000               	nop
  4466                           
  4467                           ;user.c: 186: _nop();
  4468  059F  0000               	nop
  4469                           
  4470                           ;user.c: 187: *ptr++ = PMDAT;
  4471  05A0  0873               	movf	Load@ptr,w
  4472  05A1  0086               	movwf	6
  4473  05A2  0187               	clrf	7
  4474  05A3  0023               	movlb	3	; select bank3
  4475  05A4  0813               	movf	19,w	;volatile
  4476  05A5  3FC0               	movwi [0]fsr1
  4477  05A6  0814               	movf	20,w	;volatile
  4478  05A7  3FC1               	movwi [1]fsr1
  4479  05A8  3002               	movlw	2
  4480  05A9  00F5               	movwf	??_Load
  4481  05AA  0875               	movf	??_Load,w
  4482  05AB  07F3               	addwf	Load@ptr,f
  4483                           
  4484                           ;user.c: 188: PMADR ++;
  4485  05AC  3001               	movlw	1
  4486  05AD  0791               	addwf	17,f	;volatile
  4487  05AE  3000               	movlw	0
  4488  05AF  3D92               	addwfc	18,f	;volatile
  4489  05B0  3001               	movlw	1
  4490  05B1  00F5               	movwf	??_Load
  4491  05B2  0875               	movf	??_Load,w
  4492  05B3  07F6               	addwf	Load@i,f
  4493  05B4  2D99               	goto	l2335
  4494  05B5                     __end_of_Load:	
  4495                           
  4496                           	psect	intentry
  4497  0004                     __pintentry:	
  4498 ;; *************** function _High_Priority_Interrupt *****************
  4499 ;; Defined at:
  4500 ;;		line 285 in file "user.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;		None               void
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4514 ;;      Params:         0       0       0       0
  4515 ;;      Locals:         0       0       0       0
  4516 ;;      Temps:          1       0       0       0
  4517 ;;      Totals:         1       0       0       0
  4518 ;;Total ram usage:        1 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		Interrupt level 1
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527  0004                     _High_Priority_Interrupt:	
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4531  0004  3180               	pagesel	$
  4532  0005  0020               	movlb	0	; select bank0
  4533  0006  087F               	movf	127,w
  4534  0007  00F0               	movwf	??_High_Priority_Interrupt
  4535                           
  4536                           ;user.c: 286: if(INTCONbits.TMR0IF)
  4537  0008  1D0B               	btfss	11,2	;volatile
  4538  0009  2812               	goto	i1l213
  4539  000A  0022               	banksel	280	;# 
  4540  000B  0818               	movf	24,w	;# 
  4541  000C  3A20               	xorlw	32	;# 
  4542  000D  0098               	movwf	24	;# 
  4543                           
  4544                           ;user.c: 293: TMR0 -= 50;
  4545  000E  3032               	movlw	50
  4546  000F  0020               	movlb	0	; select bank0
  4547  0010  0295               	subwf	21,f	;volatile
  4548                           
  4549                           ;user.c: 294: INTCONbits.TMR0IF = 0;
  4550  0011  110B               	bcf	11,2	;volatile
  4551  0012                     i1l213:	
  4552  0012  0870               	movf	??_High_Priority_Interrupt,w
  4553  0013  00FF               	movwf	127
  4554  0014  0009               	retfie
  4555  0015                     __end_of_High_Priority_Interrupt:	
  4556  007E                     btemp	set	126	;btemp
  4557  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        70
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     42      76
    BANK1            80      0      64
    BANK2            80      0      38

Pointer List with Targets:

    ?_ADC_read	unsigned int  size(1) Largest target is 0

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> death_song(BANK2[38]), fire_song(BANK1[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), death_song(BANK2[38]), fire_song(BANK1[32]), 


Critical Paths under _main in COMMON

    _main->_handle_serial
    _handle_fire->_play_song
    _handle_serial->_hit_by
    _control_transfer->_Load
    _control_transfer->_Save
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _hit_by->_play_song
    _hit_by->_add_to_hitlist
    _handle_music->_tone
    _LoadFromFlash->_Load

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_control_transfer

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3631
                      _LoadFromFlash
                              _Setup
                      _handle_serial
                        _handle_fire
                       _handle_music
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0     220
                                              9 COMMON     2     2      0
                                              0 BANK0      2     2      0
                           _ADC_read
                       _green_led_on
                            _led_off
                          _play_song
                          _stop_song
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0    3216
                                             11 COMMON     1     1      0
                                             40 BANK0      2     2      0
                             _hit_by
                   _control_transfer
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    1869
                                              7 COMMON     2     2      0
                                              0 BANK0     40    40      0
                               _Load
                               _Save
                    _GET_CHAR_HELPER
                     _SEND_DATA_BYTE
                           _SEND_SOF
                           _SEND_EOF
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     124
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _Send_Byte                                            1     1      0      31
                                              1 COMMON     1     1      0
                    _Modulate_Serial
                 _Disable_Modulation
 ---------------------------------------------------------------------------------
 (3) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0    1158
                                              9 COMMON     2     2      0
                                              0 BANK0      5     5      0
                       _handle_music
                         _red_led_on
                            _led_off
                          _play_song
                               _Save
                 _get_hitlist_length
                     _add_to_hitlist
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     288
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (3) _get_hitlist_length                                   5     5      0     223
                                              1 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4     226
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     124
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _led_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_music                                         2     2      0      62
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _tone                                                 4     2      2      62
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (3) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0     133
                                              7 COMMON     2     2      0
                               _Load
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     133
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
   _Setup
   _handle_serial
     _hit_by
       _handle_music
         _stop_song
           _tone_off
         _tone
       _red_led_on
       _led_off
       _play_song
       _Save
       _get_hitlist_length
       _add_to_hitlist
     _control_transfer
       _Load
       _Save
       _GET_CHAR_HELPER
       _SEND_DATA_BYTE
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
       _SEND_SOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
       _SEND_EOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
   _handle_fire
     _ADC_read
     _green_led_on
     _led_off
     _play_song
     _stop_song
       _tone_off
     _Send_Byte
       _Modulate_Serial
       _Disable_Modulation
   _handle_music
     _stop_song
       _tone_off
     _tone

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       6       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      BF       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2A      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      26      10       47.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      C5      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Aug 19 01:01:40 2014

     __size_of_get_hitlist_length 0038                       __CFG_CP$OFF 0000                                __i 004A  
                              __x 006A                                __y 006B                     _LoadFromFlash 0486  
                             l124 0646                               l164 0691                               l185 045F  
                             l188 0483                               l268 065A                               l381 0313  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_LVP$OFF 0000  
                            l3011 02F0                              l3013 02FE                              l3005 02D4  
                            l3007 02E2                       Load@address 0071                              l3017 0303  
                            l2401 0372                              l3043 02F6                              l2341 06C2  
                            l2335 0599                              l2319 04B8                              l2425 0545  
                            l2409 037D                              l2611 0415                              l2355 04D5  
                            l2429 0547                              l2617 043A                              l2385 0339  
                            l2395 0367                              l2645 03CB                              l2637 03B8  
                            l2741 008D                              l2389 0349                              l2591 052F  
                            l2663 03A9                              l2399 0370                              l2585 051A  
                            l2665 03E9                              l2649 03D3                              l2913 0205  
                            l2905 01F3                              l2833 0159                              l2595 0537  
                            l2579 0506                              l2675 0669                              l2915 0207  
                            l2769 00C5                              l2955 025E                              l2977 0294  
                            u3015 0051                              u3025 0067                              u3205 00DB  
                            u3125 00A3                              u3305 0121                              u3075 007F  
                            u3255 00FE                              u2615 04FA                              u2545 049A  
                            u2625 0322                              u2635 032A                              u3445 0196  
                            u2645 0332                              u3705 0274                              u2745 064D  
                            u2665 0347                              u3395 016F                              u2595 04E3  
                            u3645 0244                              u3495 01BD                              u3807 0641  
                            u2865 042C                              u3817 06AA                              u3827 069C  
                            u3595 021D                              u3837 05EE                              u2965 05E3  
                            u3765 02AA                              u3847 05F5                              u3857 03BD  
                            u3867 03DE              control_transfer@data 0020                              _TMR0 0015  
                            _TMR1 0016              control_transfer@page 0045              control_transfer@dptr 0043  
                            _Load 0590                      __CFG_WRT$OFF 0000                              _Save 043F  
                            _main 06C0                     Send_Byte@data 0071                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 0673                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              start 0015  
                __end_of_ADC_read 0656                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0021                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0071  
                           i1l213 0012                             _PMADR 0191                             _PMDAT 0193  
                           _RCREG 0199                  __end_of_SEND_EOF 06AD                  __end_of_SEND_SOF 06A3  
                           Load@i 0076                             _TXREG 019A                             Save@i 0076  
                     hit_by@i_685 0024                             _Setup 061B                   __end_of_led_off 06DC  
                   ?_green_led_on 0070                   add_to_hitlist@i 0078                             status 0003  
                           wtemp0 007E          __end_of_control_transfer 0314                   __initialization 0016  
                    __end_of_Load 05B5                      __end_of_Save 0486                      __end_of_main 06C6  
                    __end_of_tone 068A                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075                            ??_main 007C                            ??_tone 0073  
            __end_of_handle_music 056A                    __CFG_PLLEN$OFF 0000                            ?_Setup 0070  
                  ??_green_led_on 0071              __size_of_handle_fire 006F                            _ADCON1 009E  
                          _ANSELA 018C                            _PMADRL 0191                            _PMCON2 0196  
                          _OSCCON 0099                            _PWM3DC 0DB3                            _PWM3PH 0DB1  
                          _SPBRGL 019B                            _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000  
                 ??_LoadFromFlash 0077                __size_of_Send_Byte 000E                    __CFG_STVREN$ON 0000  
                ??_SEND_DATA_BYTE 0072                            _config 005A                            _hit_by 0383  
                 play_song@length 0073                   play_song@repeat 0076                         ??_led_off 0071  
      __end_of_Disable_Modulation 06D9                       Save@address 0071                  _my_random_number 0057  
                       ?_ADC_read 0071                  __end_of_tone_off 06DF          __size_of_Modulate_Serial 0007  
         __end_of__initialization 0037           handle_serial@rx_counter 0058                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 0639  
                    __pidataBANK1 05FB                      __pidataBANK2 056A           _High_Priority_Interrupt 0004  
                  _OPTION_REGbits 0095                        ??_ADC_read 0073                           ??_Setup 0071  
                 _GET_CHAR_HELPER 0656                 __end_of_Send_Byte 0698           __size_of_add_to_hitlist 0054  
                      __pbssBANK0 004A                        __pbssBANK1 00A0             __end_of_handle_serial 0501  
                      _death_song 0120        __end_of_get_hitlist_length 0539                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 06C0              __end_of_green_led_on 06CB  
               _cur_song_duration 004E                        __pintentry 0004             __size_of_handle_music 0031  
                         ?_hit_by 0070                __size_of_play_song 0024                           Load@ptr 0073  
              __size_of_stop_song 0005                 ??_Modulate_Serial 0071                           Save@ptr 0073  
                    _handle_music 0539                 ?_control_transfer 0070                ??_control_transfer 0077  
                 SEND_DATA_BYTE@b 0074         ??_High_Priority_Interrupt 0070                         ?_tone_off 0070  
                 __size_of_hit_by 0068                           __ptext1 0314                           __ptext2 06C6  
                         __ptext3 0639                           __ptext4 04C6                           __ptext5 0039  
                         __ptext6 06A3                           __ptext7 0698                           __ptext8 05D9  
                         __ptext9 068A                           _led_off 06D9                        _red_led_on 06CB  
                       _T1CONbits 0018           __end_of_GET_CHAR_HELPER 0673                           _hitlist 00A0  
                         clrloop0 06B5                 add_to_hitlist@gun 0075              end_of_initialization 0037  
                         hit_by@i 0023                 __end_of_play_song 05D9                           init_ram 06BA  
                         initloop 06BB                         _RCSTAbits 019D                        ??_tone_off 0071  
                       _PORTAbits 000C                 __end_of_stop_song 06D5                     ??_handle_fire 0079  
                __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C                       _DACCON0bits 0118  
                  _add_to_hitlist 03EB                 __size_of_ADC_read 001D                _Disable_Modulation 06D5  
                       _TXSTAbits 019E               control_transfer@cmd 0040             __size_of_green_led_on 0005  
             ?_Disable_Modulation 0070                handle_fire@counter 0050                 __size_of_SEND_EOF 000A  
               __size_of_SEND_SOF 000B             __end_of_LoadFromFlash 04C6                       _BAUDCONbits 019F  
                  __end_of_hit_by 03EB                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                     ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070               start_initialization 0016  
            ??_Disable_Modulation 0071            __end_of_add_to_hitlist 043F                      _green_led_on 06C6  
             __end_of_handle_fire 0383                         _Send_Byte 068A                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 007C                       __pdataBANK1 00C0  
                     __pdataBANK2 0120                          ??_hit_by 0079                _get_hitlist_length 0501  
                     __pbssCOMMON 007C                   _Modulate_Serial 06AD                     __pcstackBANK0 0020  
                 ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 0022                         __checksum 0054  
             ?_get_hitlist_length 0070                  handle_fire@timer 0052                   Save@data_length 0074  
                      ?_Send_Byte 0070               __size_of_red_led_on 0005              ??_get_hitlist_length 0071  
                  handle_serial@b 007B                 __size_of_tone_off 0003                         _fire_song 00C0  
          __size_of_handle_serial 003B                          ?_led_off 0070         __size_of_control_transfer 02DB  
                     _handle_fire 0314                          _ADC_read 0639                    __size_of_Setup 001E  
                       clear_ram0 06B4                          _PIE1bits 0091                   Load@data_length 0074  
                       _play_song 05B5                          _PIR1bits 0011                          _SEND_EOF 06A3  
                        _SEND_SOF 0698           __end_of_Modulate_Serial 06B4                        _ADCON0bits 009D  
             get_hitlist_length@i 0075                control_transfer@id 0042                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 06D0                         hit_by@who 0020  
                     ??_Send_Byte 0071                     _handle_serial 04C6          ?_High_Priority_Interrupt 0070  
                      ?_play_song 0071                      ??_red_led_on 0071                        _ANSELAbits 018C  
                __size_of_led_off 0003                    _SEND_DATA_BYTE 05D9                        ?_stop_song 0070  
                 _cur_song_length 0055     control_transfer@random_number 0041                          __ptext10 06D5  
                        __ptext11 06AD                          __ptext20 0539                          __ptext12 0656  
                        __ptext21 0673                          __ptext13 0383                          __ptext22 06D0  
                        __ptext14 03EB                          __ptext23 06DC                          __ptext15 0501  
                        __ptext24 061B                          __ptext16 043F                          __ptext25 0486  
                        __ptext17 05B5                          __ptext26 0590                          __ptext18 06D9  
                        __ptext19 06CB                   _cur_song_repeat 0056                     __size_of_Load 0025  
                  ?_handle_serial 0070                          _cur_song 004C                     __size_of_Save 0047  
                   __size_of_main 0006                     __size_of_tone 0017                __end_of_red_led_on 06D0  
                        _tone_off 06DC                 control_transfer@i 0044                 control_transfer@x 0047  
          play_song@note_duration 0074                  ?_Modulate_Serial 0070                  ??_add_to_hitlist 0071  
          __end_of_SEND_DATA_BYTE 05FB                  _control_transfer 0039                        _INTCONbits 000B  
     __size_of_Disable_Modulation 0004                       _PWM3CONbits 0DBB                          intlevel1 0000  
        __size_of_GET_CHAR_HELPER 001D   __end_of_High_Priority_Interrupt 0015                      handle_fire@a 0020  
          __size_of_LoadFromFlash 0040                        _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000  
                   ?_handle_music 0070                       ??_play_song 0077                   ?_SEND_DATA_BYTE 0070  
                    ?_handle_fire 0070                       ??_stop_song 0071                   ??_handle_serial 0048  
              handle_serial@rx_id 0059                    ??_handle_music 0075  
