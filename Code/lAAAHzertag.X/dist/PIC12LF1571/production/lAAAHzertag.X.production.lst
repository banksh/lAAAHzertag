

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Aug 23 05:33:58 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0197                     	;# 
   100  0199                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019C                     	;# 
   105  019D                     	;# 
   106  019E                     	;# 
   107  019F                     	;# 
   108  020C                     	;# 
   109  028C                     	;# 
   110  030C                     	;# 
   111  038C                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0691                     	;# 
   116  0692                     	;# 
   117  0693                     	;# 
   118  0694                     	;# 
   119  0695                     	;# 
   120  0D8E                     	;# 
   121  0D8F                     	;# 
   122  0D90                     	;# 
   123  0D91                     	;# 
   124  0D91                     	;# 
   125  0D92                     	;# 
   126  0D93                     	;# 
   127  0D93                     	;# 
   128  0D94                     	;# 
   129  0D95                     	;# 
   130  0D95                     	;# 
   131  0D96                     	;# 
   132  0D97                     	;# 
   133  0D97                     	;# 
   134  0D98                     	;# 
   135  0D99                     	;# 
   136  0D99                     	;# 
   137  0D9A                     	;# 
   138  0D9B                     	;# 
   139  0D9C                     	;# 
   140  0D9C                     	;# 
   141  0D9D                     	;# 
   142  0D9D                     	;# 
   143  0D9E                     	;# 
   144  0D9F                     	;# 
   145  0DA0                     	;# 
   146  0DA1                     	;# 
   147  0DA1                     	;# 
   148  0DA2                     	;# 
   149  0DA3                     	;# 
   150  0DA3                     	;# 
   151  0DA4                     	;# 
   152  0DA5                     	;# 
   153  0DA5                     	;# 
   154  0DA6                     	;# 
   155  0DA7                     	;# 
   156  0DA7                     	;# 
   157  0DA8                     	;# 
   158  0DA9                     	;# 
   159  0DA9                     	;# 
   160  0DAA                     	;# 
   161  0DAB                     	;# 
   162  0DAC                     	;# 
   163  0DAC                     	;# 
   164  0DAD                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBC                     	;# 
   187  0DBD                     	;# 
   188  0DBD                     	;# 
   189  0DBE                     	;# 
   190  0DBF                     	;# 
   191  0DC0                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  028C                     	;# 
   277  030C                     	;# 
   278  038C                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0691                     	;# 
   283  0692                     	;# 
   284  0693                     	;# 
   285  0694                     	;# 
   286  0695                     	;# 
   287  0D8E                     	;# 
   288  0D8F                     	;# 
   289  0D90                     	;# 
   290  0D91                     	;# 
   291  0D91                     	;# 
   292  0D92                     	;# 
   293  0D93                     	;# 
   294  0D93                     	;# 
   295  0D94                     	;# 
   296  0D95                     	;# 
   297  0D95                     	;# 
   298  0D96                     	;# 
   299  0D97                     	;# 
   300  0D97                     	;# 
   301  0D98                     	;# 
   302  0D99                     	;# 
   303  0D99                     	;# 
   304  0D9A                     	;# 
   305  0D9B                     	;# 
   306  0D9C                     	;# 
   307  0D9C                     	;# 
   308  0D9D                     	;# 
   309  0D9D                     	;# 
   310  0D9E                     	;# 
   311  0D9F                     	;# 
   312  0DA0                     	;# 
   313  0DA1                     	;# 
   314  0DA1                     	;# 
   315  0DA2                     	;# 
   316  0DA3                     	;# 
   317  0DA3                     	;# 
   318  0DA4                     	;# 
   319  0DA5                     	;# 
   320  0DA5                     	;# 
   321  0DA6                     	;# 
   322  0DA7                     	;# 
   323  0DA7                     	;# 
   324  0DA8                     	;# 
   325  0DA9                     	;# 
   326  0DA9                     	;# 
   327  0DAA                     	;# 
   328  0DAB                     	;# 
   329  0DAC                     	;# 
   330  0DAC                     	;# 
   331  0DAD                     	;# 
   332  0DAD                     	;# 
   333  0DAE                     	;# 
   334  0DAF                     	;# 
   335  0DB0                     	;# 
   336  0DB1                     	;# 
   337  0DB1                     	;# 
   338  0DB2                     	;# 
   339  0DB3                     	;# 
   340  0DB3                     	;# 
   341  0DB4                     	;# 
   342  0DB5                     	;# 
   343  0DB5                     	;# 
   344  0DB6                     	;# 
   345  0DB7                     	;# 
   346  0DB7                     	;# 
   347  0DB8                     	;# 
   348  0DB9                     	;# 
   349  0DB9                     	;# 
   350  0DBA                     	;# 
   351  0DBB                     	;# 
   352  0DBC                     	;# 
   353  0DBC                     	;# 
   354  0DBD                     	;# 
   355  0DBD                     	;# 
   356  0DBE                     	;# 
   357  0DBF                     	;# 
   358  0DC0                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  028C                     	;# 
   444  030C                     	;# 
   445  038C                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  0695                     	;# 
   454  0D8E                     	;# 
   455  0D8F                     	;# 
   456  0D90                     	;# 
   457  0D91                     	;# 
   458  0D91                     	;# 
   459  0D92                     	;# 
   460  0D93                     	;# 
   461  0D93                     	;# 
   462  0D94                     	;# 
   463  0D95                     	;# 
   464  0D95                     	;# 
   465  0D96                     	;# 
   466  0D97                     	;# 
   467  0D97                     	;# 
   468  0D98                     	;# 
   469  0D99                     	;# 
   470  0D99                     	;# 
   471  0D9A                     	;# 
   472  0D9B                     	;# 
   473  0D9C                     	;# 
   474  0D9C                     	;# 
   475  0D9D                     	;# 
   476  0D9D                     	;# 
   477  0D9E                     	;# 
   478  0D9F                     	;# 
   479  0DA0                     	;# 
   480  0DA1                     	;# 
   481  0DA1                     	;# 
   482  0DA2                     	;# 
   483  0DA3                     	;# 
   484  0DA3                     	;# 
   485  0DA4                     	;# 
   486  0DA5                     	;# 
   487  0DA5                     	;# 
   488  0DA6                     	;# 
   489  0DA7                     	;# 
   490  0DA7                     	;# 
   491  0DA8                     	;# 
   492  0DA9                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAC                     	;# 
   498  0DAD                     	;# 
   499  0DAD                     	;# 
   500  0DAE                     	;# 
   501  0DAF                     	;# 
   502  0DB0                     	;# 
   503  0DB1                     	;# 
   504  0DB1                     	;# 
   505  0DB2                     	;# 
   506  0DB3                     	;# 
   507  0DB3                     	;# 
   508  0DB4                     	;# 
   509  0DB5                     	;# 
   510  0DB5                     	;# 
   511  0DB6                     	;# 
   512  0DB7                     	;# 
   513  0DB7                     	;# 
   514  0DB8                     	;# 
   515  0DB9                     	;# 
   516  0DB9                     	;# 
   517  0DBA                     	;# 
   518  0DBB                     	;# 
   519  0DBC                     	;# 
   520  0DBC                     	;# 
   521  0DBD                     	;# 
   522  0DBD                     	;# 
   523  0DBE                     	;# 
   524  0DBF                     	;# 
   525  0DC0                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540                           
   541                           	psect	stringtext
   542  0500                     __pstringtext:	
   543  0500                     _death_song:	
   544  0500  3462               	retlw	98
   545  0501  34F0               	retlw	240
   546  0502  3400               	retlw	0
   547  0503  34FA               	retlw	250
   548  0504  3400               	retlw	0
   549  0505  3400               	retlw	0
   550  0506  3400               	retlw	0
   551  0507  3400               	retlw	0
   552  0508  3400               	retlw	0
   553  0509  3400               	retlw	0
   554  050A  3400               	retlw	0
   555  050B  3400               	retlw	0
   556  050C  346F               	retlw	111
   557  050D  3477               	retlw	119
   558  050E  347A               	retlw	122
   559  050F  3459               	retlw	89
   560  0510  3400               	retlw	0
   561  0511  3400               	retlw	0
   562  0512  34CC               	retlw	204
   563  0513  345E               	retlw	94
   564  0514  347A               	retlw	122
   565  0515  3459               	retlw	89
   566  0516  34CC               	retlw	204
   567  0517  345E               	retlw	94
   568  0518  346B               	retlw	107
   569  0519  346A               	retlw	106
   570  051A  3400               	retlw	0
   571  051B  3400               	retlw	0
   572  051C  346F               	retlw	111
   573  051D  3477               	retlw	119
   574  051E  3470               	retlw	112
   575  051F  349F               	retlw	159
   576  0520  3400               	retlw	0
   577  0521  3400               	retlw	0
   578  0522  3470               	retlw	112
   579  0523  349F               	retlw	159
   580  0524  34EA               	retlw	234
   581  0525  34EE               	retlw	238
   582  0526                     __end_of_death_song:	
   583  0526                     _fire_song:	
   584  0526  34A0               	retlw	160
   585  0527  340F               	retlw	15
   586  0528  34DB               	retlw	219
   587  0529  3411               	retlw	17
   588  052A  34D5               	retlw	213
   589  052B  3414               	retlw	20
   590  052C  3400               	retlw	0
   591  052D  3419               	retlw	25
   592  052E  3440               	retlw	64
   593  052F  341F               	retlw	31
   594  0530  34AA               	retlw	170
   595  0531  3429               	retlw	41
   596  0532  3480               	retlw	128
   597  0533  343E               	retlw	62
   598  0534  3400               	retlw	0
   599  0535  347D               	retlw	125
   600  0536  34E3               	retlw	227
   601  0537  348A               	retlw	138
   602  0538  3440               	retlw	64
   603  0539  349C               	retlw	156
   604  053A  3492               	retlw	146
   605  053B  34B2               	retlw	178
   606  053C  3455               	retlw	85
   607  053D  34D0               	retlw	208
   608  053E  3400               	retlw	0
   609  053F  34FA               	retlw	250
   610  0540  3400               	retlw	0
   611  0541  3400               	retlw	0
   612  0542  3400               	retlw	0
   613  0543  3400               	retlw	0
   614  0544  3400               	retlw	0
   615  0545  3400               	retlw	0
   616  0546                     __end_of_fire_song:	
   617  0546                     _one_up:	
   618  0546  34CC               	retlw	204
   619  0547  345E               	retlw	94
   620  0548  34B8               	retlw	184
   621  0549  344F               	retlw	79
   622  054A  3467               	retlw	103
   623  054B  342F               	retlw	47
   624  054C  34B9               	retlw	185
   625  054D  343B               	retlw	59
   626  054E  3434               	retlw	52
   627  054F  3435               	retlw	53
   628  0550  34DC               	retlw	220
   629  0551  3427               	retlw	39
   630  0552                     __end_of_one_up:	
   631  0552                     _dead_song:	
   632  0552  346F               	retlw	111
   633  0553  3477               	retlw	119
   634  0554  3470               	retlw	112
   635  0555  349F               	retlw	159
   636  0556  34EA               	retlw	234
   637  0557  34EE               	retlw	238
   638  0558                     __end_of_dead_song:	
   639  0016                     _TMR1	set	22
   640  000B                     _INTCONbits	set	11
   641  0011                     _PIR1bits	set	17
   642  000C                     _PORTAbits	set	12
   643  0018                     _T1CONbits	set	24
   644  001C                     _T2CONbits	set	28
   645  0015                     _TMR0	set	21
   646  001A                     _TMR2	set	26
   647  009B                     _ADRES	set	155
   648  009D                     _ADCON0bits	set	157
   649  009E                     _ADCON1	set	158
   650  0095                     _OPTION_REGbits	set	149
   651  0099                     _OSCCON	set	153
   652  008C                     _TRISAbits	set	140
   653  0118                     _DACCON0bits	set	280
   654  0191                     _PMADR	set	401
   655  0193                     _PMDAT	set	403
   656  018C                     _ANSELA	set	396
   657  018C                     _ANSELAbits	set	396
   658  019F                     _BAUDCONbits	set	415
   659  0191                     _PMADRL	set	401
   660  0195                     _PMCON1bits	set	405
   661  0196                     _PMCON2	set	406
   662  0199                     _RCREG	set	409
   663  019D                     _RCSTAbits	set	413
   664  019B                     _SPBRGL	set	411
   665  019A                     _TXREG	set	410
   666  019E                     _TXSTAbits	set	414
   667  0DB3                     _PWM3DC	set	3507
   668  0DB1                     _PWM3PH	set	3505
   669  0DB5                     _PWM3PR	set	3509
   670  0DBB                     _PWM3CONbits	set	3515
   671  0DBF                     _PWM3LDCONbits	set	3519
   672                           
   673                           ; #config settings
   674  0000                     
   675                           	psect	cinit
   676  0016                     start_initialization:	
   677  0016                     __initialization:	
   678                           
   679                           ; Clear objects allocated to COMMON
   680  0016  01FC               	clrf	__pbssCOMMON& (0+127)
   681                           
   682                           ; Clear objects allocated to BANK0
   683  0017  305C               	movlw	low __pbssBANK0
   684  0018  0084               	movwf	4
   685  0019  3000               	movlw	high __pbssBANK0
   686  001A  0085               	movwf	5
   687  001B  3012               	movlw	18
   688  001C  24E3               	fcall	clear_ram0
   689                           
   690                           ; Clear objects allocated to BANK1
   691  001D  30A0               	movlw	low __pbssBANK1
   692  001E  0084               	movwf	4
   693  001F  3000               	movlw	high __pbssBANK1
   694  0020  0085               	movwf	5
   695  0021  3032               	movlw	50
   696  0022  24E3               	fcall	clear_ram0
   697  0023                     end_of_initialization:	
   698                           ;End of C runtime variable initialization code
   699                           
   700  0023                     __end_of__initialization:	
   701  0023  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   702  0024  0020               	movlb	0
   703  0025  2CCF               	ljmp	_main	;jump to C main() function
   704                           
   705                           	psect	bssCOMMON
   706  007C                     __pbssCOMMON:	
   707  007C                     __x:	
   708  007C                     	ds	1
   709                           
   710                           	psect	bssBANK0
   711  005C                     __pbssBANK0:	
   712  005C                     __i:	
   713  005C                     	ds	2
   714  005E                     _cur_song:	
   715  005E                     	ds	2
   716  0060                     _cur_song_duration:	
   717  0060                     	ds	2
   718  0062                     handle_fire@counter:	
   719  0062                     	ds	2
   720  0064                     handle_fire@timer:	
   721  0064                     	ds	2
   722  0066                     __checksum:	
   723  0066                     	ds	1
   724  0067                     _cur_song_length:	
   725  0067                     	ds	1
   726  0068                     _cur_song_ptr:	
   727  0068                     	ds	1
   728  0069                     _cur_song_repeat:	
   729  0069                     	ds	1
   730  006A                     _my_random_number:	
   731  006A                     	ds	1
   732  006B                     handle_serial@rx_counter:	
   733  006B                     	ds	1
   734  006C                     handle_serial@rx_id:	
   735  006C                     	ds	1
   736  006D                     __y:	
   737  006D                     	ds	1
   738                           
   739                           	psect	bssBANK1
   740  00A0                     __pbssBANK1:	
   741  00A0                     _hitlist:	
   742  00A0                     	ds	32
   743  00C0                     _config:	
   744  00C0                     	ds	18
   745                           
   746                           	psect	clrtext
   747  04E3                     clear_ram0:	
   748                           ;	Called with FSR0 containing the base address, and
   749                           ;	WREG with the size to clear
   750                           
   751  04E3  0064               	clrwdt	;clear the watchdog before getting into this loop
   752  04E4                     clrloop0:	
   753  04E4  0180               	clrf	0	;clear RAM location pointed to by FSR
   754  04E5  3101               	addfsr 0,1
   755  04E6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   756  04E7  2CE4               	goto	clrloop0	;have we reached the end yet?
   757  04E8  3400               	retlw	0	;all done for this memory range, return
   758                           
   759                           	psect	cstackCOMMON
   760  0070                     __pcstackCOMMON:	
   761  0070                     ?_Setup:	
   762  0070                     ?_super_dead_mode:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_handle_music:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_delay_1_ms:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_cheat:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_control_transfer:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_LoadFromFlash:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_main:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?_red_led_on:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ?_green_led_on:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_stop_song:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ?_Send_Byte:	
   793                           ; 0 bytes @ 0x0
   794                           
   795  0070                     ?_High_Priority_Interrupt:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ??_High_Priority_Interrupt:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_add_to_hitlist:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ?_hit_by:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ?_SEND_DATA_BYTE:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?_SEND_SOF:	
   811                           ; 0 bytes @ 0x0
   812                           
   813  0070                     ?_SEND_EOF:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?_handle_serial:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ?_handle_fire:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0070                     ?_GET_CHAR_HELPER:	
   823                           ; 1 bytes @ 0x0
   824                           
   825                           
   826                           ; 1 bytes @ 0x0
   827  0070                     	ds	1
   828  0071                     ?_Load:	
   829  0071                     ?_Save:	
   830                           ; 0 bytes @ 0x1
   831                           
   832  0071                     ??_delay_1_ms:	
   833                           ; 0 bytes @ 0x1
   834                           
   835  0071                     ?_tone:	
   836                           ; 0 bytes @ 0x1
   837                           
   838  0071                     ??_red_led_on:	
   839                           ; 0 bytes @ 0x1
   840                           
   841  0071                     ??_green_led_on:	
   842                           ; 0 bytes @ 0x1
   843                           
   844  0071                     ?_play_song:	
   845                           ; 0 bytes @ 0x1
   846                           
   847  0071                     ??_stop_song:	
   848                           ; 0 bytes @ 0x1
   849                           
   850  0071                     ??_add_to_hitlist:	
   851                           ; 0 bytes @ 0x1
   852                           
   853  0071                     ??_GET_CHAR_HELPER:	
   854                           ; 0 bytes @ 0x1
   855                           
   856  0071                     ?_ADC_read:	
   857                           ; 0 bytes @ 0x1
   858                           
   859  0071                     play_song@song:	
   860                           ; 2 bytes @ 0x1
   861                           
   862  0071                     tone@period:	
   863                           ; 2 bytes @ 0x1
   864                           
   865  0071                     Load@address:	
   866                           ; 2 bytes @ 0x1
   867                           
   868  0071                     Save@address:	
   869                           ; 2 bytes @ 0x1
   870                           
   871  0071                     delay_1_ms@i:	
   872                           ; 2 bytes @ 0x1
   873                           
   874                           
   875                           ; 2 bytes @ 0x1
   876  0071                     	ds	1
   877  0072                     GET_CHAR_HELPER@val:	
   878                           
   879                           ; 1 bytes @ 0x2
   880  0072                     	ds	1
   881  0073                     ??_Setup:	
   882  0073                     ??_tone:	
   883                           ; 0 bytes @ 0x3
   884                           
   885  0073                     ??_ADC_read:	
   886                           ; 0 bytes @ 0x3
   887                           
   888  0073                     play_song@length:	
   889                           ; 0 bytes @ 0x3
   890                           
   891  0073                     Load@ptr:	
   892                           ; 1 bytes @ 0x3
   893                           
   894  0073                     Save@ptr:	
   895                           ; 1 bytes @ 0x3
   896                           
   897                           
   898                           ; 1 bytes @ 0x3
   899  0073                     	ds	1
   900  0074                     Load@data_length:	
   901  0074                     Save@data_length:	
   902                           ; 1 bytes @ 0x4
   903                           
   904  0074                     play_song@note_duration:	
   905                           ; 1 bytes @ 0x4
   906                           
   907                           
   908                           ; 2 bytes @ 0x4
   909  0074                     	ds	1
   910  0075                     ??_Load:	
   911  0075                     ??_Save:	
   912                           ; 0 bytes @ 0x5
   913                           
   914  0075                     ??_handle_music:	
   915                           ; 0 bytes @ 0x5
   916                           
   917  0075                     ??_cheat:	
   918                           ; 0 bytes @ 0x5
   919                           
   920  0075                     add_to_hitlist@gun:	
   921                           ; 0 bytes @ 0x5
   922                           
   923                           
   924                           ; 1 bytes @ 0x5
   925  0075                     	ds	1
   926  0076                     play_song@repeat:	
   927  0076                     Load@i:	
   928                           ; 1 bytes @ 0x6
   929                           
   930  0076                     Save@i:	
   931                           ; 1 bytes @ 0x6
   932                           
   933  0076                     cheat@i:	
   934                           ; 1 bytes @ 0x6
   935                           
   936  0076                     add_to_hitlist@gun16:	
   937                           ; 1 bytes @ 0x6
   938                           
   939                           
   940                           ; 2 bytes @ 0x6
   941  0076                     	ds	1
   942  0077                     ??_LoadFromFlash:	
   943  0077                     ??_play_song:	
   944                           ; 0 bytes @ 0x7
   945                           
   946  0077                     cheat@i_724:	
   947                           ; 0 bytes @ 0x7
   948                           
   949                           
   950                           ; 1 bytes @ 0x7
   951  0077                     	ds	1
   952  0078                     ??_Send_Byte:	
   953  0078                     add_to_hitlist@i:	
   954                           ; 0 bytes @ 0x8
   955                           
   956                           
   957                           ; 1 bytes @ 0x8
   958  0078                     	ds	1
   959  0079                     Send_Byte@data:	
   960                           
   961                           ; 1 bytes @ 0x9
   962  0079                     	ds	1
   963  007A                     Send_Byte@i:	
   964                           
   965                           ; 2 bytes @ 0xA
   966  007A                     	ds	2
   967  007C                     ??_main:	
   968  007C                     ??_SEND_SOF:	
   969                           ; 0 bytes @ 0xC
   970                           
   971  007C                     ??_SEND_EOF:	
   972                           ; 0 bytes @ 0xC
   973                           
   974                           
   975                           	psect	cstackBANK0
   976  0020                     __pcstackBANK0:	
   977                           ; 0 bytes @ 0xC
   978                           
   979  0020                     ??_handle_fire:	
   980  0020                     ??_SEND_DATA_BYTE:	
   981                           ; 0 bytes @ 0x0
   982                           
   983                           
   984                           ; 0 bytes @ 0x0
   985  0020                     	ds	2
   986  0022                     SEND_DATA_BYTE@b:	
   987  0022                     handle_fire@a:	
   988                           ; 1 bytes @ 0x2
   989                           
   990                           
   991                           ; 2 bytes @ 0x2
   992  0022                     	ds	1
   993  0023                     ??_control_transfer:	
   994                           
   995                           ; 0 bytes @ 0x3
   996  0023                     	ds	2
   997  0025                     control_transfer@data:	
   998                           
   999                           ; 32 bytes @ 0x5
  1000  0025                     	ds	32
  1001  0045                     control_transfer@cmd:	
  1002                           
  1003                           ; 1 bytes @ 0x25
  1004  0045                     	ds	1
  1005  0046                     control_transfer@random_number:	
  1006                           
  1007                           ; 1 bytes @ 0x26
  1008  0046                     	ds	1
  1009  0047                     control_transfer@id:	
  1010                           
  1011                           ; 1 bytes @ 0x27
  1012  0047                     	ds	1
  1013  0048                     control_transfer@dptr:	
  1014                           
  1015                           ; 1 bytes @ 0x28
  1016  0048                     	ds	1
  1017  0049                     control_transfer@i:	
  1018                           
  1019                           ; 1 bytes @ 0x29
  1020  0049                     	ds	1
  1021  004A                     control_transfer@page:	
  1022                           
  1023                           ; 2 bytes @ 0x2A
  1024  004A                     	ds	2
  1025  004C                     control_transfer@x:	
  1026                           
  1027                           ; 1 bytes @ 0x2C
  1028  004C                     	ds	1
  1029  004D                     ??_super_dead_mode:	
  1030                           
  1031                           ; 0 bytes @ 0x2D
  1032  004D                     	ds	2
  1033  004F                     super_dead_mode@b:	
  1034                           
  1035                           ; 1 bytes @ 0x2F
  1036  004F                     	ds	1
  1037  0050                     super_dead_mode@counter:	
  1038                           
  1039                           ; 2 bytes @ 0x30
  1040  0050                     	ds	2
  1041  0052                     ??_hit_by:	
  1042                           
  1043                           ; 0 bytes @ 0x32
  1044  0052                     	ds	2
  1045  0054                     hit_by@who:	
  1046                           
  1047                           ; 1 bytes @ 0x34
  1048  0054                     	ds	1
  1049  0055                     hit_by@respawn_timer:	
  1050                           
  1051                           ; 2 bytes @ 0x35
  1052  0055                     	ds	2
  1053  0057                     hit_by@i:	
  1054                           
  1055                           ; 1 bytes @ 0x37
  1056  0057                     	ds	1
  1057  0058                     hit_by@i_747:	
  1058                           
  1059                           ; 1 bytes @ 0x38
  1060  0058                     	ds	1
  1061  0059                     ??_handle_serial:	
  1062                           
  1063                           ; 0 bytes @ 0x39
  1064  0059                     	ds	2
  1065  005B                     handle_serial@b:	
  1066                           
  1067                           ; 1 bytes @ 0x3B
  1068  005B                     	ds	1
  1069                           
  1070                           	psect	maintext
  1071  04CF                     __pmaintext:	
  1072 ;;
  1073 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1074 ;;
  1075 ;; *************** function _main *****************
  1076 ;; Defined at:
  1077 ;;		line 48 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;		None               void
  1084 ;; Registers used:
  1085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1086 ;; Tracked objects:
  1087 ;;		On entry : 17F/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1091 ;;      Params:         0       0       0       0
  1092 ;;      Locals:         0       0       0       0
  1093 ;;      Temps:          0       0       0       0
  1094 ;;      Totals:         0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels required when called:   10
  1097 ;; This function calls:
  1098 ;;		_LoadFromFlash
  1099 ;;		_Setup
  1100 ;;		_handle_fire
  1101 ;;		_handle_music
  1102 ;;		_handle_serial
  1103 ;;		_super_dead_mode
  1104 ;; This function is called by:
  1105 ;;		Startup code after reset
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           
  1110                           ;psect for function _main
  1111  04CF                     _main:	
  1112                           
  1113                           ;main.c: 50: Setup();
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1117  04CF  275E               	fcall	_Setup
  1118                           
  1119                           ;main.c: 51: LoadFromFlash();
  1120  04D0  2658               	fcall	_LoadFromFlash
  1121                           
  1122                           ;main.c: 52: if(!config.health) {
  1123  04D1  0021               	movlb	1	; select bank1
  1124  04D2  0845               	movf	((_config+1)^(0+128)+4),w
  1125  04D3  0444               	iorwf	(_config^(0+128)+4),w
  1126  04D4  1D03               	skipz
  1127  04D5  2CD7               	goto	l26
  1128                           
  1129                           ;main.c: 53: super_dead_mode();
  1130  04D6  2558               	fcall	_super_dead_mode
  1131  04D7                     l26:	
  1132                           ;main.c: 54: }
  1133                           ;main.c: 56: while(1)
  1134                           
  1135                           
  1136                           ;main.c: 57: {
  1137                           ;main.c: 58: handle_serial();
  1138  04D7  25AF               	fcall	_handle_serial
  1139                           
  1140                           ;main.c: 59: handle_fire();
  1141  04D8  2342               	fcall	_handle_fire
  1142                           
  1143                           ;main.c: 60: handle_music();
  1144  04D9  272D               	fcall	_handle_music
  1145  04DA  2CD7               	goto	l26
  1146  04DB                     __end_of_main:	
  1147                           
  1148                           	psect	text1
  1149  05AF                     __ptext1:	
  1150 ;; *************** function _handle_serial *****************
  1151 ;; Defined at:
  1152 ;;		line 135 in file "protocol.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  b               1   59[BANK0 ] unsigned char 
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      unsigned char 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1166 ;;      Params:         0       0       0       0
  1167 ;;      Locals:         0       1       0       0
  1168 ;;      Temps:          0       2       0       0
  1169 ;;      Totals:         0       3       0       0
  1170 ;;Total ram usage:        3 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    9
  1173 ;; This function calls:
  1174 ;;		_control_transfer
  1175 ;;		_hit_by
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _handle_serial
  1183  05AF                     _handle_serial:	
  1184                           
  1185                           ;protocol.c: 137: static uint8_t rx_id=0;
  1186                           ;protocol.c: 138: static uint8_t rx_counter=0;
  1187                           ;protocol.c: 139: uint8_t b;
  1188                           ;protocol.c: 141: if(!(PIR1bits.RCIF)) return 0;
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1192  05AF  0020               	movlb	0	; select bank0
  1193  05B0  1E91               	btfss	17,5	;volatile
  1194  05B1  0008               	return
  1195                           
  1196                           ;protocol.c: 142: b=(RCREG^0b10101010);
  1197                           
  1198                           ;	Return value of _handle_serial is never used
  1199  05B2  0023               	movlb	3	; select bank3
  1200  05B3  0819               	movf	25,w	;volatile
  1201  05B4  3AAA               	xorlw	170
  1202  05B5  0020               	movlb	0	; select bank0
  1203  05B6  00D9               	movwf	??_handle_serial
  1204  05B7  0859               	movf	??_handle_serial,w
  1205  05B8  00DB               	movwf	handle_serial@b
  1206                           
  1207                           ;protocol.c: 143: if(b == 0x10) {
  1208  05B9  085B               	movf	handle_serial@b,w
  1209  05BA  3A10               	xorlw	16
  1210  05BB  1D03               	skipz
  1211  05BC  2DBF               	goto	l3163
  1212                           
  1213                           ;protocol.c: 144: control_transfer();
  1214  05BD  2026               	fcall	_control_transfer
  1215                           
  1216                           ;protocol.c: 145: }
  1217  05BE  0008               	return
  1218  05BF                     l3163:	
  1219                           
  1220                           ;protocol.c: 147: else if((b > 0x80) && (b != config.id) && (config.id != 0x80) && !(con
      +                          fig.id & (1<<9))) {
  1221  05BF  3081               	movlw	129
  1222  05C0  0020               	movlb	0	; select bank0
  1223  05C1  025B               	subwf	handle_serial@b,w
  1224  05C2  1C03               	skipc
  1225  05C3  0008               	return
  1226  05C4  085B               	movf	handle_serial@b,w
  1227  05C5  00D9               	movwf	??_handle_serial
  1228  05C6  01DA               	clrf	??_handle_serial+1
  1229  05C7  0021               	movlb	1	; select bank1
  1230  05C8  0841               	movf	(_config+1)^(0+128),w
  1231  05C9  0020               	movlb	0	; select bank0
  1232  05CA  065A               	xorwf	??_handle_serial+1,w
  1233  05CB  1D03               	skipz
  1234  05CC  2DD1               	goto	u4245
  1235  05CD  0021               	movlb	1	; select bank1
  1236  05CE  0840               	movf	_config^(0+128),w
  1237  05CF  0020               	movlb	0	; select bank0
  1238  05D0  0659               	xorwf	??_handle_serial,w
  1239  05D1                     u4245:	
  1240  05D1  1903               	skipnz
  1241  05D2  0008               	return
  1242  05D3  3080               	movlw	128
  1243  05D4  0021               	movlb	1	; select bank1
  1244  05D5  0640               	xorwf	_config^(0+128),w
  1245  05D6  0441               	iorwf	(_config+1)^(0+128),w
  1246  05D7  1903               	skipnz
  1247  05D8  0008               	return
  1248  05D9  18C1               	btfsc	(_config+1)^(0+128),1
  1249  05DA  0008               	return
  1250                           
  1251                           ;protocol.c: 148: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1252  05DB  0020               	movlb	0	; select bank0
  1253  05DC  085B               	movf	handle_serial@b,w
  1254  05DD  066C               	xorwf	handle_serial@rx_id,w
  1255  05DE  1903               	btfsc	3,2
  1256  05DF  1891               	btfsc	17,1	;volatile
  1257  05E0  01EB               	clrf	handle_serial@rx_counter
  1258                           
  1259                           ;protocol.c: 149: TMR2 = 0;
  1260  05E1  019A               	clrf	26	;volatile
  1261                           
  1262                           ;protocol.c: 150: PIR1bits.TMR2IF = 0;
  1263  05E2  1091               	bcf	17,1	;volatile
  1264                           
  1265                           ;protocol.c: 151: rx_id = b;
  1266  05E3  085B               	movf	handle_serial@b,w
  1267  05E4  00D9               	movwf	??_handle_serial
  1268  05E5  0859               	movf	??_handle_serial,w
  1269  05E6  00EC               	movwf	handle_serial@rx_id
  1270                           
  1271                           ;protocol.c: 152: rx_counter++;
  1272  05E7  3001               	movlw	1
  1273  05E8  00D9               	movwf	??_handle_serial
  1274  05E9  0859               	movf	??_handle_serial,w
  1275  05EA  07EB               	addwf	handle_serial@rx_counter,f
  1276                           
  1277                           ;protocol.c: 153: if(rx_counter > config.shield) {
  1278  05EB  086B               	movf	handle_serial@rx_counter,w
  1279  05EC  00D9               	movwf	??_handle_serial
  1280  05ED  01DA               	clrf	??_handle_serial+1
  1281  05EE  085A               	movf	??_handle_serial+1,w
  1282  05EF  0021               	movlb	1	; select bank1
  1283  05F0  0247               	subwf	((_config+1)^(0+128)+6),w
  1284  05F1  1D03               	skipz
  1285  05F2  2DF7               	goto	u4295
  1286  05F3  0020               	movlb	0	; select bank0
  1287  05F4  0859               	movf	??_handle_serial,w
  1288  05F5  0021               	movlb	1	; select bank1
  1289  05F6  0246               	subwf	(_config^(0+128)+6),w
  1290  05F7                     u4295:	
  1291  05F7  1803               	skipnc
  1292  05F8  0008               	return
  1293                           
  1294                           ;protocol.c: 154: RCSTAbits.CREN = 0;
  1295  05F9  0023               	movlb	3	; select bank3
  1296  05FA  121D               	bcf	29,4	;volatile
  1297                           
  1298                           ;protocol.c: 155: hit_by(b);
  1299  05FB  0020               	movlb	0	; select bank0
  1300  05FC  085B               	movf	handle_serial@b,w
  1301  05FD  23D6               	fcall	_hit_by
  1302                           
  1303                           ;protocol.c: 156: rx_id = 0;
  1304  05FE  0020               	movlb	0	; select bank0
  1305  05FF  01EC               	clrf	handle_serial@rx_id
  1306                           
  1307                           ;protocol.c: 157: (RCREG^0b10101010);
  1308  0600  0023               	movlb	3	; select bank3
  1309  0601  0819               	movf	25,w	;volatile
  1310                           
  1311                           ;protocol.c: 158: RCSTAbits.CREN = 1;
  1312  0602  161D               	bsf	29,4	;volatile
  1313  0603  0008               	return
  1314  0604                     __end_of_handle_serial:	
  1315                           ;protocol.c: 159: }
  1316                           ;protocol.c: 160: }
  1317                           ;protocol.c: 161: return 1;
  1318                           ;	Return value of _handle_serial is never used
  1319                           
  1320                           
  1321                           	psect	text2
  1322  03D6                     __ptext2:	
  1323 ;; *************** function _hit_by *****************
  1324 ;; Defined at:
  1325 ;;		line 349 in file "user.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  who             1    wreg     unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  who             1   52[BANK0 ] unsigned char 
  1330 ;;  i               1   56[BANK0 ] unsigned char 
  1331 ;;  i               1   55[BANK0 ] unsigned char 
  1332 ;;  respawn_time    2   53[BANK0 ] unsigned int 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;		None               void
  1335 ;; Registers used:
  1336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1342 ;;      Params:         0       0       0       0
  1343 ;;      Locals:         0       5       0       0
  1344 ;;      Temps:          0       2       0       0
  1345 ;;      Totals:         0       7       0       0
  1346 ;;Total ram usage:        7 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    8
  1349 ;; This function calls:
  1350 ;;		_Save
  1351 ;;		_add_to_hitlist
  1352 ;;		_delay_1_ms
  1353 ;;		_handle_music
  1354 ;;		_play_song
  1355 ;;		_red_led_on
  1356 ;;		_super_dead_mode
  1357 ;; This function is called by:
  1358 ;;		_handle_serial
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _hit_by
  1364  03D6                     _hit_by:	
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1368                           ;hit_by@who stored from wreg
  1369  03D6  0020               	movlb	0	; select bank0
  1370  03D7  00D4               	movwf	hit_by@who
  1371                           
  1372                           ;user.c: 351: uint16_t respawn_timer;
  1373                           ;user.c: 353: add_to_hitlist(who);
  1374  03D8  0854               	movf	hit_by@who,w
  1375  03D9  2604               	fcall	_add_to_hitlist
  1376                           
  1377                           ;user.c: 354: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1378  03DA  30E0               	movlw	224
  1379  03DB  00F1               	movwf	Save@address
  1380  03DC  3007               	movlw	7
  1381  03DD  00F2               	movwf	Save@address+1
  1382  03DE  30A0               	movlw	_hitlist& (0+255)
  1383  03DF  0020               	movlb	0	; select bank0
  1384  03E0  00D2               	movwf	??_hit_by
  1385  03E1  0852               	movf	??_hit_by,w
  1386  03E2  00F3               	movwf	Save@ptr
  1387  03E3  3010               	movlw	16
  1388  03E4  00D3               	movwf	??_hit_by+1
  1389  03E5  0853               	movf	??_hit_by+1,w
  1390  03E6  00F4               	movwf	Save@data_length
  1391  03E7  26AC               	fcall	_Save
  1392                           
  1393                           ;user.c: 356: config.health --;
  1394  03E8  3001               	movlw	1
  1395  03E9  0021               	movlb	1	; select bank1
  1396  03EA  02C4               	subwf	(_config^(0+128)+4),f
  1397  03EB  3000               	movlw	0
  1398  03EC  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1399                           
  1400                           ;user.c: 357: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1401  03ED  30F0               	movlw	240
  1402  03EE  00F1               	movwf	Save@address
  1403  03EF  3007               	movlw	7
  1404  03F0  00F2               	movwf	Save@address+1
  1405  03F1  30C0               	movlw	_config& (0+255)
  1406  03F2  0020               	movlb	0	; select bank0
  1407  03F3  00D2               	movwf	??_hit_by
  1408  03F4  0852               	movf	??_hit_by,w
  1409  03F5  00F3               	movwf	Save@ptr
  1410  03F6  3009               	movlw	9
  1411  03F7  00D3               	movwf	??_hit_by+1
  1412  03F8  0853               	movf	??_hit_by+1,w
  1413  03F9  00F4               	movwf	Save@data_length
  1414  03FA  26AC               	fcall	_Save
  1415                           
  1416                           ;user.c: 359: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  1417  03FB  3000               	movlw	low (_death_song| (0+32768))
  1418  03FC  00F1               	movwf	play_song@song
  1419  03FD  3085               	movlw	high (_death_song| (0+32768))
  1420  03FE  00F2               	movwf	play_song@song+1
  1421  03FF  3013               	movlw	19
  1422  0400  0020               	movlb	0	; select bank0
  1423  0401  00D2               	movwf	??_hit_by
  1424  0402  0852               	movf	??_hit_by,w
  1425  0403  00F3               	movwf	play_song@length
  1426  0404  3060               	movlw	96
  1427  0405  00F4               	movwf	play_song@note_duration
  1428  0406  30EA               	movlw	234
  1429  0407  00F5               	movwf	play_song@note_duration+1
  1430  0408  01F6               	clrf	play_song@repeat
  1431  0409  27AD               	fcall	_play_song
  1432                           
  1433                           ;user.c: 361: if(!config.health)
  1434  040A  0021               	movlb	1	; select bank1
  1435  040B  0845               	movf	((_config+1)^(0+128)+4),w
  1436  040C  0444               	iorwf	(_config^(0+128)+4),w
  1437  040D  1D03               	skipz
  1438  040E  2C12               	goto	l3071
  1439                           
  1440                           ;user.c: 362: {
  1441                           ;user.c: 363: red_led_on();
  1442  040F  24FA               	fcall	_red_led_on
  1443                           
  1444                           ;user.c: 364: super_dead_mode();
  1445  0410  2558               	fcall	_super_dead_mode
  1446                           
  1447                           ;user.c: 365: return;
  1448  0411  0008               	return
  1449  0412                     l3071:	
  1450                           
  1451                           ;user.c: 366: }
  1452                           ;user.c: 368: respawn_timer = config.respawn_delay;
  1453  0412  0021               	movlb	1	; select bank1
  1454  0413  0849               	movf	((_config+1)^(0+128)+8),w
  1455  0414  0020               	movlb	0	; select bank0
  1456  0415  01D6               	clrf	hit_by@respawn_timer+1
  1457  0416  07D6               	addwf	hit_by@respawn_timer+1,f
  1458  0417  0021               	movlb	1	; select bank1
  1459  0418  0848               	movf	(_config^(0+128)+8),w
  1460  0419  0020               	movlb	0	; select bank0
  1461  041A  01D5               	clrf	hit_by@respawn_timer
  1462  041B  07D5               	addwf	hit_by@respawn_timer,f
  1463  041C                     l3109:	
  1464                           ;user.c: 369: while(respawn_timer)
  1465                           
  1466  041C  0856               	movf	hit_by@respawn_timer+1,w
  1467  041D  0455               	iorwf	hit_by@respawn_timer,w
  1468  041E  1903               	btfsc	3,2
  1469  041F  0008               	return
  1470                           
  1471                           ;user.c: 370: {
  1472                           ;user.c: 371: respawn_timer--;
  1473  0420  3001               	movlw	1
  1474  0421  02D5               	subwf	hit_by@respawn_timer,f
  1475  0422  3000               	movlw	0
  1476  0423  3BD6               	subwfb	hit_by@respawn_timer+1,f
  1477                           
  1478                           ;user.c: 372: red_led_on();
  1479  0424  24FA               	fcall	_red_led_on
  1480                           
  1481                           ;user.c: 373: for(uint8_t i=0;i<50;i++)
  1482  0425  0020               	movlb	0	; select bank0
  1483  0426  01D7               	clrf	hit_by@i
  1484  0427  3032               	movlw	50
  1485  0428  0257               	subwf	hit_by@i,w
  1486  0429  1803               	btfsc	3,0
  1487  042A  2C36               	goto	l3091
  1488  042B                     l3083:	
  1489                           
  1490                           ;user.c: 374: {
  1491                           ;user.c: 375: handle_music();
  1492  042B  272D               	fcall	_handle_music
  1493                           
  1494                           ;user.c: 376: delay_1_ms();
  1495  042C  27D1               	fcall	_delay_1_ms
  1496  042D  3001               	movlw	1
  1497  042E  0020               	movlb	0	; select bank0
  1498  042F  00D2               	movwf	??_hit_by
  1499  0430  0852               	movf	??_hit_by,w
  1500  0431  07D7               	addwf	hit_by@i,f
  1501  0432  3032               	movlw	50
  1502  0433  0257               	subwf	hit_by@i,w
  1503  0434  1C03               	skipc
  1504  0435  2C2B               	goto	l3083
  1505  0436                     l3091:	
  1506                           
  1507                           ;user.c: 377: }
  1508                           ;user.c: 379: if(respawn_timer < 30)
  1509  0436  3000               	movlw	0
  1510  0437  0256               	subwf	hit_by@respawn_timer+1,w
  1511  0438  301E               	movlw	30
  1512  0439  1903               	skipnz
  1513  043A  0255               	subwf	hit_by@respawn_timer,w
  1514  043B  1803               	skipnc
  1515  043C  2C3F               	goto	l3095
  1516                           
  1517                           ;user.c: 380: {
  1518                           ;user.c: 381: {TRISAbits.TRISA5 = 1;};
  1519  043D  0021               	movlb	1	; select bank1
  1520  043E  168C               	bsf	12,5	;volatile
  1521  043F                     l3095:	
  1522                           
  1523                           ;user.c: 382: }
  1524                           ;user.c: 383: for(uint8_t i=0;i<50;i++)
  1525  043F  0020               	movlb	0	; select bank0
  1526  0440  01D8               	clrf	hit_by@i_747
  1527  0441                     L1:	
  1528  0441  3032               	movlw	50
  1529  0442  0258               	subwf	hit_by@i_747,w
  1530  0443  1803               	btfsc	3,0
  1531  0444  2C1C               	goto	l3109
  1532                           
  1533                           ;user.c: 384: {
  1534                           ;user.c: 385: handle_music();
  1535  0445  272D               	fcall	_handle_music
  1536                           
  1537                           ;user.c: 386: delay_1_ms();
  1538  0446  27D1               	fcall	_delay_1_ms
  1539  0447  3001               	movlw	1
  1540  0448  0020               	movlb	0	; select bank0
  1541  0449  00D2               	movwf	??_hit_by
  1542  044A  0852               	movf	??_hit_by,w
  1543  044B  07D8               	addwf	hit_by@i_747,f
  1544  044C  2C41               	goto	L1
  1545  044D                     __end_of_hit_by:	
  1546                           
  1547                           	psect	text3
  1548  0558                     __ptext3:	
  1549 ;; *************** function _super_dead_mode *****************
  1550 ;; Defined at:
  1551 ;;		line 323 in file "user.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  b               1   47[BANK0 ] unsigned char 
  1556 ;;  counter         2   48[BANK0 ] unsigned int 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1566 ;;      Params:         0       0       0       0
  1567 ;;      Locals:         0       3       0       0
  1568 ;;      Temps:          0       2       0       0
  1569 ;;      Totals:         0       5       0       0
  1570 ;;Total ram usage:        5 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    7
  1573 ;; This function calls:
  1574 ;;		_Send_Byte
  1575 ;;		_control_transfer
  1576 ;;		_delay_1_ms
  1577 ;;		_handle_music
  1578 ;;		_play_song
  1579 ;;		_red_led_on
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;;		_hit_by
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function _super_dead_mode
  1588  0558                     _super_dead_mode:	
  1589                           
  1590                           ;user.c: 324: uint16_t counter = 0;
  1591                           
  1592                           ;incstack = 0
  1593                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1594  0558  0020               	movlb	0	; select bank0
  1595  0559  01D0               	clrf	super_dead_mode@counter
  1596  055A  01D1               	clrf	super_dead_mode@counter+1
  1597  055B                     l3053:	
  1598                           ;user.c: 325: while(!config.health){
  1599                           
  1600  055B  3004               	movlw	4
  1601  055C  3EC0               	addlw	_config& (0+255)
  1602  055D  0086               	movwf	6
  1603  055E  0187               	clrf	7
  1604  055F  0016               	moviw fsr1++
  1605  0560  0401               	iorwf	1,w
  1606  0561  1D03               	btfss	3,2
  1607  0562  0008               	return
  1608                           
  1609                           ;user.c: 326: handle_music();
  1610  0563  272D               	fcall	_handle_music
  1611                           
  1612                           ;user.c: 328: uint8_t b;
  1613                           ;user.c: 329: if((PIR1bits.RCIF)){
  1614  0564  0020               	movlb	0	; select bank0
  1615  0565  1E91               	btfss	17,5	;volatile
  1616  0566  2D73               	goto	l3035
  1617                           
  1618                           ;user.c: 330: b=(RCREG^0b10101010);
  1619  0567  0023               	movlb	3	; select bank3
  1620  0568  0819               	movf	25,w	;volatile
  1621  0569  3AAA               	xorlw	170
  1622  056A  0020               	movlb	0	; select bank0
  1623  056B  00CD               	movwf	??_super_dead_mode
  1624  056C  084D               	movf	??_super_dead_mode,w
  1625  056D  00CF               	movwf	super_dead_mode@b
  1626                           
  1627                           ;user.c: 331: if(b == 0x10) {
  1628  056E  084F               	movf	super_dead_mode@b,w
  1629  056F  3A10               	xorlw	16
  1630  0570  1D03               	skipz
  1631  0571  2D73               	goto	l3035
  1632                           
  1633                           ;user.c: 332: control_transfer();
  1634  0572  2026               	fcall	_control_transfer
  1635  0573                     l3035:	
  1636                           
  1637                           ;user.c: 333: }
  1638                           ;user.c: 334: }
  1639                           ;user.c: 335: counter++;
  1640  0573  3001               	movlw	1
  1641  0574  0020               	movlb	0	; select bank0
  1642  0575  07D0               	addwf	super_dead_mode@counter,f
  1643  0576  3000               	movlw	0
  1644  0577  3DD1               	addwfc	super_dead_mode@counter+1,f
  1645                           
  1646                           ;user.c: 336: delay_1_ms();
  1647  0578  27D1               	fcall	_delay_1_ms
  1648                           
  1649                           ;user.c: 337: if(counter > config.death_period){
  1650  0579  0020               	movlb	0	; select bank0
  1651  057A  0851               	movf	super_dead_mode@counter+1,w
  1652  057B  0021               	movlb	1	; select bank1
  1653  057C  0251               	subwf	((_config+1)^(0+128)+16),w
  1654  057D  1D03               	skipz
  1655  057E  2D83               	goto	u4115
  1656  057F  0020               	movlb	0	; select bank0
  1657  0580  0850               	movf	super_dead_mode@counter,w
  1658  0581  0021               	movlb	1	; select bank1
  1659  0582  0250               	subwf	(_config^(0+128)+16),w
  1660  0583                     u4115:	
  1661  0583  1803               	skipnc
  1662  0584  2D9B               	goto	l3049
  1663                           
  1664                           ;user.c: 338: counter = 0;
  1665  0585  0020               	movlb	0	; select bank0
  1666  0586  01D0               	clrf	super_dead_mode@counter
  1667  0587  01D1               	clrf	super_dead_mode@counter+1
  1668                           
  1669                           ;user.c: 339: {TRISAbits.TRISA5 = 1;};
  1670  0588  0021               	movlb	1	; select bank1
  1671  0589  168C               	bsf	12,5	;volatile
  1672                           
  1673                           ;user.c: 340: Send_Byte(config.id);
  1674  058A  0840               	movf	_config^(0+128),w
  1675  058B  26F3               	fcall	_Send_Byte
  1676                           
  1677                           ;user.c: 341: play_song(dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  1678  058C  3052               	movlw	low (_dead_song| (0+32768))
  1679  058D  00F1               	movwf	play_song@song
  1680  058E  3085               	movlw	high (_dead_song| (0+32768))
  1681  058F  00F2               	movwf	play_song@song+1
  1682  0590  3003               	movlw	3
  1683  0591  0020               	movlb	0	; select bank0
  1684  0592  00CD               	movwf	??_super_dead_mode
  1685  0593  084D               	movf	??_super_dead_mode,w
  1686  0594  00F3               	movwf	play_song@length
  1687  0595  3010               	movlw	16
  1688  0596  00F4               	movwf	play_song@note_duration
  1689  0597  3027               	movlw	39
  1690  0598  00F5               	movwf	play_song@note_duration+1
  1691  0599  01F6               	clrf	play_song@repeat
  1692  059A  27AD               	fcall	_play_song
  1693  059B                     l3049:	
  1694                           
  1695                           ;user.c: 342: }
  1696                           ;user.c: 343: if(counter == config.death_period-50){
  1697  059B  0021               	movlb	1	; select bank1
  1698  059C  0850               	movf	(_config^(0+128)+16),w
  1699  059D  3ECE               	addlw	206
  1700  059E  0020               	movlb	0	; select bank0
  1701  059F  00CD               	movwf	??_super_dead_mode
  1702  05A0  30FF               	movlw	255
  1703  05A1  0021               	movlb	1	; select bank1
  1704  05A2  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1705  05A3  0020               	movlb	0	; select bank0
  1706  05A4  00CE               	movwf	??_super_dead_mode+1
  1707  05A5  0851               	movf	super_dead_mode@counter+1,w
  1708  05A6  064E               	xorwf	??_super_dead_mode+1,w
  1709  05A7  1D03               	skipz
  1710  05A8  2DAB               	goto	u4125
  1711  05A9  0850               	movf	super_dead_mode@counter,w
  1712  05AA  064D               	xorwf	??_super_dead_mode,w
  1713  05AB                     u4125:	
  1714  05AB  1D03               	skipz
  1715  05AC  2D5B               	goto	l3053
  1716                           
  1717                           ;user.c: 344: red_led_on();
  1718  05AD  24FA               	fcall	_red_led_on
  1719  05AE  2D5B               	goto	l3053
  1720  05AF                     __end_of_super_dead_mode:	
  1721                           
  1722                           	psect	text4
  1723  072D                     __ptext4:	
  1724 ;; *************** function _handle_music *****************
  1725 ;; Defined at:
  1726 ;;		line 112 in file "user.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1740 ;;      Params:         0       0       0       0
  1741 ;;      Locals:         0       0       0       0
  1742 ;;      Temps:          2       0       0       0
  1743 ;;      Totals:         2       0       0       0
  1744 ;;Total ram usage:        2 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    2
  1747 ;; This function calls:
  1748 ;;		_stop_song
  1749 ;;		_tone
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;;		_super_dead_mode
  1753 ;;		_hit_by
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           
  1758                           ;psect for function _handle_music
  1759  072D                     _handle_music:	
  1760                           
  1761                           ;user.c: 114: if(!PIR1bits.TMR1IF) return;
  1762                           
  1763                           ;incstack = 0
  1764                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1765  072D  0020               	movlb	0	; select bank0
  1766  072E  1C11               	btfss	17,0	;volatile
  1767  072F  0008               	return
  1768                           
  1769                           ;user.c: 115: if(cur_song_ptr >= cur_song_length)
  1770  0730  0867               	movf	_cur_song_length,w
  1771  0731  0268               	subwf	_cur_song_ptr,w
  1772  0732  1C03               	skipc
  1773  0733  2F3B               	goto	l2671
  1774                           
  1775                           ;user.c: 116: {
  1776                           ;user.c: 117: if(cur_song_repeat)
  1777  0734  0869               	movf	_cur_song_repeat,w
  1778  0735  1903               	btfsc	3,2
  1779  0736  2F39               	goto	l2667
  1780                           
  1781                           ;user.c: 118: {
  1782                           ;user.c: 119: cur_song_ptr=0;
  1783  0737  01E8               	clrf	_cur_song_ptr
  1784                           
  1785                           ;user.c: 120: }
  1786  0738  2F3B               	goto	l2671
  1787  0739                     l2667:	
  1788                           
  1789                           ;user.c: 121: else
  1790                           ;user.c: 122: {
  1791                           ;user.c: 123: stop_song();
  1792  0739  24EF               	fcall	_stop_song
  1793                           
  1794                           ;user.c: 124: return;
  1795  073A  0008               	return
  1796  073B                     l2671:	
  1797                           
  1798                           ;user.c: 125: }
  1799                           ;user.c: 126: }
  1800                           ;user.c: 127: tone(cur_song[cur_song_ptr]);
  1801  073B  0020               	movlb	0	; select bank0
  1802  073C  0868               	movf	_cur_song_ptr,w
  1803  073D  00F5               	movwf	??_handle_music
  1804  073E  01F6               	clrf	??_handle_music+1
  1805  073F  35F5               	lslf	??_handle_music,f
  1806  0740  0DF6               	rlf	??_handle_music+1,f
  1807  0741  085E               	movf	_cur_song,w
  1808  0742  0775               	addwf	??_handle_music,w
  1809  0743  0084               	movwf	4
  1810  0744  085F               	movf	_cur_song+1,w
  1811  0745  3D76               	addwfc	??_handle_music+1,w
  1812  0746  0085               	movwf	5
  1813  0747  3F00               	moviw [0]fsr0
  1814  0748  00F1               	movwf	tone@period
  1815  0749  3F01               	moviw [1]fsr0
  1816  074A  00F2               	movwf	tone@period+1
  1817  074B  24A6               	fcall	_tone
  1818                           
  1819                           ;user.c: 128: TMR1 = -cur_song_duration;
  1820  074C  0020               	movlb	0	; select bank0
  1821  074D  0960               	comf	_cur_song_duration,w
  1822  074E  00F5               	movwf	??_handle_music
  1823  074F  0961               	comf	_cur_song_duration+1,w
  1824  0750  00F6               	movwf	??_handle_music+1
  1825  0751  0AF5               	incf	??_handle_music,f
  1826  0752  1903               	skipnz
  1827  0753  0AF6               	incf	??_handle_music+1,f
  1828  0754  0875               	movf	??_handle_music,w
  1829  0755  0096               	movwf	22	;volatile
  1830  0756  0876               	movf	??_handle_music+1,w
  1831  0757  0097               	movwf	23	;volatile
  1832                           
  1833                           ;user.c: 129: cur_song_ptr++;
  1834  0758  3001               	movlw	1
  1835  0759  00F5               	movwf	??_handle_music
  1836  075A  0875               	movf	??_handle_music,w
  1837  075B  07E8               	addwf	_cur_song_ptr,f
  1838                           
  1839                           ;user.c: 130: PIR1bits.TMR1IF=0;
  1840  075C  1011               	bcf	17,0	;volatile
  1841  075D  0008               	return
  1842  075E                     __end_of_handle_music:	
  1843                           
  1844                           	psect	text5
  1845  0026                     __ptext5:	
  1846 ;; *************** function _control_transfer *****************
  1847 ;; Defined at:
  1848 ;;		line 44 in file "protocol.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  data           32    5[BANK0 ] unsigned int [16]
  1853 ;;  page            2   42[BANK0 ] unsigned int 
  1854 ;;  x               1   44[BANK0 ] unsigned char 
  1855 ;;  i               1   41[BANK0 ] unsigned char 
  1856 ;;  dptr            1   40[BANK0 ] PTR unsigned char 
  1857 ;;		 -> control_transfer@data(32), 
  1858 ;;  id              1   39[BANK0 ] unsigned char 
  1859 ;;  random_numbe    1   38[BANK0 ] unsigned char 
  1860 ;;  cmd             1   37[BANK0 ] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;		None               void
  1863 ;; Registers used:
  1864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1870 ;;      Params:         0       0       0       0
  1871 ;;      Locals:         0      40       0       0
  1872 ;;      Temps:          0       2       0       0
  1873 ;;      Totals:         0      42       0       0
  1874 ;;Total ram usage:       42 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    6
  1877 ;; This function calls:
  1878 ;;		_GET_CHAR_HELPER
  1879 ;;		_Load
  1880 ;;		_SEND_DATA_BYTE
  1881 ;;		_SEND_EOF
  1882 ;;		_SEND_SOF
  1883 ;;		_Save
  1884 ;;		_play_song
  1885 ;; This function is called by:
  1886 ;;		_super_dead_mode
  1887 ;;		_handle_serial
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           
  1892                           ;psect for function _control_transfer
  1893  0026                     _control_transfer:	
  1894                           
  1895                           ;protocol.c: 46: uint8_t i;
  1896                           ;protocol.c: 47: uint8_t cmd;
  1897                           ;protocol.c: 48: uint8_t random_number,id;
  1898                           ;protocol.c: 50: uint16_t page;
  1899                           ;protocol.c: 51: uint16_t data[16];
  1900                           ;protocol.c: 52: uint8_t* dptr;
  1901                           ;protocol.c: 53: uint8_t x;
  1902                           ;protocol.c: 55: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1903                           
  1904                           ;incstack = 0
  1905                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1906  0026  0020               	movlb	0	; select bank0
  1907  0027  01E6               	clrf	__checksum
  1908  0028  307C               	movlw	__x& (0+255)
  1909  0029  246E               	fcall	_GET_CHAR_HELPER
  1910  002A  3A00               	xorlw	0
  1911  002B  1D03               	btfss	3,2
  1912  002C  0008               	return
  1913  002D  306D               	movlw	__y& (0+255)
  1914  002E  246E               	fcall	_GET_CHAR_HELPER
  1915  002F  3A00               	xorlw	0
  1916  0030  1D03               	btfss	3,2
  1917  0031  0008               	return
  1918  0032  087C               	movf	__x,w
  1919  0033  39F0               	andlw	240
  1920  0034  1D03               	btfss	3,2
  1921  0035  0008               	return
  1922  0036  0020               	movlb	0	; select bank0
  1923  0037  086D               	movf	__y,w
  1924  0038  39F0               	andlw	240
  1925  0039  1D03               	btfss	3,2
  1926  003A  0008               	return
  1927  003B  086D               	movf	__y,w
  1928  003C  00A3               	movwf	??_control_transfer
  1929  003D  3003               	movlw	3
  1930  003E                     u3225:	
  1931  003E  35A3               	lslf	??_control_transfer,f
  1932  003F  3EFF               	addlw	-1
  1933  0040  1D03               	skipz
  1934  0041  283E               	goto	u3225
  1935  0042  3523               	lslf	??_control_transfer,w
  1936  0043  047C               	iorwf	__x,w
  1937  0044  00A4               	movwf	??_control_transfer+1
  1938  0045  0824               	movf	??_control_transfer+1,w
  1939  0046  00FC               	movwf	__x
  1940  0047  087C               	movf	__x,w
  1941  0048  00A3               	movwf	??_control_transfer
  1942  0049  0823               	movf	??_control_transfer,w
  1943  004A  07E6               	addwf	__checksum,f
  1944  004B  0021               	movlb	1	; select bank1
  1945  004C  0840               	movf	_config^(0+128),w
  1946  004D  067C               	xorwf	__x,w
  1947  004E  1D03               	btfss	3,2
  1948  004F  0008               	return
  1949                           
  1950                           ;protocol.c: 56: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1951  0050  307C               	movlw	__x& (0+255)
  1952  0051  246E               	fcall	_GET_CHAR_HELPER
  1953  0052  3A00               	xorlw	0
  1954  0053  1D03               	btfss	3,2
  1955  0054  0008               	return
  1956  0055  306D               	movlw	__y& (0+255)
  1957  0056  246E               	fcall	_GET_CHAR_HELPER
  1958  0057  3A00               	xorlw	0
  1959  0058  1D03               	btfss	3,2
  1960  0059  0008               	return
  1961  005A  087C               	movf	__x,w
  1962  005B  39F0               	andlw	240
  1963  005C  1D03               	btfss	3,2
  1964  005D  0008               	return
  1965  005E  0020               	movlb	0	; select bank0
  1966  005F  086D               	movf	__y,w
  1967  0060  39F0               	andlw	240
  1968  0061  1D03               	btfss	3,2
  1969  0062  0008               	return
  1970  0063  086D               	movf	__y,w
  1971  0064  00A3               	movwf	??_control_transfer
  1972  0065  3003               	movlw	3
  1973  0066                     u3285:	
  1974  0066  35A3               	lslf	??_control_transfer,f
  1975  0067  3EFF               	addlw	-1
  1976  0068  1D03               	skipz
  1977  0069  2866               	goto	u3285
  1978  006A  3523               	lslf	??_control_transfer,w
  1979  006B  047C               	iorwf	__x,w
  1980  006C  00A4               	movwf	??_control_transfer+1
  1981  006D  0824               	movf	??_control_transfer+1,w
  1982  006E  00C5               	movwf	control_transfer@cmd
  1983  006F  0845               	movf	control_transfer@cmd,w
  1984  0070  00A3               	movwf	??_control_transfer
  1985  0071  0823               	movf	??_control_transfer,w
  1986  0072  07E6               	addwf	__checksum,f
  1987                           
  1988                           ;protocol.c: 58: switch(cmd)
  1989  0073  2B2E               	goto	l3017
  1990  0074                     l2713:	
  1991                           ;protocol.c: 59: {
  1992                           ;protocol.c: 60: case 0x01:
  1993                           
  1994                           
  1995                           ;protocol.c: 61: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1996  0074  307C               	movlw	__x& (0+255)
  1997  0075  246E               	fcall	_GET_CHAR_HELPER
  1998  0076  3A00               	xorlw	0
  1999  0077  1D03               	btfss	3,2
  2000  0078  0008               	return
  2001  0079  306D               	movlw	__y& (0+255)
  2002  007A  246E               	fcall	_GET_CHAR_HELPER
  2003  007B  3A00               	xorlw	0
  2004  007C  1D03               	btfss	3,2
  2005  007D  0008               	return
  2006  007E  087C               	movf	__x,w
  2007  007F  39F0               	andlw	240
  2008  0080  1D03               	btfss	3,2
  2009  0081  0008               	return
  2010  0082  0020               	movlb	0	; select bank0
  2011  0083  086D               	movf	__y,w
  2012  0084  39F0               	andlw	240
  2013  0085  1D03               	btfss	3,2
  2014  0086  0008               	return
  2015  0087  086D               	movf	__y,w
  2016  0088  00A3               	movwf	??_control_transfer
  2017  0089  3003               	movlw	3
  2018  008A                     u3335:	
  2019  008A  35A3               	lslf	??_control_transfer,f
  2020  008B  3EFF               	addlw	-1
  2021  008C  1D03               	skipz
  2022  008D  288A               	goto	u3335
  2023  008E  3523               	lslf	??_control_transfer,w
  2024  008F  047C               	iorwf	__x,w
  2025  0090  00A4               	movwf	??_control_transfer+1
  2026  0091  0824               	movf	??_control_transfer+1,w
  2027  0092  00FC               	movwf	__x
  2028  0093  087C               	movf	__x,w
  2029  0094  00A3               	movwf	??_control_transfer
  2030  0095  0823               	movf	??_control_transfer,w
  2031  0096  07E6               	addwf	__checksum,f
  2032  0097  0866               	movf	__checksum,w
  2033  0098  1D03               	skipz
  2034  0099  0008               	return
  2035  009A  307C               	movlw	__x& (0+255)
  2036  009B  246E               	fcall	_GET_CHAR_HELPER
  2037  009C  3A00               	xorlw	0
  2038  009D  1D03               	btfss	3,2
  2039  009E  0008               	return
  2040  009F  087C               	movf	__x,w
  2041  00A0  3A11               	xorlw	17
  2042  00A1  1D03               	btfss	3,2
  2043  00A2  0008               	return
  2044                           
  2045                           ;protocol.c: 62: SEND_SOF();
  2046  00A3  24DB               	fcall	_SEND_SOF
  2047                           
  2048                           ;protocol.c: 63: SEND_DATA_BYTE(0x02);
  2049  00A4  3002               	movlw	2
  2050  00A5  248C               	fcall	_SEND_DATA_BYTE
  2051                           
  2052                           ;protocol.c: 64: SEND_DATA_BYTE(my_random_number);
  2053  00A6  0020               	movlb	0	; select bank0
  2054  00A7  086A               	movf	_my_random_number,w
  2055  00A8  248C               	fcall	_SEND_DATA_BYTE
  2056                           
  2057                           ;protocol.c: 65: SEND_EOF();
  2058  00A9  24E9               	fcall	_SEND_EOF
  2059                           
  2060                           ;protocol.c: 66: break;
  2061  00AA  0008               	return
  2062  00AB                     l2741:	
  2063                           ;protocol.c: 67: case 0x03:
  2064                           
  2065                           
  2066                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2067  00AB  307C               	movlw	__x& (0+255)
  2068  00AC  246E               	fcall	_GET_CHAR_HELPER
  2069  00AD  3A00               	xorlw	0
  2070  00AE  1D03               	btfss	3,2
  2071  00AF  0008               	return
  2072  00B0  306D               	movlw	__y& (0+255)
  2073  00B1  246E               	fcall	_GET_CHAR_HELPER
  2074  00B2  3A00               	xorlw	0
  2075  00B3  1D03               	btfss	3,2
  2076  00B4  0008               	return
  2077  00B5  087C               	movf	__x,w
  2078  00B6  39F0               	andlw	240
  2079  00B7  1D03               	btfss	3,2
  2080  00B8  0008               	return
  2081  00B9  0020               	movlb	0	; select bank0
  2082  00BA  086D               	movf	__y,w
  2083  00BB  39F0               	andlw	240
  2084  00BC  1D03               	btfss	3,2
  2085  00BD  0008               	return
  2086  00BE  086D               	movf	__y,w
  2087  00BF  00A3               	movwf	??_control_transfer
  2088  00C0  3003               	movlw	3
  2089  00C1                     u3415:	
  2090  00C1  35A3               	lslf	??_control_transfer,f
  2091  00C2  3EFF               	addlw	-1
  2092  00C3  1D03               	skipz
  2093  00C4  28C1               	goto	u3415
  2094  00C5  3523               	lslf	??_control_transfer,w
  2095  00C6  047C               	iorwf	__x,w
  2096  00C7  00A4               	movwf	??_control_transfer+1
  2097  00C8  0824               	movf	??_control_transfer+1,w
  2098  00C9  00C6               	movwf	control_transfer@random_number
  2099  00CA  0846               	movf	control_transfer@random_number,w
  2100  00CB  00A3               	movwf	??_control_transfer
  2101  00CC  0823               	movf	??_control_transfer,w
  2102  00CD  07E6               	addwf	__checksum,f
  2103                           
  2104                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2105  00CE  307C               	movlw	__x& (0+255)
  2106  00CF  246E               	fcall	_GET_CHAR_HELPER
  2107  00D0  3A00               	xorlw	0
  2108  00D1  1D03               	btfss	3,2
  2109  00D2  0008               	return
  2110  00D3  306D               	movlw	__y& (0+255)
  2111  00D4  246E               	fcall	_GET_CHAR_HELPER
  2112  00D5  3A00               	xorlw	0
  2113  00D6  1D03               	btfss	3,2
  2114  00D7  0008               	return
  2115  00D8  087C               	movf	__x,w
  2116  00D9  39F0               	andlw	240
  2117  00DA  1D03               	btfss	3,2
  2118  00DB  0008               	return
  2119  00DC  0020               	movlb	0	; select bank0
  2120  00DD  086D               	movf	__y,w
  2121  00DE  39F0               	andlw	240
  2122  00DF  1D03               	btfss	3,2
  2123  00E0  0008               	return
  2124  00E1  086D               	movf	__y,w
  2125  00E2  00A3               	movwf	??_control_transfer
  2126  00E3  3003               	movlw	3
  2127  00E4                     u3465:	
  2128  00E4  35A3               	lslf	??_control_transfer,f
  2129  00E5  3EFF               	addlw	-1
  2130  00E6  1D03               	skipz
  2131  00E7  28E4               	goto	u3465
  2132  00E8  3523               	lslf	??_control_transfer,w
  2133  00E9  047C               	iorwf	__x,w
  2134  00EA  00A4               	movwf	??_control_transfer+1
  2135  00EB  0824               	movf	??_control_transfer+1,w
  2136  00EC  00C7               	movwf	control_transfer@id
  2137  00ED  0847               	movf	control_transfer@id,w
  2138  00EE  00A3               	movwf	??_control_transfer
  2139  00EF  0823               	movf	??_control_transfer,w
  2140  00F0  07E6               	addwf	__checksum,f
  2141                           
  2142                           ;protocol.c: 70: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2143  00F1  307C               	movlw	__x& (0+255)
  2144  00F2  246E               	fcall	_GET_CHAR_HELPER
  2145  00F3  3A00               	xorlw	0
  2146  00F4  1D03               	btfss	3,2
  2147  00F5  0008               	return
  2148  00F6  306D               	movlw	__y& (0+255)
  2149  00F7  246E               	fcall	_GET_CHAR_HELPER
  2150  00F8  3A00               	xorlw	0
  2151  00F9  1D03               	btfss	3,2
  2152  00FA  0008               	return
  2153  00FB  087C               	movf	__x,w
  2154  00FC  39F0               	andlw	240
  2155  00FD  1D03               	btfss	3,2
  2156  00FE  0008               	return
  2157  00FF  0020               	movlb	0	; select bank0
  2158  0100  086D               	movf	__y,w
  2159  0101  39F0               	andlw	240
  2160  0102  1D03               	btfss	3,2
  2161  0103  0008               	return
  2162  0104  086D               	movf	__y,w
  2163  0105  00A3               	movwf	??_control_transfer
  2164  0106  3003               	movlw	3
  2165  0107                     u3515:	
  2166  0107  35A3               	lslf	??_control_transfer,f
  2167  0108  3EFF               	addlw	-1
  2168  0109  1D03               	skipz
  2169  010A  2907               	goto	u3515
  2170  010B  3523               	lslf	??_control_transfer,w
  2171  010C  047C               	iorwf	__x,w
  2172  010D  00A4               	movwf	??_control_transfer+1
  2173  010E  0824               	movf	??_control_transfer+1,w
  2174  010F  00FC               	movwf	__x
  2175  0110  087C               	movf	__x,w
  2176  0111  00A3               	movwf	??_control_transfer
  2177  0112  0823               	movf	??_control_transfer,w
  2178  0113  07E6               	addwf	__checksum,f
  2179  0114  0866               	movf	__checksum,w
  2180  0115  1D03               	skipz
  2181  0116  0008               	return
  2182  0117  307C               	movlw	__x& (0+255)
  2183  0118  246E               	fcall	_GET_CHAR_HELPER
  2184  0119  3A00               	xorlw	0
  2185  011A  1D03               	btfss	3,2
  2186  011B  0008               	return
  2187  011C  087C               	movf	__x,w
  2188  011D  3A11               	xorlw	17
  2189  011E  1D03               	btfss	3,2
  2190  011F  0008               	return
  2191                           
  2192                           ;protocol.c: 71: if(random_number != my_random_number) goto err;
  2193  0120  0020               	movlb	0	; select bank0
  2194  0121  0846               	movf	control_transfer@random_number,w
  2195  0122  066A               	xorwf	_my_random_number,w
  2196  0123  1D03               	btfss	3,2
  2197  0124  0008               	return
  2198                           
  2199                           ;protocol.c: 72: SEND_SOF();
  2200  0125  24DB               	fcall	_SEND_SOF
  2201                           
  2202                           ;protocol.c: 73: SEND_DATA_BYTE(0x00);
  2203  0126  3000               	movlw	0
  2204  0127  248C               	fcall	_SEND_DATA_BYTE
  2205                           
  2206                           ;protocol.c: 74: SEND_EOF();
  2207  0128  24E9               	fcall	_SEND_EOF
  2208                           
  2209                           ;protocol.c: 75: config.id=id | (1<<9);
  2210  0129  3000               	movlw	0
  2211  012A  0020               	movlb	0	; select bank0
  2212  012B  0447               	iorwf	control_transfer@id,w
  2213  012C  0021               	movlb	1	; select bank1
  2214  012D  00C0               	movwf	_config^(0+128)
  2215  012E  3002               	movlw	2
  2216  012F  00C1               	movwf	(_config+1)^(0+128)
  2217                           
  2218                           ;protocol.c: 76: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2219  0130  30F0               	movlw	240
  2220  0131  00F1               	movwf	Save@address
  2221  0132  3007               	movlw	7
  2222  0133  00F2               	movwf	Save@address+1
  2223  0134  30C0               	movlw	_config& (0+255)
  2224  0135  0020               	movlb	0	; select bank0
  2225  0136  00A3               	movwf	??_control_transfer
  2226  0137  0823               	movf	??_control_transfer,w
  2227  0138  00F3               	movwf	Save@ptr
  2228  0139  3009               	movlw	9
  2229  013A  00A4               	movwf	??_control_transfer+1
  2230  013B  0824               	movf	??_control_transfer+1,w
  2231  013C  00F4               	movwf	Save@data_length
  2232  013D  26AC               	fcall	_Save
  2233                           
  2234                           ;protocol.c: 77: break;
  2235  013E  0008               	return
  2236  013F                     l2805:	
  2237                           ;protocol.c: 78: case 0x04:
  2238                           
  2239                           
  2240                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2241  013F  307C               	movlw	__x& (0+255)
  2242  0140  246E               	fcall	_GET_CHAR_HELPER
  2243  0141  3A00               	xorlw	0
  2244  0142  1D03               	btfss	3,2
  2245  0143  0008               	return
  2246  0144  306D               	movlw	__y& (0+255)
  2247  0145  246E               	fcall	_GET_CHAR_HELPER
  2248  0146  3A00               	xorlw	0
  2249  0147  1D03               	btfss	3,2
  2250  0148  0008               	return
  2251  0149  087C               	movf	__x,w
  2252  014A  39F0               	andlw	240
  2253  014B  1D03               	btfss	3,2
  2254  014C  0008               	return
  2255  014D  0020               	movlb	0	; select bank0
  2256  014E  086D               	movf	__y,w
  2257  014F  39F0               	andlw	240
  2258  0150  1D03               	btfss	3,2
  2259  0151  0008               	return
  2260  0152  086D               	movf	__y,w
  2261  0153  00A3               	movwf	??_control_transfer
  2262  0154  3003               	movlw	3
  2263  0155                     u3605:	
  2264  0155  35A3               	lslf	??_control_transfer,f
  2265  0156  3EFF               	addlw	-1
  2266  0157  1D03               	skipz
  2267  0158  2955               	goto	u3605
  2268  0159  3523               	lslf	??_control_transfer,w
  2269  015A  047C               	iorwf	__x,w
  2270  015B  00A4               	movwf	??_control_transfer+1
  2271  015C  0824               	movf	??_control_transfer+1,w
  2272  015D  00CC               	movwf	control_transfer@x
  2273  015E  084C               	movf	control_transfer@x,w
  2274  015F  00A3               	movwf	??_control_transfer
  2275  0160  0823               	movf	??_control_transfer,w
  2276  0161  07E6               	addwf	__checksum,f
  2277                           
  2278                           ;protocol.c: 80: *((uint8_t*)(&page))=x;
  2279  0162  084C               	movf	control_transfer@x,w
  2280  0163  00A3               	movwf	??_control_transfer
  2281  0164  0823               	movf	??_control_transfer,w
  2282  0165  00CA               	movwf	control_transfer@page
  2283                           
  2284                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2285  0166  307C               	movlw	__x& (0+255)
  2286  0167  246E               	fcall	_GET_CHAR_HELPER
  2287  0168  3A00               	xorlw	0
  2288  0169  1D03               	btfss	3,2
  2289  016A  0008               	return
  2290  016B  306D               	movlw	__y& (0+255)
  2291  016C  246E               	fcall	_GET_CHAR_HELPER
  2292  016D  3A00               	xorlw	0
  2293  016E  1D03               	btfss	3,2
  2294  016F  0008               	return
  2295  0170  087C               	movf	__x,w
  2296  0171  39F0               	andlw	240
  2297  0172  1D03               	btfss	3,2
  2298  0173  0008               	return
  2299  0174  0020               	movlb	0	; select bank0
  2300  0175  086D               	movf	__y,w
  2301  0176  39F0               	andlw	240
  2302  0177  1D03               	btfss	3,2
  2303  0178  0008               	return
  2304  0179  086D               	movf	__y,w
  2305  017A  00A3               	movwf	??_control_transfer
  2306  017B  3003               	movlw	3
  2307  017C                     u3655:	
  2308  017C  35A3               	lslf	??_control_transfer,f
  2309  017D  3EFF               	addlw	-1
  2310  017E  1D03               	skipz
  2311  017F  297C               	goto	u3655
  2312  0180  3523               	lslf	??_control_transfer,w
  2313  0181  047C               	iorwf	__x,w
  2314  0182  00A4               	movwf	??_control_transfer+1
  2315  0183  0824               	movf	??_control_transfer+1,w
  2316  0184  00CC               	movwf	control_transfer@x
  2317  0185  084C               	movf	control_transfer@x,w
  2318  0186  00A3               	movwf	??_control_transfer
  2319  0187  0823               	movf	??_control_transfer,w
  2320  0188  07E6               	addwf	__checksum,f
  2321                           
  2322                           ;protocol.c: 82: *(((uint8_t*)(&page))+1)=x;
  2323  0189  084C               	movf	control_transfer@x,w
  2324  018A  00A3               	movwf	??_control_transfer
  2325  018B  0823               	movf	??_control_transfer,w
  2326  018C  00CB               	movwf	control_transfer@page+1
  2327                           
  2328                           ;protocol.c: 83: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2329  018D  307C               	movlw	__x& (0+255)
  2330  018E  246E               	fcall	_GET_CHAR_HELPER
  2331  018F  3A00               	xorlw	0
  2332  0190  1D03               	btfss	3,2
  2333  0191  0008               	return
  2334  0192  306D               	movlw	__y& (0+255)
  2335  0193  246E               	fcall	_GET_CHAR_HELPER
  2336  0194  3A00               	xorlw	0
  2337  0195  1D03               	btfss	3,2
  2338  0196  0008               	return
  2339  0197  087C               	movf	__x,w
  2340  0198  39F0               	andlw	240
  2341  0199  1D03               	btfss	3,2
  2342  019A  0008               	return
  2343  019B  0020               	movlb	0	; select bank0
  2344  019C  086D               	movf	__y,w
  2345  019D  39F0               	andlw	240
  2346  019E  1D03               	btfss	3,2
  2347  019F  0008               	return
  2348  01A0  086D               	movf	__y,w
  2349  01A1  00A3               	movwf	??_control_transfer
  2350  01A2  3003               	movlw	3
  2351  01A3                     u3705:	
  2352  01A3  35A3               	lslf	??_control_transfer,f
  2353  01A4  3EFF               	addlw	-1
  2354  01A5  1D03               	skipz
  2355  01A6  29A3               	goto	u3705
  2356  01A7  3523               	lslf	??_control_transfer,w
  2357  01A8  047C               	iorwf	__x,w
  2358  01A9  00A4               	movwf	??_control_transfer+1
  2359  01AA  0824               	movf	??_control_transfer+1,w
  2360  01AB  00FC               	movwf	__x
  2361  01AC  087C               	movf	__x,w
  2362  01AD  00A3               	movwf	??_control_transfer
  2363  01AE  0823               	movf	??_control_transfer,w
  2364  01AF  07E6               	addwf	__checksum,f
  2365  01B0  0866               	movf	__checksum,w
  2366  01B1  1D03               	skipz
  2367  01B2  0008               	return
  2368  01B3  307C               	movlw	__x& (0+255)
  2369  01B4  246E               	fcall	_GET_CHAR_HELPER
  2370  01B5  3A00               	xorlw	0
  2371  01B6  1D03               	btfss	3,2
  2372  01B7  0008               	return
  2373  01B8  087C               	movf	__x,w
  2374  01B9  3A11               	xorlw	17
  2375  01BA  1D03               	btfss	3,2
  2376  01BB  0008               	return
  2377                           
  2378                           ;protocol.c: 84: Load(page,data,16);
  2379  01BC  0020               	movlb	0	; select bank0
  2380  01BD  084B               	movf	control_transfer@page+1,w
  2381  01BE  01F2               	clrf	Load@address+1
  2382  01BF  07F2               	addwf	Load@address+1,f
  2383  01C0  084A               	movf	control_transfer@page,w
  2384  01C1  01F1               	clrf	Load@address
  2385  01C2  07F1               	addwf	Load@address,f
  2386  01C3  3025               	movlw	control_transfer@data& (0+255)
  2387  01C4  00A3               	movwf	??_control_transfer
  2388  01C5  0823               	movf	??_control_transfer,w
  2389  01C6  00F3               	movwf	Load@ptr
  2390  01C7  3010               	movlw	16
  2391  01C8  00A4               	movwf	??_control_transfer+1
  2392  01C9  0824               	movf	??_control_transfer+1,w
  2393  01CA  00F4               	movwf	Load@data_length
  2394  01CB  2788               	fcall	_Load
  2395                           
  2396                           ;protocol.c: 85: SEND_SOF();
  2397  01CC  24DB               	fcall	_SEND_SOF
  2398                           
  2399                           ;protocol.c: 86: SEND_DATA_BYTE(0x05);
  2400  01CD  3005               	movlw	5
  2401  01CE  248C               	fcall	_SEND_DATA_BYTE
  2402                           
  2403                           ;protocol.c: 87: dptr=(uint8_t*)data;
  2404  01CF  3025               	movlw	control_transfer@data& (0+255)
  2405  01D0  0020               	movlb	0	; select bank0
  2406  01D1  00A3               	movwf	??_control_transfer
  2407  01D2  0823               	movf	??_control_transfer,w
  2408  01D3  00C8               	movwf	control_transfer@dptr
  2409                           
  2410                           ;protocol.c: 88: for(i=0;i<32;i++)
  2411  01D4  01C9               	clrf	control_transfer@i
  2412  01D5  3020               	movlw	32
  2413  01D6  0249               	subwf	control_transfer@i,w
  2414  01D7  1803               	btfsc	3,0
  2415  01D8  29EB               	goto	l2885
  2416  01D9                     l2877:	
  2417                           
  2418                           ;protocol.c: 89: {
  2419                           ;protocol.c: 90: SEND_DATA_BYTE(*dptr++);
  2420  01D9  0848               	movf	control_transfer@dptr,w
  2421  01DA  0086               	movwf	6
  2422  01DB  0187               	clrf	7
  2423  01DC  0801               	movf	1,w
  2424  01DD  248C               	fcall	_SEND_DATA_BYTE
  2425  01DE  3001               	movlw	1
  2426  01DF  0020               	movlb	0	; select bank0
  2427  01E0  00A3               	movwf	??_control_transfer
  2428  01E1  0823               	movf	??_control_transfer,w
  2429  01E2  07C8               	addwf	control_transfer@dptr,f
  2430  01E3  3001               	movlw	1
  2431  01E4  00A3               	movwf	??_control_transfer
  2432  01E5  0823               	movf	??_control_transfer,w
  2433  01E6  07C9               	addwf	control_transfer@i,f
  2434  01E7  3020               	movlw	32
  2435  01E8  0249               	subwf	control_transfer@i,w
  2436  01E9  1C03               	skipc
  2437  01EA  29D9               	goto	l2877
  2438  01EB                     l2885:	
  2439                           
  2440                           ;protocol.c: 91: }
  2441                           ;protocol.c: 92: SEND_EOF();
  2442  01EB  24E9               	fcall	_SEND_EOF
  2443                           
  2444                           ;protocol.c: 93: break;
  2445  01EC  0008               	return
  2446  01ED                     l2887:	
  2447                           ;protocol.c: 94: case 0x06:
  2448                           
  2449                           
  2450                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2451  01ED  307C               	movlw	__x& (0+255)
  2452  01EE  246E               	fcall	_GET_CHAR_HELPER
  2453  01EF  3A00               	xorlw	0
  2454  01F0  1D03               	btfss	3,2
  2455  01F1  0008               	return
  2456  01F2  306D               	movlw	__y& (0+255)
  2457  01F3  246E               	fcall	_GET_CHAR_HELPER
  2458  01F4  3A00               	xorlw	0
  2459  01F5  1D03               	btfss	3,2
  2460  01F6  0008               	return
  2461  01F7  087C               	movf	__x,w
  2462  01F8  39F0               	andlw	240
  2463  01F9  1D03               	btfss	3,2
  2464  01FA  0008               	return
  2465  01FB  0020               	movlb	0	; select bank0
  2466  01FC  086D               	movf	__y,w
  2467  01FD  39F0               	andlw	240
  2468  01FE  1D03               	btfss	3,2
  2469  01FF  0008               	return
  2470  0200  086D               	movf	__y,w
  2471  0201  00A3               	movwf	??_control_transfer
  2472  0202  3003               	movlw	3
  2473  0203                     u3805:	
  2474  0203  35A3               	lslf	??_control_transfer,f
  2475  0204  3EFF               	addlw	-1
  2476  0205  1D03               	skipz
  2477  0206  2A03               	goto	u3805
  2478  0207  3523               	lslf	??_control_transfer,w
  2479  0208  047C               	iorwf	__x,w
  2480  0209  00A4               	movwf	??_control_transfer+1
  2481  020A  0824               	movf	??_control_transfer+1,w
  2482  020B  00CC               	movwf	control_transfer@x
  2483  020C  084C               	movf	control_transfer@x,w
  2484  020D  00A3               	movwf	??_control_transfer
  2485  020E  0823               	movf	??_control_transfer,w
  2486  020F  07E6               	addwf	__checksum,f
  2487                           
  2488                           ;protocol.c: 96: *((uint8_t*)(&page))=x;
  2489  0210  084C               	movf	control_transfer@x,w
  2490  0211  00A3               	movwf	??_control_transfer
  2491  0212  0823               	movf	??_control_transfer,w
  2492  0213  00CA               	movwf	control_transfer@page
  2493                           
  2494                           ;protocol.c: 97: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2495  0214  307C               	movlw	__x& (0+255)
  2496  0215  246E               	fcall	_GET_CHAR_HELPER
  2497  0216  3A00               	xorlw	0
  2498  0217  1D03               	btfss	3,2
  2499  0218  0008               	return
  2500  0219  306D               	movlw	__y& (0+255)
  2501  021A  246E               	fcall	_GET_CHAR_HELPER
  2502  021B  3A00               	xorlw	0
  2503  021C  1D03               	btfss	3,2
  2504  021D  0008               	return
  2505  021E  087C               	movf	__x,w
  2506  021F  39F0               	andlw	240
  2507  0220  1D03               	btfss	3,2
  2508  0221  0008               	return
  2509  0222  0020               	movlb	0	; select bank0
  2510  0223  086D               	movf	__y,w
  2511  0224  39F0               	andlw	240
  2512  0225  1D03               	btfss	3,2
  2513  0226  0008               	return
  2514  0227  086D               	movf	__y,w
  2515  0228  00A3               	movwf	??_control_transfer
  2516  0229  3003               	movlw	3
  2517  022A                     u3855:	
  2518  022A  35A3               	lslf	??_control_transfer,f
  2519  022B  3EFF               	addlw	-1
  2520  022C  1D03               	skipz
  2521  022D  2A2A               	goto	u3855
  2522  022E  3523               	lslf	??_control_transfer,w
  2523  022F  047C               	iorwf	__x,w
  2524  0230  00A4               	movwf	??_control_transfer+1
  2525  0231  0824               	movf	??_control_transfer+1,w
  2526  0232  00CC               	movwf	control_transfer@x
  2527  0233  084C               	movf	control_transfer@x,w
  2528  0234  00A3               	movwf	??_control_transfer
  2529  0235  0823               	movf	??_control_transfer,w
  2530  0236  07E6               	addwf	__checksum,f
  2531                           
  2532                           ;protocol.c: 98: *(((uint8_t*)(&page))+1)=x;
  2533  0237  084C               	movf	control_transfer@x,w
  2534  0238  00A3               	movwf	??_control_transfer
  2535  0239  0823               	movf	??_control_transfer,w
  2536  023A  00CB               	movwf	control_transfer@page+1
  2537                           
  2538                           ;protocol.c: 99: dptr=(uint8_t*)data;
  2539  023B  3025               	movlw	control_transfer@data& (0+255)
  2540  023C  00A3               	movwf	??_control_transfer
  2541  023D  0823               	movf	??_control_transfer,w
  2542  023E  00C8               	movwf	control_transfer@dptr
  2543                           
  2544                           ;protocol.c: 100: for(i=0;i<32;i++)
  2545  023F  01C9               	clrf	control_transfer@i
  2546  0240  3020               	movlw	32
  2547  0241  0249               	subwf	control_transfer@i,w
  2548  0242  1803               	btfsc	3,0
  2549  0243  2A7A               	goto	l2949
  2550  0244                     l2927:	
  2551                           
  2552                           ;protocol.c: 101: {
  2553                           ;protocol.c: 102: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2554  0244  307C               	movlw	__x& (0+255)
  2555  0245  246E               	fcall	_GET_CHAR_HELPER
  2556  0246  3A00               	xorlw	0
  2557  0247  1D03               	btfss	3,2
  2558  0248  0008               	return
  2559  0249  306D               	movlw	__y& (0+255)
  2560  024A  246E               	fcall	_GET_CHAR_HELPER
  2561  024B  3A00               	xorlw	0
  2562  024C  1D03               	btfss	3,2
  2563  024D  0008               	return
  2564  024E  087C               	movf	__x,w
  2565  024F  39F0               	andlw	240
  2566  0250  1D03               	btfss	3,2
  2567  0251  0008               	return
  2568  0252  0020               	movlb	0	; select bank0
  2569  0253  086D               	movf	__y,w
  2570  0254  39F0               	andlw	240
  2571  0255  1D03               	btfss	3,2
  2572  0256  0008               	return
  2573  0257  086D               	movf	__y,w
  2574  0258  00A3               	movwf	??_control_transfer
  2575  0259  3003               	movlw	3
  2576  025A                     u3915:	
  2577  025A  35A3               	lslf	??_control_transfer,f
  2578  025B  3EFF               	addlw	-1
  2579  025C  1D03               	skipz
  2580  025D  2A5A               	goto	u3915
  2581  025E  3523               	lslf	??_control_transfer,w
  2582  025F  047C               	iorwf	__x,w
  2583  0260  00A4               	movwf	??_control_transfer+1
  2584  0261  0824               	movf	??_control_transfer+1,w
  2585  0262  00CC               	movwf	control_transfer@x
  2586  0263  084C               	movf	control_transfer@x,w
  2587  0264  00A3               	movwf	??_control_transfer
  2588  0265  0823               	movf	??_control_transfer,w
  2589  0266  07E6               	addwf	__checksum,f
  2590                           
  2591                           ;protocol.c: 103: *dptr++=x;
  2592  0267  084C               	movf	control_transfer@x,w
  2593  0268  00A3               	movwf	??_control_transfer
  2594  0269  0848               	movf	control_transfer@dptr,w
  2595  026A  0086               	movwf	6
  2596  026B  0187               	clrf	7
  2597  026C  0823               	movf	??_control_transfer,w
  2598  026D  0081               	movwf	1
  2599  026E  3001               	movlw	1
  2600  026F  00A3               	movwf	??_control_transfer
  2601  0270  0823               	movf	??_control_transfer,w
  2602  0271  07C8               	addwf	control_transfer@dptr,f
  2603  0272  3001               	movlw	1
  2604  0273  00A3               	movwf	??_control_transfer
  2605  0274  0823               	movf	??_control_transfer,w
  2606  0275  07C9               	addwf	control_transfer@i,f
  2607  0276  3020               	movlw	32
  2608  0277  0249               	subwf	control_transfer@i,w
  2609  0278  1C03               	skipc
  2610  0279  2A44               	goto	l2927
  2611  027A                     l2949:	
  2612                           
  2613                           ;protocol.c: 104: }
  2614                           ;protocol.c: 105: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2615  027A  307C               	movlw	__x& (0+255)
  2616  027B  246E               	fcall	_GET_CHAR_HELPER
  2617  027C  3A00               	xorlw	0
  2618  027D  1D03               	btfss	3,2
  2619  027E  0008               	return
  2620  027F  306D               	movlw	__y& (0+255)
  2621  0280  246E               	fcall	_GET_CHAR_HELPER
  2622  0281  3A00               	xorlw	0
  2623  0282  1D03               	btfss	3,2
  2624  0283  0008               	return
  2625  0284  087C               	movf	__x,w
  2626  0285  39F0               	andlw	240
  2627  0286  1D03               	btfss	3,2
  2628  0287  0008               	return
  2629  0288  0020               	movlb	0	; select bank0
  2630  0289  086D               	movf	__y,w
  2631  028A  39F0               	andlw	240
  2632  028B  1D03               	btfss	3,2
  2633  028C  0008               	return
  2634  028D  086D               	movf	__y,w
  2635  028E  00A3               	movwf	??_control_transfer
  2636  028F  3003               	movlw	3
  2637  0290                     u3975:	
  2638  0290  35A3               	lslf	??_control_transfer,f
  2639  0291  3EFF               	addlw	-1
  2640  0292  1D03               	skipz
  2641  0293  2A90               	goto	u3975
  2642  0294  3523               	lslf	??_control_transfer,w
  2643  0295  047C               	iorwf	__x,w
  2644  0296  00A4               	movwf	??_control_transfer+1
  2645  0297  0824               	movf	??_control_transfer+1,w
  2646  0298  00FC               	movwf	__x
  2647  0299  087C               	movf	__x,w
  2648  029A  00A3               	movwf	??_control_transfer
  2649  029B  0823               	movf	??_control_transfer,w
  2650  029C  07E6               	addwf	__checksum,f
  2651  029D  0866               	movf	__checksum,w
  2652  029E  1D03               	skipz
  2653  029F  0008               	return
  2654  02A0  307C               	movlw	__x& (0+255)
  2655  02A1  246E               	fcall	_GET_CHAR_HELPER
  2656  02A2  3A00               	xorlw	0
  2657  02A3  1D03               	btfss	3,2
  2658  02A4  0008               	return
  2659  02A5  087C               	movf	__x,w
  2660  02A6  3A11               	xorlw	17
  2661  02A7  1D03               	btfss	3,2
  2662  02A8  0008               	return
  2663                           
  2664                           ;protocol.c: 106: Save(page,data,16);
  2665  02A9  0020               	movlb	0	; select bank0
  2666  02AA  084B               	movf	control_transfer@page+1,w
  2667  02AB  01F2               	clrf	Save@address+1
  2668  02AC  07F2               	addwf	Save@address+1,f
  2669  02AD  084A               	movf	control_transfer@page,w
  2670  02AE  01F1               	clrf	Save@address
  2671  02AF  07F1               	addwf	Save@address,f
  2672  02B0  3025               	movlw	control_transfer@data& (0+255)
  2673  02B1  00A3               	movwf	??_control_transfer
  2674  02B2  0823               	movf	??_control_transfer,w
  2675  02B3  00F3               	movwf	Save@ptr
  2676  02B4  3010               	movlw	16
  2677  02B5  00A4               	movwf	??_control_transfer+1
  2678  02B6  0824               	movf	??_control_transfer+1,w
  2679  02B7  00F4               	movwf	Save@data_length
  2680  02B8  26AC               	fcall	_Save
  2681                           
  2682                           ;protocol.c: 107: switch(page)
  2683  02B9  2AD8               	goto	l2983
  2684  02BA                     l2977:	
  2685                           ;protocol.c: 108: {
  2686                           ;protocol.c: 109: case 0x7F0:
  2687                           
  2688                           
  2689                           ;protocol.c: 110: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2690  02BA  30F0               	movlw	240
  2691  02BB  00F1               	movwf	Load@address
  2692  02BC  3007               	movlw	7
  2693  02BD  00F2               	movwf	Load@address+1
  2694  02BE  30C0               	movlw	_config& (0+255)
  2695  02BF  0020               	movlb	0	; select bank0
  2696  02C0  00A3               	movwf	??_control_transfer
  2697  02C1  0823               	movf	??_control_transfer,w
  2698  02C2  00F3               	movwf	Load@ptr
  2699  02C3  3009               	movlw	9
  2700  02C4  00A4               	movwf	??_control_transfer+1
  2701  02C5  0824               	movf	??_control_transfer+1,w
  2702  02C6  00F4               	movwf	Load@data_length
  2703  02C7  2788               	fcall	_Load
  2704                           
  2705                           ;protocol.c: 111: break;
  2706  02C8  2AE6               	goto	l2985
  2707  02C9                     l2979:	
  2708                           ;protocol.c: 112: case 0x7E0:
  2709                           
  2710                           
  2711                           ;protocol.c: 113: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2712  02C9  30E0               	movlw	224
  2713  02CA  00F1               	movwf	Load@address
  2714  02CB  3007               	movlw	7
  2715  02CC  00F2               	movwf	Load@address+1
  2716  02CD  30A0               	movlw	_hitlist& (0+255)
  2717  02CE  0020               	movlb	0	; select bank0
  2718  02CF  00A3               	movwf	??_control_transfer
  2719  02D0  0823               	movf	??_control_transfer,w
  2720  02D1  00F3               	movwf	Load@ptr
  2721  02D2  3010               	movlw	16
  2722  02D3  00A4               	movwf	??_control_transfer+1
  2723  02D4  0824               	movf	??_control_transfer+1,w
  2724  02D5  00F4               	movwf	Load@data_length
  2725  02D6  2788               	fcall	_Load
  2726                           
  2727                           ;protocol.c: 115: }
  2728                           
  2729                           ;protocol.c: 114: break;
  2730  02D7  2AE6               	goto	l2985
  2731  02D8                     l2983:	
  2732                           
  2733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 1, Range of values is 7 to 7
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte            4     3 (average)
  2739                           ; direct_byte           11     9 (fixed)
  2740                           ; jumptable            263     9 (fixed)
  2741                           ;	Chosen strategy is simple_byte
  2742  02D8  0020               	movlb	0	; select bank0
  2743  02D9  084B               	movf	control_transfer@page+1,w
  2744  02DA  3A07               	xorlw	7	; case 7
  2745  02DB  1903               	skipnz
  2746  02DC  2ADE               	goto	l3273
  2747  02DD  2AE6               	goto	l2985
  2748  02DE                     l3273:	
  2749                           
  2750                           ; Switch size 1, requested type "space"
  2751                           ; Number of cases is 2, Range of values is 224 to 240
  2752                           ; switch strategies available:
  2753                           ; Name         Instructions Cycles
  2754                           ; simple_byte            7     4 (average)
  2755                           ; direct_byte           43     9 (fixed)
  2756                           ; jumptable            263     9 (fixed)
  2757                           ;	Chosen strategy is simple_byte
  2758  02DE  084A               	movf	control_transfer@page,w
  2759  02DF  3AE0               	xorlw	224	; case 224
  2760  02E0  1903               	skipnz
  2761  02E1  2AC9               	goto	l2979
  2762  02E2  3A10               	xorlw	16	; case 240
  2763  02E3  1903               	skipnz
  2764  02E4  2ABA               	goto	l2977
  2765  02E5  2AE6               	goto	l2985
  2766  02E6                     l2985:	
  2767                           
  2768                           ;protocol.c: 116: SEND_SOF();
  2769  02E6  24DB               	fcall	_SEND_SOF
  2770                           
  2771                           ;protocol.c: 117: SEND_DATA_BYTE(0x00);
  2772  02E7  3000               	movlw	0
  2773  02E8  248C               	fcall	_SEND_DATA_BYTE
  2774                           
  2775                           ;protocol.c: 118: SEND_EOF();
  2776  02E9  24E9               	fcall	_SEND_EOF
  2777                           
  2778                           ;protocol.c: 119: break;
  2779  02EA  0008               	return
  2780  02EB                     l2987:	
  2781                           ;protocol.c: 120: case 0x7:
  2782                           
  2783                           
  2784                           ;protocol.c: 121: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2785  02EB  307C               	movlw	__x& (0+255)
  2786  02EC  246E               	fcall	_GET_CHAR_HELPER
  2787  02ED  3A00               	xorlw	0
  2788  02EE  1D03               	btfss	3,2
  2789  02EF  0008               	return
  2790  02F0  306D               	movlw	__y& (0+255)
  2791  02F1  246E               	fcall	_GET_CHAR_HELPER
  2792  02F2  3A00               	xorlw	0
  2793  02F3  1D03               	btfss	3,2
  2794  02F4  0008               	return
  2795  02F5  087C               	movf	__x,w
  2796  02F6  39F0               	andlw	240
  2797  02F7  1D03               	btfss	3,2
  2798  02F8  0008               	return
  2799  02F9  0020               	movlb	0	; select bank0
  2800  02FA  086D               	movf	__y,w
  2801  02FB  39F0               	andlw	240
  2802  02FC  1D03               	btfss	3,2
  2803  02FD  0008               	return
  2804  02FE  086D               	movf	__y,w
  2805  02FF  00A3               	movwf	??_control_transfer
  2806  0300  3003               	movlw	3
  2807  0301                     u4055:	
  2808  0301  35A3               	lslf	??_control_transfer,f
  2809  0302  3EFF               	addlw	-1
  2810  0303  1D03               	skipz
  2811  0304  2B01               	goto	u4055
  2812  0305  3523               	lslf	??_control_transfer,w
  2813  0306  047C               	iorwf	__x,w
  2814  0307  00A4               	movwf	??_control_transfer+1
  2815  0308  0824               	movf	??_control_transfer+1,w
  2816  0309  00FC               	movwf	__x
  2817  030A  087C               	movf	__x,w
  2818  030B  00A3               	movwf	??_control_transfer
  2819  030C  0823               	movf	??_control_transfer,w
  2820  030D  07E6               	addwf	__checksum,f
  2821  030E  0866               	movf	__checksum,w
  2822  030F  1D03               	skipz
  2823  0310  0008               	return
  2824  0311  307C               	movlw	__x& (0+255)
  2825  0312  246E               	fcall	_GET_CHAR_HELPER
  2826  0313  3A00               	xorlw	0
  2827  0314  1D03               	btfss	3,2
  2828  0315  0008               	return
  2829  0316  087C               	movf	__x,w
  2830  0317  3A11               	xorlw	17
  2831  0318  1D03               	btfss	3,2
  2832  0319  0008               	return
  2833                           
  2834                           ;protocol.c: 122: play_song(one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2835  031A  3046               	movlw	low (_one_up| (0+32768))
  2836  031B  00F1               	movwf	play_song@song
  2837  031C  3085               	movlw	high (_one_up| (0+32768))
  2838  031D  00F2               	movwf	play_song@song+1
  2839  031E  3006               	movlw	6
  2840  031F  0020               	movlb	0	; select bank0
  2841  0320  00A3               	movwf	??_control_transfer
  2842  0321  0823               	movf	??_control_transfer,w
  2843  0322  00F3               	movwf	play_song@length
  2844  0323  30E8               	movlw	232
  2845  0324  00F4               	movwf	play_song@note_duration
  2846  0325  30FD               	movlw	253
  2847  0326  00F5               	movwf	play_song@note_duration+1
  2848  0327  01F6               	clrf	play_song@repeat
  2849  0328  27AD               	fcall	_play_song
  2850                           
  2851                           ;protocol.c: 123: SEND_SOF();
  2852  0329  24DB               	fcall	_SEND_SOF
  2853                           
  2854                           ;protocol.c: 124: SEND_DATA_BYTE(0x00);
  2855  032A  3000               	movlw	0
  2856  032B  248C               	fcall	_SEND_DATA_BYTE
  2857                           
  2858                           ;protocol.c: 125: SEND_EOF();
  2859  032C  24E9               	fcall	_SEND_EOF
  2860                           
  2861                           ;protocol.c: 130: }
  2862                           
  2863                           ;protocol.c: 129: goto err;
  2864                           
  2865                           ;protocol.c: 128: default:
  2866                           
  2867                           ;protocol.c: 126: break;
  2868  032D  0008               	return
  2869  032E                     l3017:	
  2870  032E  0020               	movlb	0	; select bank0
  2871  032F  0845               	movf	control_transfer@cmd,w
  2872                           
  2873                           ; Switch size 1, requested type "space"
  2874                           ; Number of cases is 5, Range of values is 1 to 7
  2875                           ; switch strategies available:
  2876                           ; Name         Instructions Cycles
  2877                           ; simple_byte           16     9 (average)
  2878                           ; direct_byte           23     9 (fixed)
  2879                           ; jumptable            263     9 (fixed)
  2880                           ;	Chosen strategy is simple_byte
  2881  0330  3A01               	xorlw	1	; case 1
  2882  0331  1903               	skipnz
  2883  0332  2874               	goto	l2713
  2884  0333  3A02               	xorlw	2	; case 3
  2885  0334  1903               	skipnz
  2886  0335  28AB               	goto	l2741
  2887  0336  3A07               	xorlw	7	; case 4
  2888  0337  1903               	skipnz
  2889  0338  293F               	goto	l2805
  2890  0339  3A02               	xorlw	2	; case 6
  2891  033A  1903               	skipnz
  2892  033B  29ED               	goto	l2887
  2893  033C  3A01               	xorlw	1	; case 7
  2894  033D  1903               	skipnz
  2895  033E  2AEB               	goto	l2987
  2896  033F  2B41               	goto	l407
  2897  0340  0008               	return
  2898  0341                     l407:	
  2899                           ;protocol.c: 132: return;
  2900                           
  2901                           ;protocol.c: 131: err:
  2902                           
  2903  0341  0008               	return
  2904  0342                     __end_of_control_transfer:	
  2905                           
  2906                           	psect	text6
  2907  04DB                     __ptext6:	
  2908 ;; *************** function _SEND_SOF *****************
  2909 ;; Defined at:
  2910 ;;		line 38 in file "protocol.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;		None               void
  2917 ;; Registers used:
  2918 ;;		wreg, status,2, status,0, pclath, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2924 ;;      Params:         0       0       0       0
  2925 ;;      Locals:         0       0       0       0
  2926 ;;      Temps:          0       0       0       0
  2927 ;;      Totals:         0       0       0       0
  2928 ;;Total ram usage:        0 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    5
  2931 ;; This function calls:
  2932 ;;		_SEND_DATA_BYTE
  2933 ;;		_Send_Byte
  2934 ;; This function is called by:
  2935 ;;		_control_transfer
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _SEND_SOF
  2941  04DB                     _SEND_SOF:	
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2945  04DB  3010               	movlw	16
  2946  04DC  26F3               	fcall	_Send_Byte
  2947  04DD  0020               	movlb	0	; select bank0
  2948  04DE  01E6               	clrf	__checksum
  2949  04DF  0021               	movlb	1	; select bank1
  2950  04E0  0840               	movf	_config^(0+128),w
  2951  04E1  248C               	fcall	_SEND_DATA_BYTE
  2952  04E2  0008               	return
  2953  04E3                     __end_of_SEND_SOF:	
  2954                           
  2955                           	psect	text7
  2956  04E9                     __ptext7:	
  2957 ;; *************** function _SEND_EOF *****************
  2958 ;; Defined at:
  2959 ;;		line 39 in file "protocol.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2973 ;;      Params:         0       0       0       0
  2974 ;;      Locals:         0       0       0       0
  2975 ;;      Temps:          0       0       0       0
  2976 ;;      Totals:         0       0       0       0
  2977 ;;Total ram usage:        0 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    5
  2980 ;; This function calls:
  2981 ;;		_SEND_DATA_BYTE
  2982 ;;		_Send_Byte
  2983 ;; This function is called by:
  2984 ;;		_control_transfer
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function _SEND_EOF
  2990  04E9                     _SEND_EOF:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2994  04E9  0020               	movlb	0	; select bank0
  2995  04EA  0866               	movf	__checksum,w
  2996  04EB  248C               	fcall	_SEND_DATA_BYTE
  2997  04EC  3011               	movlw	17
  2998  04ED  26F3               	fcall	_Send_Byte
  2999  04EE  0008               	return
  3000  04EF                     __end_of_SEND_EOF:	
  3001                           
  3002                           	psect	text8
  3003  048C                     __ptext8:	
  3004 ;; *************** function _SEND_DATA_BYTE *****************
  3005 ;; Defined at:
  3006 ;;		line 37 in file "protocol.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  b               1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  b               1    2[BANK0 ] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0, pclath, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3020 ;;      Params:         0       0       0       0
  3021 ;;      Locals:         0       1       0       0
  3022 ;;      Temps:          0       2       0       0
  3023 ;;      Totals:         0       3       0       0
  3024 ;;Total ram usage:        3 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    4
  3027 ;; This function calls:
  3028 ;;		_Send_Byte
  3029 ;; This function is called by:
  3030 ;;		_SEND_SOF
  3031 ;;		_SEND_EOF
  3032 ;;		_control_transfer
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _SEND_DATA_BYTE
  3038  048C                     _SEND_DATA_BYTE:	
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3042                           ;SEND_DATA_BYTE@b stored from wreg
  3043  048C  0020               	movlb	0	; select bank0
  3044  048D  00A2               	movwf	SEND_DATA_BYTE@b
  3045  048E  0822               	movf	SEND_DATA_BYTE@b,w
  3046  048F  390F               	andlw	15
  3047  0490  00A0               	movwf	??_SEND_DATA_BYTE
  3048  0491  0820               	movf	??_SEND_DATA_BYTE,w
  3049  0492  00FC               	movwf	__x
  3050  0493  0822               	movf	SEND_DATA_BYTE@b,w
  3051  0494  00A0               	movwf	??_SEND_DATA_BYTE
  3052  0495  3004               	movlw	4
  3053  0496                     u3145:	
  3054  0496  36A0               	lsrf	??_SEND_DATA_BYTE,f
  3055  0497  0B89               	decfsz	9,f
  3056  0498  2C96               	goto	u3145
  3057  0499  0820               	movf	??_SEND_DATA_BYTE,w
  3058  049A  00A1               	movwf	??_SEND_DATA_BYTE+1
  3059  049B  0821               	movf	??_SEND_DATA_BYTE+1,w
  3060  049C  00ED               	movwf	__y
  3061  049D  087C               	movf	__x,w
  3062  049E  26F3               	fcall	_Send_Byte
  3063  049F  0020               	movlb	0	; select bank0
  3064  04A0  086D               	movf	__y,w
  3065  04A1  26F3               	fcall	_Send_Byte
  3066  04A2  0020               	movlb	0	; select bank0
  3067  04A3  0822               	movf	SEND_DATA_BYTE@b,w
  3068  04A4  02E6               	subwf	__checksum,f
  3069  04A5  0008               	return
  3070  04A6                     __end_of_SEND_DATA_BYTE:	
  3071                           
  3072                           	psect	text9
  3073  046E                     __ptext9:	
  3074 ;; *************** function _GET_CHAR_HELPER *****************
  3075 ;; Defined at:
  3076 ;;		line 31 in file "protocol.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  val             1    wreg     PTR unsigned char 
  3079 ;;		 -> _y(1), _x(1), 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  val             1    2[COMMON] PTR unsigned char 
  3082 ;;		 -> _y(1), _x(1), 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      unsigned char 
  3085 ;; Registers used:
  3086 ;;		wreg, fsr1l, fsr1h, status,2
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         0       0       0       0
  3093 ;;      Locals:         1       0       0       0
  3094 ;;      Temps:          1       0       0       0
  3095 ;;      Totals:         2       0       0       0
  3096 ;;Total ram usage:        2 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_control_transfer
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _GET_CHAR_HELPER
  3108  046E                     _GET_CHAR_HELPER:	
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3112                           ;GET_CHAR_HELPER@val stored from wreg
  3113  046E  00F2               	movwf	GET_CHAR_HELPER@val
  3114  046F  0020               	movlb	0	; select bank0
  3115  0470  01DC               	clrf	__i
  3116  0471  01DD               	clrf	__i+1
  3117  0472                     l287:	
  3118  0472  1A91               	btfsc	17,5	;volatile
  3119  0473  2C81               	goto	l1875
  3120  0474  3001               	movlw	1
  3121  0475  07DC               	addwf	__i,f
  3122  0476  3000               	movlw	0
  3123  0477  3DDD               	addwfc	__i+1,f
  3124  0478  3075               	movlw	117
  3125  0479  025D               	subwf	__i+1,w
  3126  047A  3030               	movlw	48
  3127  047B  1903               	skipnz
  3128  047C  025C               	subwf	__i,w
  3129  047D  1C03               	skipc
  3130  047E  2C72               	goto	l287
  3131  047F  3001               	movlw	1
  3132  0480  0008               	return
  3133  0481                     l1875:	
  3134  0481  0023               	movlb	3	; select bank3
  3135  0482  0819               	movf	25,w	;volatile
  3136  0483  3AAA               	xorlw	170
  3137  0484  00F1               	movwf	??_GET_CHAR_HELPER
  3138  0485  0872               	movf	GET_CHAR_HELPER@val,w
  3139  0486  0086               	movwf	6
  3140  0487  0187               	clrf	7
  3141  0488  0871               	movf	??_GET_CHAR_HELPER,w
  3142  0489  0081               	movwf	1
  3143  048A  3000               	movlw	0
  3144  048B  0008               	return
  3145  048C                     __end_of_GET_CHAR_HELPER:	
  3146                           
  3147                           	psect	text10
  3148  0604                     __ptext10:	
  3149 ;; *************** function _add_to_hitlist *****************
  3150 ;; Defined at:
  3151 ;;		line 305 in file "user.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  gun             1    wreg     unsigned char 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  gun             1    5[COMMON] unsigned char 
  3156 ;;  i               1    8[COMMON] unsigned char 
  3157 ;;  gun16           2    6[COMMON] unsigned int 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3167 ;;      Params:         0       0       0       0
  3168 ;;      Locals:         4       0       0       0
  3169 ;;      Temps:          4       0       0       0
  3170 ;;      Totals:         8       0       0       0
  3171 ;;Total ram usage:        8 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    1
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_hit_by
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _add_to_hitlist
  3183  0604                     _add_to_hitlist:	
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3187                           ;add_to_hitlist@gun stored from wreg
  3188  0604  00F5               	movwf	add_to_hitlist@gun
  3189                           
  3190                           ;user.c: 307: uint16_t gun16 = gun & 0x7F;
  3191  0605  0875               	movf	add_to_hitlist@gun,w
  3192  0606  397F               	andlw	127
  3193  0607  00F1               	movwf	??_add_to_hitlist
  3194  0608  01F2               	clrf	??_add_to_hitlist+1
  3195  0609  0871               	movf	??_add_to_hitlist,w
  3196  060A  00F6               	movwf	add_to_hitlist@gun16
  3197  060B  0872               	movf	??_add_to_hitlist+1,w
  3198  060C  00F7               	movwf	add_to_hitlist@gun16+1
  3199                           
  3200                           ;user.c: 308: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3201  060D  01F8               	clrf	add_to_hitlist@i
  3202  060E                     L2:	
  3203  060E  3010               	movlw	16
  3204  060F  0278               	subwf	add_to_hitlist@i,w
  3205  0610  1803               	btfsc	3,0
  3206  0611  0008               	return
  3207                           
  3208                           ;user.c: 309: {
  3209                           ;user.c: 310: if(!(hitlist[i] & 0x007F))
  3210  0612  3578               	lslf	add_to_hitlist@i,w
  3211  0613  3EA0               	addlw	_hitlist& (0+255)
  3212  0614  0086               	movwf	6
  3213  0615  0187               	clrf	7
  3214  0616  3F40               	moviw [0]fsr1
  3215  0617  00F1               	movwf	??_add_to_hitlist
  3216  0618  3F41               	moviw [1]fsr1
  3217  0619  00F2               	movwf	??_add_to_hitlist+1
  3218  061A  307F               	movlw	127
  3219  061B  0571               	andwf	??_add_to_hitlist,w
  3220  061C  00F3               	movwf	??_add_to_hitlist+2
  3221  061D  3000               	movlw	0
  3222  061E  0572               	andwf	??_add_to_hitlist+1,w
  3223  061F  00F4               	movwf	??_add_to_hitlist+3
  3224  0620  0874               	movf	??_add_to_hitlist+3,w
  3225  0621  0473               	iorwf	??_add_to_hitlist+2,w
  3226  0622  1D03               	skipz
  3227  0623  2E2E               	goto	l2299
  3228                           
  3229                           ;user.c: 311: {
  3230                           ;user.c: 312: hitlist[i] |= gun16;
  3231  0624  3578               	lslf	add_to_hitlist@i,w
  3232  0625  3EA0               	addlw	_hitlist& (0+255)
  3233  0626  0086               	movwf	6
  3234  0627  0187               	clrf	7
  3235  0628  0876               	movf	add_to_hitlist@gun16,w
  3236  0629  0481               	iorwf	1,f
  3237  062A  3141               	addfsr 1,1
  3238  062B  0877               	movf	add_to_hitlist@gun16+1,w
  3239  062C  0481               	iorwf	1,f
  3240                           
  3241                           ;user.c: 313: return;
  3242  062D  0008               	return
  3243  062E                     l2299:	
  3244                           
  3245                           ;user.c: 314: }
  3246                           ;user.c: 315: if(!(hitlist[i] & 0x3F80))
  3247  062E  3578               	lslf	add_to_hitlist@i,w
  3248  062F  3EA0               	addlw	_hitlist& (0+255)
  3249  0630  0086               	movwf	6
  3250  0631  0187               	clrf	7
  3251  0632  3F40               	moviw [0]fsr1
  3252  0633  00F1               	movwf	??_add_to_hitlist
  3253  0634  3F41               	moviw [1]fsr1
  3254  0635  00F2               	movwf	??_add_to_hitlist+1
  3255  0636  3080               	movlw	128
  3256  0637  0571               	andwf	??_add_to_hitlist,w
  3257  0638  00F3               	movwf	??_add_to_hitlist+2
  3258  0639  303F               	movlw	63
  3259  063A  0572               	andwf	??_add_to_hitlist+1,w
  3260  063B  00F4               	movwf	??_add_to_hitlist+3
  3261  063C  0874               	movf	??_add_to_hitlist+3,w
  3262  063D  0473               	iorwf	??_add_to_hitlist+2,w
  3263  063E  1D03               	skipz
  3264  063F  2E53               	goto	l2305
  3265                           
  3266                           ;user.c: 316: {
  3267                           ;user.c: 317: hitlist[i] |= gun16 << 7;
  3268  0640  0877               	movf	add_to_hitlist@gun16+1,w
  3269  0641  00F2               	movwf	??_add_to_hitlist+1
  3270  0642  0876               	movf	add_to_hitlist@gun16,w
  3271  0643  00F1               	movwf	??_add_to_hitlist
  3272  0644  3007               	movlw	7
  3273  0645                     u2715:	
  3274  0645  35F1               	lslf	??_add_to_hitlist,f
  3275  0646  0DF2               	rlf	??_add_to_hitlist+1,f
  3276  0647  0B89               	decfsz	9,f
  3277  0648  2E45               	goto	u2715
  3278  0649  3578               	lslf	add_to_hitlist@i,w
  3279  064A  3EA0               	addlw	_hitlist& (0+255)
  3280  064B  0086               	movwf	6
  3281  064C  0187               	clrf	7
  3282  064D  0871               	movf	??_add_to_hitlist,w
  3283  064E  0481               	iorwf	1,f
  3284  064F  3141               	addfsr 1,1
  3285  0650  0872               	movf	??_add_to_hitlist+1,w
  3286  0651  0481               	iorwf	1,f
  3287                           
  3288                           ;user.c: 318: return;
  3289  0652  0008               	return
  3290  0653                     l2305:	
  3291  0653  3001               	movlw	1
  3292  0654  00F1               	movwf	??_add_to_hitlist
  3293  0655  0871               	movf	??_add_to_hitlist,w
  3294  0656  07F8               	addwf	add_to_hitlist@i,f
  3295  0657  2E0E               	goto	L2
  3296  0658                     __end_of_add_to_hitlist:	
  3297                           
  3298                           	psect	text11
  3299  0342                     __ptext11:	
  3300 ;; *************** function _handle_fire *****************
  3301 ;; Defined at:
  3302 ;;		line 246 in file "user.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  a               2    2[BANK0 ] unsigned int 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      unsigned char 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3316 ;;      Params:         0       0       0       0
  3317 ;;      Locals:         0       2       0       0
  3318 ;;      Temps:          0       2       0       0
  3319 ;;      Totals:         0       4       0       0
  3320 ;;Total ram usage:        4 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    4
  3323 ;; This function calls:
  3324 ;;		_ADC_read
  3325 ;;		_Send_Byte
  3326 ;;		_cheat
  3327 ;;		_green_led_on
  3328 ;;		_play_song
  3329 ;;		_stop_song
  3330 ;; This function is called by:
  3331 ;;		_main
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _handle_fire
  3337  0342                     _handle_fire:	
  3338                           
  3339                           ;user.c: 247: static uint16_t timer = 0;
  3340                           ;user.c: 248: static uint16_t counter = 0;
  3341                           ;user.c: 249: uint16_t a;
  3342                           ;user.c: 251: a=ADC_read();
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3346  0342  24BD               	fcall	_ADC_read
  3347  0343  0872               	movf	?_ADC_read+1,w
  3348  0344  0020               	movlb	0	; select bank0
  3349  0345  01A3               	clrf	handle_fire@a+1
  3350  0346  07A3               	addwf	handle_fire@a+1,f
  3351  0347  0871               	movf	?_ADC_read,w
  3352  0348  01A2               	clrf	handle_fire@a
  3353  0349  07A2               	addwf	handle_fire@a,f
  3354                           
  3355                           ;user.c: 252: if (a > config.fire_cheating){
  3356  034A  0823               	movf	handle_fire@a+1,w
  3357  034B  0021               	movlb	1	; select bank1
  3358  034C  024D               	subwf	((_config+1)^(0+128)+12),w
  3359  034D  1D03               	skipz
  3360  034E  2B53               	goto	u4305
  3361  034F  0020               	movlb	0	; select bank0
  3362  0350  0822               	movf	handle_fire@a,w
  3363  0351  0021               	movlb	1	; select bank1
  3364  0352  024C               	subwf	(_config^(0+128)+12),w
  3365  0353                     u4305:	
  3366  0353  1803               	skipnc
  3367  0354  2B56               	goto	l3203
  3368                           
  3369                           ;user.c: 253: cheat();
  3370  0355  244D               	fcall	_cheat
  3371  0356                     l3203:	
  3372                           
  3373                           ;user.c: 254: }
  3374                           ;user.c: 255: if (a > config.fire_threshold && a < config.fire_cheating)
  3375  0356  0020               	movlb	0	; select bank0
  3376  0357  0823               	movf	handle_fire@a+1,w
  3377  0358  0021               	movlb	1	; select bank1
  3378  0359  024B               	subwf	((_config+1)^(0+128)+10),w
  3379  035A  1D03               	skipz
  3380  035B  2B60               	goto	u4315
  3381  035C  0020               	movlb	0	; select bank0
  3382  035D  0822               	movf	handle_fire@a,w
  3383  035E  0021               	movlb	1	; select bank1
  3384  035F  024A               	subwf	(_config^(0+128)+10),w
  3385  0360                     u4315:	
  3386  0360  1803               	skipnc
  3387  0361  2BC4               	goto	l200
  3388  0362  084D               	movf	((_config+1)^(0+128)+12),w
  3389  0363  0020               	movlb	0	; select bank0
  3390  0364  0223               	subwf	handle_fire@a+1,w
  3391  0365  1D03               	skipz
  3392  0366  2B6B               	goto	u4325
  3393  0367  0021               	movlb	1	; select bank1
  3394  0368  084C               	movf	(_config^(0+128)+12),w
  3395  0369  0020               	movlb	0	; select bank0
  3396  036A  0222               	subwf	handle_fire@a,w
  3397  036B                     u4325:	
  3398  036B  1803               	skipnc
  3399  036C  2BC4               	goto	l200
  3400  036D                     l201:	
  3401                           ;user.c: 256: {
  3402                           ;user.c: 257: while(!my_random_number){
  3403                           
  3404  036D  086A               	movf	_my_random_number,w
  3405  036E  1D03               	skipz
  3406  036F  2B75               	goto	l3211
  3407                           
  3408                           ;user.c: 258: my_random_number = TMR0;
  3409  0370  0815               	movf	21,w	;volatile
  3410  0371  00A0               	movwf	??_handle_fire
  3411  0372  0820               	movf	??_handle_fire,w
  3412  0373  00EA               	movwf	_my_random_number
  3413  0374  2B6D               	goto	l201
  3414  0375                     l3211:	
  3415                           
  3416                           ;user.c: 259: }
  3417                           ;user.c: 260: if(timer < config.fire_holdoff)
  3418  0375  0021               	movlb	1	; select bank1
  3419  0376  084F               	movf	((_config+1)^(0+128)+14),w
  3420  0377  0020               	movlb	0	; select bank0
  3421  0378  0265               	subwf	handle_fire@timer+1,w
  3422  0379  1D03               	skipz
  3423  037A  2B7F               	goto	u4345
  3424  037B  0021               	movlb	1	; select bank1
  3425  037C  084E               	movf	(_config^(0+128)+14),w
  3426  037D  0020               	movlb	0	; select bank0
  3427  037E  0264               	subwf	handle_fire@timer,w
  3428  037F                     u4345:	
  3429  037F  1803               	skipnc
  3430  0380  2B86               	goto	l3215
  3431                           
  3432                           ;user.c: 261: {
  3433                           ;user.c: 262: timer ++;
  3434  0381  3001               	movlw	1
  3435  0382  07E4               	addwf	handle_fire@timer,f
  3436  0383  3000               	movlw	0
  3437  0384  3DE5               	addwfc	handle_fire@timer+1,f
  3438                           
  3439                           ;user.c: 263: }
  3440  0385  0008               	return
  3441  0386                     l3215:	
  3442                           
  3443                           ;user.c: 264: else
  3444                           ;user.c: 265: {
  3445                           ;user.c: 266: if(!config.power || counter <= config.power)
  3446  0386  3002               	movlw	2
  3447  0387  3EC0               	addlw	_config& (0+255)
  3448  0388  0086               	movwf	6
  3449  0389  0187               	clrf	7
  3450  038A  0016               	moviw fsr1++
  3451  038B  0401               	iorwf	1,w
  3452  038C  1903               	skipnz
  3453  038D  2B99               	goto	l3219
  3454  038E  0863               	movf	handle_fire@counter+1,w
  3455  038F  0021               	movlb	1	; select bank1
  3456  0390  0243               	subwf	((_config+1)^(0+128)+2),w
  3457  0391  1D03               	skipz
  3458  0392  2B97               	goto	u4365
  3459  0393  0020               	movlb	0	; select bank0
  3460  0394  0862               	movf	handle_fire@counter,w
  3461  0395  0021               	movlb	1	; select bank1
  3462  0396  0242               	subwf	(_config^(0+128)+2),w
  3463  0397                     u4365:	
  3464  0397  1C03               	skipc
  3465  0398  2BC2               	goto	l206
  3466  0399                     l3219:	
  3467                           
  3468                           ;user.c: 267: {
  3469                           ;user.c: 268: if(!counter)
  3470  0399  0020               	movlb	0	; select bank0
  3471  039A  0863               	movf	handle_fire@counter+1,w
  3472  039B  0462               	iorwf	handle_fire@counter,w
  3473  039C  1D03               	skipz
  3474  039D  2BB9               	goto	l3225
  3475                           
  3476                           ;user.c: 269: {
  3477                           ;user.c: 270: green_led_on();
  3478  039E  24F5               	fcall	_green_led_on
  3479                           
  3480                           ;user.c: 271: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  3481  039F  3026               	movlw	low (_fire_song| (0+32768))
  3482  03A0  00F1               	movwf	play_song@song
  3483  03A1  3085               	movlw	high (_fire_song| (0+32768))
  3484  03A2  00F2               	movwf	play_song@song+1
  3485  03A3  3010               	movlw	16
  3486  03A4  0020               	movlb	0	; select bank0
  3487  03A5  00A0               	movwf	??_handle_fire
  3488  03A6  0820               	movf	??_handle_fire,w
  3489  03A7  00F3               	movwf	play_song@length
  3490  03A8  30B8               	movlw	184
  3491  03A9  00F4               	movwf	play_song@note_duration
  3492  03AA  300B               	movlw	11
  3493  03AB  00F5               	movwf	play_song@note_duration+1
  3494  03AC  3002               	movlw	2
  3495  03AD  3EC0               	addlw	_config& (0+255)
  3496  03AE  0086               	movwf	6
  3497  03AF  0187               	clrf	7
  3498  03B0  0016               	moviw fsr1++
  3499  03B1  0401               	iorwf	1,w
  3500  03B2  3000               	movlw	0
  3501  03B3  1903               	skipnz
  3502  03B4  3001               	movlw	1
  3503  03B5  00A1               	movwf	??_handle_fire+1
  3504  03B6  0821               	movf	??_handle_fire+1,w
  3505  03B7  00F6               	movwf	play_song@repeat
  3506  03B8  27AD               	fcall	_play_song
  3507  03B9                     l3225:	
  3508                           
  3509                           ;user.c: 272: }
  3510                           ;user.c: 273: Send_Byte(config.id);
  3511  03B9  0021               	movlb	1	; select bank1
  3512  03BA  0840               	movf	_config^(0+128),w
  3513  03BB  26F3               	fcall	_Send_Byte
  3514                           
  3515                           ;user.c: 274: counter++;
  3516  03BC  3001               	movlw	1
  3517  03BD  0020               	movlb	0	; select bank0
  3518  03BE  07E2               	addwf	handle_fire@counter,f
  3519  03BF  3000               	movlw	0
  3520  03C0  3DE3               	addwfc	handle_fire@counter+1,f
  3521                           
  3522                           ;user.c: 275: }
  3523  03C1  0008               	return
  3524  03C2                     l206:	
  3525                           
  3526                           ;user.c: 276: else
  3527                           ;user.c: 277: {
  3528                           ;user.c: 278: {TRISAbits.TRISA5 = 1;};
  3529  03C2  168C               	bsf	12,5	;volatile
  3530                           
  3531                           ;user.c: 279: }
  3532                           ;user.c: 280: }
  3533                           ;user.c: 281: }
  3534  03C3  0008               	return
  3535  03C4                     l200:	
  3536                           
  3537                           ;user.c: 282: else
  3538                           ;user.c: 283: {
  3539                           ;user.c: 284: {TRISAbits.TRISA5 = 1;};
  3540  03C4  0021               	movlb	1	; select bank1
  3541  03C5  168C               	bsf	12,5	;volatile
  3542                           
  3543                           ;user.c: 285: if(!config.power && counter) stop_song();
  3544  03C6  0843               	movf	((_config+1)^(0+128)+2),w
  3545  03C7  0442               	iorwf	(_config^(0+128)+2),w
  3546  03C8  1D03               	skipz
  3547  03C9  2BD0               	goto	l3235
  3548  03CA  0020               	movlb	0	; select bank0
  3549  03CB  0863               	movf	handle_fire@counter+1,w
  3550  03CC  0462               	iorwf	handle_fire@counter,w
  3551  03CD  1903               	skipnz
  3552  03CE  2BD0               	goto	l3235
  3553  03CF  24EF               	fcall	_stop_song
  3554  03D0                     l3235:	
  3555                           
  3556                           ;user.c: 286: timer = 0;
  3557  03D0  0020               	movlb	0	; select bank0
  3558  03D1  01E4               	clrf	handle_fire@timer
  3559  03D2  01E5               	clrf	handle_fire@timer+1
  3560                           
  3561                           ;user.c: 287: counter = 0;
  3562  03D3  01E2               	clrf	handle_fire@counter
  3563  03D4  01E3               	clrf	handle_fire@counter+1
  3564                           
  3565                           ;user.c: 288: return 0;
  3566                           ;	Return value of _handle_fire is never used
  3567  03D5  0008               	return
  3568  03D6                     __end_of_handle_fire:	
  3569                           ;user.c: 289: }
  3570                           ;user.c: 290: return 1;
  3571                           ;	Return value of _handle_fire is never used
  3572                           
  3573                           
  3574                           	psect	text12
  3575  04EF                     __ptext12:	
  3576 ;; *************** function _stop_song *****************
  3577 ;; Defined at:
  3578 ;;		line 105 in file "user.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;		None
  3583 ;; Return value:  Size  Location     Type
  3584 ;;		None               void
  3585 ;; Registers used:
  3586 ;;		None
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3592 ;;      Params:         0       0       0       0
  3593 ;;      Locals:         0       0       0       0
  3594 ;;      Temps:          0       0       0       0
  3595 ;;      Totals:         0       0       0       0
  3596 ;;Total ram usage:        0 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_handle_music
  3603 ;;		_handle_fire
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _stop_song
  3609  04EF                     _stop_song:	
  3610                           
  3611                           ;user.c: 107: {PWM3CONbits.PWM3OE = 0;};
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _stop_song: []
  3615  04EF  003B               	movlb	27	; select bank27
  3616  04F0  133B               	bcf	59,6	;volatile
  3617                           
  3618                           ;user.c: 108: T1CONbits.TMR1ON=0;
  3619  04F1  0020               	movlb	0	; select bank0
  3620  04F2  1018               	bcf	24,0	;volatile
  3621                           
  3622                           ;user.c: 109: PIR1bits.TMR1IF=0;
  3623  04F3  1011               	bcf	17,0	;volatile
  3624  04F4  0008               	return
  3625  04F5                     __end_of_stop_song:	
  3626                           
  3627                           	psect	text13
  3628  07AD                     __ptext13:	
  3629 ;; *************** function _play_song *****************
  3630 ;; Defined at:
  3631 ;;		line 92 in file "user.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  song            2    1[COMMON] PTR unsigned int 
  3634 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3635 ;;  length          1    3[COMMON] unsigned char 
  3636 ;;  note_duratio    2    4[COMMON] unsigned int 
  3637 ;;  repeat          1    6[COMMON] unsigned char 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;		None               void
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3649 ;;      Params:         6       0       0       0
  3650 ;;      Locals:         0       0       0       0
  3651 ;;      Temps:          2       0       0       0
  3652 ;;      Totals:         8       0       0       0
  3653 ;;Total ram usage:        8 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    1
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_handle_fire
  3660 ;;		_super_dead_mode
  3661 ;;		_hit_by
  3662 ;;		_control_transfer
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _play_song
  3668  07AD                     _play_song:	
  3669                           
  3670                           ;user.c: 94: cur_song=song;
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3674  07AD  0872               	movf	play_song@song+1,w
  3675  07AE  0020               	movlb	0	; select bank0
  3676  07AF  01DF               	clrf	_cur_song+1
  3677  07B0  07DF               	addwf	_cur_song+1,f
  3678  07B1  0871               	movf	play_song@song,w
  3679  07B2  01DE               	clrf	_cur_song
  3680  07B3  07DE               	addwf	_cur_song,f
  3681                           
  3682                           ;user.c: 95: cur_song_length=length;
  3683  07B4  0873               	movf	play_song@length,w
  3684  07B5  00F7               	movwf	??_play_song
  3685  07B6  0877               	movf	??_play_song,w
  3686  07B7  00E7               	movwf	_cur_song_length
  3687                           
  3688                           ;user.c: 96: cur_song_ptr=0;
  3689  07B8  01E8               	clrf	_cur_song_ptr
  3690                           
  3691                           ;user.c: 97: cur_song_repeat=repeat;
  3692  07B9  0876               	movf	play_song@repeat,w
  3693  07BA  00F7               	movwf	??_play_song
  3694  07BB  0877               	movf	??_play_song,w
  3695  07BC  00E9               	movwf	_cur_song_repeat
  3696                           
  3697                           ;user.c: 98: cur_song_duration=note_duration;
  3698  07BD  0875               	movf	play_song@note_duration+1,w
  3699  07BE  01E1               	clrf	_cur_song_duration+1
  3700  07BF  07E1               	addwf	_cur_song_duration+1,f
  3701  07C0  0874               	movf	play_song@note_duration,w
  3702  07C1  01E0               	clrf	_cur_song_duration
  3703  07C2  07E0               	addwf	_cur_song_duration,f
  3704                           
  3705                           ;user.c: 100: TMR1 = -cur_song_duration;
  3706  07C3  0960               	comf	_cur_song_duration,w
  3707  07C4  00F7               	movwf	??_play_song
  3708  07C5  0961               	comf	_cur_song_duration+1,w
  3709  07C6  00F8               	movwf	??_play_song+1
  3710  07C7  0AF7               	incf	??_play_song,f
  3711  07C8  1903               	skipnz
  3712  07C9  0AF8               	incf	??_play_song+1,f
  3713  07CA  0877               	movf	??_play_song,w
  3714  07CB  0096               	movwf	22	;volatile
  3715  07CC  0878               	movf	??_play_song+1,w
  3716  07CD  0097               	movwf	23	;volatile
  3717                           
  3718                           ;user.c: 101: PIR1bits.TMR1IF = 1;
  3719  07CE  1411               	bsf	17,0	;volatile
  3720                           
  3721                           ;user.c: 102: T1CONbits.TMR1ON = 1;
  3722  07CF  1418               	bsf	24,0	;volatile
  3723  07D0  0008               	return
  3724  07D1                     __end_of_play_song:	
  3725                           
  3726                           	psect	text14
  3727  04F5                     __ptext14:	
  3728 ;; *************** function _green_led_on *****************
  3729 ;; Defined at:
  3730 ;;		line 86 in file "user.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;		None               void
  3737 ;; Registers used:
  3738 ;;		None
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3744 ;;      Params:         0       0       0       0
  3745 ;;      Locals:         0       0       0       0
  3746 ;;      Temps:          0       0       0       0
  3747 ;;      Totals:         0       0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_handle_fire
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _green_led_on
  3760  04F5                     _green_led_on:	
  3761                           
  3762                           ;user.c: 88: TRISAbits.TRISA5 = 0;
  3763                           
  3764                           ;incstack = 0
  3765                           ; Regs used in _green_led_on: []
  3766  04F5  0021               	movlb	1	; select bank1
  3767  04F6  128C               	bcf	12,5	;volatile
  3768                           
  3769                           ;user.c: 89: PORTAbits.RA5 = 1;
  3770  04F7  0020               	movlb	0	; select bank0
  3771  04F8  168C               	bsf	12,5	;volatile
  3772  04F9  0008               	return
  3773  04FA                     __end_of_green_led_on:	
  3774                           
  3775                           	psect	text15
  3776  06F3                     __ptext15:	
  3777 ;; *************** function _Send_Byte *****************
  3778 ;; Defined at:
  3779 ;;		line 155 in file "user.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  data            1    wreg     unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  data            1    9[COMMON] unsigned char 
  3784 ;;  i               2   10[COMMON] unsigned int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;		None               void
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, pclath, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3794 ;;      Params:         0       0       0       0
  3795 ;;      Locals:         3       0       0       0
  3796 ;;      Temps:          1       0       0       0
  3797 ;;      Totals:         4       0       0       0
  3798 ;;Total ram usage:        4 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    3
  3801 ;; This function calls:
  3802 ;;		_cheat
  3803 ;;		_delay_1_ms
  3804 ;; This function is called by:
  3805 ;;		_handle_fire
  3806 ;;		_super_dead_mode
  3807 ;;		_SEND_DATA_BYTE
  3808 ;;		_SEND_SOF
  3809 ;;		_SEND_EOF
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           
  3814                           ;psect for function _Send_Byte
  3815  06F3                     _Send_Byte:	
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3819                           ;Send_Byte@data stored from wreg
  3820  06F3  00F9               	movwf	Send_Byte@data
  3821                           
  3822                           ;user.c: 157: data ^= 0b10101010;
  3823  06F4  30AA               	movlw	170
  3824  06F5  00F8               	movwf	??_Send_Byte
  3825  06F6  0878               	movf	??_Send_Byte,w
  3826  06F7  06F9               	xorwf	Send_Byte@data,f
  3827                           
  3828                           ;user.c: 158: delay_1_ms();
  3829  06F8  27D1               	fcall	_delay_1_ms
  3830                           
  3831                           ;user.c: 159: RCSTAbits.CREN = 0;
  3832  06F9  0023               	movlb	3	; select bank3
  3833  06FA  121D               	bcf	29,4	;volatile
  3834                           
  3835                           ;user.c: 161: for(uint16_t i=0; i<100; i++){
  3836  06FB  01FA               	clrf	Send_Byte@i
  3837  06FC  01FB               	clrf	Send_Byte@i+1
  3838  06FD  3000               	movlw	0
  3839  06FE  027B               	subwf	Send_Byte@i+1,w
  3840  06FF  3064               	movlw	100
  3841  0700  1903               	skipnz
  3842  0701  027A               	subwf	Send_Byte@i,w
  3843  0702  1803               	btfsc	3,0
  3844  0703  2F19               	goto	l160
  3845  0704                     l159:	
  3846                           
  3847                           ;user.c: 162: if(PORTAbits.RA1){break;}
  3848  0704  0020               	movlb	0	; select bank0
  3849  0705  188C               	btfsc	12,1	;volatile
  3850  0706  2F19               	goto	l160
  3851                           
  3852                           ;user.c: 163: delay_1_ms();
  3853  0707  27D1               	fcall	_delay_1_ms
  3854                           
  3855                           ;user.c: 164: if(i==99){cheat();}
  3856  0708  3063               	movlw	99
  3857  0709  067A               	xorwf	Send_Byte@i,w
  3858  070A  047B               	iorwf	Send_Byte@i+1,w
  3859  070B  1D03               	skipz
  3860  070C  2F0E               	goto	l2621
  3861  070D  244D               	fcall	_cheat
  3862  070E                     l2621:	
  3863  070E  3001               	movlw	1
  3864  070F  07FA               	addwf	Send_Byte@i,f
  3865  0710  3000               	movlw	0
  3866  0711  3DFB               	addwfc	Send_Byte@i+1,f
  3867  0712  3000               	movlw	0
  3868  0713  027B               	subwf	Send_Byte@i+1,w
  3869  0714  3064               	movlw	100
  3870  0715  1903               	skipnz
  3871  0716  027A               	subwf	Send_Byte@i,w
  3872  0717  1C03               	skipc
  3873  0718  2F04               	goto	l159
  3874  0719                     l160:	
  3875                           
  3876                           ;user.c: 165: }
  3877                           ;user.c: 167: { DACCON0bits.DACEN = 1; TMR0=0; INTCONbits.TMR0IF=1; INTCONbits.TMR0IE=1;
      +                          };
  3878  0719  0022               	movlb	2	; select bank2
  3879  071A  1798               	bsf	24,7	;volatile
  3880  071B  0020               	movlb	0	; select bank0
  3881  071C  0195               	clrf	21	;volatile
  3882  071D  150B               	bsf	11,2	;volatile
  3883  071E  168B               	bsf	11,5	;volatile
  3884                           
  3885                           ;user.c: 168: TXREG = data;
  3886  071F  0879               	movf	Send_Byte@data,w
  3887  0720  0023               	movlb	3	; select bank3
  3888  0721  009A               	movwf	26	;volatile
  3889  0722                     l163:	
  3890                           ;user.c: 169: while(!TXSTAbits.TRMT);
  3891                           
  3892  0722  1C9E               	btfss	30,1	;volatile
  3893  0723  2F22               	goto	l163
  3894                           
  3895                           ;user.c: 170: { INTCONbits.TMR0IE=0; DACCON0bits.DACEN=0;};
  3896  0724  128B               	bcf	11,5	;volatile
  3897  0725  0022               	movlb	2	; select bank2
  3898  0726  1398               	bcf	24,7	;volatile
  3899                           
  3900                           ;user.c: 171: RCSTAbits.CREN = 1;
  3901  0727  0023               	movlb	3	; select bank3
  3902  0728  161D               	bsf	29,4	;volatile
  3903                           
  3904                           ;user.c: 172: RCREG;
  3905  0729  0819               	movf	25,w	;volatile
  3906                           
  3907                           ;user.c: 173: delay_1_ms();
  3908  072A  27D1               	fcall	_delay_1_ms
  3909                           
  3910                           ;user.c: 174: delay_1_ms();
  3911  072B  27D1               	fcall	_delay_1_ms
  3912  072C  0008               	return
  3913  072D                     __end_of_Send_Byte:	
  3914                           
  3915                           	psect	text16
  3916  044D                     __ptext16:	
  3917 ;; *************** function _cheat *****************
  3918 ;; Defined at:
  3919 ;;		line 232 in file "user.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  i               1    7[COMMON] unsigned char 
  3924 ;;  i               1    6[COMMON] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, pclath, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3934 ;;      Params:         0       0       0       0
  3935 ;;      Locals:         2       0       0       0
  3936 ;;      Temps:          1       0       0       0
  3937 ;;      Totals:         3       0       0       0
  3938 ;;Total ram usage:        3 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    2
  3941 ;; This function calls:
  3942 ;;		_delay_1_ms
  3943 ;;		_red_led_on
  3944 ;;		_tone
  3945 ;; This function is called by:
  3946 ;;		_Send_Byte
  3947 ;;		_handle_fire
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _cheat
  3953  044D                     _cheat:	
  3954  044D                     l185:	
  3955                           ;incstack = 0
  3956                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  3957                           ;user.c: 233: while(1){
  3958                           
  3959                           
  3960                           ;user.c: 234: red_led_on();
  3961  044D  24FA               	fcall	_red_led_on
  3962                           
  3963                           ;user.c: 235: tone(7813);
  3964  044E  3085               	movlw	133
  3965  044F  00F1               	movwf	tone@period
  3966  0450  301E               	movlw	30
  3967  0451  00F2               	movwf	tone@period+1
  3968  0452  24A6               	fcall	_tone
  3969                           
  3970                           ;user.c: 236: for(uint8_t i=0; i<200; i++){
  3971  0453  01F6               	clrf	cheat@i
  3972  0454  30C8               	movlw	200
  3973  0455  0276               	subwf	cheat@i,w
  3974  0456  1803               	btfsc	3,0
  3975  0457  2C61               	goto	l187
  3976  0458                     l2583:	
  3977                           
  3978                           ;user.c: 237: delay_1_ms();
  3979  0458  27D1               	fcall	_delay_1_ms
  3980  0459  3001               	movlw	1
  3981  045A  00F5               	movwf	??_cheat
  3982  045B  0875               	movf	??_cheat,w
  3983  045C  07F6               	addwf	cheat@i,f
  3984  045D  30C8               	movlw	200
  3985  045E  0276               	subwf	cheat@i,w
  3986  045F  1C03               	skipc
  3987  0460  2C58               	goto	l2583
  3988  0461                     l187:	
  3989                           
  3990                           ;user.c: 238: }
  3991                           ;user.c: 239: {TRISAbits.TRISA5 = 1;};
  3992  0461  0021               	movlb	1	; select bank1
  3993  0462  168C               	bsf	12,5	;volatile
  3994                           
  3995                           ;user.c: 240: for(uint8_t i=0; i<200; i++){
  3996  0463  01F7               	clrf	cheat@i_724
  3997  0464                     L3:	
  3998  0464  30C8               	movlw	200
  3999  0465  0277               	subwf	cheat@i_724,w
  4000  0466  1803               	btfsc	3,0
  4001  0467  2C4D               	goto	l185
  4002                           
  4003                           ;user.c: 241: delay_1_ms();
  4004  0468  27D1               	fcall	_delay_1_ms
  4005  0469  3001               	movlw	1
  4006  046A  00F5               	movwf	??_cheat
  4007  046B  0875               	movf	??_cheat,w
  4008  046C  07F7               	addwf	cheat@i_724,f
  4009  046D  2C64               	goto	L3
  4010  046E                     __end_of_cheat:	
  4011                           
  4012                           	psect	text17
  4013  04A6                     __ptext17:	
  4014 ;; *************** function _tone *****************
  4015 ;; Defined at:
  4016 ;;		line 133 in file "user.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  period          2    1[COMMON] unsigned int 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4030 ;;      Params:         2       0       0       0
  4031 ;;      Locals:         0       0       0       0
  4032 ;;      Temps:          2       0       0       0
  4033 ;;      Totals:         4       0       0       0
  4034 ;;Total ram usage:        4 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_handle_music
  4041 ;;		_cheat
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           
  4046                           ;psect for function _tone
  4047  04A6                     _tone:	
  4048                           
  4049                           ;user.c: 135: PWM3CONbits.PWM3EN = 1;
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in _tone: [wreg+status,2+status,0]
  4053  04A6  003B               	movlb	27	; select bank27
  4054  04A7  17BB               	bsf	59,7	;volatile
  4055                           
  4056                           ;user.c: 136: PWM3CONbits.PWM3OE = 1;
  4057  04A8  173B               	bsf	59,6	;volatile
  4058                           
  4059                           ;user.c: 137: PWM3PR = period;
  4060  04A9  0872               	movf	tone@period+1,w
  4061  04AA  01B6               	clrf	54	;volatile
  4062  04AB  07B6               	addwf	54,f	;volatile
  4063  04AC  0871               	movf	tone@period,w
  4064  04AD  01B5               	clrf	53	;volatile
  4065  04AE  07B5               	addwf	53,f	;volatile
  4066                           
  4067                           ;user.c: 138: PWM3DC = period >> 1;
  4068  04AF  0872               	movf	tone@period+1,w
  4069  04B0  00F4               	movwf	??_tone+1
  4070  04B1  0871               	movf	tone@period,w
  4071  04B2  00F3               	movwf	??_tone
  4072  04B3  36F4               	lsrf	??_tone+1,f
  4073  04B4  0CF3               	rrf	??_tone,f
  4074  04B5  0873               	movf	??_tone,w
  4075  04B6  00B3               	movwf	51	;volatile
  4076  04B7  0874               	movf	??_tone+1,w
  4077  04B8  00B4               	movwf	52	;volatile
  4078                           
  4079                           ;user.c: 139: PWM3PH = 0x0000;
  4080  04B9  01B1               	clrf	49	;volatile
  4081  04BA  01B2               	clrf	50	;volatile
  4082                           
  4083                           ;user.c: 140: PWM3LDCONbits.PWM3LD = 1;
  4084  04BB  17BF               	bsf	63,7	;volatile
  4085  04BC  0008               	return
  4086  04BD                     __end_of_tone:	
  4087                           
  4088                           	psect	text18
  4089  04FA                     __ptext18:	
  4090 ;; *************** function _red_led_on *****************
  4091 ;; Defined at:
  4092 ;;		line 80 in file "user.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		None
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4106 ;;      Params:         0       0       0       0
  4107 ;;      Locals:         0       0       0       0
  4108 ;;      Temps:          0       0       0       0
  4109 ;;      Totals:         0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    1
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_cheat
  4117 ;;		_super_dead_mode
  4118 ;;		_hit_by
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           
  4123                           ;psect for function _red_led_on
  4124  04FA                     _red_led_on:	
  4125                           
  4126                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  4127                           
  4128                           ;incstack = 0
  4129                           ; Regs used in _red_led_on: []
  4130  04FA  0021               	movlb	1	; select bank1
  4131  04FB  128C               	bcf	12,5	;volatile
  4132                           
  4133                           ;user.c: 83: PORTAbits.RA5 = 0;
  4134  04FC  0020               	movlb	0	; select bank0
  4135  04FD  128C               	bcf	12,5	;volatile
  4136  04FE  0008               	return
  4137  04FF                     __end_of_red_led_on:	
  4138                           
  4139                           	psect	text19
  4140  04BD                     __ptext19:	
  4141 ;; *************** function _ADC_read *****************
  4142 ;; Defined at:
  4143 ;;		line 73 in file "user.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  2    1[COMMON] unsigned int 
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4157 ;;      Params:         2       0       0       0
  4158 ;;      Locals:         0       0       0       0
  4159 ;;      Temps:          2       0       0       0
  4160 ;;      Totals:         4       0       0       0
  4161 ;;Total ram usage:        4 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    1
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_handle_fire
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _ADC_read
  4173  04BD                     _ADC_read:	
  4174                           
  4175                           ;user.c: 75: ADCON0bits.GO = 1;
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4179  04BD  0021               	movlb	1	; select bank1
  4180  04BE  149D               	bsf	29,1	;volatile
  4181  04BF                     l131:	
  4182                           ;user.c: 76: while(ADCON0bits.GO){};
  4183                           
  4184  04BF  189D               	btfsc	29,1	;volatile
  4185  04C0  2CBF               	goto	l131
  4186                           
  4187                           ;user.c: 77: return ADRES >> 6;
  4188  04C1  081C               	movf	28,w	;volatile
  4189  04C2  00F4               	movwf	??_ADC_read+1
  4190  04C3  081B               	movf	27,w	;volatile
  4191  04C4  00F3               	movwf	??_ADC_read
  4192  04C5  3006               	movlw	6
  4193  04C6                     u2745:	
  4194  04C6  36F4               	lsrf	??_ADC_read+1,f
  4195  04C7  0CF3               	rrf	??_ADC_read,f
  4196  04C8  0B89               	decfsz	9,f
  4197  04C9  2CC6               	goto	u2745
  4198  04CA  0873               	movf	??_ADC_read,w
  4199  04CB  00F1               	movwf	?_ADC_read
  4200  04CC  0874               	movf	??_ADC_read+1,w
  4201  04CD  00F2               	movwf	?_ADC_read+1
  4202  04CE  0008               	return
  4203  04CF                     __end_of_ADC_read:	
  4204                           
  4205                           	psect	text20
  4206  075E                     __ptext20:	
  4207 ;; *************** function _Setup *****************
  4208 ;; Defined at:
  4209 ;;		line 32 in file "user.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4223 ;;      Params:         0       0       0       0
  4224 ;;      Locals:         0       0       0       0
  4225 ;;      Temps:          1       0       0       0
  4226 ;;      Totals:         1       0       0       0
  4227 ;;Total ram usage:        1 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    2
  4230 ;; This function calls:
  4231 ;;		_delay_1_ms
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _Setup
  4239  075E                     _Setup:	
  4240                           
  4241                           ;user.c: 34: OSCCON = 0b01111010;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  4245  075E  307A               	movlw	122
  4246  075F  0021               	movlb	1	; select bank1
  4247  0760  0099               	movwf	25	;volatile
  4248                           
  4249                           ;user.c: 36: ANSELA = 0x00;
  4250  0761  0023               	movlb	3	; select bank3
  4251  0762  018C               	clrf	12	;volatile
  4252                           
  4253                           ;user.c: 37: TRISAbits.TRISA2 = 0;
  4254  0763  0021               	movlb	1	; select bank1
  4255  0764  110C               	bcf	12,2	;volatile
  4256                           
  4257                           ;user.c: 38: TRISAbits.TRISA0 = 0;
  4258  0765  100C               	bcf	12,0	;volatile
  4259                           
  4260                           ;user.c: 41: ANSELAbits.ANSA4 = 1;
  4261  0766  0023               	movlb	3	; select bank3
  4262  0767  160C               	bsf	12,4	;volatile
  4263                           
  4264                           ;user.c: 42: ADCON1 |= 0b00110000;
  4265  0768  3030               	movlw	48
  4266  0769  00F3               	movwf	??_Setup
  4267  076A  0873               	movf	??_Setup,w
  4268  076B  0021               	movlb	1	; select bank1
  4269  076C  049E               	iorwf	30,f	;volatile
  4270                           
  4271                           ;user.c: 45: SPBRGL = 103;
  4272  076D  3067               	movlw	103
  4273  076E  0023               	movlb	3	; select bank3
  4274  076F  009B               	movwf	27	;volatile
  4275                           
  4276                           ;user.c: 46: TXSTAbits.SYNC = 0;
  4277  0770  121E               	bcf	30,4	;volatile
  4278                           
  4279                           ;user.c: 47: RCSTAbits.SPEN = 1;
  4280  0771  179D               	bsf	29,7	;volatile
  4281                           
  4282                           ;user.c: 48: BAUDCONbits.SCKP = 1;
  4283  0772  161F               	bsf	31,4	;volatile
  4284                           
  4285                           ;user.c: 49: TXSTAbits.TXEN = 1;
  4286  0773  169E               	bsf	30,5	;volatile
  4287                           
  4288                           ;user.c: 52: RCSTAbits.CREN = 1;
  4289  0774  161D               	bsf	29,4	;volatile
  4290                           
  4291                           ;user.c: 55: INTCONbits.GIE = 1;
  4292  0775  178B               	bsf	11,7	;volatile
  4293                           
  4294                           ;user.c: 58: OPTION_REGbits.TMR0CS = 0;
  4295  0776  0021               	movlb	1	; select bank1
  4296  0777  1295               	bcf	21,5	;volatile
  4297                           
  4298                           ;user.c: 61: T1CONbits.T1CKPS=3;
  4299  0778  3030               	movlw	48
  4300  0779  0020               	movlb	0	; select bank0
  4301  077A  0498               	iorwf	24,f	;volatile
  4302                           
  4303                           ;user.c: 64: T2CONbits.T2CKPS = 3;
  4304  077B  3003               	movlw	3
  4305  077C  049C               	iorwf	28,f	;volatile
  4306                           
  4307                           ;user.c: 65: T2CONbits.T2OUTPS = 15;
  4308  077D  3078               	movlw	120
  4309  077E  049C               	iorwf	28,f	;volatile
  4310                           
  4311                           ;user.c: 66: T2CONbits.TMR2ON = 1;
  4312  077F  151C               	bsf	28,2	;volatile
  4313                           
  4314                           ;user.c: 68: ADCON0bits.CHS = 3;
  4315  0780  0021               	movlb	1	; select bank1
  4316  0781  081D               	movf	29,w	;volatile
  4317  0782  3983               	andlw	-125
  4318  0783  380C               	iorlw	12
  4319  0784  009D               	movwf	29	;volatile
  4320                           
  4321                           ;user.c: 69: ADCON0bits.ADON = 1;
  4322  0785  141D               	bsf	29,0	;volatile
  4323                           
  4324                           ;user.c: 70: delay_1_ms();
  4325  0786  27D1               	fcall	_delay_1_ms
  4326  0787  0008               	return
  4327  0788                     __end_of_Setup:	
  4328                           
  4329                           	psect	text21
  4330  07D1                     __ptext21:	
  4331 ;; *************** function _delay_1_ms *****************
  4332 ;; Defined at:
  4333 ;;		line 391 in file "user.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  i               2    1[COMMON] unsigned int 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;		None               void
  4340 ;; Registers used:
  4341 ;;		wreg, status,2
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4347 ;;      Params:         0       0       0       0
  4348 ;;      Locals:         2       0       0       0
  4349 ;;      Temps:          0       0       0       0
  4350 ;;      Totals:         2       0       0       0
  4351 ;;Total ram usage:        2 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_Setup
  4358 ;;		_Send_Byte
  4359 ;;		_cheat
  4360 ;;		_super_dead_mode
  4361 ;;		_hit_by
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _delay_1_ms
  4367  07D1                     _delay_1_ms:	
  4368                           
  4369                           ;user.c: 392: for (uint16_t i=0; i<4000/14; i++){
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _delay_1_ms: [wreg+status,2]
  4373  07D1  01F1               	clrf	delay_1_ms@i
  4374  07D2  01F2               	clrf	delay_1_ms@i+1
  4375  07D3                     L4:	
  4376  07D3  3001               	movlw	1
  4377  07D4  0272               	subwf	delay_1_ms@i+1,w
  4378  07D5  301D               	movlw	29
  4379  07D6  1903               	skipnz
  4380  07D7  0271               	subwf	delay_1_ms@i,w
  4381  07D8  1803               	btfsc	3,0
  4382  07D9  0008               	return
  4383                           
  4384                           ;user.c: 393: __nop();
  4385  07DA  0000               	nop
  4386  07DB  3001               	movlw	1
  4387  07DC  07F1               	addwf	delay_1_ms@i,f
  4388  07DD  3000               	movlw	0
  4389  07DE  3DF2               	addwfc	delay_1_ms@i+1,f
  4390  07DF  2FD3               	goto	L4
  4391  07E0                     __end_of_delay_1_ms:	
  4392                           
  4393                           	psect	text22
  4394  0658                     __ptext22:	
  4395 ;; *************** function _LoadFromFlash *****************
  4396 ;; Defined at:
  4397 ;;		line 28 in file "main.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4411 ;;      Params:         0       0       0       0
  4412 ;;      Locals:         0       0       0       0
  4413 ;;      Temps:          2       0       0       0
  4414 ;;      Totals:         2       0       0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    2
  4418 ;; This function calls:
  4419 ;;		_Load
  4420 ;;		_Save
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _LoadFromFlash
  4428  0658                     _LoadFromFlash:	
  4429                           
  4430                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4434  0658  30F0               	movlw	240
  4435  0659  00F1               	movwf	Load@address
  4436  065A  3007               	movlw	7
  4437  065B  00F2               	movwf	Load@address+1
  4438  065C  30C0               	movlw	_config& (0+255)
  4439  065D  00F7               	movwf	??_LoadFromFlash
  4440  065E  0877               	movf	??_LoadFromFlash,w
  4441  065F  00F3               	movwf	Load@ptr
  4442  0660  3009               	movlw	9
  4443  0661  00F8               	movwf	??_LoadFromFlash+1
  4444  0662  0878               	movf	??_LoadFromFlash+1,w
  4445  0663  00F4               	movwf	Load@data_length
  4446  0664  2788               	fcall	_Load
  4447                           
  4448                           ;main.c: 31: if(config.id == 0x3FFF)
  4449  0665  303F               	movlw	63
  4450  0666  0021               	movlb	1	; select bank1
  4451  0667  0641               	xorwf	(_config+1)^(0+128),w
  4452  0668  1D03               	skipz
  4453  0669  2E6C               	goto	u2825
  4454  066A  30FF               	movlw	255
  4455  066B  0640               	xorwf	_config^(0+128),w
  4456  066C                     u2825:	
  4457  066C  1D03               	skipz
  4458  066D  2E9E               	goto	l2391
  4459                           
  4460                           ;main.c: 32: {
  4461                           ;main.c: 33: config.health = 1;
  4462  066E  3001               	movlw	1
  4463  066F  00C4               	movwf	(_config^(0+128)+4)
  4464  0670  3000               	movlw	0
  4465  0671  00C5               	movwf	(_config^(0+128)+5)
  4466                           
  4467                           ;main.c: 34: config.id = 0x80;
  4468  0672  3080               	movlw	128
  4469  0673  00C0               	movwf	_config^(0+128)
  4470  0674  3000               	movlw	0
  4471  0675  00C1               	movwf	(_config^(0+128)+1)
  4472                           
  4473                           ;main.c: 35: config.power = 0;
  4474  0676  01C2               	clrf	(_config^(0+128)+2)
  4475  0677  01C3               	clrf	((_config+1)^(0+128)+2)
  4476                           
  4477                           ;main.c: 37: config.fire_threshold = 500;
  4478  0678  30F4               	movlw	244
  4479  0679  00CA               	movwf	(_config^(0+128)+10)
  4480  067A  3001               	movlw	1
  4481  067B  00CB               	movwf	(_config^(0+128)+11)
  4482                           
  4483                           ;main.c: 38: config.fire_holdoff = 4000;
  4484  067C  30A0               	movlw	160
  4485  067D  00CE               	movwf	(_config^(0+128)+14)
  4486  067E  300F               	movlw	15
  4487  067F  00CF               	movwf	(_config^(0+128)+15)
  4488                           
  4489                           ;main.c: 40: config.fire_cheating = 1000;
  4490  0680  30E8               	movlw	232
  4491  0681  00CC               	movwf	(_config^(0+128)+12)
  4492  0682  3003               	movlw	3
  4493  0683  00CD               	movwf	(_config^(0+128)+13)
  4494                           
  4495                           ;main.c: 42: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4496  0684  30F0               	movlw	240
  4497  0685  00F1               	movwf	Save@address
  4498  0686  3007               	movlw	7
  4499  0687  00F2               	movwf	Save@address+1
  4500  0688  30C0               	movlw	_config& (0+255)
  4501  0689  00F7               	movwf	??_LoadFromFlash
  4502  068A  0877               	movf	??_LoadFromFlash,w
  4503  068B  00F3               	movwf	Save@ptr
  4504  068C  3009               	movlw	9
  4505  068D  00F8               	movwf	??_LoadFromFlash+1
  4506  068E  0878               	movf	??_LoadFromFlash+1,w
  4507  068F  00F4               	movwf	Save@data_length
  4508  0690  26AC               	fcall	_Save
  4509                           
  4510                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4511  0691  30E0               	movlw	224
  4512  0692  00F1               	movwf	Save@address
  4513  0693  3007               	movlw	7
  4514  0694  00F2               	movwf	Save@address+1
  4515  0695  30A0               	movlw	_hitlist& (0+255)
  4516  0696  00F7               	movwf	??_LoadFromFlash
  4517  0697  0877               	movf	??_LoadFromFlash,w
  4518  0698  00F3               	movwf	Save@ptr
  4519  0699  3010               	movlw	16
  4520  069A  00F8               	movwf	??_LoadFromFlash+1
  4521  069B  0878               	movf	??_LoadFromFlash+1,w
  4522  069C  00F4               	movwf	Save@data_length
  4523  069D  26AC               	fcall	_Save
  4524  069E                     l2391:	
  4525                           
  4526                           ;main.c: 44: }
  4527                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4528  069E  30E0               	movlw	224
  4529  069F  00F1               	movwf	Load@address
  4530  06A0  3007               	movlw	7
  4531  06A1  00F2               	movwf	Load@address+1
  4532  06A2  30A0               	movlw	_hitlist& (0+255)
  4533  06A3  00F7               	movwf	??_LoadFromFlash
  4534  06A4  0877               	movf	??_LoadFromFlash,w
  4535  06A5  00F3               	movwf	Load@ptr
  4536  06A6  3010               	movlw	16
  4537  06A7  00F8               	movwf	??_LoadFromFlash+1
  4538  06A8  0878               	movf	??_LoadFromFlash+1,w
  4539  06A9  00F4               	movwf	Load@data_length
  4540  06AA  2788               	fcall	_Load
  4541  06AB  0008               	return
  4542  06AC                     __end_of_LoadFromFlash:	
  4543                           
  4544                           	psect	text23
  4545  06AC                     __ptext23:	
  4546 ;; *************** function _Save *****************
  4547 ;; Defined at:
  4548 ;;		line 198 in file "user.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  address         2    1[COMMON] unsigned int 
  4551 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4552 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4553 ;;  data_length     1    4[COMMON] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  i               1    6[COMMON] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4565 ;;      Params:         4       0       0       0
  4566 ;;      Locals:         1       0       0       0
  4567 ;;      Temps:          1       0       0       0
  4568 ;;      Totals:         6       0       0       0
  4569 ;;Total ram usage:        6 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    1
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_LoadFromFlash
  4576 ;;		_hit_by
  4577 ;;		_control_transfer
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _Save
  4583  06AC                     _Save:	
  4584                           
  4585                           ;user.c: 200: INTCONbits.GIE = 0;
  4586                           
  4587                           ;incstack = 0
  4588                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4589  06AC  138B               	bcf	11,7	;volatile
  4590                           
  4591                           ;user.c: 201: PMADR = address;
  4592  06AD  0872               	movf	Save@address+1,w
  4593  06AE  0023               	movlb	3	; select bank3
  4594  06AF  0192               	clrf	18	;volatile
  4595  06B0  0792               	addwf	18,f	;volatile
  4596  06B1  0871               	movf	Save@address,w
  4597  06B2  0191               	clrf	17	;volatile
  4598  06B3  0791               	addwf	17,f	;volatile
  4599                           
  4600                           ;user.c: 202: PMCON1bits.CFGS = 0;
  4601  06B4  1315               	bcf	21,6	;volatile
  4602                           
  4603                           ;user.c: 203: PMCON1bits.FREE = 1;
  4604  06B5  1615               	bsf	21,4	;volatile
  4605                           
  4606                           ;user.c: 204: PMCON1bits.WREN = 1;
  4607  06B6  1515               	bsf	21,2	;volatile
  4608                           
  4609                           ;user.c: 205: PMCON2 = 0x55;
  4610  06B7  3055               	movlw	85
  4611  06B8  0096               	movwf	22	;volatile
  4612                           
  4613                           ;user.c: 206: PMCON2 = 0xAA;
  4614  06B9  30AA               	movlw	170
  4615  06BA  0096               	movwf	22	;volatile
  4616                           
  4617                           ;user.c: 207: PMCON1bits.WR = 1;
  4618  06BB  1495               	bsf	21,1	;volatile
  4619                           
  4620                           ;user.c: 208: __nop();
  4621  06BC  0000               	nop
  4622                           
  4623                           ;user.c: 209: __nop();
  4624  06BD  0000               	nop
  4625                           
  4626                           ;user.c: 210: PMCON1bits.WREN = 0;
  4627  06BE  0023               	movlb	3	; select bank3
  4628  06BF  1115               	bcf	21,2	;volatile
  4629                           
  4630                           ;user.c: 212: PMADR = address;
  4631  06C0  0872               	movf	Save@address+1,w
  4632  06C1  0192               	clrf	18	;volatile
  4633  06C2  0792               	addwf	18,f	;volatile
  4634  06C3  0871               	movf	Save@address,w
  4635  06C4  0191               	clrf	17	;volatile
  4636  06C5  0791               	addwf	17,f	;volatile
  4637                           
  4638                           ;user.c: 213: PMCON1bits.CFGS = 0;
  4639  06C6  1315               	bcf	21,6	;volatile
  4640                           
  4641                           ;user.c: 214: PMCON1bits.FREE = 0;
  4642  06C7  1215               	bcf	21,4	;volatile
  4643                           
  4644                           ;user.c: 215: PMCON1bits.WREN = 1;
  4645  06C8  1515               	bsf	21,2	;volatile
  4646                           
  4647                           ;user.c: 216: PMCON1bits.LWLO = 1;
  4648  06C9  1695               	bsf	21,5	;volatile
  4649                           
  4650                           ;user.c: 218: for (uint8_t i=1; i<=data_length; i++){
  4651  06CA  01F6               	clrf	Save@i
  4652  06CB  0AF6               	incf	Save@i,f
  4653  06CC                     l178:	
  4654  06CC  0876               	movf	Save@i,w
  4655  06CD  0274               	subwf	Save@data_length,w
  4656  06CE  1C03               	btfss	3,0
  4657  06CF  2EF0               	goto	l181
  4658                           
  4659                           ;user.c: 219: PMDAT = *ptr++;
  4660  06D0  0873               	movf	Save@ptr,w
  4661  06D1  0086               	movwf	6
  4662  06D2  0187               	clrf	7
  4663  06D3  3F40               	moviw [0]fsr1
  4664  06D4  0093               	movwf	19	;volatile
  4665  06D5  3F41               	moviw [1]fsr1
  4666  06D6  0094               	movwf	20	;volatile
  4667  06D7  3002               	movlw	2
  4668  06D8  00F5               	movwf	??_Save
  4669  06D9  0875               	movf	??_Save,w
  4670  06DA  07F3               	addwf	Save@ptr,f
  4671                           
  4672                           ;user.c: 220: if(i == data_length) PMCON1bits.LWLO = 0;
  4673  06DB  0876               	movf	Save@i,w
  4674  06DC  0674               	xorwf	Save@data_length,w
  4675  06DD  1903               	btfsc	3,2
  4676  06DE  1295               	bcf	21,5	;volatile
  4677                           
  4678                           ;user.c: 221: PMCON2 = 0x55;
  4679  06DF  3055               	movlw	85
  4680  06E0  0096               	movwf	22	;volatile
  4681                           
  4682                           ;user.c: 222: PMCON2 = 0xAA;
  4683  06E1  30AA               	movlw	170
  4684  06E2  0096               	movwf	22	;volatile
  4685                           
  4686                           ;user.c: 223: PMCON1bits.WR = 1;
  4687  06E3  1495               	bsf	21,1	;volatile
  4688                           
  4689                           ;user.c: 224: __nop();
  4690  06E4  0000               	nop
  4691                           
  4692                           ;user.c: 225: __nop();
  4693  06E5  0000               	nop
  4694                           
  4695                           ;user.c: 226: PMADRL++;
  4696  06E6  3001               	movlw	1
  4697  06E7  00F5               	movwf	??_Save
  4698  06E8  0875               	movf	??_Save,w
  4699  06E9  0023               	movlb	3	; select bank3
  4700  06EA  0791               	addwf	17,f	;volatile
  4701  06EB  3001               	movlw	1
  4702  06EC  00F5               	movwf	??_Save
  4703  06ED  0875               	movf	??_Save,w
  4704  06EE  07F6               	addwf	Save@i,f
  4705  06EF  2ECC               	goto	l178
  4706  06F0                     l181:	
  4707                           
  4708                           ;user.c: 227: }
  4709                           ;user.c: 228: PMCON1bits.WREN = 0;
  4710  06F0  1115               	bcf	21,2	;volatile
  4711                           
  4712                           ;user.c: 229: INTCONbits.GIE = 1;
  4713  06F1  178B               	bsf	11,7	;volatile
  4714  06F2  0008               	return
  4715  06F3                     __end_of_Save:	
  4716                           
  4717                           	psect	text24
  4718  0788                     __ptext24:	
  4719 ;; *************** function _Load *****************
  4720 ;; Defined at:
  4721 ;;		line 186 in file "user.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  address         2    1[COMMON] unsigned int 
  4724 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4725 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4726 ;;  data_length     1    4[COMMON] unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  i               1    6[COMMON] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;		None               void
  4731 ;; Registers used:
  4732 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4738 ;;      Params:         4       0       0       0
  4739 ;;      Locals:         1       0       0       0
  4740 ;;      Temps:          1       0       0       0
  4741 ;;      Totals:         6       0       0       0
  4742 ;;Total ram usage:        6 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    1
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_LoadFromFlash
  4749 ;;		_control_transfer
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function _Load
  4755  0788                     _Load:	
  4756                           
  4757                           ;user.c: 187: PMCON1bits.CFGS = 0;
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4761  0788  0023               	movlb	3	; select bank3
  4762  0789  1315               	bcf	21,6	;volatile
  4763                           
  4764                           ;user.c: 188: PMADR = address;
  4765  078A  0872               	movf	Load@address+1,w
  4766  078B  0192               	clrf	18	;volatile
  4767  078C  0792               	addwf	18,f	;volatile
  4768  078D  0871               	movf	Load@address,w
  4769  078E  0191               	clrf	17	;volatile
  4770  078F  0791               	addwf	17,f	;volatile
  4771                           
  4772                           ;user.c: 189: for (uint8_t i=0; i<data_length; i++){
  4773  0790  01F6               	clrf	Load@i
  4774  0791                     l1795:	
  4775  0791  0874               	movf	Load@data_length,w
  4776  0792  0276               	subwf	Load@i,w
  4777  0793  1803               	btfsc	3,0
  4778  0794  0008               	return
  4779                           
  4780                           ;user.c: 190: PMCON1bits.RD = 1;
  4781  0795  1415               	bsf	21,0	;volatile
  4782                           
  4783                           ;user.c: 191: __nop();
  4784  0796  0000               	nop
  4785                           
  4786                           ;user.c: 192: __nop();
  4787  0797  0000               	nop
  4788                           
  4789                           ;user.c: 193: *ptr++ = PMDAT;
  4790  0798  0873               	movf	Load@ptr,w
  4791  0799  0086               	movwf	6
  4792  079A  0187               	clrf	7
  4793  079B  0023               	movlb	3	; select bank3
  4794  079C  0813               	movf	19,w	;volatile
  4795  079D  3FC0               	movwi [0]fsr1
  4796  079E  0814               	movf	20,w	;volatile
  4797  079F  3FC1               	movwi [1]fsr1
  4798  07A0  3002               	movlw	2
  4799  07A1  00F5               	movwf	??_Load
  4800  07A2  0875               	movf	??_Load,w
  4801  07A3  07F3               	addwf	Load@ptr,f
  4802                           
  4803                           ;user.c: 194: PMADR ++;
  4804  07A4  3001               	movlw	1
  4805  07A5  0791               	addwf	17,f	;volatile
  4806  07A6  3000               	movlw	0
  4807  07A7  3D92               	addwfc	18,f	;volatile
  4808  07A8  3001               	movlw	1
  4809  07A9  00F5               	movwf	??_Load
  4810  07AA  0875               	movf	??_Load,w
  4811  07AB  07F6               	addwf	Load@i,f
  4812  07AC  2F91               	goto	l1795
  4813  07AD                     __end_of_Load:	
  4814                           
  4815                           	psect	intentry
  4816  0004                     __pintentry:	
  4817 ;; *************** function _High_Priority_Interrupt *****************
  4818 ;; Defined at:
  4819 ;;		line 295 in file "user.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;		None               void
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4833 ;;      Params:         0       0       0       0
  4834 ;;      Locals:         0       0       0       0
  4835 ;;      Temps:          1       0       0       0
  4836 ;;      Totals:         1       0       0       0
  4837 ;;Total ram usage:        1 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		Interrupt level 1
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846  0004                     _High_Priority_Interrupt:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4850  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4851  0005  3180               	pagesel	$
  4852  0006  0020               	movlb	0	; select bank0
  4853  0007  087F               	movf	127,w
  4854  0008  00F0               	movwf	??_High_Priority_Interrupt
  4855  0009  0022               	banksel	280	;# 
  4856  000A  0818               	movf	24,w	;# 
  4857  000B  3A20               	xorlw	32	;# 
  4858  000C  0098               	movwf	24	;# 
  4859                           
  4860                           ;user.c: 301: TMR0 -= 50;
  4861  000D  3032               	movlw	50
  4862  000E  0020               	movlb	0	; select bank0
  4863  000F  0295               	subwf	21,f	;volatile
  4864                           
  4865                           ;user.c: 302: INTCONbits.TMR0IF = 0;
  4866  0010  110B               	bcf	11,2	;volatile
  4867  0011  0870               	movf	??_High_Priority_Interrupt,w
  4868  0012  00FF               	movwf	127
  4869  0013  107E               	bcf	126,0	;clear compiler interrupt flag
  4870  0014  0009               	retfie
  4871  0015                     __end_of_High_Priority_Interrupt:	
  4872  007E                     btemp	set	126	;btemp
  4873  007E                     pic14e$flags	set	126
  4874  007E                     wtemp	set	126
  4875  007E                     wtemp0	set	126
  4876  0080                     wtemp1	set	128
  4877  0082                     wtemp2	set	130
  4878  0084                     wtemp3	set	132
  4879  0086                     wtemp4	set	134
  4880  0088                     wtemp5	set	136
  4881  007F                     wtemp6	set	127
  4882  007E                     ttemp	set	126
  4883  007E                     ttemp0	set	126
  4884  0081                     ttemp1	set	129
  4885  0084                     ttemp2	set	132
  4886  0087                     ttemp3	set	135
  4887  007F                     ttemp4	set	127
  4888  007E                     ltemp	set	126
  4889  007E                     ltemp0	set	126
  4890  0082                     ltemp1	set	130
  4891  0086                     ltemp2	set	134
  4892  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      78
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _super_dead_mode->_Send_Byte
    _handle_music->_tone
    _SEND_SOF->_Send_Byte
    _SEND_EOF->_Send_Byte
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _Setup->_delay_1_ms
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35475
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   21140
                                             57 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   12796
                                             50 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0   10053
                                             45 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    8155
                                              3 BANK0     42    42      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     690
                                              0 BANK0      3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     913
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    2025
                                              0 BANK0      4     4      0
                           _ADC_read
                          _Send_Byte
                              _cheat
                       _green_led_on
                          _play_song
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     936
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            4     4      0     597
                                              8 COMMON     4     4      0
                              _cheat
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (5) _cheat                                                3     3      0     396
                                              5 COMMON     3     3      0
                         _delay_1_ms
                         _red_led_on
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      68
                                              3 COMMON     1     1      0
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (2) _delay_1_ms                                           2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1997
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1111
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
     _delay_1_ms
   _handle_fire
     _ADC_read
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _cheat
       _delay_1_ms
       _red_led_on
       _tone
     _green_led_on
     _play_song
     _stop_song
   _handle_music
     _stop_song
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _delay_1_ms
       _handle_music
         _stop_song
         _tone
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _Save
           _play_song
         _delay_1_ms
         _handle_music
           _stop_song
           _tone
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _delay_1_ms
     _handle_music
       _stop_song
       _tone
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8D      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Aug 23 05:33:58 2014

                     __CFG_CP$OFF 0000                                l26 04D7                                __i 005C  
                              __x 007C                                __y 006D                     _LoadFromFlash 0658  
                             l200 03C4                               l201 036D                               l131 04BF  
                             l206 03C2                               l160 0719                               l163 0722  
                             l181 06F0                               l159 0704                               l407 0341  
                             l185 044D                               l178 06CC                               l187 0461  
                             l287 0472                      __CFG_BORV$LO 0000                               wreg 0009  
                 _super_dead_mode 0558                      __CFG_LVP$OFF 0000                       Load@address 0071  
                            l2305 0653                              l3017 032E                              l3211 0375  
                            l3203 0356                              l3035 0573                              l3053 055B  
                            l3109 041C                              l3215 0386                              l3071 0412  
                            l3225 03B9                              l3049 059B                              l3235 03D0  
                            l3219 0399                              l3091 0436                              l3083 042B  
                            l3163 05BF                              l2621 070E                              l2391 069E  
                            l3095 043F                              l3273 02DE                              l2713 0074  
                            l2299 062E                              l2805 013F                              l2741 00AB  
                            l2583 0458                              l2671 073B                              l1795 0791  
                            l1875 0481                              l2667 0739                              l2927 0244  
                            l2949 027A                              l2885 01EB                              l2877 01D9  
                            l2983 02D8                              l2887 01ED                              l2985 02E6  
                            l2977 02BA                              l2987 02EB                              l2979 02C9  
                            u3145 0496                              u3225 003E                              u4115 0583  
                            u4125 05AB                              u4055 0301                              u3415 00C1  
                            u3335 008A                              u4305 0353                              u4315 0360  
                            u2715 0645                              u3515 0107                              u4325 036B  
                            u3605 0155                              u3285 0066                              u4245 05D1  
                            u2825 066C                              u2745 04C6                              u4345 037F  
                            u3705 01A3                              u3465 00E4                              u4365 0397  
                            u3805 0203                              u3655 017C                              u4295 05F7  
                            u3915 025A                              u3855 022A                              u3975 0290  
            control_transfer@data 0025                              _TMR0 0015                              _TMR1 0016  
                            _TMR2 001A              control_transfer@page 004A              control_transfer@dptr 0048  
                            _Load 0788                      __CFG_WRT$OFF 0000                              _Save 06AC  
                            _main 04CF                     Send_Byte@data 0079                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 04A6                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0015                              ttemp 007E                              wtemp 007E  
                __end_of_ADC_read 04CF                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0055                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0071  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 04EF                  __end_of_SEND_SOF 04E3                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_747 0058  
                           _Setup 075E                             _cheat 044D                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0342                        Send_Byte@i 007A                   __initialization 0016  
                    __end_of_Load 07AD                      __end_of_Save 06F3                      __end_of_main 04DB  
                    __end_of_tone 04BD                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 05AF                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 075E                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071                            ?_cheat 0070  
            __size_of_handle_fire 0094                            _ADCON1 009E                            _ANSELA 018C  
                          _PMADRL 0191                            _PMCON2 0196                            _OSCCON 0099  
                          _PWM3DC 0DB3                            _PWM3PH 0DB1                            _SPBRGL 019B  
                          _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077  
              __size_of_Send_Byte 003A                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0020  
                          _config 00C0                            _hit_by 03D6                            cheat@i 0076  
                 play_song@length 0073                            _one_up 0546                   play_song@repeat 0076  
                     Save@address 0071                  _my_random_number 006A                         ?_ADC_read 0071  
         __end_of__initialization 0023           handle_serial@rx_counter 006B                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 0788  
                   __end_of_cheat 046E           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004F                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0073                           ??_cheat 0075                   _GET_CHAR_HELPER 046E  
               __end_of_Send_Byte 072D           __size_of_add_to_hitlist 0054                        __pbssBANK0 005C  
                      __pbssBANK1 00A0             __end_of_handle_serial 0604                        _death_song 0500  
                      _delay_1_ms 07D1                        ??_SEND_EOF 007C                        ??_SEND_SOF 007C  
                      __pmaintext 04CF              __end_of_green_led_on 04FA                 _cur_song_duration 0060  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0558                           Load@ptr 0073  
              __size_of_stop_song 0006                           Save@ptr 0073                        cheat@i_724 0077  
                    _handle_music 072D                 ?_control_transfer 0070                ??_control_transfer 0023  
                 SEND_DATA_BYTE@b 0022         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0546  
                 __size_of_hit_by 0077                           __ptext1 05AF                           __ptext2 03D6  
                         __ptext3 0558                           __ptext4 072D                           __ptext5 0026  
                         __ptext6 04DB                           __ptext7 04E9                           __ptext8 048C  
                         __ptext9 046E                        _red_led_on 04FA                         _T1CONbits 0018  
         __end_of_GET_CHAR_HELPER 048C                           _hitlist 00A0                         _T2CONbits 001C  
                         clrloop0 04E4                 add_to_hitlist@gun 0075              end_of_initialization 0023  
                         hit_by@i 0057                 __end_of_play_song 07D1                       ?_delay_1_ms 0070  
                       _RCSTAbits 019D                      __pstringtext 0500                         _PORTAbits 000C  
               __end_of_stop_song 04F5                     ??_handle_fire 0020                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 0604  
               __size_of_ADC_read 0012                         _TXSTAbits 019E               control_transfer@cmd 0045  
           __size_of_green_led_on 0005                handle_fire@counter 0062                 __size_of_SEND_EOF 0006  
               __size_of_SEND_SOF 0008             __end_of_LoadFromFlash 06AC                       _BAUDCONbits 019F  
                  __end_of_hit_by 044D                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0552                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             __size_of_delay_1_ms 000F               start_initialization 0016            __end_of_add_to_hitlist 0658  
                    _green_led_on 04F5               __end_of_handle_fire 03D6                         _Send_Byte 06F3  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0068  
                        ??_hit_by 0052                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 001A  
                       __checksum 0066                  handle_fire@timer 0064          __size_of_super_dead_mode 0057  
                 Save@data_length 0074                         _dead_song 0552                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 005B                         _fire_song 0526  
          __size_of_handle_serial 0055         __size_of_control_transfer 031C                       _handle_fire 0342  
                        _ADC_read 04BD                    __size_of_Setup 002A                    __size_of_cheat 0021  
                    ??_delay_1_ms 0071                         clear_ram0 04E3                   Load@data_length 0074  
                       _play_song 07AD                          _PIR1bits 0011                          _SEND_EOF 04E9  
                        _SEND_SOF 04DB                        _ADCON0bits 009D                __end_of_death_song 0526  
              control_transfer@id 0047                __end_of_delay_1_ms 07E0                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 04EF                         hit_by@who 0054  
          super_dead_mode@counter 0050                       ??_Send_Byte 0078                     _handle_serial 05AF  
               ??_super_dead_mode 004D          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
                    ??_red_led_on 0071                        _ANSELAbits 018C                    _SEND_DATA_BYTE 048C  
                      ?_stop_song 0070                   _cur_song_length 0067     control_transfer@random_number 0046  
                        __ptext10 0604                          __ptext11 0342                          __ptext20 075E  
                        __ptext12 04EF                          __ptext21 07D1                          __ptext13 07AD  
                        __ptext22 0658                          __ptext14 04F5                          __ptext23 06AC  
                        __ptext15 06F3                          __ptext24 0788                          __ptext16 044D  
                        __ptext17 04A6                          __ptext18 04FA                          __ptext19 04BD  
                 _cur_song_repeat 0069                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 005E                     __size_of_Save 0047                     __size_of_main 000C  
                     delay_1_ms@i 0071                     __size_of_tone 0017                __end_of_red_led_on 04FF  
               control_transfer@i 0049                 control_transfer@x 004C            play_song@note_duration 0074  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 04A6                  _control_transfer 0026  
                      _INTCONbits 000B                       _PWM3CONbits 0DBB                       pic14e$flags 007E  
                        intlevel1 0000          __size_of_GET_CHAR_HELPER 001E   __end_of_High_Priority_Interrupt 0015  
                    handle_fire@a 0022            __size_of_LoadFromFlash 0054                        _PMCON1bits 0195  
               __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070                       ??_play_song 0077  
                 ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070                       ??_stop_song 0071  
                 ??_handle_serial 0059                handle_serial@rx_id 006C                    ??_handle_music 0075  
