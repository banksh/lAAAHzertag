

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Aug 20 01:51:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  008C                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009A                     	;# 
    75  009B                     	;# 
    76  009B                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0115                     	;# 
    85  0116                     	;# 
    86  0117                     	;# 
    87  0118                     	;# 
    88  0119                     	;# 
    89  011D                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  0191                     	;# 
    93  0191                     	;# 
    94  0192                     	;# 
    95  0193                     	;# 
    96  0193                     	;# 
    97  0194                     	;# 
    98  0195                     	;# 
    99  0196                     	;# 
   100  0197                     	;# 
   101  0199                     	;# 
   102  019A                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019C                     	;# 
   106  019D                     	;# 
   107  019E                     	;# 
   108  019F                     	;# 
   109  020C                     	;# 
   110  028C                     	;# 
   111  030C                     	;# 
   112  038C                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0691                     	;# 
   117  0692                     	;# 
   118  0693                     	;# 
   119  0694                     	;# 
   120  0695                     	;# 
   121  0D8E                     	;# 
   122  0D8F                     	;# 
   123  0D90                     	;# 
   124  0D91                     	;# 
   125  0D91                     	;# 
   126  0D92                     	;# 
   127  0D93                     	;# 
   128  0D93                     	;# 
   129  0D94                     	;# 
   130  0D95                     	;# 
   131  0D95                     	;# 
   132  0D96                     	;# 
   133  0D97                     	;# 
   134  0D97                     	;# 
   135  0D98                     	;# 
   136  0D99                     	;# 
   137  0D99                     	;# 
   138  0D9A                     	;# 
   139  0D9B                     	;# 
   140  0D9C                     	;# 
   141  0D9C                     	;# 
   142  0D9D                     	;# 
   143  0D9D                     	;# 
   144  0D9E                     	;# 
   145  0D9F                     	;# 
   146  0DA0                     	;# 
   147  0DA1                     	;# 
   148  0DA1                     	;# 
   149  0DA2                     	;# 
   150  0DA3                     	;# 
   151  0DA3                     	;# 
   152  0DA4                     	;# 
   153  0DA5                     	;# 
   154  0DA5                     	;# 
   155  0DA6                     	;# 
   156  0DA7                     	;# 
   157  0DA7                     	;# 
   158  0DA8                     	;# 
   159  0DA9                     	;# 
   160  0DA9                     	;# 
   161  0DAA                     	;# 
   162  0DAB                     	;# 
   163  0DAC                     	;# 
   164  0DAC                     	;# 
   165  0DAD                     	;# 
   166  0DAD                     	;# 
   167  0DAE                     	;# 
   168  0DAF                     	;# 
   169  0DB0                     	;# 
   170  0DB1                     	;# 
   171  0DB1                     	;# 
   172  0DB2                     	;# 
   173  0DB3                     	;# 
   174  0DB3                     	;# 
   175  0DB4                     	;# 
   176  0DB5                     	;# 
   177  0DB5                     	;# 
   178  0DB6                     	;# 
   179  0DB7                     	;# 
   180  0DB7                     	;# 
   181  0DB8                     	;# 
   182  0DB9                     	;# 
   183  0DB9                     	;# 
   184  0DBA                     	;# 
   185  0DBB                     	;# 
   186  0DBC                     	;# 
   187  0DBC                     	;# 
   188  0DBD                     	;# 
   189  0DBD                     	;# 
   190  0DBE                     	;# 
   191  0DBF                     	;# 
   192  0DC0                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEE                     	;# 
   206  0FEF                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0013                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  008C                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  0197                     	;# 
   268  0199                     	;# 
   269  019A                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  028C                     	;# 
   278  030C                     	;# 
   279  038C                     	;# 
   280  0391                     	;# 
   281  0392                     	;# 
   282  0393                     	;# 
   283  0691                     	;# 
   284  0692                     	;# 
   285  0693                     	;# 
   286  0694                     	;# 
   287  0695                     	;# 
   288  0D8E                     	;# 
   289  0D8F                     	;# 
   290  0D90                     	;# 
   291  0D91                     	;# 
   292  0D91                     	;# 
   293  0D92                     	;# 
   294  0D93                     	;# 
   295  0D93                     	;# 
   296  0D94                     	;# 
   297  0D95                     	;# 
   298  0D95                     	;# 
   299  0D96                     	;# 
   300  0D97                     	;# 
   301  0D97                     	;# 
   302  0D98                     	;# 
   303  0D99                     	;# 
   304  0D99                     	;# 
   305  0D9A                     	;# 
   306  0D9B                     	;# 
   307  0D9C                     	;# 
   308  0D9C                     	;# 
   309  0D9D                     	;# 
   310  0D9D                     	;# 
   311  0D9E                     	;# 
   312  0D9F                     	;# 
   313  0DA0                     	;# 
   314  0DA1                     	;# 
   315  0DA1                     	;# 
   316  0DA2                     	;# 
   317  0DA3                     	;# 
   318  0DA3                     	;# 
   319  0DA4                     	;# 
   320  0DA5                     	;# 
   321  0DA5                     	;# 
   322  0DA6                     	;# 
   323  0DA7                     	;# 
   324  0DA7                     	;# 
   325  0DA8                     	;# 
   326  0DA9                     	;# 
   327  0DA9                     	;# 
   328  0DAA                     	;# 
   329  0DAB                     	;# 
   330  0DAC                     	;# 
   331  0DAC                     	;# 
   332  0DAD                     	;# 
   333  0DAD                     	;# 
   334  0DAE                     	;# 
   335  0DAF                     	;# 
   336  0DB0                     	;# 
   337  0DB1                     	;# 
   338  0DB1                     	;# 
   339  0DB2                     	;# 
   340  0DB3                     	;# 
   341  0DB3                     	;# 
   342  0DB4                     	;# 
   343  0DB5                     	;# 
   344  0DB5                     	;# 
   345  0DB6                     	;# 
   346  0DB7                     	;# 
   347  0DB7                     	;# 
   348  0DB8                     	;# 
   349  0DB9                     	;# 
   350  0DB9                     	;# 
   351  0DBA                     	;# 
   352  0DBB                     	;# 
   353  0DBC                     	;# 
   354  0DBC                     	;# 
   355  0DBD                     	;# 
   356  0DBD                     	;# 
   357  0DBE                     	;# 
   358  0DBF                     	;# 
   359  0DC0                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0013                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  008C                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  009F                     	;# 
   415  010C                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0115                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  0118                     	;# 
   422  0119                     	;# 
   423  011D                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019C                     	;# 
   440  019D                     	;# 
   441  019E                     	;# 
   442  019F                     	;# 
   443  020C                     	;# 
   444  028C                     	;# 
   445  030C                     	;# 
   446  038C                     	;# 
   447  0391                     	;# 
   448  0392                     	;# 
   449  0393                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  0695                     	;# 
   455  0D8E                     	;# 
   456  0D8F                     	;# 
   457  0D90                     	;# 
   458  0D91                     	;# 
   459  0D91                     	;# 
   460  0D92                     	;# 
   461  0D93                     	;# 
   462  0D93                     	;# 
   463  0D94                     	;# 
   464  0D95                     	;# 
   465  0D95                     	;# 
   466  0D96                     	;# 
   467  0D97                     	;# 
   468  0D97                     	;# 
   469  0D98                     	;# 
   470  0D99                     	;# 
   471  0D99                     	;# 
   472  0D9A                     	;# 
   473  0D9B                     	;# 
   474  0D9C                     	;# 
   475  0D9C                     	;# 
   476  0D9D                     	;# 
   477  0D9D                     	;# 
   478  0D9E                     	;# 
   479  0D9F                     	;# 
   480  0DA0                     	;# 
   481  0DA1                     	;# 
   482  0DA1                     	;# 
   483  0DA2                     	;# 
   484  0DA3                     	;# 
   485  0DA3                     	;# 
   486  0DA4                     	;# 
   487  0DA5                     	;# 
   488  0DA5                     	;# 
   489  0DA6                     	;# 
   490  0DA7                     	;# 
   491  0DA7                     	;# 
   492  0DA8                     	;# 
   493  0DA9                     	;# 
   494  0DA9                     	;# 
   495  0DAA                     	;# 
   496  0DAB                     	;# 
   497  0DAC                     	;# 
   498  0DAC                     	;# 
   499  0DAD                     	;# 
   500  0DAD                     	;# 
   501  0DAE                     	;# 
   502  0DAF                     	;# 
   503  0DB0                     	;# 
   504  0DB1                     	;# 
   505  0DB1                     	;# 
   506  0DB2                     	;# 
   507  0DB3                     	;# 
   508  0DB3                     	;# 
   509  0DB4                     	;# 
   510  0DB5                     	;# 
   511  0DB5                     	;# 
   512  0DB6                     	;# 
   513  0DB7                     	;# 
   514  0DB7                     	;# 
   515  0DB8                     	;# 
   516  0DB9                     	;# 
   517  0DB9                     	;# 
   518  0DBA                     	;# 
   519  0DBB                     	;# 
   520  0DBC                     	;# 
   521  0DBC                     	;# 
   522  0DBD                     	;# 
   523  0DBD                     	;# 
   524  0DBE                     	;# 
   525  0DBF                     	;# 
   526  0DC0                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541                           
   542                           	psect	stringtext
   543  0600                     __pstringtext:	
   544  0600                     _death_song:	
   545  0600  3462               	retlw	98
   546  0601  34F0               	retlw	240
   547  0602  3400               	retlw	0
   548  0603  34FA               	retlw	250
   549  0604  3400               	retlw	0
   550  0605  3400               	retlw	0
   551  0606  3400               	retlw	0
   552  0607  3400               	retlw	0
   553  0608  3400               	retlw	0
   554  0609  3400               	retlw	0
   555  060A  3400               	retlw	0
   556  060B  3400               	retlw	0
   557  060C  346F               	retlw	111
   558  060D  3477               	retlw	119
   559  060E  347A               	retlw	122
   560  060F  3459               	retlw	89
   561  0610  3400               	retlw	0
   562  0611  3400               	retlw	0
   563  0612  34CC               	retlw	204
   564  0613  345E               	retlw	94
   565  0614  347A               	retlw	122
   566  0615  3459               	retlw	89
   567  0616  34CC               	retlw	204
   568  0617  345E               	retlw	94
   569  0618  3400               	retlw	0
   570  0619  3400               	retlw	0
   571  061A  346B               	retlw	107
   572  061B  346A               	retlw	106
   573  061C  346F               	retlw	111
   574  061D  3477               	retlw	119
   575  061E  3470               	retlw	112
   576  061F  349F               	retlw	159
   577  0620  3400               	retlw	0
   578  0621  3400               	retlw	0
   579  0622  3470               	retlw	112
   580  0623  349F               	retlw	159
   581  0624  34EA               	retlw	234
   582  0625  34EE               	retlw	238
   583  0626                     __end_of_death_song:	
   584  0626                     _fire_song:	
   585  0626  34A0               	retlw	160
   586  0627  340F               	retlw	15
   587  0628  34DB               	retlw	219
   588  0629  3411               	retlw	17
   589  062A  34D5               	retlw	213
   590  062B  3414               	retlw	20
   591  062C  3400               	retlw	0
   592  062D  3419               	retlw	25
   593  062E  3440               	retlw	64
   594  062F  341F               	retlw	31
   595  0630  34AA               	retlw	170
   596  0631  3429               	retlw	41
   597  0632  3480               	retlw	128
   598  0633  343E               	retlw	62
   599  0634  3400               	retlw	0
   600  0635  347D               	retlw	125
   601  0636  34E3               	retlw	227
   602  0637  348A               	retlw	138
   603  0638  3440               	retlw	64
   604  0639  349C               	retlw	156
   605  063A  3492               	retlw	146
   606  063B  34B2               	retlw	178
   607  063C  3455               	retlw	85
   608  063D  34D0               	retlw	208
   609  063E  3400               	retlw	0
   610  063F  34FA               	retlw	250
   611  0640  3400               	retlw	0
   612  0641  3400               	retlw	0
   613  0642  3400               	retlw	0
   614  0643  3400               	retlw	0
   615  0644  3400               	retlw	0
   616  0645  3400               	retlw	0
   617  0646                     __end_of_fire_song:	
   618  0646                     _one_up:	
   619  0646  34CC               	retlw	204
   620  0647  345E               	retlw	94
   621  0648  34B8               	retlw	184
   622  0649  344F               	retlw	79
   623  064A  3467               	retlw	103
   624  064B  342F               	retlw	47
   625  064C  34B9               	retlw	185
   626  064D  343B               	retlw	59
   627  064E  3434               	retlw	52
   628  064F  3435               	retlw	53
   629  0650  34DC               	retlw	220
   630  0651  3427               	retlw	39
   631  0652                     __end_of_one_up:	
   632  0652                     _dead_song:	
   633  0652  3470               	retlw	112
   634  0653  349F               	retlw	159
   635  0654  34EA               	retlw	234
   636  0655  34EE               	retlw	238
   637  0656  34EA               	retlw	234
   638  0657  34EE               	retlw	238
   639  0658                     __end_of_dead_song:	
   640  0016                     _TMR1	set	22
   641  000B                     _INTCONbits	set	11
   642  0011                     _PIR1bits	set	17
   643  000C                     _PORTAbits	set	12
   644  0018                     _T1CONbits	set	24
   645  001C                     _T2CONbits	set	28
   646  0015                     _TMR0	set	21
   647  001A                     _TMR2	set	26
   648  009B                     _ADRES	set	155
   649  009D                     _ADCON0bits	set	157
   650  009E                     _ADCON1	set	158
   651  0095                     _OPTION_REGbits	set	149
   652  0099                     _OSCCON	set	153
   653  0091                     _PIE1bits	set	145
   654  008C                     _TRISAbits	set	140
   655  0118                     _DACCON0bits	set	280
   656  0191                     _PMADR	set	401
   657  0193                     _PMDAT	set	403
   658  018C                     _ANSELA	set	396
   659  018C                     _ANSELAbits	set	396
   660  019F                     _BAUDCONbits	set	415
   661  0191                     _PMADRL	set	401
   662  0195                     _PMCON1bits	set	405
   663  0196                     _PMCON2	set	406
   664  0199                     _RCREG	set	409
   665  019D                     _RCSTAbits	set	413
   666  019B                     _SPBRGL	set	411
   667  019A                     _TXREG	set	410
   668  019E                     _TXSTAbits	set	414
   669  0DB3                     _PWM3DC	set	3507
   670  0DB1                     _PWM3PH	set	3505
   671  0DB5                     _PWM3PR	set	3509
   672  0DBB                     _PWM3CONbits	set	3515
   673  0DBF                     _PWM3LDCONbits	set	3519
   674                           
   675                           ; #config settings
   676  0000                     
   677                           	psect	cinit
   678  0018                     start_initialization:	
   679  0018                     __initialization:	
   680                           
   681                           ; Clear objects allocated to COMMON
   682  0018  01FC               	clrf	__pbssCOMMON& (0+127)
   683                           
   684                           ; Clear objects allocated to BANK0
   685  0019  3056               	movlw	low __pbssBANK0
   686  001A  0084               	movwf	4
   687  001B  3000               	movlw	high __pbssBANK0
   688  001C  0085               	movwf	5
   689  001D  3012               	movlw	18
   690  001E  25C6               	fcall	clear_ram0
   691                           
   692                           ; Clear objects allocated to BANK1
   693  001F  30A0               	movlw	low __pbssBANK1
   694  0020  0084               	movwf	4
   695  0021  3000               	movlw	high __pbssBANK1
   696  0022  0085               	movwf	5
   697  0023  3032               	movlw	50
   698  0024  25C6               	fcall	clear_ram0
   699  0025                     end_of_initialization:	
   700                           ;End of C runtime variable initialization code
   701                           
   702  0025                     __end_of__initialization:	
   703  0025  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   704  0026  0020               	movlb	0
   705  0027  2D9D               	ljmp	_main	;jump to C main() function
   706                           
   707                           	psect	bssCOMMON
   708  007C                     __pbssCOMMON:	
   709  007C                     _cur_song_ptr:	
   710  007C                     	ds	1
   711                           
   712                           	psect	bssBANK0
   713  0056                     __pbssBANK0:	
   714  0056                     __i:	
   715  0056                     	ds	2
   716  0058                     _cur_song:	
   717  0058                     	ds	2
   718  005A                     _cur_song_duration:	
   719  005A                     	ds	2
   720  005C                     handle_fire@counter:	
   721  005C                     	ds	2
   722  005E                     handle_fire@timer:	
   723  005E                     	ds	2
   724  0060                     __checksum:	
   725  0060                     	ds	1
   726  0061                     _cur_song_length:	
   727  0061                     	ds	1
   728  0062                     _cur_song_repeat:	
   729  0062                     	ds	1
   730  0063                     _my_random_number:	
   731  0063                     	ds	1
   732  0064                     handle_serial@rx_counter:	
   733  0064                     	ds	1
   734  0065                     handle_serial@rx_id:	
   735  0065                     	ds	1
   736  0066                     __x:	
   737  0066                     	ds	1
   738  0067                     __y:	
   739  0067                     	ds	1
   740                           
   741                           	psect	bssBANK1
   742  00A0                     __pbssBANK1:	
   743  00A0                     _hitlist:	
   744  00A0                     	ds	32
   745  00C0                     _config:	
   746  00C0                     	ds	18
   747                           
   748                           	psect	clrtext
   749  05C6                     clear_ram0:	
   750                           ;	Called with FSR0 containing the base address, and
   751                           ;	WREG with the size to clear
   752                           
   753  05C6  0064               	clrwdt	;clear the watchdog before getting into this loop
   754  05C7                     clrloop0:	
   755  05C7  0180               	clrf	0	;clear RAM location pointed to by FSR
   756  05C8  3101               	addfsr 0,1
   757  05C9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   758  05CA  2DC7               	goto	clrloop0	;have we reached the end yet?
   759  05CB  3400               	retlw	0	;all done for this memory range, return
   760                           
   761                           	psect	cstackCOMMON
   762  0070                     __pcstackCOMMON:	
   763  0070                     ?_Setup:	
   764  0070                     ?_super_dead_mode:	
   765                           ; 0 bytes @ 0x0
   766                           
   767  0070                     ?_handle_music:	
   768                           ; 0 bytes @ 0x0
   769                           
   770  0070                     ?_tone_off:	
   771                           ; 0 bytes @ 0x0
   772                           
   773  0070                     ?_Modulate_Serial:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0070                     ?_Disable_Modulation:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0070                     ?_control_transfer:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0070                     ?_LoadFromFlash:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0070                     ?_main:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0070                     ?_red_led_on:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0070                     ?_led_off:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0070                     ?_stop_song:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0070                     ?_Send_Byte:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0070                     ?_High_Priority_Interrupt:	
   801                           ; 0 bytes @ 0x0
   802                           
   803  0070                     ??_High_Priority_Interrupt:	
   804                           ; 0 bytes @ 0x0
   805                           
   806  0070                     ?_add_to_hitlist:	
   807                           ; 0 bytes @ 0x0
   808                           
   809  0070                     ?_hit_by:	
   810                           ; 0 bytes @ 0x0
   811                           
   812  0070                     ?_SEND_DATA_BYTE:	
   813                           ; 0 bytes @ 0x0
   814                           
   815  0070                     ?_SEND_SOF:	
   816                           ; 0 bytes @ 0x0
   817                           
   818  0070                     ?_SEND_EOF:	
   819                           ; 0 bytes @ 0x0
   820                           
   821  0070                     ?_handle_serial:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0070                     ?_handle_fire:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_GET_CHAR_HELPER:	
   828                           ; 1 bytes @ 0x0
   829                           
   830                           
   831                           ; 1 bytes @ 0x0
   832  0070                     	ds	1
   833  0071                     ?_Load:	
   834  0071                     ?_Save:	
   835                           ; 0 bytes @ 0x1
   836                           
   837  0071                     ??_Setup:	
   838                           ; 0 bytes @ 0x1
   839                           
   840  0071                     ??_tone_off:	
   841                           ; 0 bytes @ 0x1
   842                           
   843  0071                     ?_tone:	
   844                           ; 0 bytes @ 0x1
   845                           
   846  0071                     ??_Modulate_Serial:	
   847                           ; 0 bytes @ 0x1
   848                           
   849  0071                     ??_Disable_Modulation:	
   850                           ; 0 bytes @ 0x1
   851                           
   852  0071                     ??_red_led_on:	
   853                           ; 0 bytes @ 0x1
   854                           
   855  0071                     ??_led_off:	
   856                           ; 0 bytes @ 0x1
   857                           
   858  0071                     ?_play_song:	
   859                           ; 0 bytes @ 0x1
   860                           
   861  0071                     ??_stop_song:	
   862                           ; 0 bytes @ 0x1
   863                           
   864  0071                     ??_Send_Byte:	
   865                           ; 0 bytes @ 0x1
   866                           
   867  0071                     ??_add_to_hitlist:	
   868                           ; 0 bytes @ 0x1
   869                           
   870  0071                     ??_GET_CHAR_HELPER:	
   871                           ; 0 bytes @ 0x1
   872                           
   873  0071                     ?_ADC_read:	
   874                           ; 0 bytes @ 0x1
   875                           
   876  0071                     Send_Byte@data:	
   877                           ; 2 bytes @ 0x1
   878                           
   879  0071                     play_song@song:	
   880                           ; 1 bytes @ 0x1
   881                           
   882  0071                     tone@period:	
   883                           ; 2 bytes @ 0x1
   884                           
   885  0071                     Load@address:	
   886                           ; 2 bytes @ 0x1
   887                           
   888  0071                     Save@address:	
   889                           ; 2 bytes @ 0x1
   890                           
   891                           
   892                           ; 2 bytes @ 0x1
   893  0071                     	ds	1
   894  0072                     ??_SEND_DATA_BYTE:	
   895  0072                     GET_CHAR_HELPER@val:	
   896                           ; 0 bytes @ 0x2
   897                           
   898                           
   899                           ; 1 bytes @ 0x2
   900  0072                     	ds	1
   901  0073                     ??_tone:	
   902  0073                     ??_ADC_read:	
   903                           ; 0 bytes @ 0x3
   904                           
   905  0073                     play_song@length:	
   906                           ; 0 bytes @ 0x3
   907                           
   908  0073                     Load@ptr:	
   909                           ; 1 bytes @ 0x3
   910                           
   911  0073                     Save@ptr:	
   912                           ; 1 bytes @ 0x3
   913                           
   914                           
   915                           ; 1 bytes @ 0x3
   916  0073                     	ds	1
   917  0074                     Load@data_length:	
   918  0074                     Save@data_length:	
   919                           ; 1 bytes @ 0x4
   920                           
   921  0074                     SEND_DATA_BYTE@b:	
   922                           ; 1 bytes @ 0x4
   923                           
   924  0074                     play_song@note_duration:	
   925                           ; 1 bytes @ 0x4
   926                           
   927                           
   928                           ; 2 bytes @ 0x4
   929  0074                     	ds	1
   930  0075                     ??_Load:	
   931  0075                     ??_Save:	
   932                           ; 0 bytes @ 0x5
   933                           
   934  0075                     ??_handle_music:	
   935                           ; 0 bytes @ 0x5
   936                           
   937  0075                     ??_SEND_SOF:	
   938                           ; 0 bytes @ 0x5
   939                           
   940  0075                     ??_SEND_EOF:	
   941                           ; 0 bytes @ 0x5
   942                           
   943  0075                     add_to_hitlist@gun:	
   944                           ; 0 bytes @ 0x5
   945                           
   946                           
   947                           ; 1 bytes @ 0x5
   948  0075                     	ds	1
   949  0076                     play_song@repeat:	
   950  0076                     Load@i:	
   951                           ; 1 bytes @ 0x6
   952                           
   953  0076                     Save@i:	
   954                           ; 1 bytes @ 0x6
   955                           
   956  0076                     add_to_hitlist@gun16:	
   957                           ; 1 bytes @ 0x6
   958                           
   959                           
   960                           ; 2 bytes @ 0x6
   961  0076                     	ds	1
   962  0077                     ??_LoadFromFlash:	
   963  0077                     ??_play_song:	
   964                           ; 0 bytes @ 0x7
   965                           
   966                           
   967                           ; 0 bytes @ 0x7
   968  0077                     	ds	1
   969  0078                     add_to_hitlist@i:	
   970                           
   971                           ; 1 bytes @ 0x8
   972  0078                     	ds	1
   973  0079                     ??_handle_fire:	
   974  0079                     ??_control_transfer:	
   975                           ; 0 bytes @ 0x9
   976                           
   977                           
   978                           ; 0 bytes @ 0x9
   979  0079                     	ds	2
   980  007B                     handle_serial@b:	
   981                           
   982                           ; 1 bytes @ 0xB
   983  007B                     	ds	1
   984  007C                     ??_main:	
   985                           
   986                           	psect	cstackBANK0
   987  0020                     __pcstackBANK0:	
   988                           ; 0 bytes @ 0xC
   989                           
   990  0020                     handle_fire@a:	
   991  0020                     control_transfer@data:	
   992                           ; 2 bytes @ 0x0
   993                           
   994                           
   995                           ; 32 bytes @ 0x0
   996  0020                     	ds	32
   997  0040                     control_transfer@cmd:	
   998                           
   999                           ; 1 bytes @ 0x20
  1000  0040                     	ds	1
  1001  0041                     control_transfer@random_number:	
  1002                           
  1003                           ; 1 bytes @ 0x21
  1004  0041                     	ds	1
  1005  0042                     control_transfer@id:	
  1006                           
  1007                           ; 1 bytes @ 0x22
  1008  0042                     	ds	1
  1009  0043                     control_transfer@dptr:	
  1010                           
  1011                           ; 1 bytes @ 0x23
  1012  0043                     	ds	1
  1013  0044                     control_transfer@i:	
  1014                           
  1015                           ; 1 bytes @ 0x24
  1016  0044                     	ds	1
  1017  0045                     control_transfer@page:	
  1018                           
  1019                           ; 2 bytes @ 0x25
  1020  0045                     	ds	2
  1021  0047                     control_transfer@x:	
  1022                           
  1023                           ; 1 bytes @ 0x27
  1024  0047                     	ds	1
  1025  0048                     ??_super_dead_mode:	
  1026                           
  1027                           ; 0 bytes @ 0x28
  1028  0048                     	ds	2
  1029  004A                     super_dead_mode@b:	
  1030                           
  1031                           ; 1 bytes @ 0x2A
  1032  004A                     	ds	1
  1033  004B                     super_dead_mode@counter:	
  1034                           
  1035                           ; 2 bytes @ 0x2B
  1036  004B                     	ds	2
  1037  004D                     ??_hit_by:	
  1038                           
  1039                           ; 0 bytes @ 0x2D
  1040  004D                     	ds	2
  1041  004F                     hit_by@who:	
  1042                           
  1043                           ; 1 bytes @ 0x2F
  1044  004F                     	ds	1
  1045  0050                     hit_by@respawn_timer:	
  1046                           
  1047                           ; 2 bytes @ 0x30
  1048  0050                     	ds	2
  1049  0052                     hit_by@i:	
  1050                           
  1051                           ; 1 bytes @ 0x32
  1052  0052                     	ds	1
  1053  0053                     hit_by@i_790:	
  1054                           
  1055                           ; 1 bytes @ 0x33
  1056  0053                     	ds	1
  1057  0054                     ??_handle_serial:	
  1058                           
  1059                           ; 0 bytes @ 0x34
  1060  0054                     	ds	2
  1061                           
  1062                           	psect	maintext
  1063  059D                     __pmaintext:	
  1064 ;;
  1065 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1066 ;;
  1067 ;; *************** function _main *****************
  1068 ;; Defined at:
  1069 ;;		line 48 in file "main.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;		None               void
  1076 ;; Registers used:
  1077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 17F/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1083 ;;      Params:         0       0       0       0
  1084 ;;      Locals:         0       0       0       0
  1085 ;;      Temps:          0       0       0       0
  1086 ;;      Totals:         0       0       0       0
  1087 ;;Total ram usage:        0 bytes
  1088 ;; Hardware stack levels required when called:    9
  1089 ;; This function calls:
  1090 ;;		_LoadFromFlash
  1091 ;;		_Setup
  1092 ;;		_handle_fire
  1093 ;;		_handle_music
  1094 ;;		_handle_serial
  1095 ;;		_super_dead_mode
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _main
  1103  059D                     _main:	
  1104                           
  1105                           ;main.c: 50: Setup();
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1109  059D  2507               	fcall	_Setup
  1110                           
  1111                           ;main.c: 51: LoadFromFlash();
  1112  059E  2449               	fcall	_LoadFromFlash
  1113                           
  1114                           ;main.c: 52: if(!config.health) {
  1115  059F  0021               	movlb	1	; select bank1
  1116  05A0  0845               	movf	((_config+1)^(0+128)+4),w
  1117  05A1  0444               	iorwf	(_config^(0+128)+4),w
  1118  05A2  1D03               	skipz
  1119  05A3  2DA5               	goto	l26
  1120                           
  1121                           ;main.c: 53: super_dead_mode();
  1122  05A4  24A9               	fcall	_super_dead_mode
  1123  05A5                     l26:	
  1124                           ;main.c: 54: }
  1125                           ;main.c: 56: while(1)
  1126                           
  1127                           
  1128                           ;main.c: 57: {
  1129                           ;main.c: 58: handle_serial();
  1130  05A5  26AC               	fcall	_handle_serial
  1131                           
  1132                           ;main.c: 59: handle_fire();
  1133  05A6  23CB               	fcall	_handle_fire
  1134                           
  1135                           ;main.c: 60: handle_music();
  1136  05A7  2746               	fcall	_handle_music
  1137  05A8  2DA5               	goto	l26
  1138  05A9                     __end_of_main:	
  1139                           
  1140                           	psect	text1
  1141  06AC                     __ptext1:	
  1142 ;; *************** function _handle_serial *****************
  1143 ;; Defined at:
  1144 ;;		line 137 in file "protocol.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  b               1   11[COMMON] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      unsigned char 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1158 ;;      Params:         0       0       0       0
  1159 ;;      Locals:         1       0       0       0
  1160 ;;      Temps:          0       2       0       0
  1161 ;;      Totals:         1       2       0       0
  1162 ;;Total ram usage:        3 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    8
  1165 ;; This function calls:
  1166 ;;		_control_transfer
  1167 ;;		_hit_by
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _handle_serial
  1175  06AC                     _handle_serial:	
  1176                           
  1177                           ;protocol.c: 139: static uint8_t rx_id=0;
  1178                           ;protocol.c: 140: static uint8_t rx_counter=0;
  1179                           ;protocol.c: 141: uint8_t b;
  1180                           ;protocol.c: 143: if(!(PIR1bits.RCIF)) return 0;
  1181                           
  1182                           ;incstack = 0
  1183                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1184  06AC  0020               	movlb	0	; select bank0
  1185  06AD  1E91               	btfss	17,5	;volatile
  1186  06AE  0008               	return
  1187                           
  1188                           ;protocol.c: 144: b=(RCREG);
  1189                           
  1190                           ;	Return value of _handle_serial is never used
  1191  06AF  0023               	movlb	3	; select bank3
  1192  06B0  0819               	movf	25,w	;volatile
  1193  06B1  0020               	movlb	0	; select bank0
  1194  06B2  00D4               	movwf	??_handle_serial
  1195  06B3  0854               	movf	??_handle_serial,w
  1196  06B4  00FB               	movwf	handle_serial@b
  1197                           
  1198                           ;protocol.c: 145: if(b == 0x10) {
  1199  06B5  087B               	movf	handle_serial@b,w
  1200  06B6  3A10               	xorlw	16
  1201  06B7  1D03               	skipz
  1202  06B8  2EBB               	goto	l3237
  1203                           
  1204                           ;protocol.c: 146: control_transfer();
  1205  06B9  2028               	fcall	_control_transfer
  1206                           
  1207                           ;protocol.c: 147: }
  1208  06BA  0008               	return
  1209  06BB                     l3237:	
  1210                           
  1211                           ;protocol.c: 149: else if((b > 0x80) && (b != config.id) && (config.id != 0x80) && !(con
      +                          fig.id & (1<<9))) {
  1212  06BB  3081               	movlw	129
  1213  06BC  027B               	subwf	handle_serial@b,w
  1214  06BD  1C03               	skipc
  1215  06BE  0008               	return
  1216  06BF  087B               	movf	handle_serial@b,w
  1217  06C0  0020               	movlb	0	; select bank0
  1218  06C1  00D4               	movwf	??_handle_serial
  1219  06C2  01D5               	clrf	??_handle_serial+1
  1220  06C3  0021               	movlb	1	; select bank1
  1221  06C4  0841               	movf	(_config+1)^(0+128),w
  1222  06C5  0020               	movlb	0	; select bank0
  1223  06C6  0655               	xorwf	??_handle_serial+1,w
  1224  06C7  1D03               	skipz
  1225  06C8  2ECD               	goto	u4145
  1226  06C9  0021               	movlb	1	; select bank1
  1227  06CA  0840               	movf	_config^(0+128),w
  1228  06CB  0020               	movlb	0	; select bank0
  1229  06CC  0654               	xorwf	??_handle_serial,w
  1230  06CD                     u4145:	
  1231  06CD  1903               	skipnz
  1232  06CE  0008               	return
  1233  06CF  3080               	movlw	128
  1234  06D0  0021               	movlb	1	; select bank1
  1235  06D1  0640               	xorwf	_config^(0+128),w
  1236  06D2  0441               	iorwf	(_config+1)^(0+128),w
  1237  06D3  1903               	skipnz
  1238  06D4  0008               	return
  1239  06D5  18C1               	btfsc	(_config+1)^(0+128),1
  1240  06D6  0008               	return
  1241                           
  1242                           ;protocol.c: 150: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1243  06D7  087B               	movf	handle_serial@b,w
  1244  06D8  0020               	movlb	0	; select bank0
  1245  06D9  0665               	xorwf	handle_serial@rx_id,w
  1246  06DA  1903               	btfsc	3,2
  1247  06DB  1891               	btfsc	17,1	;volatile
  1248  06DC  01E4               	clrf	handle_serial@rx_counter
  1249                           
  1250                           ;protocol.c: 151: TMR2 = 0;
  1251  06DD  019A               	clrf	26	;volatile
  1252                           
  1253                           ;protocol.c: 152: PIR1bits.TMR2IF = 0;
  1254  06DE  1091               	bcf	17,1	;volatile
  1255                           
  1256                           ;protocol.c: 153: rx_id = b;
  1257  06DF  087B               	movf	handle_serial@b,w
  1258  06E0  00D4               	movwf	??_handle_serial
  1259  06E1  0854               	movf	??_handle_serial,w
  1260  06E2  00E5               	movwf	handle_serial@rx_id
  1261                           
  1262                           ;protocol.c: 154: rx_counter++;
  1263  06E3  3001               	movlw	1
  1264  06E4  00D4               	movwf	??_handle_serial
  1265  06E5  0854               	movf	??_handle_serial,w
  1266  06E6  07E4               	addwf	handle_serial@rx_counter,f
  1267                           
  1268                           ;protocol.c: 155: if(rx_counter > config.shield) {
  1269  06E7  0864               	movf	handle_serial@rx_counter,w
  1270  06E8  00D4               	movwf	??_handle_serial
  1271  06E9  01D5               	clrf	??_handle_serial+1
  1272  06EA  0855               	movf	??_handle_serial+1,w
  1273  06EB  0021               	movlb	1	; select bank1
  1274  06EC  0247               	subwf	((_config+1)^(0+128)+6),w
  1275  06ED  1D03               	skipz
  1276  06EE  2EF3               	goto	u4195
  1277  06EF  0020               	movlb	0	; select bank0
  1278  06F0  0854               	movf	??_handle_serial,w
  1279  06F1  0021               	movlb	1	; select bank1
  1280  06F2  0246               	subwf	(_config^(0+128)+6),w
  1281  06F3                     u4195:	
  1282  06F3  1803               	skipnc
  1283  06F4  0008               	return
  1284                           
  1285                           ;protocol.c: 156: RCSTAbits.CREN = 0;
  1286  06F5  0023               	movlb	3	; select bank3
  1287  06F6  121D               	bcf	29,4	;volatile
  1288                           
  1289                           ;protocol.c: 157: hit_by(b);
  1290  06F7  087B               	movf	handle_serial@b,w
  1291  06F8  2343               	fcall	_hit_by
  1292                           
  1293                           ;protocol.c: 158: rx_id = 0;
  1294  06F9  0020               	movlb	0	; select bank0
  1295  06FA  01E5               	clrf	handle_serial@rx_id
  1296                           
  1297                           ;protocol.c: 159: (RCREG);
  1298  06FB  0023               	movlb	3	; select bank3
  1299  06FC  0819               	movf	25,w	;volatile
  1300                           
  1301                           ;protocol.c: 160: RCSTAbits.CREN = 1;
  1302  06FD  161D               	bsf	29,4	;volatile
  1303  06FE  0008               	return
  1304  06FF                     __end_of_handle_serial:	
  1305                           ;protocol.c: 161: }
  1306                           ;protocol.c: 162: }
  1307                           ;protocol.c: 163: return 1;
  1308                           ;	Return value of _handle_serial is never used
  1309                           
  1310                           
  1311                           	psect	text2
  1312  0343                     __ptext2:	
  1313 ;; *************** function _hit_by *****************
  1314 ;; Defined at:
  1315 ;;		line 363 in file "user.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  who             1    wreg     unsigned char 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  who             1   47[BANK0 ] unsigned char 
  1320 ;;  i               1   51[BANK0 ] unsigned char 
  1321 ;;  i               1   50[BANK0 ] unsigned char 
  1322 ;;  respawn_time    2   48[BANK0 ] unsigned int 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;		None               void
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1332 ;;      Params:         0       0       0       0
  1333 ;;      Locals:         0       5       0       0
  1334 ;;      Temps:          0       2       0       0
  1335 ;;      Totals:         0       7       0       0
  1336 ;;Total ram usage:        7 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    7
  1339 ;; This function calls:
  1340 ;;		_Save
  1341 ;;		_add_to_hitlist
  1342 ;;		_handle_music
  1343 ;;		_led_off
  1344 ;;		_play_song
  1345 ;;		_red_led_on
  1346 ;;		_super_dead_mode
  1347 ;; This function is called by:
  1348 ;;		_handle_serial
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _hit_by
  1354  0343                     _hit_by:	
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1358                           ;hit_by@who stored from wreg
  1359  0343  0020               	movlb	0	; select bank0
  1360  0344  00CF               	movwf	hit_by@who
  1361                           
  1362                           ;user.c: 365: uint16_t respawn_timer;
  1363                           ;user.c: 367: add_to_hitlist(who);
  1364  0345  084F               	movf	hit_by@who,w
  1365  0346  2658               	fcall	_add_to_hitlist
  1366                           
  1367                           ;user.c: 368: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1368  0347  30E0               	movlw	224
  1369  0348  00F1               	movwf	Save@address
  1370  0349  3007               	movlw	7
  1371  034A  00F2               	movwf	Save@address+1
  1372  034B  30A0               	movlw	_hitlist& (0+255)
  1373  034C  0020               	movlb	0	; select bank0
  1374  034D  00CD               	movwf	??_hit_by
  1375  034E  084D               	movf	??_hit_by,w
  1376  034F  00F3               	movwf	Save@ptr
  1377  0350  3010               	movlw	16
  1378  0351  00CE               	movwf	??_hit_by+1
  1379  0352  084E               	movf	??_hit_by+1,w
  1380  0353  00F4               	movwf	Save@data_length
  1381  0354  26FF               	fcall	_Save
  1382                           
  1383                           ;user.c: 370: config.health --;
  1384  0355  3001               	movlw	1
  1385  0356  0021               	movlb	1	; select bank1
  1386  0357  02C4               	subwf	(_config^(0+128)+4),f
  1387  0358  3000               	movlw	0
  1388  0359  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1389                           
  1390                           ;user.c: 371: Save(0x7D0,(uint16_t*)&config, (sizeof(config_t)/2));
  1391  035A  30D0               	movlw	208
  1392  035B  00F1               	movwf	Save@address
  1393  035C  3007               	movlw	7
  1394  035D  00F2               	movwf	Save@address+1
  1395  035E  30C0               	movlw	_config& (0+255)
  1396  035F  0020               	movlb	0	; select bank0
  1397  0360  00CD               	movwf	??_hit_by
  1398  0361  084D               	movf	??_hit_by,w
  1399  0362  00F3               	movwf	Save@ptr
  1400  0363  3009               	movlw	9
  1401  0364  00CE               	movwf	??_hit_by+1
  1402  0365  084E               	movf	??_hit_by+1,w
  1403  0366  00F4               	movwf	Save@data_length
  1404  0367  26FF               	fcall	_Save
  1405                           
  1406                           ;user.c: 373: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  1407  0368  3000               	movlw	low (_death_song| (0+32768))
  1408  0369  00F1               	movwf	play_song@song
  1409  036A  3086               	movlw	high (_death_song| (0+32768))
  1410  036B  00F2               	movwf	play_song@song+1
  1411  036C  3013               	movlw	19
  1412  036D  0020               	movlb	0	; select bank0
  1413  036E  00CD               	movwf	??_hit_by
  1414  036F  084D               	movf	??_hit_by,w
  1415  0370  00F3               	movwf	play_song@length
  1416  0371  3060               	movlw	96
  1417  0372  00F4               	movwf	play_song@note_duration
  1418  0373  30EA               	movlw	234
  1419  0374  00F5               	movwf	play_song@note_duration+1
  1420  0375  01F6               	clrf	play_song@repeat
  1421  0376  279C               	fcall	_play_song
  1422                           
  1423                           ;user.c: 375: if(!config.health)
  1424  0377  0021               	movlb	1	; select bank1
  1425  0378  0845               	movf	((_config+1)^(0+128)+4),w
  1426  0379  0444               	iorwf	(_config^(0+128)+4),w
  1427  037A  1D03               	skipz
  1428  037B  2B7F               	goto	l3163
  1429                           
  1430                           ;user.c: 376: {
  1431                           ;user.c: 377: red_led_on();
  1432  037C  25D1               	fcall	_red_led_on
  1433                           
  1434                           ;user.c: 378: super_dead_mode();
  1435  037D  24A9               	fcall	_super_dead_mode
  1436                           
  1437                           ;user.c: 379: return;
  1438  037E  0008               	return
  1439  037F                     l3163:	
  1440                           
  1441                           ;user.c: 380: }
  1442                           ;user.c: 382: respawn_timer = config.respawn_delay;
  1443  037F  0021               	movlb	1	; select bank1
  1444  0380  0849               	movf	((_config+1)^(0+128)+8),w
  1445  0381  0020               	movlb	0	; select bank0
  1446  0382  01D1               	clrf	hit_by@respawn_timer+1
  1447  0383  07D1               	addwf	hit_by@respawn_timer+1,f
  1448  0384  0021               	movlb	1	; select bank1
  1449  0385  0848               	movf	(_config^(0+128)+8),w
  1450  0386  0020               	movlb	0	; select bank0
  1451  0387  01D0               	clrf	hit_by@respawn_timer
  1452  0388  07D0               	addwf	hit_by@respawn_timer,f
  1453  0389                     l3201:	
  1454                           ;user.c: 383: while(respawn_timer)
  1455                           
  1456  0389  0851               	movf	hit_by@respawn_timer+1,w
  1457  038A  0450               	iorwf	hit_by@respawn_timer,w
  1458  038B  1903               	btfsc	3,2
  1459  038C  0008               	return
  1460                           
  1461                           ;user.c: 384: {
  1462                           ;user.c: 385: respawn_timer--;
  1463  038D  3001               	movlw	1
  1464  038E  02D0               	subwf	hit_by@respawn_timer,f
  1465  038F  3000               	movlw	0
  1466  0390  3BD1               	subwfb	hit_by@respawn_timer+1,f
  1467                           
  1468                           ;user.c: 386: red_led_on();
  1469  0391  25D1               	fcall	_red_led_on
  1470                           
  1471                           ;user.c: 387: for(uint8_t i=0;i<50;i++)
  1472  0392  0020               	movlb	0	; select bank0
  1473  0393  01D2               	clrf	hit_by@i
  1474  0394  3032               	movlw	50
  1475  0395  0252               	subwf	hit_by@i,w
  1476  0396  1803               	btfsc	3,0
  1477  0397  2BAC               	goto	l3183
  1478  0398                     l3175:	
  1479                           
  1480                           ;user.c: 388: {
  1481                           ;user.c: 389: handle_music();
  1482  0398  2746               	fcall	_handle_music
  1483                           
  1484                           ;user.c: 390: _delay((unsigned long)((1)*(16000000/4000.0)));
  1485  0399  3006               	movlw	6
  1486  039A  0020               	movlb	0	; select bank0
  1487  039B  00CE               	movwf	??_hit_by+1
  1488  039C  3030               	movlw	48
  1489  039D  00CD               	movwf	??_hit_by
  1490  039E                     u4307:	
  1491  039E  0BCD               	decfsz	??_hit_by,f
  1492  039F  2B9E               	goto	u4307
  1493  03A0  0BCE               	decfsz	??_hit_by+1,f
  1494  03A1  2B9E               	goto	u4307
  1495  03A2  0000               	nop
  1496  03A3  3001               	movlw	1
  1497  03A4  0020               	movlb	0	; select bank0
  1498  03A5  00CD               	movwf	??_hit_by
  1499  03A6  084D               	movf	??_hit_by,w
  1500  03A7  07D2               	addwf	hit_by@i,f
  1501  03A8  3032               	movlw	50
  1502  03A9  0252               	subwf	hit_by@i,w
  1503  03AA  1C03               	skipc
  1504  03AB  2B98               	goto	l3175
  1505  03AC                     l3183:	
  1506                           
  1507                           ;user.c: 391: }
  1508                           ;user.c: 393: if(respawn_timer < 30)
  1509  03AC  3000               	movlw	0
  1510  03AD  0251               	subwf	hit_by@respawn_timer+1,w
  1511  03AE  301E               	movlw	30
  1512  03AF  1903               	skipnz
  1513  03B0  0250               	subwf	hit_by@respawn_timer,w
  1514  03B1  1803               	skipnc
  1515  03B2  2BB4               	goto	l3187
  1516                           
  1517                           ;user.c: 394: {
  1518                           ;user.c: 395: led_off();
  1519  03B3  25DD               	fcall	_led_off
  1520  03B4                     l3187:	
  1521                           
  1522                           ;user.c: 396: }
  1523                           ;user.c: 397: for(uint8_t i=0;i<50;i++)
  1524  03B4  0020               	movlb	0	; select bank0
  1525  03B5  01D3               	clrf	hit_by@i_790
  1526  03B6                     L1:	
  1527  03B6  3032               	movlw	50
  1528  03B7  0253               	subwf	hit_by@i_790,w
  1529  03B8  1803               	btfsc	3,0
  1530  03B9  2B89               	goto	l3201
  1531                           
  1532                           ;user.c: 398: {
  1533                           ;user.c: 399: handle_music();
  1534  03BA  2746               	fcall	_handle_music
  1535                           
  1536                           ;user.c: 400: _delay((unsigned long)((1)*(16000000/4000.0)));
  1537  03BB  3006               	movlw	6
  1538  03BC  0020               	movlb	0	; select bank0
  1539  03BD  00CE               	movwf	??_hit_by+1
  1540  03BE  3030               	movlw	48
  1541  03BF  00CD               	movwf	??_hit_by
  1542  03C0                     u4317:	
  1543  03C0  0BCD               	decfsz	??_hit_by,f
  1544  03C1  2BC0               	goto	u4317
  1545  03C2  0BCE               	decfsz	??_hit_by+1,f
  1546  03C3  2BC0               	goto	u4317
  1547  03C4  0000               	nop
  1548  03C5  3001               	movlw	1
  1549  03C6  0020               	movlb	0	; select bank0
  1550  03C7  00CD               	movwf	??_hit_by
  1551  03C8  084D               	movf	??_hit_by,w
  1552  03C9  07D3               	addwf	hit_by@i_790,f
  1553  03CA  2BB6               	goto	L1
  1554  03CB                     __end_of_hit_by:	
  1555                           
  1556                           	psect	text3
  1557  04A9                     __ptext3:	
  1558 ;; *************** function _super_dead_mode *****************
  1559 ;; Defined at:
  1560 ;;		line 337 in file "user.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  b               1   42[BANK0 ] unsigned char 
  1565 ;;  counter         2   43[BANK0 ] unsigned int 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1575 ;;      Params:         0       0       0       0
  1576 ;;      Locals:         0       3       0       0
  1577 ;;      Temps:          0       2       0       0
  1578 ;;      Totals:         0       5       0       0
  1579 ;;Total ram usage:        5 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    6
  1582 ;; This function calls:
  1583 ;;		_Send_Byte
  1584 ;;		_control_transfer
  1585 ;;		_handle_music
  1586 ;;		_led_off
  1587 ;;		_play_song
  1588 ;;		_red_led_on
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;;		_hit_by
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           
  1596                           ;psect for function _super_dead_mode
  1597  04A9                     _super_dead_mode:	
  1598                           
  1599                           ;user.c: 338: uint16_t counter = 0;
  1600                           
  1601                           ;incstack = 0
  1602                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1603  04A9  0020               	movlb	0	; select bank0
  1604  04AA  01CB               	clrf	super_dead_mode@counter
  1605  04AB  01CC               	clrf	super_dead_mode@counter+1
  1606  04AC                     l3111:	
  1607                           ;user.c: 339: while(!config.health){
  1608                           
  1609  04AC  3004               	movlw	4
  1610  04AD  3EC0               	addlw	_config& (0+255)
  1611  04AE  0086               	movwf	6
  1612  04AF  0187               	clrf	7
  1613  04B0  0016               	moviw fsr1++
  1614  04B1  0401               	iorwf	1,w
  1615  04B2  1D03               	btfss	3,2
  1616  04B3  0008               	return
  1617                           
  1618                           ;user.c: 340: handle_music();
  1619  04B4  2746               	fcall	_handle_music
  1620                           
  1621                           ;user.c: 342: uint8_t b;
  1622                           ;user.c: 343: if((PIR1bits.RCIF)){
  1623  04B5  0020               	movlb	0	; select bank0
  1624  04B6  1E91               	btfss	17,5	;volatile
  1625  04B7  2CC3               	goto	l3093
  1626                           
  1627                           ;user.c: 344: b=(RCREG);
  1628  04B8  0023               	movlb	3	; select bank3
  1629  04B9  0819               	movf	25,w	;volatile
  1630  04BA  0020               	movlb	0	; select bank0
  1631  04BB  00C8               	movwf	??_super_dead_mode
  1632  04BC  0848               	movf	??_super_dead_mode,w
  1633  04BD  00CA               	movwf	super_dead_mode@b
  1634                           
  1635                           ;user.c: 345: if(b == 0x10) {
  1636  04BE  084A               	movf	super_dead_mode@b,w
  1637  04BF  3A10               	xorlw	16
  1638  04C0  1D03               	skipz
  1639  04C1  2CC3               	goto	l3093
  1640                           
  1641                           ;user.c: 346: control_transfer();
  1642  04C2  2028               	fcall	_control_transfer
  1643  04C3                     l3093:	
  1644                           
  1645                           ;user.c: 347: }
  1646                           ;user.c: 348: }
  1647                           ;user.c: 349: counter++;
  1648  04C3  3001               	movlw	1
  1649  04C4  0020               	movlb	0	; select bank0
  1650  04C5  07CB               	addwf	super_dead_mode@counter,f
  1651  04C6  3000               	movlw	0
  1652  04C7  3DCC               	addwfc	super_dead_mode@counter+1,f
  1653                           
  1654                           ;user.c: 350: _delay((unsigned long)((1)*(16000000/4000.0)));
  1655  04C8  3006               	movlw	6
  1656  04C9  00C9               	movwf	??_super_dead_mode+1
  1657  04CA  3030               	movlw	48
  1658  04CB  00C8               	movwf	??_super_dead_mode
  1659  04CC                     u4327:	
  1660  04CC  0BC8               	decfsz	??_super_dead_mode,f
  1661  04CD  2CCC               	goto	u4327
  1662  04CE  0BC9               	decfsz	??_super_dead_mode+1,f
  1663  04CF  2CCC               	goto	u4327
  1664  04D0  0000               	nop
  1665                           
  1666                           ;user.c: 351: if(counter > config.death_period){
  1667  04D1  0020               	movlb	0	; select bank0
  1668  04D2  084C               	movf	super_dead_mode@counter+1,w
  1669  04D3  0021               	movlb	1	; select bank1
  1670  04D4  0251               	subwf	((_config+1)^(0+128)+16),w
  1671  04D5  1D03               	skipz
  1672  04D6  2CDB               	goto	u3935
  1673  04D7  0020               	movlb	0	; select bank0
  1674  04D8  084B               	movf	super_dead_mode@counter,w
  1675  04D9  0021               	movlb	1	; select bank1
  1676  04DA  0250               	subwf	(_config^(0+128)+16),w
  1677  04DB                     u3935:	
  1678  04DB  1803               	skipnc
  1679  04DC  2CF3               	goto	l3107
  1680                           
  1681                           ;user.c: 352: counter = 0;
  1682  04DD  0020               	movlb	0	; select bank0
  1683  04DE  01CB               	clrf	super_dead_mode@counter
  1684  04DF  01CC               	clrf	super_dead_mode@counter+1
  1685                           
  1686                           ;user.c: 353: led_off();
  1687  04E0  25DD               	fcall	_led_off
  1688                           
  1689                           ;user.c: 354: Send_Byte(config.id);
  1690  04E1  0021               	movlb	1	; select bank1
  1691  04E2  0840               	movf	_config^(0+128),w
  1692  04E3  27C0               	fcall	_Send_Byte
  1693                           
  1694                           ;user.c: 355: play_song(dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  1695  04E4  3052               	movlw	low (_dead_song| (0+32768))
  1696  04E5  00F1               	movwf	play_song@song
  1697  04E6  3086               	movlw	high (_dead_song| (0+32768))
  1698  04E7  00F2               	movwf	play_song@song+1
  1699  04E8  3003               	movlw	3
  1700  04E9  0020               	movlb	0	; select bank0
  1701  04EA  00C8               	movwf	??_super_dead_mode
  1702  04EB  0848               	movf	??_super_dead_mode,w
  1703  04EC  00F3               	movwf	play_song@length
  1704  04ED  3010               	movlw	16
  1705  04EE  00F4               	movwf	play_song@note_duration
  1706  04EF  3027               	movlw	39
  1707  04F0  00F5               	movwf	play_song@note_duration+1
  1708  04F1  01F6               	clrf	play_song@repeat
  1709  04F2  279C               	fcall	_play_song
  1710  04F3                     l3107:	
  1711                           
  1712                           ;user.c: 356: }
  1713                           ;user.c: 357: if(counter == config.death_period-50){
  1714  04F3  0021               	movlb	1	; select bank1
  1715  04F4  0850               	movf	(_config^(0+128)+16),w
  1716  04F5  3ECE               	addlw	206
  1717  04F6  0020               	movlb	0	; select bank0
  1718  04F7  00C8               	movwf	??_super_dead_mode
  1719  04F8  30FF               	movlw	255
  1720  04F9  0021               	movlb	1	; select bank1
  1721  04FA  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1722  04FB  0020               	movlb	0	; select bank0
  1723  04FC  00C9               	movwf	??_super_dead_mode+1
  1724  04FD  084C               	movf	super_dead_mode@counter+1,w
  1725  04FE  0649               	xorwf	??_super_dead_mode+1,w
  1726  04FF  1D03               	skipz
  1727  0500  2D03               	goto	u3945
  1728  0501  084B               	movf	super_dead_mode@counter,w
  1729  0502  0648               	xorwf	??_super_dead_mode,w
  1730  0503                     u3945:	
  1731  0503  1D03               	skipz
  1732  0504  2CAC               	goto	l3111
  1733                           
  1734                           ;user.c: 358: red_led_on();
  1735  0505  25D1               	fcall	_red_led_on
  1736  0506  2CAC               	goto	l3111
  1737  0507                     __end_of_super_dead_mode:	
  1738                           
  1739                           	psect	text4
  1740  0746                     __ptext4:	
  1741 ;; *************** function _handle_music *****************
  1742 ;; Defined at:
  1743 ;;		line 115 in file "user.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;		None               void
  1750 ;; Registers used:
  1751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1757 ;;      Params:         0       0       0       0
  1758 ;;      Locals:         0       0       0       0
  1759 ;;      Temps:          2       0       0       0
  1760 ;;      Totals:         2       0       0       0
  1761 ;;Total ram usage:        2 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    3
  1764 ;; This function calls:
  1765 ;;		_stop_song
  1766 ;;		_tone
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;;		_super_dead_mode
  1770 ;;		_hit_by
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           
  1775                           ;psect for function _handle_music
  1776  0746                     _handle_music:	
  1777                           
  1778                           ;user.c: 117: if(!PIR1bits.TMR1IF) return;
  1779                           
  1780                           ;incstack = 0
  1781                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1782  0746  0020               	movlb	0	; select bank0
  1783  0747  1C11               	btfss	17,0	;volatile
  1784  0748  0008               	return
  1785                           
  1786                           ;user.c: 118: if(cur_song_ptr >= cur_song_length)
  1787  0749  0861               	movf	_cur_song_length,w
  1788  074A  027C               	subwf	_cur_song_ptr,w
  1789  074B  1C03               	skipc
  1790  074C  2F54               	goto	l2727
  1791                           
  1792                           ;user.c: 119: {
  1793                           ;user.c: 120: if(cur_song_repeat)
  1794  074D  0862               	movf	_cur_song_repeat,w
  1795  074E  1903               	btfsc	3,2
  1796  074F  2F52               	goto	l2723
  1797                           
  1798                           ;user.c: 121: {
  1799                           ;user.c: 122: cur_song_ptr=0;
  1800  0750  01FC               	clrf	_cur_song_ptr
  1801                           
  1802                           ;user.c: 123: }
  1803  0751  2F54               	goto	l2727
  1804  0752                     l2723:	
  1805                           
  1806                           ;user.c: 124: else
  1807                           ;user.c: 125: {
  1808                           ;user.c: 126: stop_song();
  1809  0752  25CC               	fcall	_stop_song
  1810                           
  1811                           ;user.c: 127: return;
  1812  0753  0008               	return
  1813  0754                     l2727:	
  1814                           
  1815                           ;user.c: 128: }
  1816                           ;user.c: 129: }
  1817                           ;user.c: 130: tone(cur_song[cur_song_ptr]);
  1818  0754  087C               	movf	_cur_song_ptr,w
  1819  0755  00F5               	movwf	??_handle_music
  1820  0756  01F6               	clrf	??_handle_music+1
  1821  0757  35F5               	lslf	??_handle_music,f
  1822  0758  0DF6               	rlf	??_handle_music+1,f
  1823  0759  0020               	movlb	0	; select bank0
  1824  075A  0858               	movf	_cur_song,w
  1825  075B  0775               	addwf	??_handle_music,w
  1826  075C  0084               	movwf	4
  1827  075D  0859               	movf	_cur_song+1,w
  1828  075E  3D76               	addwfc	??_handle_music+1,w
  1829  075F  0085               	movwf	5
  1830  0760  3F00               	moviw [0]fsr0
  1831  0761  00F1               	movwf	tone@period
  1832  0762  3F01               	moviw [1]fsr0
  1833  0763  00F2               	movwf	tone@period+1
  1834  0764  2586               	fcall	_tone
  1835                           
  1836                           ;user.c: 131: TMR1 = -cur_song_duration;
  1837  0765  0020               	movlb	0	; select bank0
  1838  0766  095A               	comf	_cur_song_duration,w
  1839  0767  00F5               	movwf	??_handle_music
  1840  0768  095B               	comf	_cur_song_duration+1,w
  1841  0769  00F6               	movwf	??_handle_music+1
  1842  076A  0AF5               	incf	??_handle_music,f
  1843  076B  1903               	skipnz
  1844  076C  0AF6               	incf	??_handle_music+1,f
  1845  076D  0875               	movf	??_handle_music,w
  1846  076E  0096               	movwf	22	;volatile
  1847  076F  0876               	movf	??_handle_music+1,w
  1848  0770  0097               	movwf	23	;volatile
  1849                           
  1850                           ;user.c: 132: cur_song_ptr++;
  1851  0771  3001               	movlw	1
  1852  0772  00F5               	movwf	??_handle_music
  1853  0773  0875               	movf	??_handle_music,w
  1854  0774  07FC               	addwf	_cur_song_ptr,f
  1855                           
  1856                           ;user.c: 133: PIR1bits.TMR1IF=0;
  1857  0775  1011               	bcf	17,0	;volatile
  1858  0776  0008               	return
  1859  0777                     __end_of_handle_music:	
  1860                           
  1861                           	psect	text5
  1862  0586                     __ptext5:	
  1863 ;; *************** function _tone *****************
  1864 ;; Defined at:
  1865 ;;		line 136 in file "user.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  period          2    1[COMMON] unsigned int 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;		None               void
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1879 ;;      Params:         2       0       0       0
  1880 ;;      Locals:         0       0       0       0
  1881 ;;      Temps:          2       0       0       0
  1882 ;;      Totals:         4       0       0       0
  1883 ;;Total ram usage:        4 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    1
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_handle_music
  1890 ;;		_Buzz
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function _tone
  1896  0586                     _tone:	
  1897                           
  1898                           ;user.c: 138: PWM3CONbits.PWM3EN = 1;
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _tone: [wreg+status,2+status,0]
  1902  0586  003B               	movlb	27	; select bank27
  1903  0587  17BB               	bsf	59,7	;volatile
  1904                           
  1905                           ;user.c: 139: PWM3CONbits.PWM3OE = 1;
  1906  0588  173B               	bsf	59,6	;volatile
  1907                           
  1908                           ;user.c: 140: PWM3PR = period;
  1909  0589  0872               	movf	tone@period+1,w
  1910  058A  01B6               	clrf	54	;volatile
  1911  058B  07B6               	addwf	54,f	;volatile
  1912  058C  0871               	movf	tone@period,w
  1913  058D  01B5               	clrf	53	;volatile
  1914  058E  07B5               	addwf	53,f	;volatile
  1915                           
  1916                           ;user.c: 141: PWM3DC = period >> 1;
  1917  058F  0872               	movf	tone@period+1,w
  1918  0590  00F4               	movwf	??_tone+1
  1919  0591  0871               	movf	tone@period,w
  1920  0592  00F3               	movwf	??_tone
  1921  0593  36F4               	lsrf	??_tone+1,f
  1922  0594  0CF3               	rrf	??_tone,f
  1923  0595  0873               	movf	??_tone,w
  1924  0596  00B3               	movwf	51	;volatile
  1925  0597  0874               	movf	??_tone+1,w
  1926  0598  00B4               	movwf	52	;volatile
  1927                           
  1928                           ;user.c: 142: PWM3PH = 0x0000;
  1929  0599  01B1               	clrf	49	;volatile
  1930  059A  01B2               	clrf	50	;volatile
  1931                           
  1932                           ;user.c: 143: PWM3LDCONbits.PWM3LD = 1;
  1933  059B  17BF               	bsf	63,7	;volatile
  1934  059C  0008               	return
  1935  059D                     __end_of_tone:	
  1936                           
  1937                           	psect	text6
  1938  0028                     __ptext6:	
  1939 ;; *************** function _control_transfer *****************
  1940 ;; Defined at:
  1941 ;;		line 46 in file "protocol.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  data           32    0[BANK0 ] unsigned int [16]
  1946 ;;  page            2   37[BANK0 ] unsigned int 
  1947 ;;  x               1   39[BANK0 ] unsigned char 
  1948 ;;  i               1   36[BANK0 ] unsigned char 
  1949 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1950 ;;		 -> control_transfer@data(32), 
  1951 ;;  id              1   34[BANK0 ] unsigned char 
  1952 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1953 ;;  cmd             1   32[BANK0 ] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1963 ;;      Params:         0       0       0       0
  1964 ;;      Locals:         0      40       0       0
  1965 ;;      Temps:          2       0       0       0
  1966 ;;      Totals:         2      40       0       0
  1967 ;;Total ram usage:       42 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    5
  1970 ;; This function calls:
  1971 ;;		_GET_CHAR_HELPER
  1972 ;;		_Load
  1973 ;;		_SEND_DATA_BYTE
  1974 ;;		_SEND_EOF
  1975 ;;		_SEND_SOF
  1976 ;;		_Save
  1977 ;;		_play_song
  1978 ;; This function is called by:
  1979 ;;		_super_dead_mode
  1980 ;;		_handle_serial
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           
  1985                           ;psect for function _control_transfer
  1986  0028                     _control_transfer:	
  1987                           
  1988                           ;protocol.c: 48: uint8_t i;
  1989                           ;protocol.c: 49: uint8_t cmd;
  1990                           ;protocol.c: 50: uint8_t random_number,id;
  1991                           ;protocol.c: 52: uint16_t page;
  1992                           ;protocol.c: 53: uint16_t data[16];
  1993                           ;protocol.c: 54: uint8_t* dptr;
  1994                           ;protocol.c: 55: uint8_t x;
  1995                           ;protocol.c: 57: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1999  0028  0020               	movlb	0	; select bank0
  2000  0029  01E0               	clrf	__checksum
  2001  002A  3066               	movlw	__x& (0+255)
  2002  002B  254C               	fcall	_GET_CHAR_HELPER
  2003  002C  3A00               	xorlw	0
  2004  002D  1D03               	btfss	3,2
  2005  002E  0008               	return
  2006  002F  3067               	movlw	__y& (0+255)
  2007  0030  254C               	fcall	_GET_CHAR_HELPER
  2008  0031  3A00               	xorlw	0
  2009  0032  1D03               	btfss	3,2
  2010  0033  0008               	return
  2011  0034  0020               	movlb	0	; select bank0
  2012  0035  0866               	movf	__x,w
  2013  0036  39F0               	andlw	240
  2014  0037  1D03               	btfss	3,2
  2015  0038  0008               	return
  2016  0039  0867               	movf	__y,w
  2017  003A  39F0               	andlw	240
  2018  003B  1D03               	btfss	3,2
  2019  003C  0008               	return
  2020  003D  0867               	movf	__y,w
  2021  003E  00F9               	movwf	??_control_transfer
  2022  003F  3003               	movlw	3
  2023  0040                     u3045:	
  2024  0040  35F9               	lslf	??_control_transfer,f
  2025  0041  3EFF               	addlw	-1
  2026  0042  1D03               	skipz
  2027  0043  2840               	goto	u3045
  2028  0044  3579               	lslf	??_control_transfer,w
  2029  0045  0466               	iorwf	__x,w
  2030  0046  00FA               	movwf	??_control_transfer+1
  2031  0047  087A               	movf	??_control_transfer+1,w
  2032  0048  00E6               	movwf	__x
  2033  0049  0866               	movf	__x,w
  2034  004A  00F9               	movwf	??_control_transfer
  2035  004B  0879               	movf	??_control_transfer,w
  2036  004C  07E0               	addwf	__checksum,f
  2037  004D  0021               	movlb	1	; select bank1
  2038  004E  0840               	movf	_config^(0+128),w
  2039  004F  0020               	movlb	0	; select bank0
  2040  0050  0666               	xorwf	__x,w
  2041  0051  1D03               	btfss	3,2
  2042  0052  0008               	return
  2043                           
  2044                           ;protocol.c: 58: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  2045  0053  3066               	movlw	__x& (0+255)
  2046  0054  254C               	fcall	_GET_CHAR_HELPER
  2047  0055  3A00               	xorlw	0
  2048  0056  1D03               	btfss	3,2
  2049  0057  0008               	return
  2050  0058  3067               	movlw	__y& (0+255)
  2051  0059  254C               	fcall	_GET_CHAR_HELPER
  2052  005A  3A00               	xorlw	0
  2053  005B  1D03               	btfss	3,2
  2054  005C  0008               	return
  2055  005D  0020               	movlb	0	; select bank0
  2056  005E  0866               	movf	__x,w
  2057  005F  39F0               	andlw	240
  2058  0060  1D03               	btfss	3,2
  2059  0061  0008               	return
  2060  0062  0867               	movf	__y,w
  2061  0063  39F0               	andlw	240
  2062  0064  1D03               	btfss	3,2
  2063  0065  0008               	return
  2064  0066  0867               	movf	__y,w
  2065  0067  00F9               	movwf	??_control_transfer
  2066  0068  3003               	movlw	3
  2067  0069                     u3105:	
  2068  0069  35F9               	lslf	??_control_transfer,f
  2069  006A  3EFF               	addlw	-1
  2070  006B  1D03               	skipz
  2071  006C  2869               	goto	u3105
  2072  006D  3579               	lslf	??_control_transfer,w
  2073  006E  0466               	iorwf	__x,w
  2074  006F  00FA               	movwf	??_control_transfer+1
  2075  0070  087A               	movf	??_control_transfer+1,w
  2076  0071  00C0               	movwf	control_transfer@cmd
  2077  0072  0840               	movf	control_transfer@cmd,w
  2078  0073  00F9               	movwf	??_control_transfer
  2079  0074  0879               	movf	??_control_transfer,w
  2080  0075  07E0               	addwf	__checksum,f
  2081                           
  2082                           ;protocol.c: 60: switch(cmd)
  2083  0076  2B2F               	goto	l3077
  2084  0077                     l2773:	
  2085                           ;protocol.c: 61: {
  2086                           ;protocol.c: 62: case 0x01:
  2087                           
  2088                           
  2089                           ;protocol.c: 63: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2090  0077  3066               	movlw	__x& (0+255)
  2091  0078  254C               	fcall	_GET_CHAR_HELPER
  2092  0079  3A00               	xorlw	0
  2093  007A  1D03               	btfss	3,2
  2094  007B  0008               	return
  2095  007C  3067               	movlw	__y& (0+255)
  2096  007D  254C               	fcall	_GET_CHAR_HELPER
  2097  007E  3A00               	xorlw	0
  2098  007F  1D03               	btfss	3,2
  2099  0080  0008               	return
  2100  0081  0020               	movlb	0	; select bank0
  2101  0082  0866               	movf	__x,w
  2102  0083  39F0               	andlw	240
  2103  0084  1D03               	btfss	3,2
  2104  0085  0008               	return
  2105  0086  0867               	movf	__y,w
  2106  0087  39F0               	andlw	240
  2107  0088  1D03               	btfss	3,2
  2108  0089  0008               	return
  2109  008A  0867               	movf	__y,w
  2110  008B  00F9               	movwf	??_control_transfer
  2111  008C  3003               	movlw	3
  2112  008D                     u3155:	
  2113  008D  35F9               	lslf	??_control_transfer,f
  2114  008E  3EFF               	addlw	-1
  2115  008F  1D03               	skipz
  2116  0090  288D               	goto	u3155
  2117  0091  3579               	lslf	??_control_transfer,w
  2118  0092  0466               	iorwf	__x,w
  2119  0093  00FA               	movwf	??_control_transfer+1
  2120  0094  087A               	movf	??_control_transfer+1,w
  2121  0095  00E6               	movwf	__x
  2122  0096  0866               	movf	__x,w
  2123  0097  00F9               	movwf	??_control_transfer
  2124  0098  0879               	movf	??_control_transfer,w
  2125  0099  07E0               	addwf	__checksum,f
  2126  009A  0860               	movf	__checksum,w
  2127  009B  1D03               	skipz
  2128  009C  0008               	return
  2129  009D  3066               	movlw	__x& (0+255)
  2130  009E  254C               	fcall	_GET_CHAR_HELPER
  2131  009F  3A00               	xorlw	0
  2132  00A0  1D03               	btfss	3,2
  2133  00A1  0008               	return
  2134  00A2  0020               	movlb	0	; select bank0
  2135  00A3  0866               	movf	__x,w
  2136  00A4  3A11               	xorlw	17
  2137  00A5  1D03               	btfss	3,2
  2138  00A6  0008               	return
  2139                           
  2140                           ;protocol.c: 64: SEND_SOF();
  2141  00A7  25A9               	fcall	_SEND_SOF
  2142                           
  2143                           ;protocol.c: 65: SEND_DATA_BYTE(0x02);
  2144  00A8  3002               	movlw	2
  2145  00A9  252A               	fcall	_SEND_DATA_BYTE
  2146                           
  2147                           ;protocol.c: 66: SEND_DATA_BYTE(my_random_number);
  2148  00AA  0020               	movlb	0	; select bank0
  2149  00AB  0863               	movf	_my_random_number,w
  2150  00AC  252A               	fcall	_SEND_DATA_BYTE
  2151                           
  2152                           ;protocol.c: 67: SEND_EOF();
  2153  00AD  25B5               	fcall	_SEND_EOF
  2154                           
  2155                           ;protocol.c: 68: break;
  2156  00AE  0008               	return
  2157  00AF                     l2801:	
  2158                           ;protocol.c: 69: case 0x03:
  2159                           
  2160                           
  2161                           ;protocol.c: 70: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2162  00AF  3066               	movlw	__x& (0+255)
  2163  00B0  254C               	fcall	_GET_CHAR_HELPER
  2164  00B1  3A00               	xorlw	0
  2165  00B2  1D03               	btfss	3,2
  2166  00B3  0008               	return
  2167  00B4  3067               	movlw	__y& (0+255)
  2168  00B5  254C               	fcall	_GET_CHAR_HELPER
  2169  00B6  3A00               	xorlw	0
  2170  00B7  1D03               	btfss	3,2
  2171  00B8  0008               	return
  2172  00B9  0020               	movlb	0	; select bank0
  2173  00BA  0866               	movf	__x,w
  2174  00BB  39F0               	andlw	240
  2175  00BC  1D03               	btfss	3,2
  2176  00BD  0008               	return
  2177  00BE  0867               	movf	__y,w
  2178  00BF  39F0               	andlw	240
  2179  00C0  1D03               	btfss	3,2
  2180  00C1  0008               	return
  2181  00C2  0867               	movf	__y,w
  2182  00C3  00F9               	movwf	??_control_transfer
  2183  00C4  3003               	movlw	3
  2184  00C5                     u3235:	
  2185  00C5  35F9               	lslf	??_control_transfer,f
  2186  00C6  3EFF               	addlw	-1
  2187  00C7  1D03               	skipz
  2188  00C8  28C5               	goto	u3235
  2189  00C9  3579               	lslf	??_control_transfer,w
  2190  00CA  0466               	iorwf	__x,w
  2191  00CB  00FA               	movwf	??_control_transfer+1
  2192  00CC  087A               	movf	??_control_transfer+1,w
  2193  00CD  00C1               	movwf	control_transfer@random_number
  2194  00CE  0841               	movf	control_transfer@random_number,w
  2195  00CF  00F9               	movwf	??_control_transfer
  2196  00D0  0879               	movf	??_control_transfer,w
  2197  00D1  07E0               	addwf	__checksum,f
  2198                           
  2199                           ;protocol.c: 71: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2200  00D2  3066               	movlw	__x& (0+255)
  2201  00D3  254C               	fcall	_GET_CHAR_HELPER
  2202  00D4  3A00               	xorlw	0
  2203  00D5  1D03               	btfss	3,2
  2204  00D6  0008               	return
  2205  00D7  3067               	movlw	__y& (0+255)
  2206  00D8  254C               	fcall	_GET_CHAR_HELPER
  2207  00D9  3A00               	xorlw	0
  2208  00DA  1D03               	btfss	3,2
  2209  00DB  0008               	return
  2210  00DC  0020               	movlb	0	; select bank0
  2211  00DD  0866               	movf	__x,w
  2212  00DE  39F0               	andlw	240
  2213  00DF  1D03               	btfss	3,2
  2214  00E0  0008               	return
  2215  00E1  0867               	movf	__y,w
  2216  00E2  39F0               	andlw	240
  2217  00E3  1D03               	btfss	3,2
  2218  00E4  0008               	return
  2219  00E5  0867               	movf	__y,w
  2220  00E6  00F9               	movwf	??_control_transfer
  2221  00E7  3003               	movlw	3
  2222  00E8                     u3285:	
  2223  00E8  35F9               	lslf	??_control_transfer,f
  2224  00E9  3EFF               	addlw	-1
  2225  00EA  1D03               	skipz
  2226  00EB  28E8               	goto	u3285
  2227  00EC  3579               	lslf	??_control_transfer,w
  2228  00ED  0466               	iorwf	__x,w
  2229  00EE  00FA               	movwf	??_control_transfer+1
  2230  00EF  087A               	movf	??_control_transfer+1,w
  2231  00F0  00C2               	movwf	control_transfer@id
  2232  00F1  0842               	movf	control_transfer@id,w
  2233  00F2  00F9               	movwf	??_control_transfer
  2234  00F3  0879               	movf	??_control_transfer,w
  2235  00F4  07E0               	addwf	__checksum,f
  2236                           
  2237                           ;protocol.c: 72: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2238  00F5  3066               	movlw	__x& (0+255)
  2239  00F6  254C               	fcall	_GET_CHAR_HELPER
  2240  00F7  3A00               	xorlw	0
  2241  00F8  1D03               	btfss	3,2
  2242  00F9  0008               	return
  2243  00FA  3067               	movlw	__y& (0+255)
  2244  00FB  254C               	fcall	_GET_CHAR_HELPER
  2245  00FC  3A00               	xorlw	0
  2246  00FD  1D03               	btfss	3,2
  2247  00FE  0008               	return
  2248  00FF  0020               	movlb	0	; select bank0
  2249  0100  0866               	movf	__x,w
  2250  0101  39F0               	andlw	240
  2251  0102  1D03               	btfss	3,2
  2252  0103  0008               	return
  2253  0104  0867               	movf	__y,w
  2254  0105  39F0               	andlw	240
  2255  0106  1D03               	btfss	3,2
  2256  0107  0008               	return
  2257  0108  0867               	movf	__y,w
  2258  0109  00F9               	movwf	??_control_transfer
  2259  010A  3003               	movlw	3
  2260  010B                     u3335:	
  2261  010B  35F9               	lslf	??_control_transfer,f
  2262  010C  3EFF               	addlw	-1
  2263  010D  1D03               	skipz
  2264  010E  290B               	goto	u3335
  2265  010F  3579               	lslf	??_control_transfer,w
  2266  0110  0466               	iorwf	__x,w
  2267  0111  00FA               	movwf	??_control_transfer+1
  2268  0112  087A               	movf	??_control_transfer+1,w
  2269  0113  00E6               	movwf	__x
  2270  0114  0866               	movf	__x,w
  2271  0115  00F9               	movwf	??_control_transfer
  2272  0116  0879               	movf	??_control_transfer,w
  2273  0117  07E0               	addwf	__checksum,f
  2274  0118  0860               	movf	__checksum,w
  2275  0119  1D03               	skipz
  2276  011A  0008               	return
  2277  011B  3066               	movlw	__x& (0+255)
  2278  011C  254C               	fcall	_GET_CHAR_HELPER
  2279  011D  3A00               	xorlw	0
  2280  011E  1D03               	btfss	3,2
  2281  011F  0008               	return
  2282  0120  0020               	movlb	0	; select bank0
  2283  0121  0866               	movf	__x,w
  2284  0122  3A11               	xorlw	17
  2285  0123  1D03               	btfss	3,2
  2286  0124  0008               	return
  2287                           
  2288                           ;protocol.c: 73: if(random_number != my_random_number) goto err;
  2289  0125  0841               	movf	control_transfer@random_number,w
  2290  0126  0663               	xorwf	_my_random_number,w
  2291  0127  1D03               	btfss	3,2
  2292  0128  0008               	return
  2293                           
  2294                           ;protocol.c: 74: SEND_SOF();
  2295  0129  25A9               	fcall	_SEND_SOF
  2296                           
  2297                           ;protocol.c: 75: SEND_DATA_BYTE(0x00);
  2298  012A  3000               	movlw	0
  2299  012B  252A               	fcall	_SEND_DATA_BYTE
  2300                           
  2301                           ;protocol.c: 76: SEND_EOF();
  2302  012C  25B5               	fcall	_SEND_EOF
  2303                           
  2304                           ;protocol.c: 77: config.id=id | (1<<9);
  2305  012D  3000               	movlw	0
  2306  012E  0020               	movlb	0	; select bank0
  2307  012F  0442               	iorwf	control_transfer@id,w
  2308  0130  0021               	movlb	1	; select bank1
  2309  0131  00C0               	movwf	_config^(0+128)
  2310  0132  3002               	movlw	2
  2311  0133  00C1               	movwf	(_config+1)^(0+128)
  2312                           
  2313                           ;protocol.c: 78: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2314  0134  30D0               	movlw	208
  2315  0135  00F1               	movwf	Save@address
  2316  0136  3007               	movlw	7
  2317  0137  00F2               	movwf	Save@address+1
  2318  0138  30C0               	movlw	_config& (0+255)
  2319  0139  00F9               	movwf	??_control_transfer
  2320  013A  0879               	movf	??_control_transfer,w
  2321  013B  00F3               	movwf	Save@ptr
  2322  013C  3009               	movlw	9
  2323  013D  00FA               	movwf	??_control_transfer+1
  2324  013E  087A               	movf	??_control_transfer+1,w
  2325  013F  00F4               	movwf	Save@data_length
  2326  0140  26FF               	fcall	_Save
  2327                           
  2328                           ;protocol.c: 79: break;
  2329  0141  0008               	return
  2330  0142                     l2865:	
  2331                           ;protocol.c: 80: case 0x04:
  2332                           
  2333                           
  2334                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2335  0142  3066               	movlw	__x& (0+255)
  2336  0143  254C               	fcall	_GET_CHAR_HELPER
  2337  0144  3A00               	xorlw	0
  2338  0145  1D03               	btfss	3,2
  2339  0146  0008               	return
  2340  0147  3067               	movlw	__y& (0+255)
  2341  0148  254C               	fcall	_GET_CHAR_HELPER
  2342  0149  3A00               	xorlw	0
  2343  014A  1D03               	btfss	3,2
  2344  014B  0008               	return
  2345  014C  0020               	movlb	0	; select bank0
  2346  014D  0866               	movf	__x,w
  2347  014E  39F0               	andlw	240
  2348  014F  1D03               	btfss	3,2
  2349  0150  0008               	return
  2350  0151  0867               	movf	__y,w
  2351  0152  39F0               	andlw	240
  2352  0153  1D03               	btfss	3,2
  2353  0154  0008               	return
  2354  0155  0867               	movf	__y,w
  2355  0156  00F9               	movwf	??_control_transfer
  2356  0157  3003               	movlw	3
  2357  0158                     u3425:	
  2358  0158  35F9               	lslf	??_control_transfer,f
  2359  0159  3EFF               	addlw	-1
  2360  015A  1D03               	skipz
  2361  015B  2958               	goto	u3425
  2362  015C  3579               	lslf	??_control_transfer,w
  2363  015D  0466               	iorwf	__x,w
  2364  015E  00FA               	movwf	??_control_transfer+1
  2365  015F  087A               	movf	??_control_transfer+1,w
  2366  0160  00C7               	movwf	control_transfer@x
  2367  0161  0847               	movf	control_transfer@x,w
  2368  0162  00F9               	movwf	??_control_transfer
  2369  0163  0879               	movf	??_control_transfer,w
  2370  0164  07E0               	addwf	__checksum,f
  2371                           
  2372                           ;protocol.c: 82: *((uint8_t*)(&page))=x;
  2373  0165  0847               	movf	control_transfer@x,w
  2374  0166  00F9               	movwf	??_control_transfer
  2375  0167  0879               	movf	??_control_transfer,w
  2376  0168  00C5               	movwf	control_transfer@page
  2377                           
  2378                           ;protocol.c: 83: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2379  0169  3066               	movlw	__x& (0+255)
  2380  016A  254C               	fcall	_GET_CHAR_HELPER
  2381  016B  3A00               	xorlw	0
  2382  016C  1D03               	btfss	3,2
  2383  016D  0008               	return
  2384  016E  3067               	movlw	__y& (0+255)
  2385  016F  254C               	fcall	_GET_CHAR_HELPER
  2386  0170  3A00               	xorlw	0
  2387  0171  1D03               	btfss	3,2
  2388  0172  0008               	return
  2389  0173  0020               	movlb	0	; select bank0
  2390  0174  0866               	movf	__x,w
  2391  0175  39F0               	andlw	240
  2392  0176  1D03               	btfss	3,2
  2393  0177  0008               	return
  2394  0178  0867               	movf	__y,w
  2395  0179  39F0               	andlw	240
  2396  017A  1D03               	btfss	3,2
  2397  017B  0008               	return
  2398  017C  0867               	movf	__y,w
  2399  017D  00F9               	movwf	??_control_transfer
  2400  017E  3003               	movlw	3
  2401  017F                     u3475:	
  2402  017F  35F9               	lslf	??_control_transfer,f
  2403  0180  3EFF               	addlw	-1
  2404  0181  1D03               	skipz
  2405  0182  297F               	goto	u3475
  2406  0183  3579               	lslf	??_control_transfer,w
  2407  0184  0466               	iorwf	__x,w
  2408  0185  00FA               	movwf	??_control_transfer+1
  2409  0186  087A               	movf	??_control_transfer+1,w
  2410  0187  00C7               	movwf	control_transfer@x
  2411  0188  0847               	movf	control_transfer@x,w
  2412  0189  00F9               	movwf	??_control_transfer
  2413  018A  0879               	movf	??_control_transfer,w
  2414  018B  07E0               	addwf	__checksum,f
  2415                           
  2416                           ;protocol.c: 84: *(((uint8_t*)(&page))+1)=x;
  2417  018C  0847               	movf	control_transfer@x,w
  2418  018D  00F9               	movwf	??_control_transfer
  2419  018E  0879               	movf	??_control_transfer,w
  2420  018F  00C6               	movwf	control_transfer@page+1
  2421                           
  2422                           ;protocol.c: 85: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2423  0190  3066               	movlw	__x& (0+255)
  2424  0191  254C               	fcall	_GET_CHAR_HELPER
  2425  0192  3A00               	xorlw	0
  2426  0193  1D03               	btfss	3,2
  2427  0194  0008               	return
  2428  0195  3067               	movlw	__y& (0+255)
  2429  0196  254C               	fcall	_GET_CHAR_HELPER
  2430  0197  3A00               	xorlw	0
  2431  0198  1D03               	btfss	3,2
  2432  0199  0008               	return
  2433  019A  0020               	movlb	0	; select bank0
  2434  019B  0866               	movf	__x,w
  2435  019C  39F0               	andlw	240
  2436  019D  1D03               	btfss	3,2
  2437  019E  0008               	return
  2438  019F  0867               	movf	__y,w
  2439  01A0  39F0               	andlw	240
  2440  01A1  1D03               	btfss	3,2
  2441  01A2  0008               	return
  2442  01A3  0867               	movf	__y,w
  2443  01A4  00F9               	movwf	??_control_transfer
  2444  01A5  3003               	movlw	3
  2445  01A6                     u3525:	
  2446  01A6  35F9               	lslf	??_control_transfer,f
  2447  01A7  3EFF               	addlw	-1
  2448  01A8  1D03               	skipz
  2449  01A9  29A6               	goto	u3525
  2450  01AA  3579               	lslf	??_control_transfer,w
  2451  01AB  0466               	iorwf	__x,w
  2452  01AC  00FA               	movwf	??_control_transfer+1
  2453  01AD  087A               	movf	??_control_transfer+1,w
  2454  01AE  00E6               	movwf	__x
  2455  01AF  0866               	movf	__x,w
  2456  01B0  00F9               	movwf	??_control_transfer
  2457  01B1  0879               	movf	??_control_transfer,w
  2458  01B2  07E0               	addwf	__checksum,f
  2459  01B3  0860               	movf	__checksum,w
  2460  01B4  1D03               	skipz
  2461  01B5  0008               	return
  2462  01B6  3066               	movlw	__x& (0+255)
  2463  01B7  254C               	fcall	_GET_CHAR_HELPER
  2464  01B8  3A00               	xorlw	0
  2465  01B9  1D03               	btfss	3,2
  2466  01BA  0008               	return
  2467  01BB  0020               	movlb	0	; select bank0
  2468  01BC  0866               	movf	__x,w
  2469  01BD  3A11               	xorlw	17
  2470  01BE  1D03               	btfss	3,2
  2471  01BF  0008               	return
  2472                           
  2473                           ;protocol.c: 86: Load(page,data,16);
  2474  01C0  0846               	movf	control_transfer@page+1,w
  2475  01C1  01F2               	clrf	Load@address+1
  2476  01C2  07F2               	addwf	Load@address+1,f
  2477  01C3  0845               	movf	control_transfer@page,w
  2478  01C4  01F1               	clrf	Load@address
  2479  01C5  07F1               	addwf	Load@address,f
  2480  01C6  3020               	movlw	control_transfer@data& (0+255)
  2481  01C7  00F9               	movwf	??_control_transfer
  2482  01C8  0879               	movf	??_control_transfer,w
  2483  01C9  00F3               	movwf	Load@ptr
  2484  01CA  3010               	movlw	16
  2485  01CB  00FA               	movwf	??_control_transfer+1
  2486  01CC  087A               	movf	??_control_transfer+1,w
  2487  01CD  00F4               	movwf	Load@data_length
  2488  01CE  2777               	fcall	_Load
  2489                           
  2490                           ;protocol.c: 87: SEND_SOF();
  2491  01CF  25A9               	fcall	_SEND_SOF
  2492                           
  2493                           ;protocol.c: 88: SEND_DATA_BYTE(0x05);
  2494  01D0  3005               	movlw	5
  2495  01D1  252A               	fcall	_SEND_DATA_BYTE
  2496                           
  2497                           ;protocol.c: 89: dptr=(uint8_t*)data;
  2498  01D2  3020               	movlw	control_transfer@data& (0+255)
  2499  01D3  00F9               	movwf	??_control_transfer
  2500  01D4  0879               	movf	??_control_transfer,w
  2501  01D5  0020               	movlb	0	; select bank0
  2502  01D6  00C3               	movwf	control_transfer@dptr
  2503                           
  2504                           ;protocol.c: 90: for(i=0;i<32;i++)
  2505  01D7  01C4               	clrf	control_transfer@i
  2506  01D8  3020               	movlw	32
  2507  01D9  0244               	subwf	control_transfer@i,w
  2508  01DA  1803               	btfsc	3,0
  2509  01DB  29EE               	goto	l2945
  2510  01DC                     l2937:	
  2511                           
  2512                           ;protocol.c: 91: {
  2513                           ;protocol.c: 92: SEND_DATA_BYTE(*dptr++);
  2514  01DC  0843               	movf	control_transfer@dptr,w
  2515  01DD  0086               	movwf	6
  2516  01DE  0187               	clrf	7
  2517  01DF  0801               	movf	1,w
  2518  01E0  252A               	fcall	_SEND_DATA_BYTE
  2519  01E1  3001               	movlw	1
  2520  01E2  00F9               	movwf	??_control_transfer
  2521  01E3  0879               	movf	??_control_transfer,w
  2522  01E4  0020               	movlb	0	; select bank0
  2523  01E5  07C3               	addwf	control_transfer@dptr,f
  2524  01E6  3001               	movlw	1
  2525  01E7  00F9               	movwf	??_control_transfer
  2526  01E8  0879               	movf	??_control_transfer,w
  2527  01E9  07C4               	addwf	control_transfer@i,f
  2528  01EA  3020               	movlw	32
  2529  01EB  0244               	subwf	control_transfer@i,w
  2530  01EC  1C03               	skipc
  2531  01ED  29DC               	goto	l2937
  2532  01EE                     l2945:	
  2533                           
  2534                           ;protocol.c: 93: }
  2535                           ;protocol.c: 94: SEND_EOF();
  2536  01EE  25B5               	fcall	_SEND_EOF
  2537                           
  2538                           ;protocol.c: 95: break;
  2539  01EF  0008               	return
  2540  01F0                     l2947:	
  2541                           ;protocol.c: 96: case 0x06:
  2542                           
  2543                           
  2544                           ;protocol.c: 97: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2545  01F0  3066               	movlw	__x& (0+255)
  2546  01F1  254C               	fcall	_GET_CHAR_HELPER
  2547  01F2  3A00               	xorlw	0
  2548  01F3  1D03               	btfss	3,2
  2549  01F4  0008               	return
  2550  01F5  3067               	movlw	__y& (0+255)
  2551  01F6  254C               	fcall	_GET_CHAR_HELPER
  2552  01F7  3A00               	xorlw	0
  2553  01F8  1D03               	btfss	3,2
  2554  01F9  0008               	return
  2555  01FA  0020               	movlb	0	; select bank0
  2556  01FB  0866               	movf	__x,w
  2557  01FC  39F0               	andlw	240
  2558  01FD  1D03               	btfss	3,2
  2559  01FE  0008               	return
  2560  01FF  0867               	movf	__y,w
  2561  0200  39F0               	andlw	240
  2562  0201  1D03               	btfss	3,2
  2563  0202  0008               	return
  2564  0203  0867               	movf	__y,w
  2565  0204  00F9               	movwf	??_control_transfer
  2566  0205  3003               	movlw	3
  2567  0206                     u3625:	
  2568  0206  35F9               	lslf	??_control_transfer,f
  2569  0207  3EFF               	addlw	-1
  2570  0208  1D03               	skipz
  2571  0209  2A06               	goto	u3625
  2572  020A  3579               	lslf	??_control_transfer,w
  2573  020B  0466               	iorwf	__x,w
  2574  020C  00FA               	movwf	??_control_transfer+1
  2575  020D  087A               	movf	??_control_transfer+1,w
  2576  020E  00C7               	movwf	control_transfer@x
  2577  020F  0847               	movf	control_transfer@x,w
  2578  0210  00F9               	movwf	??_control_transfer
  2579  0211  0879               	movf	??_control_transfer,w
  2580  0212  07E0               	addwf	__checksum,f
  2581                           
  2582                           ;protocol.c: 98: *((uint8_t*)(&page))=x;
  2583  0213  0847               	movf	control_transfer@x,w
  2584  0214  00F9               	movwf	??_control_transfer
  2585  0215  0879               	movf	??_control_transfer,w
  2586  0216  00C5               	movwf	control_transfer@page
  2587                           
  2588                           ;protocol.c: 99: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2589  0217  3066               	movlw	__x& (0+255)
  2590  0218  254C               	fcall	_GET_CHAR_HELPER
  2591  0219  3A00               	xorlw	0
  2592  021A  1D03               	btfss	3,2
  2593  021B  0008               	return
  2594  021C  3067               	movlw	__y& (0+255)
  2595  021D  254C               	fcall	_GET_CHAR_HELPER
  2596  021E  3A00               	xorlw	0
  2597  021F  1D03               	btfss	3,2
  2598  0220  0008               	return
  2599  0221  0020               	movlb	0	; select bank0
  2600  0222  0866               	movf	__x,w
  2601  0223  39F0               	andlw	240
  2602  0224  1D03               	btfss	3,2
  2603  0225  0008               	return
  2604  0226  0867               	movf	__y,w
  2605  0227  39F0               	andlw	240
  2606  0228  1D03               	btfss	3,2
  2607  0229  0008               	return
  2608  022A  0867               	movf	__y,w
  2609  022B  00F9               	movwf	??_control_transfer
  2610  022C  3003               	movlw	3
  2611  022D                     u3675:	
  2612  022D  35F9               	lslf	??_control_transfer,f
  2613  022E  3EFF               	addlw	-1
  2614  022F  1D03               	skipz
  2615  0230  2A2D               	goto	u3675
  2616  0231  3579               	lslf	??_control_transfer,w
  2617  0232  0466               	iorwf	__x,w
  2618  0233  00FA               	movwf	??_control_transfer+1
  2619  0234  087A               	movf	??_control_transfer+1,w
  2620  0235  00C7               	movwf	control_transfer@x
  2621  0236  0847               	movf	control_transfer@x,w
  2622  0237  00F9               	movwf	??_control_transfer
  2623  0238  0879               	movf	??_control_transfer,w
  2624  0239  07E0               	addwf	__checksum,f
  2625                           
  2626                           ;protocol.c: 100: *(((uint8_t*)(&page))+1)=x;
  2627  023A  0847               	movf	control_transfer@x,w
  2628  023B  00F9               	movwf	??_control_transfer
  2629  023C  0879               	movf	??_control_transfer,w
  2630  023D  00C6               	movwf	control_transfer@page+1
  2631                           
  2632                           ;protocol.c: 101: dptr=(uint8_t*)data;
  2633  023E  3020               	movlw	control_transfer@data& (0+255)
  2634  023F  00F9               	movwf	??_control_transfer
  2635  0240  0879               	movf	??_control_transfer,w
  2636  0241  00C3               	movwf	control_transfer@dptr
  2637                           
  2638                           ;protocol.c: 102: for(i=0;i<32;i++)
  2639  0242  01C4               	clrf	control_transfer@i
  2640  0243  3020               	movlw	32
  2641  0244  0244               	subwf	control_transfer@i,w
  2642  0245  1803               	btfsc	3,0
  2643  0246  2A7D               	goto	l3009
  2644  0247                     l2987:	
  2645                           
  2646                           ;protocol.c: 103: {
  2647                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2648  0247  3066               	movlw	__x& (0+255)
  2649  0248  254C               	fcall	_GET_CHAR_HELPER
  2650  0249  3A00               	xorlw	0
  2651  024A  1D03               	btfss	3,2
  2652  024B  0008               	return
  2653  024C  3067               	movlw	__y& (0+255)
  2654  024D  254C               	fcall	_GET_CHAR_HELPER
  2655  024E  3A00               	xorlw	0
  2656  024F  1D03               	btfss	3,2
  2657  0250  0008               	return
  2658  0251  0020               	movlb	0	; select bank0
  2659  0252  0866               	movf	__x,w
  2660  0253  39F0               	andlw	240
  2661  0254  1D03               	btfss	3,2
  2662  0255  0008               	return
  2663  0256  0867               	movf	__y,w
  2664  0257  39F0               	andlw	240
  2665  0258  1D03               	btfss	3,2
  2666  0259  0008               	return
  2667  025A  0867               	movf	__y,w
  2668  025B  00F9               	movwf	??_control_transfer
  2669  025C  3003               	movlw	3
  2670  025D                     u3735:	
  2671  025D  35F9               	lslf	??_control_transfer,f
  2672  025E  3EFF               	addlw	-1
  2673  025F  1D03               	skipz
  2674  0260  2A5D               	goto	u3735
  2675  0261  3579               	lslf	??_control_transfer,w
  2676  0262  0466               	iorwf	__x,w
  2677  0263  00FA               	movwf	??_control_transfer+1
  2678  0264  087A               	movf	??_control_transfer+1,w
  2679  0265  00C7               	movwf	control_transfer@x
  2680  0266  0847               	movf	control_transfer@x,w
  2681  0267  00F9               	movwf	??_control_transfer
  2682  0268  0879               	movf	??_control_transfer,w
  2683  0269  07E0               	addwf	__checksum,f
  2684                           
  2685                           ;protocol.c: 105: *dptr++=x;
  2686  026A  0847               	movf	control_transfer@x,w
  2687  026B  00F9               	movwf	??_control_transfer
  2688  026C  0843               	movf	control_transfer@dptr,w
  2689  026D  0086               	movwf	6
  2690  026E  0187               	clrf	7
  2691  026F  0879               	movf	??_control_transfer,w
  2692  0270  0081               	movwf	1
  2693  0271  3001               	movlw	1
  2694  0272  00F9               	movwf	??_control_transfer
  2695  0273  0879               	movf	??_control_transfer,w
  2696  0274  07C3               	addwf	control_transfer@dptr,f
  2697  0275  3001               	movlw	1
  2698  0276  00F9               	movwf	??_control_transfer
  2699  0277  0879               	movf	??_control_transfer,w
  2700  0278  07C4               	addwf	control_transfer@i,f
  2701  0279  3020               	movlw	32
  2702  027A  0244               	subwf	control_transfer@i,w
  2703  027B  1C03               	skipc
  2704  027C  2A47               	goto	l2987
  2705  027D                     l3009:	
  2706                           
  2707                           ;protocol.c: 106: }
  2708                           ;protocol.c: 107: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2709  027D  3066               	movlw	__x& (0+255)
  2710  027E  254C               	fcall	_GET_CHAR_HELPER
  2711  027F  3A00               	xorlw	0
  2712  0280  1D03               	btfss	3,2
  2713  0281  0008               	return
  2714  0282  3067               	movlw	__y& (0+255)
  2715  0283  254C               	fcall	_GET_CHAR_HELPER
  2716  0284  3A00               	xorlw	0
  2717  0285  1D03               	btfss	3,2
  2718  0286  0008               	return
  2719  0287  0020               	movlb	0	; select bank0
  2720  0288  0866               	movf	__x,w
  2721  0289  39F0               	andlw	240
  2722  028A  1D03               	btfss	3,2
  2723  028B  0008               	return
  2724  028C  0867               	movf	__y,w
  2725  028D  39F0               	andlw	240
  2726  028E  1D03               	btfss	3,2
  2727  028F  0008               	return
  2728  0290  0867               	movf	__y,w
  2729  0291  00F9               	movwf	??_control_transfer
  2730  0292  3003               	movlw	3
  2731  0293                     u3795:	
  2732  0293  35F9               	lslf	??_control_transfer,f
  2733  0294  3EFF               	addlw	-1
  2734  0295  1D03               	skipz
  2735  0296  2A93               	goto	u3795
  2736  0297  3579               	lslf	??_control_transfer,w
  2737  0298  0466               	iorwf	__x,w
  2738  0299  00FA               	movwf	??_control_transfer+1
  2739  029A  087A               	movf	??_control_transfer+1,w
  2740  029B  00E6               	movwf	__x
  2741  029C  0866               	movf	__x,w
  2742  029D  00F9               	movwf	??_control_transfer
  2743  029E  0879               	movf	??_control_transfer,w
  2744  029F  07E0               	addwf	__checksum,f
  2745  02A0  0860               	movf	__checksum,w
  2746  02A1  1D03               	skipz
  2747  02A2  0008               	return
  2748  02A3  3066               	movlw	__x& (0+255)
  2749  02A4  254C               	fcall	_GET_CHAR_HELPER
  2750  02A5  3A00               	xorlw	0
  2751  02A6  1D03               	btfss	3,2
  2752  02A7  0008               	return
  2753  02A8  0020               	movlb	0	; select bank0
  2754  02A9  0866               	movf	__x,w
  2755  02AA  3A11               	xorlw	17
  2756  02AB  1D03               	btfss	3,2
  2757  02AC  0008               	return
  2758                           
  2759                           ;protocol.c: 108: Save(page,data,16);
  2760  02AD  0846               	movf	control_transfer@page+1,w
  2761  02AE  01F2               	clrf	Save@address+1
  2762  02AF  07F2               	addwf	Save@address+1,f
  2763  02B0  0845               	movf	control_transfer@page,w
  2764  02B1  01F1               	clrf	Save@address
  2765  02B2  07F1               	addwf	Save@address,f
  2766  02B3  3020               	movlw	control_transfer@data& (0+255)
  2767  02B4  00F9               	movwf	??_control_transfer
  2768  02B5  0879               	movf	??_control_transfer,w
  2769  02B6  00F3               	movwf	Save@ptr
  2770  02B7  3010               	movlw	16
  2771  02B8  00FA               	movwf	??_control_transfer+1
  2772  02B9  087A               	movf	??_control_transfer+1,w
  2773  02BA  00F4               	movwf	Save@data_length
  2774  02BB  26FF               	fcall	_Save
  2775                           
  2776                           ;protocol.c: 109: switch(page)
  2777  02BC  2AD9               	goto	l3043
  2778  02BD                     l3037:	
  2779                           ;protocol.c: 110: {
  2780                           ;protocol.c: 111: case 0x7D0:
  2781                           
  2782                           
  2783                           ;protocol.c: 112: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2784  02BD  30D0               	movlw	208
  2785  02BE  00F1               	movwf	Load@address
  2786  02BF  3007               	movlw	7
  2787  02C0  00F2               	movwf	Load@address+1
  2788  02C1  30C0               	movlw	_config& (0+255)
  2789  02C2  00F9               	movwf	??_control_transfer
  2790  02C3  0879               	movf	??_control_transfer,w
  2791  02C4  00F3               	movwf	Load@ptr
  2792  02C5  3009               	movlw	9
  2793  02C6  00FA               	movwf	??_control_transfer+1
  2794  02C7  087A               	movf	??_control_transfer+1,w
  2795  02C8  00F4               	movwf	Load@data_length
  2796  02C9  2777               	fcall	_Load
  2797                           
  2798                           ;protocol.c: 113: break;
  2799  02CA  2AE7               	goto	l3045
  2800  02CB                     l3039:	
  2801                           ;protocol.c: 114: case 0x7E0:
  2802                           
  2803                           
  2804                           ;protocol.c: 115: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2805  02CB  30E0               	movlw	224
  2806  02CC  00F1               	movwf	Load@address
  2807  02CD  3007               	movlw	7
  2808  02CE  00F2               	movwf	Load@address+1
  2809  02CF  30A0               	movlw	_hitlist& (0+255)
  2810  02D0  00F9               	movwf	??_control_transfer
  2811  02D1  0879               	movf	??_control_transfer,w
  2812  02D2  00F3               	movwf	Load@ptr
  2813  02D3  3010               	movlw	16
  2814  02D4  00FA               	movwf	??_control_transfer+1
  2815  02D5  087A               	movf	??_control_transfer+1,w
  2816  02D6  00F4               	movwf	Load@data_length
  2817  02D7  2777               	fcall	_Load
  2818                           
  2819                           ;protocol.c: 117: }
  2820                           
  2821                           ;protocol.c: 116: break;
  2822  02D8  2AE7               	goto	l3045
  2823  02D9                     l3043:	
  2824                           
  2825                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 1, Range of values is 7 to 7
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte            4     3 (average)
  2831                           ; direct_byte           11     9 (fixed)
  2832                           ; jumptable            263     9 (fixed)
  2833                           ;	Chosen strategy is simple_byte
  2834  02D9  0020               	movlb	0	; select bank0
  2835  02DA  0846               	movf	control_transfer@page+1,w
  2836  02DB  3A07               	xorlw	7	; case 7
  2837  02DC  1903               	skipnz
  2838  02DD  2ADF               	goto	l3355
  2839  02DE  2AE7               	goto	l3045
  2840  02DF                     l3355:	
  2841                           
  2842                           ; Switch size 1, requested type "space"
  2843                           ; Number of cases is 2, Range of values is 208 to 224
  2844                           ; switch strategies available:
  2845                           ; Name         Instructions Cycles
  2846                           ; simple_byte            7     4 (average)
  2847                           ; direct_byte           43     9 (fixed)
  2848                           ; jumptable            263     9 (fixed)
  2849                           ;	Chosen strategy is simple_byte
  2850  02DF  0845               	movf	control_transfer@page,w
  2851  02E0  3AD0               	xorlw	208	; case 208
  2852  02E1  1903               	skipnz
  2853  02E2  2ABD               	goto	l3037
  2854  02E3  3A30               	xorlw	48	; case 224
  2855  02E4  1903               	skipnz
  2856  02E5  2ACB               	goto	l3039
  2857  02E6  2AE7               	goto	l3045
  2858  02E7                     l3045:	
  2859                           
  2860                           ;protocol.c: 118: SEND_SOF();
  2861  02E7  25A9               	fcall	_SEND_SOF
  2862                           
  2863                           ;protocol.c: 119: SEND_DATA_BYTE(0x00);
  2864  02E8  3000               	movlw	0
  2865  02E9  252A               	fcall	_SEND_DATA_BYTE
  2866                           
  2867                           ;protocol.c: 120: SEND_EOF();
  2868  02EA  25B5               	fcall	_SEND_EOF
  2869                           
  2870                           ;protocol.c: 121: break;
  2871  02EB  0008               	return
  2872  02EC                     l3047:	
  2873                           ;protocol.c: 122: case 0x7:
  2874                           
  2875                           
  2876                           ;protocol.c: 123: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2877  02EC  3066               	movlw	__x& (0+255)
  2878  02ED  254C               	fcall	_GET_CHAR_HELPER
  2879  02EE  3A00               	xorlw	0
  2880  02EF  1D03               	btfss	3,2
  2881  02F0  0008               	return
  2882  02F1  3067               	movlw	__y& (0+255)
  2883  02F2  254C               	fcall	_GET_CHAR_HELPER
  2884  02F3  3A00               	xorlw	0
  2885  02F4  1D03               	btfss	3,2
  2886  02F5  0008               	return
  2887  02F6  0020               	movlb	0	; select bank0
  2888  02F7  0866               	movf	__x,w
  2889  02F8  39F0               	andlw	240
  2890  02F9  1D03               	btfss	3,2
  2891  02FA  0008               	return
  2892  02FB  0867               	movf	__y,w
  2893  02FC  39F0               	andlw	240
  2894  02FD  1D03               	btfss	3,2
  2895  02FE  0008               	return
  2896  02FF  0867               	movf	__y,w
  2897  0300  00F9               	movwf	??_control_transfer
  2898  0301  3003               	movlw	3
  2899  0302                     u3875:	
  2900  0302  35F9               	lslf	??_control_transfer,f
  2901  0303  3EFF               	addlw	-1
  2902  0304  1D03               	skipz
  2903  0305  2B02               	goto	u3875
  2904  0306  3579               	lslf	??_control_transfer,w
  2905  0307  0466               	iorwf	__x,w
  2906  0308  00FA               	movwf	??_control_transfer+1
  2907  0309  087A               	movf	??_control_transfer+1,w
  2908  030A  00E6               	movwf	__x
  2909  030B  0866               	movf	__x,w
  2910  030C  00F9               	movwf	??_control_transfer
  2911  030D  0879               	movf	??_control_transfer,w
  2912  030E  07E0               	addwf	__checksum,f
  2913  030F  0860               	movf	__checksum,w
  2914  0310  1D03               	skipz
  2915  0311  0008               	return
  2916  0312  3066               	movlw	__x& (0+255)
  2917  0313  254C               	fcall	_GET_CHAR_HELPER
  2918  0314  3A00               	xorlw	0
  2919  0315  1D03               	btfss	3,2
  2920  0316  0008               	return
  2921  0317  0020               	movlb	0	; select bank0
  2922  0318  0866               	movf	__x,w
  2923  0319  3A11               	xorlw	17
  2924  031A  1D03               	btfss	3,2
  2925  031B  0008               	return
  2926                           
  2927                           ;protocol.c: 124: play_song(one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2928  031C  3046               	movlw	low (_one_up| (0+32768))
  2929  031D  00F1               	movwf	play_song@song
  2930  031E  3086               	movlw	high (_one_up| (0+32768))
  2931  031F  00F2               	movwf	play_song@song+1
  2932  0320  3006               	movlw	6
  2933  0321  00F9               	movwf	??_control_transfer
  2934  0322  0879               	movf	??_control_transfer,w
  2935  0323  00F3               	movwf	play_song@length
  2936  0324  30E8               	movlw	232
  2937  0325  00F4               	movwf	play_song@note_duration
  2938  0326  30FD               	movlw	253
  2939  0327  00F5               	movwf	play_song@note_duration+1
  2940  0328  01F6               	clrf	play_song@repeat
  2941  0329  279C               	fcall	_play_song
  2942                           
  2943                           ;protocol.c: 125: SEND_SOF();
  2944  032A  25A9               	fcall	_SEND_SOF
  2945                           
  2946                           ;protocol.c: 126: SEND_DATA_BYTE(0x00);
  2947  032B  3000               	movlw	0
  2948  032C  252A               	fcall	_SEND_DATA_BYTE
  2949                           
  2950                           ;protocol.c: 127: SEND_EOF();
  2951  032D  25B5               	fcall	_SEND_EOF
  2952                           
  2953                           ;protocol.c: 132: }
  2954                           
  2955                           ;protocol.c: 131: goto err;
  2956                           
  2957                           ;protocol.c: 130: default:
  2958                           
  2959                           ;protocol.c: 128: break;
  2960  032E  0008               	return
  2961  032F                     l3077:	
  2962  032F  0020               	movlb	0	; select bank0
  2963  0330  0840               	movf	control_transfer@cmd,w
  2964                           
  2965                           ; Switch size 1, requested type "space"
  2966                           ; Number of cases is 5, Range of values is 1 to 7
  2967                           ; switch strategies available:
  2968                           ; Name         Instructions Cycles
  2969                           ; simple_byte           16     9 (average)
  2970                           ; direct_byte           23     9 (fixed)
  2971                           ; jumptable            263     9 (fixed)
  2972                           ;	Chosen strategy is simple_byte
  2973  0331  3A01               	xorlw	1	; case 1
  2974  0332  1903               	skipnz
  2975  0333  2877               	goto	l2773
  2976  0334  3A02               	xorlw	2	; case 3
  2977  0335  1903               	skipnz
  2978  0336  28AF               	goto	l2801
  2979  0337  3A07               	xorlw	7	; case 4
  2980  0338  1903               	skipnz
  2981  0339  2942               	goto	l2865
  2982  033A  3A02               	xorlw	2	; case 6
  2983  033B  1903               	skipnz
  2984  033C  29F0               	goto	l2947
  2985  033D  3A01               	xorlw	1	; case 7
  2986  033E  1903               	skipnz
  2987  033F  2AEC               	goto	l3047
  2988  0340  2B42               	goto	l419
  2989  0341  0008               	return
  2990  0342                     l419:	
  2991                           ;protocol.c: 134: return;
  2992                           
  2993                           ;protocol.c: 133: err:
  2994                           
  2995  0342  0008               	return
  2996  0343                     __end_of_control_transfer:	
  2997                           
  2998                           	psect	text7
  2999  05A9                     __ptext7:	
  3000 ;; *************** function _SEND_SOF *****************
  3001 ;; Defined at:
  3002 ;;		line 38 in file "protocol.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;		None               void
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0, pclath, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3016 ;;      Params:         0       0       0       0
  3017 ;;      Locals:         0       0       0       0
  3018 ;;      Temps:          1       0       0       0
  3019 ;;      Totals:         1       0       0       0
  3020 ;;Total ram usage:        1 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    4
  3023 ;; This function calls:
  3024 ;;		_SEND_DATA_BYTE
  3025 ;;		_Send_Byte
  3026 ;; This function is called by:
  3027 ;;		_control_transfer
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _SEND_SOF
  3033  05A9                     _SEND_SOF:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  3037  05A9  3010               	movlw	16
  3038  05AA  27C0               	fcall	_Send_Byte
  3039  05AB  3085               	movlw	133
  3040  05AC  00F5               	movwf	??_SEND_SOF
  3041  05AD                     u4337:	
  3042  05AD  0BF5               	decfsz	??_SEND_SOF,f
  3043  05AE  2DAD               	goto	u4337
  3044  05AF  0020               	movlb	0	; select bank0
  3045  05B0  01E0               	clrf	__checksum
  3046  05B1  0021               	movlb	1	; select bank1
  3047  05B2  0840               	movf	_config^(0+128),w
  3048  05B3  252A               	fcall	_SEND_DATA_BYTE
  3049  05B4  0008               	return
  3050  05B5                     __end_of_SEND_SOF:	
  3051                           
  3052                           	psect	text8
  3053  05B5                     __ptext8:	
  3054 ;; *************** function _SEND_EOF *****************
  3055 ;; Defined at:
  3056 ;;		line 39 in file "protocol.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;		None               void
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0, pclath, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3070 ;;      Params:         0       0       0       0
  3071 ;;      Locals:         0       0       0       0
  3072 ;;      Temps:          1       0       0       0
  3073 ;;      Totals:         1       0       0       0
  3074 ;;Total ram usage:        1 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    4
  3077 ;; This function calls:
  3078 ;;		_SEND_DATA_BYTE
  3079 ;;		_Send_Byte
  3080 ;; This function is called by:
  3081 ;;		_control_transfer
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _SEND_EOF
  3087  05B5                     _SEND_EOF:	
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  3091  05B5  0020               	movlb	0	; select bank0
  3092  05B6  0860               	movf	__checksum,w
  3093  05B7  252A               	fcall	_SEND_DATA_BYTE
  3094  05B8  3011               	movlw	17
  3095  05B9  27C0               	fcall	_Send_Byte
  3096  05BA  3085               	movlw	133
  3097  05BB  00F5               	movwf	??_SEND_EOF
  3098  05BC                     u4347:	
  3099  05BC  0BF5               	decfsz	??_SEND_EOF,f
  3100  05BD  2DBC               	goto	u4347
  3101  05BE  0008               	return
  3102  05BF                     __end_of_SEND_EOF:	
  3103                           
  3104                           	psect	text9
  3105  052A                     __ptext9:	
  3106 ;; *************** function _SEND_DATA_BYTE *****************
  3107 ;; Defined at:
  3108 ;;		line 37 in file "protocol.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  b               1    wreg     unsigned char 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  b               1    4[COMMON] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0, pclath, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3122 ;;      Params:         0       0       0       0
  3123 ;;      Locals:         1       0       0       0
  3124 ;;      Temps:          2       0       0       0
  3125 ;;      Totals:         3       0       0       0
  3126 ;;Total ram usage:        3 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    3
  3129 ;; This function calls:
  3130 ;;		_Send_Byte
  3131 ;; This function is called by:
  3132 ;;		_SEND_SOF
  3133 ;;		_SEND_EOF
  3134 ;;		_control_transfer
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           
  3139                           ;psect for function _SEND_DATA_BYTE
  3140  052A                     _SEND_DATA_BYTE:	
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3144                           ;SEND_DATA_BYTE@b stored from wreg
  3145  052A  00F4               	movwf	SEND_DATA_BYTE@b
  3146  052B  0874               	movf	SEND_DATA_BYTE@b,w
  3147  052C  390F               	andlw	15
  3148  052D  00F2               	movwf	??_SEND_DATA_BYTE
  3149  052E  0872               	movf	??_SEND_DATA_BYTE,w
  3150  052F  0020               	movlb	0	; select bank0
  3151  0530  00E6               	movwf	__x
  3152  0531  0874               	movf	SEND_DATA_BYTE@b,w
  3153  0532  00F2               	movwf	??_SEND_DATA_BYTE
  3154  0533  3004               	movlw	4
  3155  0534                     u2915:	
  3156  0534  36F2               	lsrf	??_SEND_DATA_BYTE,f
  3157  0535  0B89               	decfsz	9,f
  3158  0536  2D34               	goto	u2915
  3159  0537  0872               	movf	??_SEND_DATA_BYTE,w
  3160  0538  00F3               	movwf	??_SEND_DATA_BYTE+1
  3161  0539  0873               	movf	??_SEND_DATA_BYTE+1,w
  3162  053A  00E7               	movwf	__y
  3163  053B  0866               	movf	__x,w
  3164  053C  27C0               	fcall	_Send_Byte
  3165  053D  3085               	movlw	133
  3166  053E  00F2               	movwf	??_SEND_DATA_BYTE
  3167  053F                     u4357:	
  3168  053F  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3169  0540  2D3F               	goto	u4357
  3170  0541  0020               	movlb	0	; select bank0
  3171  0542  0867               	movf	__y,w
  3172  0543  27C0               	fcall	_Send_Byte
  3173  0544  3085               	movlw	133
  3174  0545  00F2               	movwf	??_SEND_DATA_BYTE
  3175  0546                     u4367:	
  3176  0546  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3177  0547  2D46               	goto	u4367
  3178  0548  0874               	movf	SEND_DATA_BYTE@b,w
  3179  0549  0020               	movlb	0	; select bank0
  3180  054A  02E0               	subwf	__checksum,f
  3181  054B  0008               	return
  3182  054C                     __end_of_SEND_DATA_BYTE:	
  3183                           
  3184                           	psect	text10
  3185  054C                     __ptext10:	
  3186 ;; *************** function _GET_CHAR_HELPER *****************
  3187 ;; Defined at:
  3188 ;;		line 31 in file "protocol.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  val             1    wreg     PTR unsigned char 
  3191 ;;		 -> _y(1), _x(1), 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  val             1    2[COMMON] PTR unsigned char 
  3194 ;;		 -> _y(1), _x(1), 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      unsigned char 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr1l, fsr1h, status,2
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3204 ;;      Params:         0       0       0       0
  3205 ;;      Locals:         1       0       0       0
  3206 ;;      Temps:          1       0       0       0
  3207 ;;      Totals:         2       0       0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    1
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_control_transfer
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _GET_CHAR_HELPER
  3220  054C                     _GET_CHAR_HELPER:	
  3221                           
  3222                           ;incstack = 0
  3223                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3224                           ;GET_CHAR_HELPER@val stored from wreg
  3225  054C  00F2               	movwf	GET_CHAR_HELPER@val
  3226  054D  0020               	movlb	0	; select bank0
  3227  054E  01D6               	clrf	__i
  3228  054F  01D7               	clrf	__i+1
  3229  0550                     l297:	
  3230  0550  1A91               	btfsc	17,5	;volatile
  3231  0551  2D5F               	goto	l2695
  3232  0552  3001               	movlw	1
  3233  0553  07D6               	addwf	__i,f
  3234  0554  3000               	movlw	0
  3235  0555  3DD7               	addwfc	__i+1,f
  3236  0556  3075               	movlw	117
  3237  0557  0257               	subwf	__i+1,w
  3238  0558  3030               	movlw	48
  3239  0559  1903               	skipnz
  3240  055A  0256               	subwf	__i,w
  3241  055B  1C03               	skipc
  3242  055C  2D50               	goto	l297
  3243  055D  3001               	movlw	1
  3244  055E  0008               	return
  3245  055F                     l2695:	
  3246  055F  0023               	movlb	3	; select bank3
  3247  0560  0819               	movf	25,w	;volatile
  3248  0561  00F1               	movwf	??_GET_CHAR_HELPER
  3249  0562  0872               	movf	GET_CHAR_HELPER@val,w
  3250  0563  0086               	movwf	6
  3251  0564  0187               	clrf	7
  3252  0565  0871               	movf	??_GET_CHAR_HELPER,w
  3253  0566  0081               	movwf	1
  3254  0567  3000               	movlw	0
  3255  0568  0008               	return
  3256  0569                     __end_of_GET_CHAR_HELPER:	
  3257                           
  3258                           	psect	text11
  3259  0658                     __ptext11:	
  3260 ;; *************** function _add_to_hitlist *****************
  3261 ;; Defined at:
  3262 ;;		line 319 in file "user.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  gun             1    wreg     unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  gun             1    5[COMMON] unsigned char 
  3267 ;;  i               1    8[COMMON] unsigned char 
  3268 ;;  gun16           2    6[COMMON] unsigned int 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;		None               void
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3278 ;;      Params:         0       0       0       0
  3279 ;;      Locals:         4       0       0       0
  3280 ;;      Temps:          4       0       0       0
  3281 ;;      Totals:         8       0       0       0
  3282 ;;Total ram usage:        8 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    1
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_hit_by
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           
  3293                           ;psect for function _add_to_hitlist
  3294  0658                     _add_to_hitlist:	
  3295                           
  3296                           ;incstack = 0
  3297                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3298                           ;add_to_hitlist@gun stored from wreg
  3299  0658  00F5               	movwf	add_to_hitlist@gun
  3300                           
  3301                           ;user.c: 321: uint16_t gun16 = gun & 0x7F;
  3302  0659  0875               	movf	add_to_hitlist@gun,w
  3303  065A  397F               	andlw	127
  3304  065B  00F1               	movwf	??_add_to_hitlist
  3305  065C  01F2               	clrf	??_add_to_hitlist+1
  3306  065D  0871               	movf	??_add_to_hitlist,w
  3307  065E  00F6               	movwf	add_to_hitlist@gun16
  3308  065F  0872               	movf	??_add_to_hitlist+1,w
  3309  0660  00F7               	movwf	add_to_hitlist@gun16+1
  3310                           
  3311                           ;user.c: 322: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3312  0661  01F8               	clrf	add_to_hitlist@i
  3313  0662                     L2:	
  3314  0662  3010               	movlw	16
  3315  0663  0278               	subwf	add_to_hitlist@i,w
  3316  0664  1803               	btfsc	3,0
  3317  0665  0008               	return
  3318                           
  3319                           ;user.c: 323: {
  3320                           ;user.c: 324: if(!(hitlist[i] & 0x007F))
  3321  0666  3578               	lslf	add_to_hitlist@i,w
  3322  0667  3EA0               	addlw	_hitlist& (0+255)
  3323  0668  0086               	movwf	6
  3324  0669  0187               	clrf	7
  3325  066A  3F40               	moviw [0]fsr1
  3326  066B  00F1               	movwf	??_add_to_hitlist
  3327  066C  3F41               	moviw [1]fsr1
  3328  066D  00F2               	movwf	??_add_to_hitlist+1
  3329  066E  307F               	movlw	127
  3330  066F  0571               	andwf	??_add_to_hitlist,w
  3331  0670  00F3               	movwf	??_add_to_hitlist+2
  3332  0671  3000               	movlw	0
  3333  0672  0572               	andwf	??_add_to_hitlist+1,w
  3334  0673  00F4               	movwf	??_add_to_hitlist+3
  3335  0674  0874               	movf	??_add_to_hitlist+3,w
  3336  0675  0473               	iorwf	??_add_to_hitlist+2,w
  3337  0676  1D03               	skipz
  3338  0677  2E82               	goto	l3125
  3339                           
  3340                           ;user.c: 325: {
  3341                           ;user.c: 326: hitlist[i] |= gun16;
  3342  0678  3578               	lslf	add_to_hitlist@i,w
  3343  0679  3EA0               	addlw	_hitlist& (0+255)
  3344  067A  0086               	movwf	6
  3345  067B  0187               	clrf	7
  3346  067C  0876               	movf	add_to_hitlist@gun16,w
  3347  067D  0481               	iorwf	1,f
  3348  067E  3141               	addfsr 1,1
  3349  067F  0877               	movf	add_to_hitlist@gun16+1,w
  3350  0680  0481               	iorwf	1,f
  3351                           
  3352                           ;user.c: 327: return;
  3353  0681  0008               	return
  3354  0682                     l3125:	
  3355                           
  3356                           ;user.c: 328: }
  3357                           ;user.c: 329: if(!(hitlist[i] & 0x3F80))
  3358  0682  3578               	lslf	add_to_hitlist@i,w
  3359  0683  3EA0               	addlw	_hitlist& (0+255)
  3360  0684  0086               	movwf	6
  3361  0685  0187               	clrf	7
  3362  0686  3F40               	moviw [0]fsr1
  3363  0687  00F1               	movwf	??_add_to_hitlist
  3364  0688  3F41               	moviw [1]fsr1
  3365  0689  00F2               	movwf	??_add_to_hitlist+1
  3366  068A  3080               	movlw	128
  3367  068B  0571               	andwf	??_add_to_hitlist,w
  3368  068C  00F3               	movwf	??_add_to_hitlist+2
  3369  068D  303F               	movlw	63
  3370  068E  0572               	andwf	??_add_to_hitlist+1,w
  3371  068F  00F4               	movwf	??_add_to_hitlist+3
  3372  0690  0874               	movf	??_add_to_hitlist+3,w
  3373  0691  0473               	iorwf	??_add_to_hitlist+2,w
  3374  0692  1D03               	skipz
  3375  0693  2EA7               	goto	l3131
  3376                           
  3377                           ;user.c: 330: {
  3378                           ;user.c: 331: hitlist[i] |= gun16 << 7;
  3379  0694  0877               	movf	add_to_hitlist@gun16+1,w
  3380  0695  00F2               	movwf	??_add_to_hitlist+1
  3381  0696  0876               	movf	add_to_hitlist@gun16,w
  3382  0697  00F1               	movwf	??_add_to_hitlist
  3383  0698  3007               	movlw	7
  3384  0699                     u3995:	
  3385  0699  35F1               	lslf	??_add_to_hitlist,f
  3386  069A  0DF2               	rlf	??_add_to_hitlist+1,f
  3387  069B  0B89               	decfsz	9,f
  3388  069C  2E99               	goto	u3995
  3389  069D  3578               	lslf	add_to_hitlist@i,w
  3390  069E  3EA0               	addlw	_hitlist& (0+255)
  3391  069F  0086               	movwf	6
  3392  06A0  0187               	clrf	7
  3393  06A1  0871               	movf	??_add_to_hitlist,w
  3394  06A2  0481               	iorwf	1,f
  3395  06A3  3141               	addfsr 1,1
  3396  06A4  0872               	movf	??_add_to_hitlist+1,w
  3397  06A5  0481               	iorwf	1,f
  3398                           
  3399                           ;user.c: 332: return;
  3400  06A6  0008               	return
  3401  06A7                     l3131:	
  3402  06A7  3001               	movlw	1
  3403  06A8  00F1               	movwf	??_add_to_hitlist
  3404  06A9  0871               	movf	??_add_to_hitlist,w
  3405  06AA  07F8               	addwf	add_to_hitlist@i,f
  3406  06AB  2E62               	goto	L2
  3407  06AC                     __end_of_add_to_hitlist:	
  3408                           
  3409                           	psect	text12
  3410  03CB                     __ptext12:	
  3411 ;; *************** function _handle_fire *****************
  3412 ;; Defined at:
  3413 ;;		line 236 in file "user.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;  a               2    0[BANK0 ] unsigned int 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      unsigned char 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3427 ;;      Params:         0       0       0       0
  3428 ;;      Locals:         0       2       0       0
  3429 ;;      Temps:          2       0       0       0
  3430 ;;      Totals:         2       2       0       0
  3431 ;;Total ram usage:        4 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    3
  3434 ;; This function calls:
  3435 ;;		_ADC_read
  3436 ;;		_Send_Byte
  3437 ;;		_led_off
  3438 ;;		_play_song
  3439 ;;		_red_led_on
  3440 ;;		_stop_song
  3441 ;; This function is called by:
  3442 ;;		_main
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _handle_fire
  3448  03CB                     _handle_fire:	
  3449                           
  3450                           ;user.c: 237: static uint16_t timer = 0;
  3451                           ;user.c: 238: static uint16_t counter = 0;
  3452                           ;user.c: 239: uint16_t a;
  3453                           ;user.c: 241: a=ADC_read();
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3457  03CB  2569               	fcall	_ADC_read
  3458  03CC  0872               	movf	?_ADC_read+1,w
  3459  03CD  0020               	movlb	0	; select bank0
  3460  03CE  01A1               	clrf	handle_fire@a+1
  3461  03CF  07A1               	addwf	handle_fire@a+1,f
  3462  03D0  0871               	movf	?_ADC_read,w
  3463  03D1  01A0               	clrf	handle_fire@a
  3464  03D2  07A0               	addwf	handle_fire@a,f
  3465                           
  3466                           ;user.c: 242: if (a > config.fire_threshold && a < config.fire_cheating)
  3467  03D3  0821               	movf	handle_fire@a+1,w
  3468  03D4  0021               	movlb	1	; select bank1
  3469  03D5  024B               	subwf	((_config+1)^(0+128)+10),w
  3470  03D6  1D03               	skipz
  3471  03D7  2BDC               	goto	u4205
  3472  03D8  0020               	movlb	0	; select bank0
  3473  03D9  0820               	movf	handle_fire@a,w
  3474  03DA  0021               	movlb	1	; select bank1
  3475  03DB  024A               	subwf	(_config^(0+128)+10),w
  3476  03DC                     u4205:	
  3477  03DC  1803               	skipnc
  3478  03DD  2C37               	goto	l3297
  3479  03DE  084D               	movf	((_config+1)^(0+128)+12),w
  3480  03DF  0020               	movlb	0	; select bank0
  3481  03E0  0221               	subwf	handle_fire@a+1,w
  3482  03E1  1D03               	skipz
  3483  03E2  2BE7               	goto	u4215
  3484  03E3  0021               	movlb	1	; select bank1
  3485  03E4  084C               	movf	(_config^(0+128)+12),w
  3486  03E5  0020               	movlb	0	; select bank0
  3487  03E6  0220               	subwf	handle_fire@a,w
  3488  03E7                     u4215:	
  3489  03E7  1803               	skipnc
  3490  03E8  2C37               	goto	l3297
  3491                           
  3492                           ;user.c: 243: {
  3493                           ;user.c: 244: if(timer < config.fire_holdoff)
  3494  03E9  0021               	movlb	1	; select bank1
  3495  03EA  084F               	movf	((_config+1)^(0+128)+14),w
  3496  03EB  0020               	movlb	0	; select bank0
  3497  03EC  025F               	subwf	handle_fire@timer+1,w
  3498  03ED  1D03               	skipz
  3499  03EE  2BF3               	goto	u4225
  3500  03EF  0021               	movlb	1	; select bank1
  3501  03F0  084E               	movf	(_config^(0+128)+14),w
  3502  03F1  0020               	movlb	0	; select bank0
  3503  03F2  025E               	subwf	handle_fire@timer,w
  3504  03F3                     u4225:	
  3505  03F3  1803               	skipnc
  3506  03F4  2BFA               	goto	l3281
  3507                           
  3508                           ;user.c: 245: {
  3509                           ;user.c: 246: timer ++;
  3510  03F5  3001               	movlw	1
  3511  03F6  07DE               	addwf	handle_fire@timer,f
  3512  03F7  3000               	movlw	0
  3513  03F8  3DDF               	addwfc	handle_fire@timer+1,f
  3514                           
  3515                           ;user.c: 247: }
  3516  03F9  0008               	return
  3517  03FA                     l3281:	
  3518                           
  3519                           ;user.c: 248: else
  3520                           ;user.c: 249: {
  3521                           ;user.c: 250: if(!config.power || counter <= config.power)
  3522  03FA  3002               	movlw	2
  3523  03FB  3EC0               	addlw	_config& (0+255)
  3524  03FC  0086               	movwf	6
  3525  03FD  0187               	clrf	7
  3526  03FE  0016               	moviw fsr1++
  3527  03FF  0401               	iorwf	1,w
  3528  0400  1903               	skipnz
  3529  0401  2C0D               	goto	l3285
  3530  0402  085D               	movf	handle_fire@counter+1,w
  3531  0403  0021               	movlb	1	; select bank1
  3532  0404  0243               	subwf	((_config+1)^(0+128)+2),w
  3533  0405  1D03               	skipz
  3534  0406  2C0B               	goto	u4245
  3535  0407  0020               	movlb	0	; select bank0
  3536  0408  085C               	movf	handle_fire@counter,w
  3537  0409  0021               	movlb	1	; select bank1
  3538  040A  0242               	subwf	(_config^(0+128)+2),w
  3539  040B                     u4245:	
  3540  040B  1C03               	skipc
  3541  040C  2C35               	goto	l3295
  3542  040D                     l3285:	
  3543                           
  3544                           ;user.c: 251: {
  3545                           ;user.c: 252: if(!counter)
  3546  040D  0020               	movlb	0	; select bank0
  3547  040E  085D               	movf	handle_fire@counter+1,w
  3548  040F  045C               	iorwf	handle_fire@counter,w
  3549  0410  1D03               	skipz
  3550  0411  2C2C               	goto	l3291
  3551                           
  3552                           ;user.c: 253: {
  3553                           ;user.c: 254: red_led_on();
  3554  0412  25D1               	fcall	_red_led_on
  3555                           
  3556                           ;user.c: 255: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  3557  0413  3026               	movlw	low (_fire_song| (0+32768))
  3558  0414  00F1               	movwf	play_song@song
  3559  0415  3086               	movlw	high (_fire_song| (0+32768))
  3560  0416  00F2               	movwf	play_song@song+1
  3561  0417  3010               	movlw	16
  3562  0418  00F9               	movwf	??_handle_fire
  3563  0419  0879               	movf	??_handle_fire,w
  3564  041A  00F3               	movwf	play_song@length
  3565  041B  30B8               	movlw	184
  3566  041C  00F4               	movwf	play_song@note_duration
  3567  041D  300B               	movlw	11
  3568  041E  00F5               	movwf	play_song@note_duration+1
  3569  041F  3002               	movlw	2
  3570  0420  3EC0               	addlw	_config& (0+255)
  3571  0421  0086               	movwf	6
  3572  0422  0187               	clrf	7
  3573  0423  0016               	moviw fsr1++
  3574  0424  0401               	iorwf	1,w
  3575  0425  3000               	movlw	0
  3576  0426  1903               	skipnz
  3577  0427  3001               	movlw	1
  3578  0428  00FA               	movwf	??_handle_fire+1
  3579  0429  087A               	movf	??_handle_fire+1,w
  3580  042A  00F6               	movwf	play_song@repeat
  3581  042B  279C               	fcall	_play_song
  3582  042C                     l3291:	
  3583                           
  3584                           ;user.c: 256: }
  3585                           ;user.c: 257: Send_Byte(config.id);
  3586  042C  0021               	movlb	1	; select bank1
  3587  042D  0840               	movf	_config^(0+128),w
  3588  042E  27C0               	fcall	_Send_Byte
  3589                           
  3590                           ;user.c: 258: counter++;
  3591  042F  3001               	movlw	1
  3592  0430  0020               	movlb	0	; select bank0
  3593  0431  07DC               	addwf	handle_fire@counter,f
  3594  0432  3000               	movlw	0
  3595  0433  3DDD               	addwfc	handle_fire@counter+1,f
  3596                           
  3597                           ;user.c: 259: }
  3598  0434  0008               	return
  3599  0435                     l3295:	
  3600                           
  3601                           ;user.c: 260: else
  3602                           ;user.c: 261: {
  3603                           ;user.c: 262: led_off();
  3604  0435  25DD               	fcall	_led_off
  3605                           
  3606                           ;user.c: 263: }
  3607                           ;user.c: 264: }
  3608                           ;user.c: 265: }
  3609  0436  0008               	return
  3610  0437                     l3297:	
  3611                           
  3612                           ;user.c: 266: else
  3613                           ;user.c: 267: {
  3614                           ;user.c: 268: led_off();
  3615  0437  25DD               	fcall	_led_off
  3616                           
  3617                           ;user.c: 269: if(!config.power && counter) stop_song();
  3618  0438  0021               	movlb	1	; select bank1
  3619  0439  0843               	movf	((_config+1)^(0+128)+2),w
  3620  043A  0442               	iorwf	(_config^(0+128)+2),w
  3621  043B  1D03               	skipz
  3622  043C  2C43               	goto	l3305
  3623  043D  0020               	movlb	0	; select bank0
  3624  043E  085D               	movf	handle_fire@counter+1,w
  3625  043F  045C               	iorwf	handle_fire@counter,w
  3626  0440  1903               	skipnz
  3627  0441  2C43               	goto	l3305
  3628  0442  25CC               	fcall	_stop_song
  3629  0443                     l3305:	
  3630                           
  3631                           ;user.c: 270: timer = 0;
  3632  0443  0020               	movlb	0	; select bank0
  3633  0444  01DE               	clrf	handle_fire@timer
  3634  0445  01DF               	clrf	handle_fire@timer+1
  3635                           
  3636                           ;user.c: 271: counter = 0;
  3637  0446  01DC               	clrf	handle_fire@counter
  3638  0447  01DD               	clrf	handle_fire@counter+1
  3639                           
  3640                           ;user.c: 272: return 0;
  3641                           ;	Return value of _handle_fire is never used
  3642  0448  0008               	return
  3643  0449                     __end_of_handle_fire:	
  3644                           ;user.c: 273: }
  3645                           ;user.c: 274: return 1;
  3646                           ;	Return value of _handle_fire is never used
  3647                           
  3648                           
  3649                           	psect	text13
  3650  05CC                     __ptext13:	
  3651 ;; *************** function _stop_song *****************
  3652 ;; Defined at:
  3653 ;;		line 108 in file "user.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;		None               void
  3660 ;; Registers used:
  3661 ;;		status,2, status,0, pclath, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3667 ;;      Params:         0       0       0       0
  3668 ;;      Locals:         0       0       0       0
  3669 ;;      Temps:          0       0       0       0
  3670 ;;      Totals:         0       0       0       0
  3671 ;;Total ram usage:        0 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    2
  3674 ;; This function calls:
  3675 ;;		_tone_off
  3676 ;; This function is called by:
  3677 ;;		_handle_music
  3678 ;;		_handle_fire
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           
  3683                           ;psect for function _stop_song
  3684  05CC                     _stop_song:	
  3685                           
  3686                           ;user.c: 110: tone_off();
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  3690  05CC  25DA               	fcall	_tone_off
  3691                           
  3692                           ;user.c: 111: T1CONbits.TMR1ON=0;
  3693  05CD  0020               	movlb	0	; select bank0
  3694  05CE  1018               	bcf	24,0	;volatile
  3695                           
  3696                           ;user.c: 112: PIR1bits.TMR1IF=0;
  3697  05CF  1011               	bcf	17,0	;volatile
  3698  05D0  0008               	return
  3699  05D1                     __end_of_stop_song:	
  3700                           
  3701                           	psect	text14
  3702  05DA                     __ptext14:	
  3703 ;; *************** function _tone_off *****************
  3704 ;; Defined at:
  3705 ;;		line 146 in file "user.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;		None               void
  3712 ;; Registers used:
  3713 ;;		None
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3719 ;;      Params:         0       0       0       0
  3720 ;;      Locals:         0       0       0       0
  3721 ;;      Temps:          0       0       0       0
  3722 ;;      Totals:         0       0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_stop_song
  3730 ;;		_Buzz
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _tone_off
  3736  05DA                     _tone_off:	
  3737                           
  3738                           ;user.c: 148: PWM3CONbits.PWM3OE = 0;
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _tone_off: []
  3742  05DA  003B               	movlb	27	; select bank27
  3743  05DB  133B               	bcf	59,6	;volatile
  3744  05DC  0008               	return
  3745  05DD                     __end_of_tone_off:	
  3746                           
  3747                           	psect	text15
  3748  05D1                     __ptext15:	
  3749 ;; *************** function _red_led_on *****************
  3750 ;; Defined at:
  3751 ;;		line 78 in file "user.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;		None               void
  3758 ;; Registers used:
  3759 ;;		None
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3765 ;;      Params:         0       0       0       0
  3766 ;;      Locals:         0       0       0       0
  3767 ;;      Temps:          0       0       0       0
  3768 ;;      Totals:         0       0       0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    1
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_handle_fire
  3776 ;;		_super_dead_mode
  3777 ;;		_hit_by
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function _red_led_on
  3783  05D1                     _red_led_on:	
  3784                           
  3785                           ;user.c: 80: TRISAbits.TRISA5 = 0;
  3786                           
  3787                           ;incstack = 0
  3788                           ; Regs used in _red_led_on: []
  3789  05D1  0021               	movlb	1	; select bank1
  3790  05D2  128C               	bcf	12,5	;volatile
  3791                           
  3792                           ;user.c: 81: PORTAbits.RA5 = 0;
  3793  05D3  0020               	movlb	0	; select bank0
  3794  05D4  128C               	bcf	12,5	;volatile
  3795  05D5  0008               	return
  3796  05D6                     __end_of_red_led_on:	
  3797                           
  3798                           	psect	text16
  3799  079C                     __ptext16:	
  3800 ;; *************** function _play_song *****************
  3801 ;; Defined at:
  3802 ;;		line 95 in file "user.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  song            2    1[COMMON] PTR unsigned int 
  3805 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3806 ;;  length          1    3[COMMON] unsigned char 
  3807 ;;  note_duratio    2    4[COMMON] unsigned int 
  3808 ;;  repeat          1    6[COMMON] unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;		None               void
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3820 ;;      Params:         6       0       0       0
  3821 ;;      Locals:         0       0       0       0
  3822 ;;      Temps:          2       0       0       0
  3823 ;;      Totals:         8       0       0       0
  3824 ;;Total ram usage:        8 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_handle_fire
  3831 ;;		_super_dead_mode
  3832 ;;		_hit_by
  3833 ;;		_control_transfer
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _play_song
  3839  079C                     _play_song:	
  3840                           
  3841                           ;user.c: 97: cur_song=song;
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3845  079C  0872               	movf	play_song@song+1,w
  3846  079D  0020               	movlb	0	; select bank0
  3847  079E  01D9               	clrf	_cur_song+1
  3848  079F  07D9               	addwf	_cur_song+1,f
  3849  07A0  0871               	movf	play_song@song,w
  3850  07A1  01D8               	clrf	_cur_song
  3851  07A2  07D8               	addwf	_cur_song,f
  3852                           
  3853                           ;user.c: 98: cur_song_length=length;
  3854  07A3  0873               	movf	play_song@length,w
  3855  07A4  00F7               	movwf	??_play_song
  3856  07A5  0877               	movf	??_play_song,w
  3857  07A6  00E1               	movwf	_cur_song_length
  3858                           
  3859                           ;user.c: 99: cur_song_ptr=0;
  3860  07A7  01FC               	clrf	_cur_song_ptr
  3861                           
  3862                           ;user.c: 100: cur_song_repeat=repeat;
  3863  07A8  0876               	movf	play_song@repeat,w
  3864  07A9  00F7               	movwf	??_play_song
  3865  07AA  0877               	movf	??_play_song,w
  3866  07AB  00E2               	movwf	_cur_song_repeat
  3867                           
  3868                           ;user.c: 101: cur_song_duration=note_duration;
  3869  07AC  0875               	movf	play_song@note_duration+1,w
  3870  07AD  01DB               	clrf	_cur_song_duration+1
  3871  07AE  07DB               	addwf	_cur_song_duration+1,f
  3872  07AF  0874               	movf	play_song@note_duration,w
  3873  07B0  01DA               	clrf	_cur_song_duration
  3874  07B1  07DA               	addwf	_cur_song_duration,f
  3875                           
  3876                           ;user.c: 103: TMR1 = -cur_song_duration;
  3877  07B2  095A               	comf	_cur_song_duration,w
  3878  07B3  00F7               	movwf	??_play_song
  3879  07B4  095B               	comf	_cur_song_duration+1,w
  3880  07B5  00F8               	movwf	??_play_song+1
  3881  07B6  0AF7               	incf	??_play_song,f
  3882  07B7  1903               	skipnz
  3883  07B8  0AF8               	incf	??_play_song+1,f
  3884  07B9  0877               	movf	??_play_song,w
  3885  07BA  0096               	movwf	22	;volatile
  3886  07BB  0878               	movf	??_play_song+1,w
  3887  07BC  0097               	movwf	23	;volatile
  3888                           
  3889                           ;user.c: 104: PIR1bits.TMR1IF = 1;
  3890  07BD  1411               	bsf	17,0	;volatile
  3891                           
  3892                           ;user.c: 105: T1CONbits.TMR1ON = 1;
  3893  07BE  1418               	bsf	24,0	;volatile
  3894  07BF  0008               	return
  3895  07C0                     __end_of_play_song:	
  3896                           
  3897                           	psect	text17
  3898  05DD                     __ptext17:	
  3899 ;; *************** function _led_off *****************
  3900 ;; Defined at:
  3901 ;;		line 90 in file "user.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;		None               void
  3908 ;; Registers used:
  3909 ;;		None
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3915 ;;      Params:         0       0       0       0
  3916 ;;      Locals:         0       0       0       0
  3917 ;;      Temps:          0       0       0       0
  3918 ;;      Totals:         0       0       0       0
  3919 ;;Total ram usage:        0 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    1
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_handle_fire
  3926 ;;		_super_dead_mode
  3927 ;;		_hit_by
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _led_off
  3933  05DD                     _led_off:	
  3934                           
  3935                           ;user.c: 92: TRISAbits.TRISA5 = 1;
  3936                           
  3937                           ;incstack = 0
  3938                           ; Regs used in _led_off: []
  3939  05DD  0021               	movlb	1	; select bank1
  3940  05DE  168C               	bsf	12,5	;volatile
  3941  05DF  0008               	return
  3942  05E0                     __end_of_led_off:	
  3943                           
  3944                           	psect	text18
  3945  07C0                     __ptext18:	
  3946 ;; *************** function _Send_Byte *****************
  3947 ;; Defined at:
  3948 ;;		line 158 in file "user.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  data            1    wreg     unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  data            1    1[COMMON] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;		None               void
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0, pclath, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3962 ;;      Params:         0       0       0       0
  3963 ;;      Locals:         1       0       0       0
  3964 ;;      Temps:          0       0       0       0
  3965 ;;      Totals:         1       0       0       0
  3966 ;;Total ram usage:        1 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    2
  3969 ;; This function calls:
  3970 ;;		_Disable_Modulation
  3971 ;;		_Modulate_Serial
  3972 ;; This function is called by:
  3973 ;;		_handle_fire
  3974 ;;		_super_dead_mode
  3975 ;;		_SEND_DATA_BYTE
  3976 ;;		_SEND_SOF
  3977 ;;		_SEND_EOF
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _Send_Byte
  3983  07C0                     _Send_Byte:	
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3987                           ;Send_Byte@data stored from wreg
  3988  07C0  00F1               	movwf	Send_Byte@data
  3989                           
  3990                           ;user.c: 160: RCSTAbits.CREN = 0;
  3991  07C1  0023               	movlb	3	; select bank3
  3992  07C2  121D               	bcf	29,4	;volatile
  3993                           
  3994                           ;user.c: 161: Modulate_Serial();
  3995  07C3  25BF               	fcall	_Modulate_Serial
  3996                           
  3997                           ;user.c: 162: TXREG = data;
  3998  07C4  0871               	movf	Send_Byte@data,w
  3999  07C5  0023               	movlb	3	; select bank3
  4000  07C6  009A               	movwf	26	;volatile
  4001  07C7                     l175:	
  4002                           ;user.c: 163: while(!TXSTAbits.TRMT);
  4003                           
  4004  07C7  1C9E               	btfss	30,1	;volatile
  4005  07C8  2FC7               	goto	l175
  4006                           
  4007                           ;user.c: 164: Disable_Modulation();
  4008  07C9  25D6               	fcall	_Disable_Modulation
  4009                           
  4010                           ;user.c: 165: RCSTAbits.CREN = 1;
  4011  07CA  0023               	movlb	3	; select bank3
  4012  07CB  161D               	bsf	29,4	;volatile
  4013                           
  4014                           ;user.c: 166: RCREG;
  4015  07CC  0819               	movf	25,w	;volatile
  4016  07CD  0008               	return
  4017  07CE                     __end_of_Send_Byte:	
  4018                           
  4019                           	psect	text19
  4020  05BF                     __ptext19:	
  4021 ;; *************** function _Modulate_Serial *****************
  4022 ;; Defined at:
  4023 ;;		line 169 in file "user.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;		None
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;		None
  4028 ;; Return value:  Size  Location     Type
  4029 ;;		None               void
  4030 ;; Registers used:
  4031 ;;		status,2
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4037 ;;      Params:         0       0       0       0
  4038 ;;      Locals:         0       0       0       0
  4039 ;;      Temps:          0       0       0       0
  4040 ;;      Totals:         0       0       0       0
  4041 ;;Total ram usage:        0 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    1
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		_Send_Byte
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _Modulate_Serial
  4053  05BF                     _Modulate_Serial:	
  4054                           
  4055                           ;user.c: 170: DACCON0bits.DACEN = 1;
  4056                           
  4057                           ;incstack = 0
  4058                           ; Regs used in _Modulate_Serial: [status,2]
  4059  05BF  0022               	movlb	2	; select bank2
  4060  05C0  1798               	bsf	24,7	;volatile
  4061                           
  4062                           ;user.c: 171: TMR0=0;
  4063  05C1  0020               	movlb	0	; select bank0
  4064  05C2  0195               	clrf	21	;volatile
  4065                           
  4066                           ;user.c: 172: INTCONbits.TMR0IF=1;
  4067  05C3  150B               	bsf	11,2	;volatile
  4068                           
  4069                           ;user.c: 173: INTCONbits.TMR0IE=1;
  4070  05C4  168B               	bsf	11,5	;volatile
  4071  05C5  0008               	return
  4072  05C6                     __end_of_Modulate_Serial:	
  4073                           
  4074                           	psect	text20
  4075  05D6                     __ptext20:	
  4076 ;; *************** function _Disable_Modulation *****************
  4077 ;; Defined at:
  4078 ;;		line 176 in file "user.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		None
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4092 ;;      Params:         0       0       0       0
  4093 ;;      Locals:         0       0       0       0
  4094 ;;      Temps:          0       0       0       0
  4095 ;;      Totals:         0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    1
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_Send_Byte
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _Disable_Modulation
  4108  05D6                     _Disable_Modulation:	
  4109                           
  4110                           ;user.c: 177: INTCONbits.TMR0IE=0;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _Disable_Modulation: []
  4114  05D6  128B               	bcf	11,5	;volatile
  4115                           
  4116                           ;user.c: 178: DACCON0bits.DACEN=0;
  4117  05D7  0022               	movlb	2	; select bank2
  4118  05D8  1398               	bcf	24,7	;volatile
  4119  05D9  0008               	return
  4120  05DA                     __end_of_Disable_Modulation:	
  4121                           
  4122                           	psect	text21
  4123  0569                     __ptext21:	
  4124 ;; *************** function _ADC_read *****************
  4125 ;; Defined at:
  4126 ;;		line 68 in file "user.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  2    1[COMMON] unsigned int 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4140 ;;      Params:         2       0       0       0
  4141 ;;      Locals:         0       0       0       0
  4142 ;;      Temps:          2       0       0       0
  4143 ;;      Totals:         4       0       0       0
  4144 ;;Total ram usage:        4 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    1
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_handle_fire
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _ADC_read
  4156  0569                     _ADC_read:	
  4157                           
  4158                           ;user.c: 70: ADCON0bits.CHS = 3;
  4159                           
  4160                           ;incstack = 0
  4161                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4162  0569  0021               	movlb	1	; select bank1
  4163  056A  081D               	movf	29,w	;volatile
  4164  056B  3983               	andlw	-125
  4165  056C  380C               	iorlw	12
  4166  056D  009D               	movwf	29	;volatile
  4167                           
  4168                           ;user.c: 71: ADCON0bits.ADON = 1;
  4169  056E  141D               	bsf	29,0	;volatile
  4170                           
  4171                           ;user.c: 72: _delay((unsigned long)((6)*(16000000/4000000.0)));
  4172  056F  3007               	movlw	7
  4173  0570  00F3               	movwf	??_ADC_read
  4174  0571                     u4377:	
  4175  0571  0BF3               	decfsz	??_ADC_read,f
  4176  0572  2D71               	goto	u4377
  4177  0573  3200               	nop2	;nop
  4178                           
  4179                           ;user.c: 73: ADCON0bits.GO = 1;
  4180  0574  0021               	movlb	1	; select bank1
  4181  0575  149D               	bsf	29,1	;volatile
  4182  0576                     l135:	
  4183                           ;user.c: 74: while(ADCON0bits.GO){};
  4184                           
  4185  0576  189D               	btfsc	29,1	;volatile
  4186  0577  2D76               	goto	l135
  4187                           
  4188                           ;user.c: 75: return ADRES >> 6;
  4189  0578  081C               	movf	28,w	;volatile
  4190  0579  00F4               	movwf	??_ADC_read+1
  4191  057A  081B               	movf	27,w	;volatile
  4192  057B  00F3               	movwf	??_ADC_read
  4193  057C  3006               	movlw	6
  4194  057D                     u4025:	
  4195  057D  36F4               	lsrf	??_ADC_read+1,f
  4196  057E  0CF3               	rrf	??_ADC_read,f
  4197  057F  0B89               	decfsz	9,f
  4198  0580  2D7D               	goto	u4025
  4199  0581  0873               	movf	??_ADC_read,w
  4200  0582  00F1               	movwf	?_ADC_read
  4201  0583  0874               	movf	??_ADC_read+1,w
  4202  0584  00F2               	movwf	?_ADC_read+1
  4203  0585  0008               	return
  4204  0586                     __end_of_ADC_read:	
  4205                           
  4206                           	psect	text22
  4207  0507                     __ptext22:	
  4208 ;; *************** function _Setup *****************
  4209 ;; Defined at:
  4210 ;;		line 31 in file "user.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, status,2, status,0
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4224 ;;      Params:         0       0       0       0
  4225 ;;      Locals:         0       0       0       0
  4226 ;;      Temps:          1       0       0       0
  4227 ;;      Totals:         1       0       0       0
  4228 ;;Total ram usage:        1 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    1
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _Setup
  4240  0507                     _Setup:	
  4241                           
  4242                           ;user.c: 33: OSCCON = 0b01111010;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4246  0507  307A               	movlw	122
  4247  0508  0021               	movlb	1	; select bank1
  4248  0509  0099               	movwf	25	;volatile
  4249                           
  4250                           ;user.c: 35: ANSELA = 0x00;
  4251  050A  0023               	movlb	3	; select bank3
  4252  050B  018C               	clrf	12	;volatile
  4253                           
  4254                           ;user.c: 36: TRISAbits.TRISA2 = 0;
  4255  050C  0021               	movlb	1	; select bank1
  4256  050D  110C               	bcf	12,2	;volatile
  4257                           
  4258                           ;user.c: 37: TRISAbits.TRISA0 = 0;
  4259  050E  100C               	bcf	12,0	;volatile
  4260                           
  4261                           ;user.c: 40: ANSELAbits.ANSA4 = 1;
  4262  050F  0023               	movlb	3	; select bank3
  4263  0510  160C               	bsf	12,4	;volatile
  4264                           
  4265                           ;user.c: 41: ADCON1 |= 0b00110000;
  4266  0511  3030               	movlw	48
  4267  0512  00F1               	movwf	??_Setup
  4268  0513  0871               	movf	??_Setup,w
  4269  0514  0021               	movlb	1	; select bank1
  4270  0515  049E               	iorwf	30,f	;volatile
  4271                           
  4272                           ;user.c: 44: SPBRGL = 103;
  4273  0516  3067               	movlw	103
  4274  0517  0023               	movlb	3	; select bank3
  4275  0518  009B               	movwf	27	;volatile
  4276                           
  4277                           ;user.c: 45: TXSTAbits.SYNC = 0;
  4278  0519  121E               	bcf	30,4	;volatile
  4279                           
  4280                           ;user.c: 46: RCSTAbits.SPEN = 1;
  4281  051A  179D               	bsf	29,7	;volatile
  4282                           
  4283                           ;user.c: 47: BAUDCONbits.SCKP = 1;
  4284  051B  161F               	bsf	31,4	;volatile
  4285                           
  4286                           ;user.c: 48: TXSTAbits.TXEN = 1;
  4287  051C  169E               	bsf	30,5	;volatile
  4288                           
  4289                           ;user.c: 51: RCSTAbits.CREN = 1;
  4290  051D  161D               	bsf	29,4	;volatile
  4291                           
  4292                           ;user.c: 54: INTCONbits.GIE = 1;
  4293  051E  178B               	bsf	11,7	;volatile
  4294                           
  4295                           ;user.c: 57: OPTION_REGbits.TMR0CS = 0;
  4296  051F  0021               	movlb	1	; select bank1
  4297  0520  1295               	bcf	21,5	;volatile
  4298                           
  4299                           ;user.c: 60: T1CONbits.T1CKPS=3;
  4300  0521  3030               	movlw	48
  4301  0522  0020               	movlb	0	; select bank0
  4302  0523  0498               	iorwf	24,f	;volatile
  4303                           
  4304                           ;user.c: 63: T2CONbits.T2CKPS = 3;
  4305  0524  3003               	movlw	3
  4306  0525  049C               	iorwf	28,f	;volatile
  4307                           
  4308                           ;user.c: 64: T2CONbits.T2OUTPS = 15;
  4309  0526  3078               	movlw	120
  4310  0527  049C               	iorwf	28,f	;volatile
  4311                           
  4312                           ;user.c: 65: T2CONbits.TMR2ON = 1;
  4313  0528  151C               	bsf	28,2	;volatile
  4314  0529  0008               	return
  4315  052A                     __end_of_Setup:	
  4316                           
  4317                           	psect	text23
  4318  0449                     __ptext23:	
  4319 ;; *************** function _LoadFromFlash *****************
  4320 ;; Defined at:
  4321 ;;		line 28 in file "main.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;		None               void
  4328 ;; Registers used:
  4329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4335 ;;      Params:         0       0       0       0
  4336 ;;      Locals:         0       0       0       0
  4337 ;;      Temps:          2       0       0       0
  4338 ;;      Totals:         2       0       0       0
  4339 ;;Total ram usage:        2 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    2
  4342 ;; This function calls:
  4343 ;;		_Load
  4344 ;;		_Save
  4345 ;; This function is called by:
  4346 ;;		_main
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function _LoadFromFlash
  4352  0449                     _LoadFromFlash:	
  4353                           
  4354                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4358  0449  30D0               	movlw	208
  4359  044A  00F1               	movwf	Load@address
  4360  044B  3007               	movlw	7
  4361  044C  00F2               	movwf	Load@address+1
  4362  044D  30C0               	movlw	_config& (0+255)
  4363  044E  00F7               	movwf	??_LoadFromFlash
  4364  044F  0877               	movf	??_LoadFromFlash,w
  4365  0450  00F3               	movwf	Load@ptr
  4366  0451  3009               	movlw	9
  4367  0452  00F8               	movwf	??_LoadFromFlash+1
  4368  0453  0878               	movf	??_LoadFromFlash+1,w
  4369  0454  00F4               	movwf	Load@data_length
  4370  0455  2777               	fcall	_Load
  4371                           
  4372                           ;main.c: 31: if(config.id == 0x3FFF)
  4373  0456  303F               	movlw	63
  4374  0457  0021               	movlb	1	; select bank1
  4375  0458  0641               	xorwf	(_config+1)^(0+128),w
  4376  0459  1D03               	skipz
  4377  045A  2C5D               	goto	u4105
  4378  045B  30FF               	movlw	255
  4379  045C  0640               	xorwf	_config^(0+128),w
  4380  045D                     u4105:	
  4381  045D  1D03               	skipz
  4382  045E  2C9B               	goto	l3227
  4383                           
  4384                           ;main.c: 32: {
  4385                           ;main.c: 33: config.health = 16;
  4386  045F  3010               	movlw	16
  4387  0460  00C4               	movwf	(_config^(0+128)+4)
  4388  0461  3000               	movlw	0
  4389  0462  00C5               	movwf	(_config^(0+128)+5)
  4390                           
  4391                           ;main.c: 34: config.id = 0x80;
  4392  0463  3080               	movlw	128
  4393  0464  00C0               	movwf	_config^(0+128)
  4394  0465  3000               	movlw	0
  4395  0466  00C1               	movwf	(_config^(0+128)+1)
  4396                           
  4397                           ;main.c: 35: config.power = 0;
  4398  0467  01C2               	clrf	(_config^(0+128)+2)
  4399  0468  01C3               	clrf	((_config+1)^(0+128)+2)
  4400                           
  4401                           ;main.c: 36: config.respawn_delay = 100;
  4402  0469  3064               	movlw	100
  4403  046A  00C8               	movwf	(_config^(0+128)+8)
  4404  046B  3000               	movlw	0
  4405  046C  00C9               	movwf	(_config^(0+128)+9)
  4406                           
  4407                           ;main.c: 37: config.fire_threshold = 500;
  4408  046D  30F4               	movlw	244
  4409  046E  00CA               	movwf	(_config^(0+128)+10)
  4410  046F  3001               	movlw	1
  4411  0470  00CB               	movwf	(_config^(0+128)+11)
  4412                           
  4413                           ;main.c: 38: config.fire_holdoff = 8000;
  4414  0471  3040               	movlw	64
  4415  0472  00CE               	movwf	(_config^(0+128)+14)
  4416  0473  301F               	movlw	31
  4417  0474  00CF               	movwf	(_config^(0+128)+15)
  4418                           
  4419                           ;main.c: 39: config.shield = 2;
  4420  0475  3002               	movlw	2
  4421  0476  00C6               	movwf	(_config^(0+128)+6)
  4422  0477  3000               	movlw	0
  4423  0478  00C7               	movwf	(_config^(0+128)+7)
  4424                           
  4425                           ;main.c: 40: config.fire_cheating = 1000;
  4426  0479  30E8               	movlw	232
  4427  047A  00CC               	movwf	(_config^(0+128)+12)
  4428  047B  3003               	movlw	3
  4429  047C  00CD               	movwf	(_config^(0+128)+13)
  4430                           
  4431                           ;main.c: 41: config.death_period = 3000;
  4432  047D  30B8               	movlw	184
  4433  047E  00D0               	movwf	(_config^(0+128)+16)
  4434  047F  300B               	movlw	11
  4435  0480  00D1               	movwf	(_config^(0+128)+17)
  4436                           
  4437                           ;main.c: 42: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4438  0481  30D0               	movlw	208
  4439  0482  00F1               	movwf	Save@address
  4440  0483  3007               	movlw	7
  4441  0484  00F2               	movwf	Save@address+1
  4442  0485  30C0               	movlw	_config& (0+255)
  4443  0486  00F7               	movwf	??_LoadFromFlash
  4444  0487  0877               	movf	??_LoadFromFlash,w
  4445  0488  00F3               	movwf	Save@ptr
  4446  0489  3009               	movlw	9
  4447  048A  00F8               	movwf	??_LoadFromFlash+1
  4448  048B  0878               	movf	??_LoadFromFlash+1,w
  4449  048C  00F4               	movwf	Save@data_length
  4450  048D  26FF               	fcall	_Save
  4451                           
  4452                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4453  048E  30E0               	movlw	224
  4454  048F  00F1               	movwf	Save@address
  4455  0490  3007               	movlw	7
  4456  0491  00F2               	movwf	Save@address+1
  4457  0492  30A0               	movlw	_hitlist& (0+255)
  4458  0493  00F7               	movwf	??_LoadFromFlash
  4459  0494  0877               	movf	??_LoadFromFlash,w
  4460  0495  00F3               	movwf	Save@ptr
  4461  0496  3010               	movlw	16
  4462  0497  00F8               	movwf	??_LoadFromFlash+1
  4463  0498  0878               	movf	??_LoadFromFlash+1,w
  4464  0499  00F4               	movwf	Save@data_length
  4465  049A  26FF               	fcall	_Save
  4466  049B                     l3227:	
  4467                           
  4468                           ;main.c: 44: }
  4469                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4470  049B  30E0               	movlw	224
  4471  049C  00F1               	movwf	Load@address
  4472  049D  3007               	movlw	7
  4473  049E  00F2               	movwf	Load@address+1
  4474  049F  30A0               	movlw	_hitlist& (0+255)
  4475  04A0  00F7               	movwf	??_LoadFromFlash
  4476  04A1  0877               	movf	??_LoadFromFlash,w
  4477  04A2  00F3               	movwf	Load@ptr
  4478  04A3  3010               	movlw	16
  4479  04A4  00F8               	movwf	??_LoadFromFlash+1
  4480  04A5  0878               	movf	??_LoadFromFlash+1,w
  4481  04A6  00F4               	movwf	Load@data_length
  4482  04A7  2777               	fcall	_Load
  4483  04A8  0008               	return
  4484  04A9                     __end_of_LoadFromFlash:	
  4485                           
  4486                           	psect	text24
  4487  06FF                     __ptext24:	
  4488 ;; *************** function _Save *****************
  4489 ;; Defined at:
  4490 ;;		line 202 in file "user.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  address         2    1[COMMON] unsigned int 
  4493 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4494 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4495 ;;  data_length     1    4[COMMON] unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  i               1    6[COMMON] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;		None               void
  4500 ;; Registers used:
  4501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4507 ;;      Params:         4       0       0       0
  4508 ;;      Locals:         1       0       0       0
  4509 ;;      Temps:          1       0       0       0
  4510 ;;      Totals:         6       0       0       0
  4511 ;;Total ram usage:        6 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    1
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_LoadFromFlash
  4518 ;;		_hit_by
  4519 ;;		_control_transfer
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _Save
  4525  06FF                     _Save:	
  4526                           
  4527                           ;user.c: 204: INTCONbits.GIE = 0;
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4531  06FF  138B               	bcf	11,7	;volatile
  4532                           
  4533                           ;user.c: 205: PMADR = address;
  4534  0700  0872               	movf	Save@address+1,w
  4535  0701  0023               	movlb	3	; select bank3
  4536  0702  0192               	clrf	18	;volatile
  4537  0703  0792               	addwf	18,f	;volatile
  4538  0704  0871               	movf	Save@address,w
  4539  0705  0191               	clrf	17	;volatile
  4540  0706  0791               	addwf	17,f	;volatile
  4541                           
  4542                           ;user.c: 206: PMCON1bits.CFGS = 0;
  4543  0707  1315               	bcf	21,6	;volatile
  4544                           
  4545                           ;user.c: 207: PMCON1bits.FREE = 1;
  4546  0708  1615               	bsf	21,4	;volatile
  4547                           
  4548                           ;user.c: 208: PMCON1bits.WREN = 1;
  4549  0709  1515               	bsf	21,2	;volatile
  4550                           
  4551                           ;user.c: 209: PMCON2 = 0x55;
  4552  070A  3055               	movlw	85
  4553  070B  0096               	movwf	22	;volatile
  4554                           
  4555                           ;user.c: 210: PMCON2 = 0xAA;
  4556  070C  30AA               	movlw	170
  4557  070D  0096               	movwf	22	;volatile
  4558                           
  4559                           ;user.c: 211: PMCON1bits.WR = 1;
  4560  070E  1495               	bsf	21,1	;volatile
  4561                           
  4562                           ;user.c: 212: __nop();
  4563  070F  0000               	nop
  4564                           
  4565                           ;user.c: 213: __nop();
  4566  0710  0000               	nop
  4567                           
  4568                           ;user.c: 214: PMCON1bits.WREN = 0;
  4569  0711  0023               	movlb	3	; select bank3
  4570  0712  1115               	bcf	21,2	;volatile
  4571                           
  4572                           ;user.c: 216: PMADR = address;
  4573  0713  0872               	movf	Save@address+1,w
  4574  0714  0192               	clrf	18	;volatile
  4575  0715  0792               	addwf	18,f	;volatile
  4576  0716  0871               	movf	Save@address,w
  4577  0717  0191               	clrf	17	;volatile
  4578  0718  0791               	addwf	17,f	;volatile
  4579                           
  4580                           ;user.c: 217: PMCON1bits.CFGS = 0;
  4581  0719  1315               	bcf	21,6	;volatile
  4582                           
  4583                           ;user.c: 218: PMCON1bits.FREE = 0;
  4584  071A  1215               	bcf	21,4	;volatile
  4585                           
  4586                           ;user.c: 219: PMCON1bits.WREN = 1;
  4587  071B  1515               	bsf	21,2	;volatile
  4588                           
  4589                           ;user.c: 220: PMCON1bits.LWLO = 1;
  4590  071C  1695               	bsf	21,5	;volatile
  4591                           
  4592                           ;user.c: 222: for (uint8_t i=1; i<=data_length; i++){
  4593  071D  01F6               	clrf	Save@i
  4594  071E  0AF6               	incf	Save@i,f
  4595  071F                     l196:	
  4596  071F  0876               	movf	Save@i,w
  4597  0720  0274               	subwf	Save@data_length,w
  4598  0721  1C03               	btfss	3,0
  4599  0722  2F43               	goto	l199
  4600                           
  4601                           ;user.c: 223: PMDAT = *ptr++;
  4602  0723  0873               	movf	Save@ptr,w
  4603  0724  0086               	movwf	6
  4604  0725  0187               	clrf	7
  4605  0726  3F40               	moviw [0]fsr1
  4606  0727  0093               	movwf	19	;volatile
  4607  0728  3F41               	moviw [1]fsr1
  4608  0729  0094               	movwf	20	;volatile
  4609  072A  3002               	movlw	2
  4610  072B  00F5               	movwf	??_Save
  4611  072C  0875               	movf	??_Save,w
  4612  072D  07F3               	addwf	Save@ptr,f
  4613                           
  4614                           ;user.c: 224: if(i == data_length) PMCON1bits.LWLO = 0;
  4615  072E  0876               	movf	Save@i,w
  4616  072F  0674               	xorwf	Save@data_length,w
  4617  0730  1903               	btfsc	3,2
  4618  0731  1295               	bcf	21,5	;volatile
  4619                           
  4620                           ;user.c: 225: PMCON2 = 0x55;
  4621  0732  3055               	movlw	85
  4622  0733  0096               	movwf	22	;volatile
  4623                           
  4624                           ;user.c: 226: PMCON2 = 0xAA;
  4625  0734  30AA               	movlw	170
  4626  0735  0096               	movwf	22	;volatile
  4627                           
  4628                           ;user.c: 227: PMCON1bits.WR = 1;
  4629  0736  1495               	bsf	21,1	;volatile
  4630                           
  4631                           ;user.c: 228: __nop();
  4632  0737  0000               	nop
  4633                           
  4634                           ;user.c: 229: __nop();
  4635  0738  0000               	nop
  4636                           
  4637                           ;user.c: 230: PMADRL++;
  4638  0739  3001               	movlw	1
  4639  073A  00F5               	movwf	??_Save
  4640  073B  0875               	movf	??_Save,w
  4641  073C  0023               	movlb	3	; select bank3
  4642  073D  0791               	addwf	17,f	;volatile
  4643  073E  3001               	movlw	1
  4644  073F  00F5               	movwf	??_Save
  4645  0740  0875               	movf	??_Save,w
  4646  0741  07F6               	addwf	Save@i,f
  4647  0742  2F1F               	goto	l196
  4648  0743                     l199:	
  4649                           
  4650                           ;user.c: 231: }
  4651                           ;user.c: 232: PMCON1bits.WREN = 0;
  4652  0743  1115               	bcf	21,2	;volatile
  4653                           
  4654                           ;user.c: 233: INTCONbits.GIE = 1;
  4655  0744  178B               	bsf	11,7	;volatile
  4656  0745  0008               	return
  4657  0746                     __end_of_Save:	
  4658                           
  4659                           	psect	text25
  4660  0777                     __ptext25:	
  4661 ;; *************** function _Load *****************
  4662 ;; Defined at:
  4663 ;;		line 190 in file "user.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  address         2    1[COMMON] unsigned int 
  4666 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4667 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4668 ;;  data_length     1    4[COMMON] unsigned char 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  i               1    6[COMMON] unsigned char 
  4671 ;; Return value:  Size  Location     Type
  4672 ;;		None               void
  4673 ;; Registers used:
  4674 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4680 ;;      Params:         4       0       0       0
  4681 ;;      Locals:         1       0       0       0
  4682 ;;      Temps:          1       0       0       0
  4683 ;;      Totals:         6       0       0       0
  4684 ;;Total ram usage:        6 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    1
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_LoadFromFlash
  4691 ;;		_control_transfer
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           
  4696                           ;psect for function _Load
  4697  0777                     _Load:	
  4698                           
  4699                           ;user.c: 191: PMCON1bits.CFGS = 0;
  4700                           
  4701                           ;incstack = 0
  4702                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4703  0777  0023               	movlb	3	; select bank3
  4704  0778  1315               	bcf	21,6	;volatile
  4705                           
  4706                           ;user.c: 192: PMADR = address;
  4707  0779  0872               	movf	Load@address+1,w
  4708  077A  0192               	clrf	18	;volatile
  4709  077B  0792               	addwf	18,f	;volatile
  4710  077C  0871               	movf	Load@address,w
  4711  077D  0191               	clrf	17	;volatile
  4712  077E  0791               	addwf	17,f	;volatile
  4713                           
  4714                           ;user.c: 193: for (uint8_t i=0; i<data_length; i++){
  4715  077F  01F6               	clrf	Load@i
  4716  0780                     l2603:	
  4717  0780  0874               	movf	Load@data_length,w
  4718  0781  0276               	subwf	Load@i,w
  4719  0782  1803               	btfsc	3,0
  4720  0783  0008               	return
  4721                           
  4722                           ;user.c: 194: PMCON1bits.RD = 1;
  4723  0784  1415               	bsf	21,0	;volatile
  4724                           
  4725                           ;user.c: 195: __nop();
  4726  0785  0000               	nop
  4727                           
  4728                           ;user.c: 196: __nop();
  4729  0786  0000               	nop
  4730                           
  4731                           ;user.c: 197: *ptr++ = PMDAT;
  4732  0787  0873               	movf	Load@ptr,w
  4733  0788  0086               	movwf	6
  4734  0789  0187               	clrf	7
  4735  078A  0023               	movlb	3	; select bank3
  4736  078B  0813               	movf	19,w	;volatile
  4737  078C  3FC0               	movwi [0]fsr1
  4738  078D  0814               	movf	20,w	;volatile
  4739  078E  3FC1               	movwi [1]fsr1
  4740  078F  3002               	movlw	2
  4741  0790  00F5               	movwf	??_Load
  4742  0791  0875               	movf	??_Load,w
  4743  0792  07F3               	addwf	Load@ptr,f
  4744                           
  4745                           ;user.c: 198: PMADR ++;
  4746  0793  3001               	movlw	1
  4747  0794  0791               	addwf	17,f	;volatile
  4748  0795  3000               	movlw	0
  4749  0796  3D92               	addwfc	18,f	;volatile
  4750  0797  3001               	movlw	1
  4751  0798  00F5               	movwf	??_Load
  4752  0799  0875               	movf	??_Load,w
  4753  079A  07F6               	addwf	Load@i,f
  4754  079B  2F80               	goto	l2603
  4755  079C                     __end_of_Load:	
  4756                           
  4757                           	psect	intentry
  4758  0004                     __pintentry:	
  4759 ;; *************** function _High_Priority_Interrupt *****************
  4760 ;; Defined at:
  4761 ;;		line 295 in file "user.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;		None               void
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4775 ;;      Params:         0       0       0       0
  4776 ;;      Locals:         0       0       0       0
  4777 ;;      Temps:          1       0       0       0
  4778 ;;      Totals:         1       0       0       0
  4779 ;;Total ram usage:        1 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		Interrupt level 1
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788  0004                     _High_Priority_Interrupt:	
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4792  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4793  0005  3180               	pagesel	$
  4794  0006  0020               	movlb	0	; select bank0
  4795  0007  087F               	movf	127,w
  4796  0008  00F0               	movwf	??_High_Priority_Interrupt
  4797                           
  4798                           ;user.c: 296: if(INTCONbits.TMR0IF)
  4799  0009  1D0B               	btfss	11,2	;volatile
  4800  000A  2813               	goto	i1l224
  4801  000B  0022               	banksel	280	;# 
  4802  000C  0818               	movf	24,w	;# 
  4803  000D  3A20               	xorlw	32	;# 
  4804  000E  0098               	movwf	24	;# 
  4805                           
  4806                           ;user.c: 303: TMR0 -= 50;
  4807  000F  3032               	movlw	50
  4808  0010  0020               	movlb	0	; select bank0
  4809  0011  0295               	subwf	21,f	;volatile
  4810                           
  4811                           ;user.c: 304: INTCONbits.TMR0IF = 0;
  4812  0012  110B               	bcf	11,2	;volatile
  4813  0013                     i1l224:	
  4814  0013  0870               	movf	??_High_Priority_Interrupt,w
  4815  0014  00FF               	movwf	127
  4816  0015  107E               	bcf	126,0	;clear compiler interrupt flag
  4817  0016  0009               	retfie
  4818  0017                     __end_of_High_Priority_Interrupt:	
  4819  007E                     btemp	set	126	;btemp
  4820  007E                     pic14e$flags	set	126
  4821  007E                     wtemp	set	126
  4822  007E                     wtemp0	set	126
  4823  0080                     wtemp1	set	128
  4824  0082                     wtemp2	set	130
  4825  0084                     wtemp3	set	132
  4826  0086                     wtemp4	set	134
  4827  0088                     wtemp5	set	136
  4828  007F                     wtemp6	set	127
  4829  007E                     ttemp	set	126
  4830  007E                     ttemp0	set	126
  4831  0081                     ttemp1	set	129
  4832  0084                     ttemp2	set	132
  4833  0087                     ttemp3	set	135
  4834  007F                     ttemp4	set	127
  4835  007E                     ltemp	set	126
  4836  007E                     ltemp0	set	126
  4837  0082                     ltemp1	set	130
  4838  0086                     ltemp2	set	134
  4839  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     54      72
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _main->_handle_serial
    _handle_serial->_control_transfer
    _super_dead_mode->_control_transfer
    _handle_music->_tone
    _control_transfer->_play_song
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_play_song
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28908
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   17292
                                             11 COMMON     1     1      0
                                             52 BANK0      2     2      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   10935
                                             45 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0    7660
                                             40 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    6168
                                              9 COMMON     2     2      0
                                              0 BANK0     40    40      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     124
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0    1021
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     288
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    1260
                                              9 COMMON     2     2      0
                                              0 BANK0      2     2      0
                           _ADC_read
                          _Send_Byte
                            _led_off
                          _play_song
                         _red_led_on
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (4) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6    1164
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _led_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            1     1      0      31
                                              1 COMMON     1     1      0
                 _Disable_Modulation
                    _Modulate_Serial
 ---------------------------------------------------------------------------------
 (5) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    2504
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4    1108
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
   _handle_fire
     _ADC_read
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
     _led_off
     _play_song
     _red_led_on
     _stop_song
       _tone_off
   _handle_music
     _stop_song
       _tone_off
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _handle_music
         _stop_song
           _tone_off
         _tone
       _led_off
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _Save
           _play_song
         _handle_music
           _stop_song
             _tone_off
           _tone
         _led_off
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _Save
       _play_song
     _handle_music
       _stop_song
         _tone_off
       _tone
     _led_off
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      87       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      87      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Aug 20 01:51:55 2014

                     __CFG_CP$OFF 0000                                l26 05A5                                __i 0056  
                              __x 0066                                __y 0067                     _LoadFromFlash 0449  
                             l135 0576                               l175 07C7                               l419 0342  
                             l196 071F                               l199 0743                               l297 0550  
                    __CFG_BORV$LO 0000                               wreg 0009                   _super_dead_mode 04A9  
                    __CFG_LVP$OFF 0000                              l3111 04AC                       Load@address 0071  
                            l3009 027D                              l3201 0389                              l3131 06A7  
                            l3043 02D9                              l3107 04F3                              l3125 0682  
                            l3045 02E7                              l3037 02BD                              l3047 02EC  
                            l3039 02CB                              l3305 0443                              l2603 0780  
                            l3227 049B                              l3163 037F                              l3077 032F  
                            l3093 04C3                              l3237 06BB                              l3183 03AC  
                            l3175 0398                              l3281 03FA                              l2801 00AF  
                            l3291 042C                              l3355 02DF                              l2723 0752  
                            l3187 03B4                              l3285 040D                              l3295 0435  
                            l2727 0754                              l3297 0437                              l2773 0077  
                            l2695 055F                              l2945 01EE                              l2937 01DC  
                            l2865 0142                              l2947 01F0                              l2987 0247  
                            u3105 0069                              u3045 0040                              u4105 045D  
                            u4025 057D                              u3235 00C5                              u3155 008D  
                            u4205 03DC                              u4215 03E7                              u3335 010B  
                            u4225 03F3                              u3425 0158                              u4145 06CD  
                            u4307 039E                              u4245 040B                              u3525 01A6  
                            u3285 00E8                              u4317 03C0                              u4327 04CC  
                            u4337 05AD                              u3625 0206                              u2915 0534  
                            u4347 05BC                              u3475 017F                              u4195 06F3  
                            u4357 053F                              u4367 0546                              u3735 025D  
                            u4377 0571                              u3675 022D                              u3935 04DB  
                            u3945 0503                              u3875 0302                              u3795 0293  
                            u3995 0699              control_transfer@data 0020                              _TMR0 0015  
                            _TMR1 0016                              _TMR2 001A              control_transfer@page 0045  
            control_transfer@dptr 0043                              _Load 0777                      __CFG_WRT$OFF 0000  
                            _Save 06FF                              _main 059D                     Send_Byte@data 0071  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              _tone 0586                              indf1 0001  
                            fsr1l 0006                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E                              start 0017                              ttemp 007E  
                            wtemp 007E                  __end_of_ADC_read 0586                 ??_GET_CHAR_HELPER 0071  
                   __CFG_MCLRE$ON 0000               hit_by@respawn_timer 0050                    ?_LoadFromFlash 0070  
                           ?_Load 0071                             ?_Save 0071                             ?_main 0070  
                           _ADRES 009B                     __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0013  
                           ?_tone 0071                             i1l224 0013                             _PMADR 0191  
                           _PMDAT 0193                             _RCREG 0199                  __end_of_SEND_EOF 05BF  
                __end_of_SEND_SOF 05B5                             Load@i 0076                             _TXREG 019A  
                           Save@i 0076                       hit_by@i_790 0053                             _Setup 0507  
                 __end_of_led_off 05E0                   add_to_hitlist@i 0078                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F          __end_of_control_transfer 0343                   __initialization 0018  
                    __end_of_Load 079C                      __end_of_Save 0746                      __end_of_main 05A9  
                    __end_of_tone 059D                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 0507                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 0777                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070              __size_of_handle_fire 007E                            _ADCON1 009E  
                          _ANSELA 018C                            _PMADRL 0191                            _PMCON2 0196  
                          _OSCCON 0099                            _PWM3DC 0DB3                            _PWM3PH 0DB1  
                          _SPBRGL 019B                            _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000  
                 ??_LoadFromFlash 0077                __size_of_Send_Byte 000E                    __CFG_STVREN$ON 0000  
                ??_SEND_DATA_BYTE 0072                            _config 00C0                            _hit_by 0343  
                 play_song@length 0073                            _one_up 0646                   play_song@repeat 0076  
                       ??_led_off 0071        __end_of_Disable_Modulation 05DA                       Save@address 0071  
                _my_random_number 0063                         ?_ADC_read 0071                  __end_of_tone_off 05DD  
        __size_of_Modulate_Serial 0007           __end_of__initialization 0025           handle_serial@rx_counter 0064  
                       ?_SEND_EOF 0070                         ?_SEND_SOF 0070                    __pcstackCOMMON 0070  
                   __end_of_Setup 052A           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004A                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0071                   _GET_CHAR_HELPER 054C                 __end_of_Send_Byte 07CE  
         __size_of_add_to_hitlist 0054                        __pbssBANK0 0056                        __pbssBANK1 00A0  
           __end_of_handle_serial 06FF                        _death_song 0600                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 059D                 _cur_song_duration 005A  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0658                           Load@ptr 0073  
              __size_of_stop_song 0005                 ??_Modulate_Serial 0071                           Save@ptr 0073  
                    _handle_music 0746                 ?_control_transfer 0070                ??_control_transfer 0079  
                 SEND_DATA_BYTE@b 0074         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0646  
                       ?_tone_off 0070                   __size_of_hit_by 0088                           __ptext1 06AC  
                         __ptext2 0343                           __ptext3 04A9                           __ptext4 0746  
                         __ptext5 0586                           __ptext6 0028                           __ptext7 05A9  
                         __ptext8 05B5                           __ptext9 052A                           _led_off 05DD  
                      _red_led_on 05D1                         _T1CONbits 0018           __end_of_GET_CHAR_HELPER 0569  
                         _hitlist 00A0                         _T2CONbits 001C                           clrloop0 05C7  
               add_to_hitlist@gun 0075              end_of_initialization 0025                           hit_by@i 0052  
               __end_of_play_song 07C0                         _RCSTAbits 019D                        ??_tone_off 0071  
                    __pstringtext 0600                         _PORTAbits 000C                 __end_of_stop_song 05D1  
                   ??_handle_fire 0079                  __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C  
                     _DACCON0bits 0118                    _add_to_hitlist 0658                 __size_of_ADC_read 001D  
              _Disable_Modulation 05D6                         _TXSTAbits 019E               control_transfer@cmd 0040  
             ?_Disable_Modulation 0070                handle_fire@counter 005C                 __size_of_SEND_EOF 000A  
               __size_of_SEND_SOF 000C             __end_of_LoadFromFlash 04A9                       _BAUDCONbits 019F  
                  __end_of_hit_by 03CB                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0652                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             start_initialization 0018              ??_Disable_Modulation 0071            __end_of_add_to_hitlist 06AC  
             __end_of_handle_fire 0449                         _Send_Byte 07C0                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 007C                          ??_hit_by 004D  
                     __pbssCOMMON 007C                         ___latbits 0000                   _Modulate_Serial 05BF  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 0022  
                       __checksum 0060                  handle_fire@timer 005E          __size_of_super_dead_mode 005E  
                 Save@data_length 0074                         _dead_song 0652                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 007B                 __size_of_tone_off 0003  
                       _fire_song 0626            __size_of_handle_serial 0053                          ?_led_off 0070  
       __size_of_control_transfer 031B                       _handle_fire 03CB                          _ADC_read 0569  
                  __size_of_Setup 0023                         clear_ram0 05C6                          _PIE1bits 0091  
                 Load@data_length 0074                         _play_song 079C                          _PIR1bits 0011  
                        _SEND_EOF 05B5                          _SEND_SOF 05A9           __end_of_Modulate_Serial 05C6  
                      _ADCON0bits 009D                __end_of_death_song 0626                control_transfer@id 0042  
                      tone@period 0071               add_to_hitlist@gun16 0076                         _stop_song 05CC  
                       hit_by@who 004F            super_dead_mode@counter 004B                       ??_Send_Byte 0071  
                   _handle_serial 06AC                 ??_super_dead_mode 0048          ?_High_Priority_Interrupt 0070  
                      ?_play_song 0071                      ??_red_led_on 0071                        _ANSELAbits 018C  
                __size_of_led_off 0003                    _SEND_DATA_BYTE 052A                        ?_stop_song 0070  
                 _cur_song_length 0061     control_transfer@random_number 0041                          __ptext10 054C  
                        __ptext11 0658                          __ptext20 05D6                          __ptext12 03CB  
                        __ptext21 0569                          __ptext13 05CC                          __ptext22 0507  
                        __ptext14 05DA                          __ptext23 0449                          __ptext15 05D1  
                        __ptext24 06FF                          __ptext16 079C                          __ptext25 0777  
                        __ptext17 05DD                          __ptext18 07C0                          __ptext19 05BF  
                 _cur_song_repeat 0062                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 0058                     __size_of_Save 0047                     __size_of_main 000C  
                   __size_of_tone 0017                __end_of_red_led_on 05D6                          _tone_off 05DA  
               control_transfer@i 0044                 control_transfer@x 0047            play_song@note_duration 0074  
                ?_Modulate_Serial 0070                  ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 054C  
                _control_transfer 0028                        _INTCONbits 000B       __size_of_Disable_Modulation 0004  
                     _PWM3CONbits 0DBB                       pic14e$flags 007E                          intlevel1 0000  
        __size_of_GET_CHAR_HELPER 001D   __end_of_High_Priority_Interrupt 0017                      handle_fire@a 0020  
          __size_of_LoadFromFlash 0060                        _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000  
                   ?_handle_music 0070                       ??_play_song 0077                   ?_SEND_DATA_BYTE 0070  
                    ?_handle_fire 0070                       ??_stop_song 0071                   ??_handle_serial 0054  
              handle_serial@rx_id 0065                    ??_handle_music 0075  
