

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Aug 21 00:25:09 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  008C                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0095                     	;# 
    71  0096                     	;# 
    72  0097                     	;# 
    73  0098                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009B                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  010C                     	;# 
    83  0111                     	;# 
    84  0112                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0117                     	;# 
    88  0118                     	;# 
    89  0119                     	;# 
    90  011D                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0194                     	;# 
    99  0195                     	;# 
   100  0196                     	;# 
   101  0197                     	;# 
   102  0199                     	;# 
   103  019A                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019C                     	;# 
   107  019D                     	;# 
   108  019E                     	;# 
   109  019F                     	;# 
   110  020C                     	;# 
   111  028C                     	;# 
   112  030C                     	;# 
   113  038C                     	;# 
   114  0391                     	;# 
   115  0392                     	;# 
   116  0393                     	;# 
   117  0691                     	;# 
   118  0692                     	;# 
   119  0693                     	;# 
   120  0694                     	;# 
   121  0695                     	;# 
   122  0D8E                     	;# 
   123  0D8F                     	;# 
   124  0D90                     	;# 
   125  0D91                     	;# 
   126  0D91                     	;# 
   127  0D92                     	;# 
   128  0D93                     	;# 
   129  0D93                     	;# 
   130  0D94                     	;# 
   131  0D95                     	;# 
   132  0D95                     	;# 
   133  0D96                     	;# 
   134  0D97                     	;# 
   135  0D97                     	;# 
   136  0D98                     	;# 
   137  0D99                     	;# 
   138  0D99                     	;# 
   139  0D9A                     	;# 
   140  0D9B                     	;# 
   141  0D9C                     	;# 
   142  0D9C                     	;# 
   143  0D9D                     	;# 
   144  0D9D                     	;# 
   145  0D9E                     	;# 
   146  0D9F                     	;# 
   147  0DA0                     	;# 
   148  0DA1                     	;# 
   149  0DA1                     	;# 
   150  0DA2                     	;# 
   151  0DA3                     	;# 
   152  0DA3                     	;# 
   153  0DA4                     	;# 
   154  0DA5                     	;# 
   155  0DA5                     	;# 
   156  0DA6                     	;# 
   157  0DA7                     	;# 
   158  0DA7                     	;# 
   159  0DA8                     	;# 
   160  0DA9                     	;# 
   161  0DA9                     	;# 
   162  0DAA                     	;# 
   163  0DAB                     	;# 
   164  0DAC                     	;# 
   165  0DAC                     	;# 
   166  0DAD                     	;# 
   167  0DAD                     	;# 
   168  0DAE                     	;# 
   169  0DAF                     	;# 
   170  0DB0                     	;# 
   171  0DB1                     	;# 
   172  0DB1                     	;# 
   173  0DB2                     	;# 
   174  0DB3                     	;# 
   175  0DB3                     	;# 
   176  0DB4                     	;# 
   177  0DB5                     	;# 
   178  0DB5                     	;# 
   179  0DB6                     	;# 
   180  0DB7                     	;# 
   181  0DB7                     	;# 
   182  0DB8                     	;# 
   183  0DB9                     	;# 
   184  0DB9                     	;# 
   185  0DBA                     	;# 
   186  0DBB                     	;# 
   187  0DBC                     	;# 
   188  0DBC                     	;# 
   189  0DBD                     	;# 
   190  0DBD                     	;# 
   191  0DBE                     	;# 
   192  0DBF                     	;# 
   193  0DC0                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE8                     	;# 
   200  0FE9                     	;# 
   201  0FEA                     	;# 
   202  0FEA                     	;# 
   203  0FEB                     	;# 
   204  0FED                     	;# 
   205  0FEE                     	;# 
   206  0FEE                     	;# 
   207  0FEF                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0013                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  008C                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009B                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  009F                     	;# 
   249  010C                     	;# 
   250  0111                     	;# 
   251  0112                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  0197                     	;# 
   269  0199                     	;# 
   270  019A                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020C                     	;# 
   278  028C                     	;# 
   279  030C                     	;# 
   280  038C                     	;# 
   281  0391                     	;# 
   282  0392                     	;# 
   283  0393                     	;# 
   284  0691                     	;# 
   285  0692                     	;# 
   286  0693                     	;# 
   287  0694                     	;# 
   288  0695                     	;# 
   289  0D8E                     	;# 
   290  0D8F                     	;# 
   291  0D90                     	;# 
   292  0D91                     	;# 
   293  0D91                     	;# 
   294  0D92                     	;# 
   295  0D93                     	;# 
   296  0D93                     	;# 
   297  0D94                     	;# 
   298  0D95                     	;# 
   299  0D95                     	;# 
   300  0D96                     	;# 
   301  0D97                     	;# 
   302  0D97                     	;# 
   303  0D98                     	;# 
   304  0D99                     	;# 
   305  0D99                     	;# 
   306  0D9A                     	;# 
   307  0D9B                     	;# 
   308  0D9C                     	;# 
   309  0D9C                     	;# 
   310  0D9D                     	;# 
   311  0D9D                     	;# 
   312  0D9E                     	;# 
   313  0D9F                     	;# 
   314  0DA0                     	;# 
   315  0DA1                     	;# 
   316  0DA1                     	;# 
   317  0DA2                     	;# 
   318  0DA3                     	;# 
   319  0DA3                     	;# 
   320  0DA4                     	;# 
   321  0DA5                     	;# 
   322  0DA5                     	;# 
   323  0DA6                     	;# 
   324  0DA7                     	;# 
   325  0DA7                     	;# 
   326  0DA8                     	;# 
   327  0DA9                     	;# 
   328  0DA9                     	;# 
   329  0DAA                     	;# 
   330  0DAB                     	;# 
   331  0DAC                     	;# 
   332  0DAC                     	;# 
   333  0DAD                     	;# 
   334  0DAD                     	;# 
   335  0DAE                     	;# 
   336  0DAF                     	;# 
   337  0DB0                     	;# 
   338  0DB1                     	;# 
   339  0DB1                     	;# 
   340  0DB2                     	;# 
   341  0DB3                     	;# 
   342  0DB3                     	;# 
   343  0DB4                     	;# 
   344  0DB5                     	;# 
   345  0DB5                     	;# 
   346  0DB6                     	;# 
   347  0DB7                     	;# 
   348  0DB7                     	;# 
   349  0DB8                     	;# 
   350  0DB9                     	;# 
   351  0DB9                     	;# 
   352  0DBA                     	;# 
   353  0DBB                     	;# 
   354  0DBC                     	;# 
   355  0DBC                     	;# 
   356  0DBD                     	;# 
   357  0DBD                     	;# 
   358  0DBE                     	;# 
   359  0DBF                     	;# 
   360  0DC0                     	;# 
   361  0FE4                     	;# 
   362  0FE5                     	;# 
   363  0FE6                     	;# 
   364  0FE7                     	;# 
   365  0FE8                     	;# 
   366  0FE8                     	;# 
   367  0FE9                     	;# 
   368  0FEA                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  008C                     	;# 
   401  0091                     	;# 
   402  0092                     	;# 
   403  0093                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009B                     	;# 
   412  009C                     	;# 
   413  009D                     	;# 
   414  009E                     	;# 
   415  009F                     	;# 
   416  010C                     	;# 
   417  0111                     	;# 
   418  0112                     	;# 
   419  0115                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  0118                     	;# 
   423  0119                     	;# 
   424  011D                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019D                     	;# 
   442  019E                     	;# 
   443  019F                     	;# 
   444  020C                     	;# 
   445  028C                     	;# 
   446  030C                     	;# 
   447  038C                     	;# 
   448  0391                     	;# 
   449  0392                     	;# 
   450  0393                     	;# 
   451  0691                     	;# 
   452  0692                     	;# 
   453  0693                     	;# 
   454  0694                     	;# 
   455  0695                     	;# 
   456  0D8E                     	;# 
   457  0D8F                     	;# 
   458  0D90                     	;# 
   459  0D91                     	;# 
   460  0D91                     	;# 
   461  0D92                     	;# 
   462  0D93                     	;# 
   463  0D93                     	;# 
   464  0D94                     	;# 
   465  0D95                     	;# 
   466  0D95                     	;# 
   467  0D96                     	;# 
   468  0D97                     	;# 
   469  0D97                     	;# 
   470  0D98                     	;# 
   471  0D99                     	;# 
   472  0D99                     	;# 
   473  0D9A                     	;# 
   474  0D9B                     	;# 
   475  0D9C                     	;# 
   476  0D9C                     	;# 
   477  0D9D                     	;# 
   478  0D9D                     	;# 
   479  0D9E                     	;# 
   480  0D9F                     	;# 
   481  0DA0                     	;# 
   482  0DA1                     	;# 
   483  0DA1                     	;# 
   484  0DA2                     	;# 
   485  0DA3                     	;# 
   486  0DA3                     	;# 
   487  0DA4                     	;# 
   488  0DA5                     	;# 
   489  0DA5                     	;# 
   490  0DA6                     	;# 
   491  0DA7                     	;# 
   492  0DA7                     	;# 
   493  0DA8                     	;# 
   494  0DA9                     	;# 
   495  0DA9                     	;# 
   496  0DAA                     	;# 
   497  0DAB                     	;# 
   498  0DAC                     	;# 
   499  0DAC                     	;# 
   500  0DAD                     	;# 
   501  0DAD                     	;# 
   502  0DAE                     	;# 
   503  0DAF                     	;# 
   504  0DB0                     	;# 
   505  0DB1                     	;# 
   506  0DB1                     	;# 
   507  0DB2                     	;# 
   508  0DB3                     	;# 
   509  0DB3                     	;# 
   510  0DB4                     	;# 
   511  0DB5                     	;# 
   512  0DB5                     	;# 
   513  0DB6                     	;# 
   514  0DB7                     	;# 
   515  0DB7                     	;# 
   516  0DB8                     	;# 
   517  0DB9                     	;# 
   518  0DB9                     	;# 
   519  0DBA                     	;# 
   520  0DBB                     	;# 
   521  0DBC                     	;# 
   522  0DBC                     	;# 
   523  0DBD                     	;# 
   524  0DBD                     	;# 
   525  0DBE                     	;# 
   526  0DBF                     	;# 
   527  0DC0                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEE                     	;# 
   541  0FEF                     	;# 
   542                           
   543                           	psect	stringtext
   544  0700                     __pstringtext:	
   545  0700                     _fire_song:	
   546  0700  34A0               	retlw	160
   547  0701  340F               	retlw	15
   548  0702  34DB               	retlw	219
   549  0703  3411               	retlw	17
   550  0704  34D5               	retlw	213
   551  0705  3414               	retlw	20
   552  0706  3400               	retlw	0
   553  0707  3419               	retlw	25
   554  0708  3440               	retlw	64
   555  0709  341F               	retlw	31
   556  070A  34AA               	retlw	170
   557  070B  3429               	retlw	41
   558  070C  3480               	retlw	128
   559  070D  343E               	retlw	62
   560  070E  3400               	retlw	0
   561  070F  347D               	retlw	125
   562  0710  34E3               	retlw	227
   563  0711  348A               	retlw	138
   564  0712  3440               	retlw	64
   565  0713  349C               	retlw	156
   566  0714  3492               	retlw	146
   567  0715  34B2               	retlw	178
   568  0716  3455               	retlw	85
   569  0717  34D0               	retlw	208
   570  0718  3400               	retlw	0
   571  0719  34FA               	retlw	250
   572  071A  3400               	retlw	0
   573  071B  3400               	retlw	0
   574  071C  3400               	retlw	0
   575  071D  3400               	retlw	0
   576  071E  3400               	retlw	0
   577  071F  3400               	retlw	0
   578  0720                     __end_of_fire_song:	
   579  0720                     _one_up:	
   580  0720  34CC               	retlw	204
   581  0721  345E               	retlw	94
   582  0722  34B8               	retlw	184
   583  0723  344F               	retlw	79
   584  0724  3467               	retlw	103
   585  0725  342F               	retlw	47
   586  0726  34B9               	retlw	185
   587  0727  343B               	retlw	59
   588  0728  3434               	retlw	52
   589  0729  3435               	retlw	53
   590  072A  34DC               	retlw	220
   591  072B  3427               	retlw	39
   592  072C                     __end_of_one_up:	
   593  072C                     _dead_song:	
   594  072C  3470               	retlw	112
   595  072D  349F               	retlw	159
   596  072E  34EA               	retlw	234
   597  072F  34EE               	retlw	238
   598  0730  34EA               	retlw	234
   599  0731  34EE               	retlw	238
   600  0732                     __end_of_dead_song:	
   601  0732                     _death_song:	
   602  0732  3462               	retlw	98
   603  0733  34F0               	retlw	240
   604  0734                     __end_of_death_song:	
   605  0016                     _TMR1	set	22
   606  000B                     _INTCONbits	set	11
   607  0011                     _PIR1bits	set	17
   608  000C                     _PORTAbits	set	12
   609  0018                     _T1CONbits	set	24
   610  001C                     _T2CONbits	set	28
   611  0015                     _TMR0	set	21
   612  001A                     _TMR2	set	26
   613  009B                     _ADRES	set	155
   614  009D                     _ADCON0bits	set	157
   615  009E                     _ADCON1	set	158
   616  0095                     _OPTION_REGbits	set	149
   617  0099                     _OSCCON	set	153
   618  0091                     _PIE1bits	set	145
   619  008C                     _TRISAbits	set	140
   620  0118                     _DACCON0bits	set	280
   621  0191                     _PMADR	set	401
   622  0193                     _PMDAT	set	403
   623  018C                     _ANSELA	set	396
   624  018C                     _ANSELAbits	set	396
   625  019F                     _BAUDCONbits	set	415
   626  0191                     _PMADRL	set	401
   627  0195                     _PMCON1bits	set	405
   628  0196                     _PMCON2	set	406
   629  0199                     _RCREG	set	409
   630  019D                     _RCSTAbits	set	413
   631  019B                     _SPBRGL	set	411
   632  019A                     _TXREG	set	410
   633  019E                     _TXSTAbits	set	414
   634  0DB3                     _PWM3DC	set	3507
   635  0DB1                     _PWM3PH	set	3505
   636  0DB5                     _PWM3PR	set	3509
   637  0DBB                     _PWM3CONbits	set	3515
   638  0DBF                     _PWM3LDCONbits	set	3519
   639                           
   640                           ; #config settings
   641  0000                     
   642                           	psect	cinit
   643  0018                     start_initialization:	
   644  0018                     __initialization:	
   645                           
   646                           ; Clear objects allocated to COMMON
   647  0018  01FC               	clrf	__pbssCOMMON& (0+127)
   648                           
   649                           ; Clear objects allocated to BANK0
   650  0019  305E               	movlw	low __pbssBANK0
   651  001A  0084               	movwf	4
   652  001B  3000               	movlw	high __pbssBANK0
   653  001C  0085               	movwf	5
   654  001D  3012               	movlw	18
   655  001E  26E5               	fcall	clear_ram0
   656                           
   657                           ; Clear objects allocated to BANK1
   658  001F  30A0               	movlw	low __pbssBANK1
   659  0020  0084               	movwf	4
   660  0021  3000               	movlw	high __pbssBANK1
   661  0022  0085               	movwf	5
   662  0023  3032               	movlw	50
   663  0024  26E5               	fcall	clear_ram0
   664  0025                     end_of_initialization:	
   665                           ;End of C runtime variable initialization code
   666                           
   667  0025                     __end_of__initialization:	
   668  0025  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   669  0026  0020               	movlb	0
   670  0027  2EC7               	ljmp	_main	;jump to C main() function
   671                           
   672                           	psect	bssCOMMON
   673  007C                     __pbssCOMMON:	
   674  007C                     __x:	
   675  007C                     	ds	1
   676                           
   677                           	psect	bssBANK0
   678  005E                     __pbssBANK0:	
   679  005E                     __i:	
   680  005E                     	ds	2
   681  0060                     _cur_song:	
   682  0060                     	ds	2
   683  0062                     _cur_song_duration:	
   684  0062                     	ds	2
   685  0064                     handle_fire@counter:	
   686  0064                     	ds	2
   687  0066                     handle_fire@timer:	
   688  0066                     	ds	2
   689  0068                     __checksum:	
   690  0068                     	ds	1
   691  0069                     _cur_song_length:	
   692  0069                     	ds	1
   693  006A                     _cur_song_ptr:	
   694  006A                     	ds	1
   695  006B                     _cur_song_repeat:	
   696  006B                     	ds	1
   697  006C                     _my_random_number:	
   698  006C                     	ds	1
   699  006D                     handle_serial@rx_counter:	
   700  006D                     	ds	1
   701  006E                     handle_serial@rx_id:	
   702  006E                     	ds	1
   703  006F                     __y:	
   704  006F                     	ds	1
   705                           
   706                           	psect	bssBANK1
   707  00A0                     __pbssBANK1:	
   708  00A0                     _hitlist:	
   709  00A0                     	ds	32
   710  00C0                     _config:	
   711  00C0                     	ds	18
   712                           
   713                           	psect	clrtext
   714  06E5                     clear_ram0:	
   715                           ;	Called with FSR0 containing the base address, and
   716                           ;	WREG with the size to clear
   717                           
   718  06E5  0064               	clrwdt	;clear the watchdog before getting into this loop
   719  06E6                     clrloop0:	
   720  06E6  0180               	clrf	0	;clear RAM location pointed to by FSR
   721  06E7  3101               	addfsr 0,1
   722  06E8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   723  06E9  2EE6               	goto	clrloop0	;have we reached the end yet?
   724  06EA  3400               	retlw	0	;all done for this memory range, return
   725                           
   726                           	psect	cstackCOMMON
   727  0070                     __pcstackCOMMON:	
   728  0070                     ?_Setup:	
   729  0070                     ?_super_dead_mode:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ?_handle_music:	
   733                           ; 0 bytes @ 0x0
   734                           
   735  0070                     ?_tone_off:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_cheat:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_Modulate_Serial:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ?_Disable_Modulation:	
   745                           ; 0 bytes @ 0x0
   746                           
   747  0070                     ?_control_transfer:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_LoadFromFlash:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_main:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?_red_led_on:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_led_off:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_stop_song:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_Send_Byte:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_High_Priority_Interrupt:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ??_High_Priority_Interrupt:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_add_to_hitlist:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_hit_by:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_SEND_DATA_BYTE:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?_SEND_SOF:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ?_SEND_EOF:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_handle_serial:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ?_handle_fire:	
   793                           ; 1 bytes @ 0x0
   794                           
   795  0070                     ?_GET_CHAR_HELPER:	
   796                           ; 1 bytes @ 0x0
   797                           
   798                           
   799                           ; 1 bytes @ 0x0
   800  0070                     	ds	1
   801  0071                     ?_Load:	
   802  0071                     ?_Save:	
   803                           ; 0 bytes @ 0x1
   804                           
   805  0071                     ??_Setup:	
   806                           ; 0 bytes @ 0x1
   807                           
   808  0071                     ??_tone_off:	
   809                           ; 0 bytes @ 0x1
   810                           
   811  0071                     ?_tone:	
   812                           ; 0 bytes @ 0x1
   813                           
   814  0071                     ??_Modulate_Serial:	
   815                           ; 0 bytes @ 0x1
   816                           
   817  0071                     ??_Disable_Modulation:	
   818                           ; 0 bytes @ 0x1
   819                           
   820  0071                     ??_red_led_on:	
   821                           ; 0 bytes @ 0x1
   822                           
   823  0071                     ??_led_off:	
   824                           ; 0 bytes @ 0x1
   825                           
   826  0071                     ?_play_song:	
   827                           ; 0 bytes @ 0x1
   828                           
   829  0071                     ??_stop_song:	
   830                           ; 0 bytes @ 0x1
   831                           
   832  0071                     ??_add_to_hitlist:	
   833                           ; 0 bytes @ 0x1
   834                           
   835  0071                     ??_GET_CHAR_HELPER:	
   836                           ; 0 bytes @ 0x1
   837                           
   838  0071                     ?_ADC_read:	
   839                           ; 0 bytes @ 0x1
   840                           
   841  0071                     play_song@song:	
   842                           ; 2 bytes @ 0x1
   843                           
   844  0071                     tone@period:	
   845                           ; 2 bytes @ 0x1
   846                           
   847  0071                     Load@address:	
   848                           ; 2 bytes @ 0x1
   849                           
   850  0071                     Save@address:	
   851                           ; 2 bytes @ 0x1
   852                           
   853                           
   854                           ; 2 bytes @ 0x1
   855  0071                     	ds	1
   856  0072                     GET_CHAR_HELPER@val:	
   857                           
   858                           ; 1 bytes @ 0x2
   859  0072                     	ds	1
   860  0073                     ??_tone:	
   861  0073                     ??_ADC_read:	
   862                           ; 0 bytes @ 0x3
   863                           
   864  0073                     play_song@length:	
   865                           ; 0 bytes @ 0x3
   866                           
   867  0073                     Load@ptr:	
   868                           ; 1 bytes @ 0x3
   869                           
   870  0073                     Save@ptr:	
   871                           ; 1 bytes @ 0x3
   872                           
   873                           
   874                           ; 1 bytes @ 0x3
   875  0073                     	ds	1
   876  0074                     Load@data_length:	
   877  0074                     Save@data_length:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0074                     play_song@note_duration:	
   881                           ; 1 bytes @ 0x4
   882                           
   883                           
   884                           ; 2 bytes @ 0x4
   885  0074                     	ds	1
   886  0075                     ??_Load:	
   887  0075                     ??_Save:	
   888                           ; 0 bytes @ 0x5
   889                           
   890  0075                     ??_handle_music:	
   891                           ; 0 bytes @ 0x5
   892                           
   893  0075                     ??_cheat:	
   894                           ; 0 bytes @ 0x5
   895                           
   896  0075                     add_to_hitlist@gun:	
   897                           ; 0 bytes @ 0x5
   898                           
   899                           
   900                           ; 1 bytes @ 0x5
   901  0075                     	ds	1
   902  0076                     play_song@repeat:	
   903  0076                     Load@i:	
   904                           ; 1 bytes @ 0x6
   905                           
   906  0076                     Save@i:	
   907                           ; 1 bytes @ 0x6
   908                           
   909  0076                     add_to_hitlist@gun16:	
   910                           ; 1 bytes @ 0x6
   911                           
   912                           
   913                           ; 2 bytes @ 0x6
   914  0076                     	ds	1
   915  0077                     ??_LoadFromFlash:	
   916  0077                     ??_play_song:	
   917                           ; 0 bytes @ 0x7
   918                           
   919                           
   920                           ; 0 bytes @ 0x7
   921  0077                     	ds	1
   922  0078                     ??_Send_Byte:	
   923  0078                     add_to_hitlist@i:	
   924                           ; 0 bytes @ 0x8
   925                           
   926                           
   927                           ; 1 bytes @ 0x8
   928  0078                     	ds	2
   929  007A                     ??_handle_fire:	
   930  007A                     ??_SEND_DATA_BYTE:	
   931                           ; 0 bytes @ 0xA
   932                           
   933                           
   934                           ; 0 bytes @ 0xA
   935  007A                     	ds	2
   936  007C                     ??_main:	
   937                           
   938                           	psect	cstackBANK0
   939  0020                     __pcstackBANK0:	
   940                           ; 0 bytes @ 0xC
   941                           
   942  0020                     Send_Byte@data:	
   943                           
   944                           ; 1 bytes @ 0x0
   945  0020                     	ds	1
   946  0021                     Send_Byte@i:	
   947                           
   948                           ; 2 bytes @ 0x1
   949  0021                     	ds	2
   950  0023                     SEND_DATA_BYTE@b:	
   951  0023                     handle_fire@a:	
   952                           ; 1 bytes @ 0x3
   953                           
   954                           
   955                           ; 2 bytes @ 0x3
   956  0023                     	ds	1
   957  0024                     ??_SEND_SOF:	
   958  0024                     ??_SEND_EOF:	
   959                           ; 0 bytes @ 0x4
   960                           
   961                           
   962                           ; 0 bytes @ 0x4
   963  0024                     	ds	1
   964  0025                     ??_control_transfer:	
   965                           
   966                           ; 0 bytes @ 0x5
   967  0025                     	ds	2
   968  0027                     control_transfer@data:	
   969                           
   970                           ; 32 bytes @ 0x7
   971  0027                     	ds	32
   972  0047                     control_transfer@cmd:	
   973                           
   974                           ; 1 bytes @ 0x27
   975  0047                     	ds	1
   976  0048                     control_transfer@random_number:	
   977                           
   978                           ; 1 bytes @ 0x28
   979  0048                     	ds	1
   980  0049                     control_transfer@id:	
   981                           
   982                           ; 1 bytes @ 0x29
   983  0049                     	ds	1
   984  004A                     control_transfer@dptr:	
   985                           
   986                           ; 1 bytes @ 0x2A
   987  004A                     	ds	1
   988  004B                     control_transfer@i:	
   989                           
   990                           ; 1 bytes @ 0x2B
   991  004B                     	ds	1
   992  004C                     control_transfer@page:	
   993                           
   994                           ; 2 bytes @ 0x2C
   995  004C                     	ds	2
   996  004E                     control_transfer@x:	
   997                           
   998                           ; 1 bytes @ 0x2E
   999  004E                     	ds	1
  1000  004F                     ??_super_dead_mode:	
  1001                           
  1002                           ; 0 bytes @ 0x2F
  1003  004F                     	ds	2
  1004  0051                     super_dead_mode@b:	
  1005                           
  1006                           ; 1 bytes @ 0x31
  1007  0051                     	ds	1
  1008  0052                     super_dead_mode@counter:	
  1009                           
  1010                           ; 2 bytes @ 0x32
  1011  0052                     	ds	2
  1012  0054                     ??_hit_by:	
  1013                           
  1014                           ; 0 bytes @ 0x34
  1015  0054                     	ds	2
  1016  0056                     hit_by@who:	
  1017                           
  1018                           ; 1 bytes @ 0x36
  1019  0056                     	ds	1
  1020  0057                     hit_by@respawn_timer:	
  1021                           
  1022                           ; 2 bytes @ 0x37
  1023  0057                     	ds	2
  1024  0059                     hit_by@i:	
  1025                           
  1026                           ; 1 bytes @ 0x39
  1027  0059                     	ds	1
  1028  005A                     hit_by@i_797:	
  1029                           
  1030                           ; 1 bytes @ 0x3A
  1031  005A                     	ds	1
  1032  005B                     ??_handle_serial:	
  1033                           
  1034                           ; 0 bytes @ 0x3B
  1035  005B                     	ds	2
  1036  005D                     handle_serial@b:	
  1037                           
  1038                           ; 1 bytes @ 0x3D
  1039  005D                     	ds	1
  1040                           
  1041                           	psect	maintext
  1042  06C7                     __pmaintext:	
  1043 ;;
  1044 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1045 ;;
  1046 ;; *************** function _main *****************
  1047 ;; Defined at:
  1048 ;;		line 48 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;		None               void
  1055 ;; Registers used:
  1056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 17F/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1062 ;;      Params:         0       0       0       0
  1063 ;;      Locals:         0       0       0       0
  1064 ;;      Temps:          0       0       0       0
  1065 ;;      Totals:         0       0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels required when called:   10
  1068 ;; This function calls:
  1069 ;;		_LoadFromFlash
  1070 ;;		_Setup
  1071 ;;		_handle_fire
  1072 ;;		_handle_music
  1073 ;;		_handle_serial
  1074 ;;		_super_dead_mode
  1075 ;; This function is called by:
  1076 ;;		Startup code after reset
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _main
  1082  06C7                     _main:	
  1083                           
  1084                           ;main.c: 50: Setup();
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1088  06C7  27AE               	fcall	_Setup
  1089                           
  1090                           ;main.c: 51: LoadFromFlash();
  1091  06C8  245C               	fcall	_LoadFromFlash
  1092                           
  1093                           ;main.c: 52: if(!config.health) {
  1094  06C9  0021               	movlb	1	; select bank1
  1095  06CA  0845               	movf	((_config+1)^(0+128)+4),w
  1096  06CB  0444               	iorwf	(_config^(0+128)+4),w
  1097  06CC  1D03               	skipz
  1098  06CD  2ECF               	goto	l26
  1099                           
  1100                           ;main.c: 53: super_dead_mode();
  1101  06CE  24BC               	fcall	_super_dead_mode
  1102  06CF                     l26:	
  1103                           ;main.c: 54: }
  1104                           ;main.c: 56: while(1)
  1105                           
  1106                           
  1107                           ;main.c: 57: {
  1108                           ;main.c: 58: handle_serial();
  1109  06CF  251A               	fcall	_handle_serial
  1110                           
  1111                           ;main.c: 59: handle_fire();
  1112  06D0  2344               	fcall	_handle_fire
  1113                           
  1114                           ;main.c: 60: handle_music();
  1115  06D1  2734               	fcall	_handle_music
  1116  06D2  2ECF               	goto	l26
  1117  06D3                     __end_of_main:	
  1118                           
  1119                           	psect	text1
  1120  051A                     __ptext1:	
  1121 ;; *************** function _handle_serial *****************
  1122 ;; Defined at:
  1123 ;;		line 135 in file "protocol.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  b               1   61[BANK0 ] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      unsigned char 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1137 ;;      Params:         0       0       0       0
  1138 ;;      Locals:         0       1       0       0
  1139 ;;      Temps:          0       2       0       0
  1140 ;;      Totals:         0       3       0       0
  1141 ;;Total ram usage:        3 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    9
  1144 ;; This function calls:
  1145 ;;		_control_transfer
  1146 ;;		_hit_by
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           
  1153                           ;psect for function _handle_serial
  1154  051A                     _handle_serial:	
  1155                           
  1156                           ;protocol.c: 137: static uint8_t rx_id=0;
  1157                           ;protocol.c: 138: static uint8_t rx_counter=0;
  1158                           ;protocol.c: 139: uint8_t b;
  1159                           ;protocol.c: 141: if(!(PIR1bits.RCIF)) return 0;
  1160                           
  1161                           ;incstack = 0
  1162                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1163  051A  0020               	movlb	0	; select bank0
  1164  051B  1E91               	btfss	17,5	;volatile
  1165  051C  0008               	return
  1166                           
  1167                           ;protocol.c: 142: b=(RCREG);
  1168                           
  1169                           ;	Return value of _handle_serial is never used
  1170  051D  0023               	movlb	3	; select bank3
  1171  051E  0819               	movf	25,w	;volatile
  1172  051F  0020               	movlb	0	; select bank0
  1173  0520  00DB               	movwf	??_handle_serial
  1174  0521  085B               	movf	??_handle_serial,w
  1175  0522  00DD               	movwf	handle_serial@b
  1176                           
  1177                           ;protocol.c: 143: if(b == 0x10) {
  1178  0523  085D               	movf	handle_serial@b,w
  1179  0524  3A10               	xorlw	16
  1180  0525  1D03               	skipz
  1181  0526  2D29               	goto	l3169
  1182                           
  1183                           ;protocol.c: 144: control_transfer();
  1184  0527  2028               	fcall	_control_transfer
  1185                           
  1186                           ;protocol.c: 145: }
  1187  0528  0008               	return
  1188  0529                     l3169:	
  1189                           
  1190                           ;protocol.c: 147: else if((b > 0x80) && (b != config.id) && (config.id != 0x80) && !(con
      +                          fig.id & (1<<9))) {
  1191  0529  3081               	movlw	129
  1192  052A  0020               	movlb	0	; select bank0
  1193  052B  025D               	subwf	handle_serial@b,w
  1194  052C  1C03               	skipc
  1195  052D  0008               	return
  1196  052E  085D               	movf	handle_serial@b,w
  1197  052F  00DB               	movwf	??_handle_serial
  1198  0530  01DC               	clrf	??_handle_serial+1
  1199  0531  0021               	movlb	1	; select bank1
  1200  0532  0841               	movf	(_config+1)^(0+128),w
  1201  0533  0020               	movlb	0	; select bank0
  1202  0534  065C               	xorwf	??_handle_serial+1,w
  1203  0535  1D03               	skipz
  1204  0536  2D3B               	goto	u4175
  1205  0537  0021               	movlb	1	; select bank1
  1206  0538  0840               	movf	_config^(0+128),w
  1207  0539  0020               	movlb	0	; select bank0
  1208  053A  065B               	xorwf	??_handle_serial,w
  1209  053B                     u4175:	
  1210  053B  1903               	skipnz
  1211  053C  0008               	return
  1212  053D  3080               	movlw	128
  1213  053E  0021               	movlb	1	; select bank1
  1214  053F  0640               	xorwf	_config^(0+128),w
  1215  0540  0441               	iorwf	(_config+1)^(0+128),w
  1216  0541  1903               	skipnz
  1217  0542  0008               	return
  1218  0543  18C1               	btfsc	(_config+1)^(0+128),1
  1219  0544  0008               	return
  1220                           
  1221                           ;protocol.c: 148: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1222  0545  0020               	movlb	0	; select bank0
  1223  0546  085D               	movf	handle_serial@b,w
  1224  0547  066E               	xorwf	handle_serial@rx_id,w
  1225  0548  1903               	btfsc	3,2
  1226  0549  1891               	btfsc	17,1	;volatile
  1227  054A  01ED               	clrf	handle_serial@rx_counter
  1228                           
  1229                           ;protocol.c: 149: TMR2 = 0;
  1230  054B  019A               	clrf	26	;volatile
  1231                           
  1232                           ;protocol.c: 150: PIR1bits.TMR2IF = 0;
  1233  054C  1091               	bcf	17,1	;volatile
  1234                           
  1235                           ;protocol.c: 151: rx_id = b;
  1236  054D  085D               	movf	handle_serial@b,w
  1237  054E  00DB               	movwf	??_handle_serial
  1238  054F  085B               	movf	??_handle_serial,w
  1239  0550  00EE               	movwf	handle_serial@rx_id
  1240                           
  1241                           ;protocol.c: 152: rx_counter++;
  1242  0551  3001               	movlw	1
  1243  0552  00DB               	movwf	??_handle_serial
  1244  0553  085B               	movf	??_handle_serial,w
  1245  0554  07ED               	addwf	handle_serial@rx_counter,f
  1246                           
  1247                           ;protocol.c: 153: if(rx_counter > config.shield) {
  1248  0555  086D               	movf	handle_serial@rx_counter,w
  1249  0556  00DB               	movwf	??_handle_serial
  1250  0557  01DC               	clrf	??_handle_serial+1
  1251  0558  085C               	movf	??_handle_serial+1,w
  1252  0559  0021               	movlb	1	; select bank1
  1253  055A  0247               	subwf	((_config+1)^(0+128)+6),w
  1254  055B  1D03               	skipz
  1255  055C  2D61               	goto	u4225
  1256  055D  0020               	movlb	0	; select bank0
  1257  055E  085B               	movf	??_handle_serial,w
  1258  055F  0021               	movlb	1	; select bank1
  1259  0560  0246               	subwf	(_config^(0+128)+6),w
  1260  0561                     u4225:	
  1261  0561  1803               	skipnc
  1262  0562  0008               	return
  1263                           
  1264                           ;protocol.c: 154: RCSTAbits.CREN = 0;
  1265  0563  0023               	movlb	3	; select bank3
  1266  0564  121D               	bcf	29,4	;volatile
  1267                           
  1268                           ;protocol.c: 155: hit_by(b);
  1269  0565  0020               	movlb	0	; select bank0
  1270  0566  085D               	movf	handle_serial@b,w
  1271  0567  23D7               	fcall	_hit_by
  1272                           
  1273                           ;protocol.c: 156: rx_id = 0;
  1274  0568  0020               	movlb	0	; select bank0
  1275  0569  01EE               	clrf	handle_serial@rx_id
  1276                           
  1277                           ;protocol.c: 157: (RCREG);
  1278  056A  0023               	movlb	3	; select bank3
  1279  056B  0819               	movf	25,w	;volatile
  1280                           
  1281                           ;protocol.c: 158: RCSTAbits.CREN = 1;
  1282  056C  161D               	bsf	29,4	;volatile
  1283  056D  0008               	return
  1284  056E                     __end_of_handle_serial:	
  1285                           ;protocol.c: 159: }
  1286                           ;protocol.c: 160: }
  1287                           ;protocol.c: 161: return 1;
  1288                           ;	Return value of _handle_serial is never used
  1289                           
  1290                           
  1291                           	psect	text2
  1292  03D7                     __ptext2:	
  1293 ;; *************** function _hit_by *****************
  1294 ;; Defined at:
  1295 ;;		line 386 in file "user.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  who             1    wreg     unsigned char 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  who             1   54[BANK0 ] unsigned char 
  1300 ;;  i               1   58[BANK0 ] unsigned char 
  1301 ;;  i               1   57[BANK0 ] unsigned char 
  1302 ;;  respawn_time    2   55[BANK0 ] unsigned int 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;		None               void
  1305 ;; Registers used:
  1306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1312 ;;      Params:         0       0       0       0
  1313 ;;      Locals:         0       5       0       0
  1314 ;;      Temps:          0       2       0       0
  1315 ;;      Totals:         0       7       0       0
  1316 ;;Total ram usage:        7 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    8
  1319 ;; This function calls:
  1320 ;;		_Save
  1321 ;;		_add_to_hitlist
  1322 ;;		_handle_music
  1323 ;;		_led_off
  1324 ;;		_play_song
  1325 ;;		_red_led_on
  1326 ;;		_super_dead_mode
  1327 ;; This function is called by:
  1328 ;;		_handle_serial
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           
  1333                           ;psect for function _hit_by
  1334  03D7                     _hit_by:	
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1338                           ;hit_by@who stored from wreg
  1339  03D7  0020               	movlb	0	; select bank0
  1340  03D8  00D6               	movwf	hit_by@who
  1341                           
  1342                           ;user.c: 388: uint16_t respawn_timer;
  1343                           ;user.c: 390: add_to_hitlist(who);
  1344  03D9  0856               	movf	hit_by@who,w
  1345  03DA  256E               	fcall	_add_to_hitlist
  1346                           
  1347                           ;user.c: 391: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1348  03DB  30E0               	movlw	224
  1349  03DC  00F1               	movwf	Save@address
  1350  03DD  3007               	movlw	7
  1351  03DE  00F2               	movwf	Save@address+1
  1352  03DF  30A0               	movlw	_hitlist& (0+255)
  1353  03E0  0020               	movlb	0	; select bank0
  1354  03E1  00D4               	movwf	??_hit_by
  1355  03E2  0854               	movf	??_hit_by,w
  1356  03E3  00F3               	movwf	Save@ptr
  1357  03E4  3010               	movlw	16
  1358  03E5  00D5               	movwf	??_hit_by+1
  1359  03E6  0855               	movf	??_hit_by+1,w
  1360  03E7  00F4               	movwf	Save@data_length
  1361  03E8  25C2               	fcall	_Save
  1362                           
  1363                           ;user.c: 393: config.health --;
  1364  03E9  3001               	movlw	1
  1365  03EA  0021               	movlb	1	; select bank1
  1366  03EB  02C4               	subwf	(_config^(0+128)+4),f
  1367  03EC  3000               	movlw	0
  1368  03ED  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1369                           
  1370                           ;user.c: 394: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1371  03EE  30F0               	movlw	240
  1372  03EF  00F1               	movwf	Save@address
  1373  03F0  3007               	movlw	7
  1374  03F1  00F2               	movwf	Save@address+1
  1375  03F2  30C0               	movlw	_config& (0+255)
  1376  03F3  0020               	movlb	0	; select bank0
  1377  03F4  00D4               	movwf	??_hit_by
  1378  03F5  0854               	movf	??_hit_by,w
  1379  03F6  00F3               	movwf	Save@ptr
  1380  03F7  3009               	movlw	9
  1381  03F8  00D5               	movwf	??_hit_by+1
  1382  03F9  0855               	movf	??_hit_by+1,w
  1383  03FA  00F4               	movwf	Save@data_length
  1384  03FB  25C2               	fcall	_Save
  1385                           
  1386                           ;user.c: 396: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  1387  03FC  3032               	movlw	low (_death_song| (0+32768))
  1388  03FD  00F1               	movwf	play_song@song
  1389  03FE  3087               	movlw	high (_death_song| (0+32768))
  1390  03FF  00F2               	movwf	play_song@song+1
  1391  0400  01F3               	clrf	play_song@length
  1392  0401  0AF3               	incf	play_song@length,f
  1393  0402  3060               	movlw	96
  1394  0403  00F4               	movwf	play_song@note_duration
  1395  0404  30EA               	movlw	234
  1396  0405  00F5               	movwf	play_song@note_duration+1
  1397  0406  01F6               	clrf	play_song@repeat
  1398  0407  278A               	fcall	_play_song
  1399                           
  1400                           ;user.c: 398: if(!config.health)
  1401  0408  0021               	movlb	1	; select bank1
  1402  0409  0845               	movf	((_config+1)^(0+128)+4),w
  1403  040A  0444               	iorwf	(_config^(0+128)+4),w
  1404  040B  1D03               	skipz
  1405  040C  2C10               	goto	l3121
  1406                           
  1407                           ;user.c: 399: {
  1408                           ;user.c: 400: red_led_on();
  1409  040D  26F0               	fcall	_red_led_on
  1410                           
  1411                           ;user.c: 401: super_dead_mode();
  1412  040E  24BC               	fcall	_super_dead_mode
  1413                           
  1414                           ;user.c: 402: return;
  1415  040F  0008               	return
  1416  0410                     l3121:	
  1417                           
  1418                           ;user.c: 403: }
  1419                           ;user.c: 405: respawn_timer = config.respawn_delay;
  1420  0410  0021               	movlb	1	; select bank1
  1421  0411  0849               	movf	((_config+1)^(0+128)+8),w
  1422  0412  0020               	movlb	0	; select bank0
  1423  0413  01D8               	clrf	hit_by@respawn_timer+1
  1424  0414  07D8               	addwf	hit_by@respawn_timer+1,f
  1425  0415  0021               	movlb	1	; select bank1
  1426  0416  0848               	movf	(_config^(0+128)+8),w
  1427  0417  0020               	movlb	0	; select bank0
  1428  0418  01D7               	clrf	hit_by@respawn_timer
  1429  0419  07D7               	addwf	hit_by@respawn_timer,f
  1430  041A                     l3159:	
  1431                           ;user.c: 406: while(respawn_timer)
  1432                           
  1433  041A  0858               	movf	hit_by@respawn_timer+1,w
  1434  041B  0457               	iorwf	hit_by@respawn_timer,w
  1435  041C  1903               	btfsc	3,2
  1436  041D  0008               	return
  1437                           
  1438                           ;user.c: 407: {
  1439                           ;user.c: 408: respawn_timer--;
  1440  041E  3001               	movlw	1
  1441  041F  02D7               	subwf	hit_by@respawn_timer,f
  1442  0420  3000               	movlw	0
  1443  0421  3BD8               	subwfb	hit_by@respawn_timer+1,f
  1444                           
  1445                           ;user.c: 409: red_led_on();
  1446  0422  26F0               	fcall	_red_led_on
  1447                           
  1448                           ;user.c: 410: for(uint8_t i=0;i<50;i++)
  1449  0423  0020               	movlb	0	; select bank0
  1450  0424  01D9               	clrf	hit_by@i
  1451  0425  3032               	movlw	50
  1452  0426  0259               	subwf	hit_by@i,w
  1453  0427  1803               	btfsc	3,0
  1454  0428  2C3D               	goto	l3141
  1455  0429                     l3133:	
  1456                           
  1457                           ;user.c: 411: {
  1458                           ;user.c: 412: handle_music();
  1459  0429  2734               	fcall	_handle_music
  1460                           
  1461                           ;user.c: 413: _delay((unsigned long)((1)*(16000000/4000.0)));
  1462  042A  3006               	movlw	6
  1463  042B  0020               	movlb	0	; select bank0
  1464  042C  00D5               	movwf	??_hit_by+1
  1465  042D  3030               	movlw	48
  1466  042E  00D4               	movwf	??_hit_by
  1467  042F                     u4357:	
  1468  042F  0BD4               	decfsz	??_hit_by,f
  1469  0430  2C2F               	goto	u4357
  1470  0431  0BD5               	decfsz	??_hit_by+1,f
  1471  0432  2C2F               	goto	u4357
  1472  0433  0000               	nop
  1473  0434  3001               	movlw	1
  1474  0435  0020               	movlb	0	; select bank0
  1475  0436  00D4               	movwf	??_hit_by
  1476  0437  0854               	movf	??_hit_by,w
  1477  0438  07D9               	addwf	hit_by@i,f
  1478  0439  3032               	movlw	50
  1479  043A  0259               	subwf	hit_by@i,w
  1480  043B  1C03               	skipc
  1481  043C  2C29               	goto	l3133
  1482  043D                     l3141:	
  1483                           
  1484                           ;user.c: 414: }
  1485                           ;user.c: 416: if(respawn_timer < 30)
  1486  043D  3000               	movlw	0
  1487  043E  0258               	subwf	hit_by@respawn_timer+1,w
  1488  043F  301E               	movlw	30
  1489  0440  1903               	skipnz
  1490  0441  0257               	subwf	hit_by@respawn_timer,w
  1491  0442  1803               	skipnc
  1492  0443  2C45               	goto	l3145
  1493                           
  1494                           ;user.c: 417: {
  1495                           ;user.c: 418: led_off();
  1496  0444  26F9               	fcall	_led_off
  1497  0445                     l3145:	
  1498                           
  1499                           ;user.c: 419: }
  1500                           ;user.c: 420: for(uint8_t i=0;i<50;i++)
  1501  0445  0020               	movlb	0	; select bank0
  1502  0446  01DA               	clrf	hit_by@i_797
  1503  0447                     L1:	
  1504  0447  3032               	movlw	50
  1505  0448  025A               	subwf	hit_by@i_797,w
  1506  0449  1803               	btfsc	3,0
  1507  044A  2C1A               	goto	l3159
  1508                           
  1509                           ;user.c: 421: {
  1510                           ;user.c: 422: handle_music();
  1511  044B  2734               	fcall	_handle_music
  1512                           
  1513                           ;user.c: 423: _delay((unsigned long)((1)*(16000000/4000.0)));
  1514  044C  3006               	movlw	6
  1515  044D  0020               	movlb	0	; select bank0
  1516  044E  00D5               	movwf	??_hit_by+1
  1517  044F  3030               	movlw	48
  1518  0450  00D4               	movwf	??_hit_by
  1519  0451                     u4367:	
  1520  0451  0BD4               	decfsz	??_hit_by,f
  1521  0452  2C51               	goto	u4367
  1522  0453  0BD5               	decfsz	??_hit_by+1,f
  1523  0454  2C51               	goto	u4367
  1524  0455  0000               	nop
  1525  0456  3001               	movlw	1
  1526  0457  0020               	movlb	0	; select bank0
  1527  0458  00D4               	movwf	??_hit_by
  1528  0459  0854               	movf	??_hit_by,w
  1529  045A  07DA               	addwf	hit_by@i_797,f
  1530  045B  2C47               	goto	L1
  1531  045C                     __end_of_hit_by:	
  1532                           
  1533                           	psect	text3
  1534  04BC                     __ptext3:	
  1535 ;; *************** function _super_dead_mode *****************
  1536 ;; Defined at:
  1537 ;;		line 360 in file "user.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  b               1   49[BANK0 ] unsigned char 
  1542 ;;  counter         2   50[BANK0 ] unsigned int 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;		None               void
  1545 ;; Registers used:
  1546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1552 ;;      Params:         0       0       0       0
  1553 ;;      Locals:         0       3       0       0
  1554 ;;      Temps:          0       2       0       0
  1555 ;;      Totals:         0       5       0       0
  1556 ;;Total ram usage:        5 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    7
  1559 ;; This function calls:
  1560 ;;		_Send_Byte
  1561 ;;		_control_transfer
  1562 ;;		_handle_music
  1563 ;;		_led_off
  1564 ;;		_play_song
  1565 ;;		_red_led_on
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;;		_hit_by
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _super_dead_mode
  1574  04BC                     _super_dead_mode:	
  1575                           
  1576                           ;user.c: 361: uint16_t counter = 0;
  1577                           
  1578                           ;incstack = 0
  1579                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1580  04BC  0020               	movlb	0	; select bank0
  1581  04BD  01D2               	clrf	super_dead_mode@counter
  1582  04BE  01D3               	clrf	super_dead_mode@counter+1
  1583  04BF                     l3103:	
  1584                           ;user.c: 362: while(!config.health){
  1585                           
  1586  04BF  3004               	movlw	4
  1587  04C0  3EC0               	addlw	_config& (0+255)
  1588  04C1  0086               	movwf	6
  1589  04C2  0187               	clrf	7
  1590  04C3  0016               	moviw fsr1++
  1591  04C4  0401               	iorwf	1,w
  1592  04C5  1D03               	btfss	3,2
  1593  04C6  0008               	return
  1594                           
  1595                           ;user.c: 363: handle_music();
  1596  04C7  2734               	fcall	_handle_music
  1597                           
  1598                           ;user.c: 365: uint8_t b;
  1599                           ;user.c: 366: if((PIR1bits.RCIF)){
  1600  04C8  0020               	movlb	0	; select bank0
  1601  04C9  1E91               	btfss	17,5	;volatile
  1602  04CA  2CD6               	goto	l3085
  1603                           
  1604                           ;user.c: 367: b=(RCREG);
  1605  04CB  0023               	movlb	3	; select bank3
  1606  04CC  0819               	movf	25,w	;volatile
  1607  04CD  0020               	movlb	0	; select bank0
  1608  04CE  00CF               	movwf	??_super_dead_mode
  1609  04CF  084F               	movf	??_super_dead_mode,w
  1610  04D0  00D1               	movwf	super_dead_mode@b
  1611                           
  1612                           ;user.c: 368: if(b == 0x10) {
  1613  04D1  0851               	movf	super_dead_mode@b,w
  1614  04D2  3A10               	xorlw	16
  1615  04D3  1D03               	skipz
  1616  04D4  2CD6               	goto	l3085
  1617                           
  1618                           ;user.c: 369: control_transfer();
  1619  04D5  2028               	fcall	_control_transfer
  1620  04D6                     l3085:	
  1621                           
  1622                           ;user.c: 370: }
  1623                           ;user.c: 371: }
  1624                           ;user.c: 372: counter++;
  1625  04D6  3001               	movlw	1
  1626  04D7  0020               	movlb	0	; select bank0
  1627  04D8  07D2               	addwf	super_dead_mode@counter,f
  1628  04D9  3000               	movlw	0
  1629  04DA  3DD3               	addwfc	super_dead_mode@counter+1,f
  1630                           
  1631                           ;user.c: 373: _delay((unsigned long)((1)*(16000000/4000.0)));
  1632  04DB  3006               	movlw	6
  1633  04DC  00D0               	movwf	??_super_dead_mode+1
  1634  04DD  3030               	movlw	48
  1635  04DE  00CF               	movwf	??_super_dead_mode
  1636  04DF                     u4377:	
  1637  04DF  0BCF               	decfsz	??_super_dead_mode,f
  1638  04E0  2CDF               	goto	u4377
  1639  04E1  0BD0               	decfsz	??_super_dead_mode+1,f
  1640  04E2  2CDF               	goto	u4377
  1641  04E3  0000               	nop
  1642                           
  1643                           ;user.c: 374: if(counter > config.death_period){
  1644  04E4  0020               	movlb	0	; select bank0
  1645  04E5  0853               	movf	super_dead_mode@counter+1,w
  1646  04E6  0021               	movlb	1	; select bank1
  1647  04E7  0251               	subwf	((_config+1)^(0+128)+16),w
  1648  04E8  1D03               	skipz
  1649  04E9  2CEE               	goto	u4045
  1650  04EA  0020               	movlb	0	; select bank0
  1651  04EB  0852               	movf	super_dead_mode@counter,w
  1652  04EC  0021               	movlb	1	; select bank1
  1653  04ED  0250               	subwf	(_config^(0+128)+16),w
  1654  04EE                     u4045:	
  1655  04EE  1803               	skipnc
  1656  04EF  2D06               	goto	l3099
  1657                           
  1658                           ;user.c: 375: counter = 0;
  1659  04F0  0020               	movlb	0	; select bank0
  1660  04F1  01D2               	clrf	super_dead_mode@counter
  1661  04F2  01D3               	clrf	super_dead_mode@counter+1
  1662                           
  1663                           ;user.c: 376: led_off();
  1664  04F3  26F9               	fcall	_led_off
  1665                           
  1666                           ;user.c: 377: Send_Byte(config.id);
  1667  04F4  0021               	movlb	1	; select bank1
  1668  04F5  0840               	movf	_config^(0+128),w
  1669  04F6  2609               	fcall	_Send_Byte
  1670                           
  1671                           ;user.c: 378: play_song(dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  1672  04F7  302C               	movlw	low (_dead_song| (0+32768))
  1673  04F8  00F1               	movwf	play_song@song
  1674  04F9  3087               	movlw	high (_dead_song| (0+32768))
  1675  04FA  00F2               	movwf	play_song@song+1
  1676  04FB  3003               	movlw	3
  1677  04FC  0020               	movlb	0	; select bank0
  1678  04FD  00CF               	movwf	??_super_dead_mode
  1679  04FE  084F               	movf	??_super_dead_mode,w
  1680  04FF  00F3               	movwf	play_song@length
  1681  0500  3010               	movlw	16
  1682  0501  00F4               	movwf	play_song@note_duration
  1683  0502  3027               	movlw	39
  1684  0503  00F5               	movwf	play_song@note_duration+1
  1685  0504  01F6               	clrf	play_song@repeat
  1686  0505  278A               	fcall	_play_song
  1687  0506                     l3099:	
  1688                           
  1689                           ;user.c: 379: }
  1690                           ;user.c: 380: if(counter == config.death_period-50){
  1691  0506  0021               	movlb	1	; select bank1
  1692  0507  0850               	movf	(_config^(0+128)+16),w
  1693  0508  3ECE               	addlw	206
  1694  0509  0020               	movlb	0	; select bank0
  1695  050A  00CF               	movwf	??_super_dead_mode
  1696  050B  30FF               	movlw	255
  1697  050C  0021               	movlb	1	; select bank1
  1698  050D  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1699  050E  0020               	movlb	0	; select bank0
  1700  050F  00D0               	movwf	??_super_dead_mode+1
  1701  0510  0853               	movf	super_dead_mode@counter+1,w
  1702  0511  0650               	xorwf	??_super_dead_mode+1,w
  1703  0512  1D03               	skipz
  1704  0513  2D16               	goto	u4055
  1705  0514  0852               	movf	super_dead_mode@counter,w
  1706  0515  064F               	xorwf	??_super_dead_mode,w
  1707  0516                     u4055:	
  1708  0516  1D03               	skipz
  1709  0517  2CBF               	goto	l3103
  1710                           
  1711                           ;user.c: 381: red_led_on();
  1712  0518  26F0               	fcall	_red_led_on
  1713  0519  2CBF               	goto	l3103
  1714  051A                     __end_of_super_dead_mode:	
  1715                           
  1716                           	psect	text4
  1717  0734                     __ptext4:	
  1718 ;; *************** function _handle_music *****************
  1719 ;; Defined at:
  1720 ;;		line 117 in file "user.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;		None               void
  1727 ;; Registers used:
  1728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1734 ;;      Params:         0       0       0       0
  1735 ;;      Locals:         0       0       0       0
  1736 ;;      Temps:          2       0       0       0
  1737 ;;      Totals:         2       0       0       0
  1738 ;;Total ram usage:        2 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    3
  1741 ;; This function calls:
  1742 ;;		_stop_song
  1743 ;;		_tone
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;;		_super_dead_mode
  1747 ;;		_hit_by
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           
  1752                           ;psect for function _handle_music
  1753  0734                     _handle_music:	
  1754                           
  1755                           ;user.c: 119: if(!PIR1bits.TMR1IF) return;
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1759  0734  0020               	movlb	0	; select bank0
  1760  0735  1C11               	btfss	17,0	;volatile
  1761  0736  0008               	return
  1762                           
  1763                           ;user.c: 120: if(cur_song_ptr >= cur_song_length)
  1764  0737  0869               	movf	_cur_song_length,w
  1765  0738  026A               	subwf	_cur_song_ptr,w
  1766  0739  1C03               	skipc
  1767  073A  2F42               	goto	l2723
  1768                           
  1769                           ;user.c: 121: {
  1770                           ;user.c: 122: if(cur_song_repeat)
  1771  073B  086B               	movf	_cur_song_repeat,w
  1772  073C  1903               	btfsc	3,2
  1773  073D  2F40               	goto	l2719
  1774                           
  1775                           ;user.c: 123: {
  1776                           ;user.c: 124: cur_song_ptr=0;
  1777  073E  01EA               	clrf	_cur_song_ptr
  1778                           
  1779                           ;user.c: 125: }
  1780  073F  2F42               	goto	l2723
  1781  0740                     l2719:	
  1782                           
  1783                           ;user.c: 126: else
  1784                           ;user.c: 127: {
  1785                           ;user.c: 128: stop_song();
  1786  0740  26EB               	fcall	_stop_song
  1787                           
  1788                           ;user.c: 129: return;
  1789  0741  0008               	return
  1790  0742                     l2723:	
  1791                           
  1792                           ;user.c: 130: }
  1793                           ;user.c: 131: }
  1794                           ;user.c: 132: tone(cur_song[cur_song_ptr]);
  1795  0742  0020               	movlb	0	; select bank0
  1796  0743  086A               	movf	_cur_song_ptr,w
  1797  0744  00F5               	movwf	??_handle_music
  1798  0745  01F6               	clrf	??_handle_music+1
  1799  0746  35F5               	lslf	??_handle_music,f
  1800  0747  0DF6               	rlf	??_handle_music+1,f
  1801  0748  0860               	movf	_cur_song,w
  1802  0749  0775               	addwf	??_handle_music,w
  1803  074A  0084               	movwf	4
  1804  074B  0861               	movf	_cur_song+1,w
  1805  074C  3D76               	addwfc	??_handle_music+1,w
  1806  074D  0085               	movwf	5
  1807  074E  3F00               	moviw [0]fsr0
  1808  074F  00F1               	movwf	tone@period
  1809  0750  3F01               	moviw [1]fsr0
  1810  0751  00F2               	movwf	tone@period+1
  1811  0752  269D               	fcall	_tone
  1812                           
  1813                           ;user.c: 133: TMR1 = -cur_song_duration;
  1814  0753  0020               	movlb	0	; select bank0
  1815  0754  0962               	comf	_cur_song_duration,w
  1816  0755  00F5               	movwf	??_handle_music
  1817  0756  0963               	comf	_cur_song_duration+1,w
  1818  0757  00F6               	movwf	??_handle_music+1
  1819  0758  0AF5               	incf	??_handle_music,f
  1820  0759  1903               	skipnz
  1821  075A  0AF6               	incf	??_handle_music+1,f
  1822  075B  0875               	movf	??_handle_music,w
  1823  075C  0096               	movwf	22	;volatile
  1824  075D  0876               	movf	??_handle_music+1,w
  1825  075E  0097               	movwf	23	;volatile
  1826                           
  1827                           ;user.c: 134: cur_song_ptr++;
  1828  075F  3001               	movlw	1
  1829  0760  00F5               	movwf	??_handle_music
  1830  0761  0875               	movf	??_handle_music,w
  1831  0762  07EA               	addwf	_cur_song_ptr,f
  1832                           
  1833                           ;user.c: 135: PIR1bits.TMR1IF=0;
  1834  0763  1011               	bcf	17,0	;volatile
  1835  0764  0008               	return
  1836  0765                     __end_of_handle_music:	
  1837                           
  1838                           	psect	text5
  1839  0028                     __ptext5:	
  1840 ;; *************** function _control_transfer *****************
  1841 ;; Defined at:
  1842 ;;		line 44 in file "protocol.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  data           32    7[BANK0 ] unsigned int [16]
  1847 ;;  page            2   44[BANK0 ] unsigned int 
  1848 ;;  x               1   46[BANK0 ] unsigned char 
  1849 ;;  i               1   43[BANK0 ] unsigned char 
  1850 ;;  dptr            1   42[BANK0 ] PTR unsigned char 
  1851 ;;		 -> control_transfer@data(32), 
  1852 ;;  id              1   41[BANK0 ] unsigned char 
  1853 ;;  random_numbe    1   40[BANK0 ] unsigned char 
  1854 ;;  cmd             1   39[BANK0 ] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;		None               void
  1857 ;; Registers used:
  1858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1864 ;;      Params:         0       0       0       0
  1865 ;;      Locals:         0      40       0       0
  1866 ;;      Temps:          0       2       0       0
  1867 ;;      Totals:         0      42       0       0
  1868 ;;Total ram usage:       42 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    6
  1871 ;; This function calls:
  1872 ;;		_GET_CHAR_HELPER
  1873 ;;		_Load
  1874 ;;		_SEND_DATA_BYTE
  1875 ;;		_SEND_EOF
  1876 ;;		_SEND_SOF
  1877 ;;		_Save
  1878 ;;		_play_song
  1879 ;; This function is called by:
  1880 ;;		_super_dead_mode
  1881 ;;		_handle_serial
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           
  1886                           ;psect for function _control_transfer
  1887  0028                     _control_transfer:	
  1888                           
  1889                           ;protocol.c: 46: uint8_t i;
  1890                           ;protocol.c: 47: uint8_t cmd;
  1891                           ;protocol.c: 48: uint8_t random_number,id;
  1892                           ;protocol.c: 50: uint16_t page;
  1893                           ;protocol.c: 51: uint16_t data[16];
  1894                           ;protocol.c: 52: uint8_t* dptr;
  1895                           ;protocol.c: 53: uint8_t x;
  1896                           ;protocol.c: 55: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1897                           
  1898                           ;incstack = 0
  1899                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1900  0028  0020               	movlb	0	; select bank0
  1901  0029  01E8               	clrf	__checksum
  1902  002A  307C               	movlw	__x& (0+255)
  1903  002B  2663               	fcall	_GET_CHAR_HELPER
  1904  002C  3A00               	xorlw	0
  1905  002D  1D03               	btfss	3,2
  1906  002E  0008               	return
  1907  002F  306F               	movlw	__y& (0+255)
  1908  0030  2663               	fcall	_GET_CHAR_HELPER
  1909  0031  3A00               	xorlw	0
  1910  0032  1D03               	btfss	3,2
  1911  0033  0008               	return
  1912  0034  087C               	movf	__x,w
  1913  0035  39F0               	andlw	240
  1914  0036  1D03               	btfss	3,2
  1915  0037  0008               	return
  1916  0038  0020               	movlb	0	; select bank0
  1917  0039  086F               	movf	__y,w
  1918  003A  39F0               	andlw	240
  1919  003B  1D03               	btfss	3,2
  1920  003C  0008               	return
  1921  003D  086F               	movf	__y,w
  1922  003E  00A5               	movwf	??_control_transfer
  1923  003F  3003               	movlw	3
  1924  0040                     u3155:	
  1925  0040  35A5               	lslf	??_control_transfer,f
  1926  0041  3EFF               	addlw	-1
  1927  0042  1D03               	skipz
  1928  0043  2840               	goto	u3155
  1929  0044  3525               	lslf	??_control_transfer,w
  1930  0045  047C               	iorwf	__x,w
  1931  0046  00A6               	movwf	??_control_transfer+1
  1932  0047  0826               	movf	??_control_transfer+1,w
  1933  0048  00FC               	movwf	__x
  1934  0049  087C               	movf	__x,w
  1935  004A  00A5               	movwf	??_control_transfer
  1936  004B  0825               	movf	??_control_transfer,w
  1937  004C  07E8               	addwf	__checksum,f
  1938  004D  0021               	movlb	1	; select bank1
  1939  004E  0840               	movf	_config^(0+128),w
  1940  004F  067C               	xorwf	__x,w
  1941  0050  1D03               	btfss	3,2
  1942  0051  0008               	return
  1943                           
  1944                           ;protocol.c: 56: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1945  0052  307C               	movlw	__x& (0+255)
  1946  0053  2663               	fcall	_GET_CHAR_HELPER
  1947  0054  3A00               	xorlw	0
  1948  0055  1D03               	btfss	3,2
  1949  0056  0008               	return
  1950  0057  306F               	movlw	__y& (0+255)
  1951  0058  2663               	fcall	_GET_CHAR_HELPER
  1952  0059  3A00               	xorlw	0
  1953  005A  1D03               	btfss	3,2
  1954  005B  0008               	return
  1955  005C  087C               	movf	__x,w
  1956  005D  39F0               	andlw	240
  1957  005E  1D03               	btfss	3,2
  1958  005F  0008               	return
  1959  0060  0020               	movlb	0	; select bank0
  1960  0061  086F               	movf	__y,w
  1961  0062  39F0               	andlw	240
  1962  0063  1D03               	btfss	3,2
  1963  0064  0008               	return
  1964  0065  086F               	movf	__y,w
  1965  0066  00A5               	movwf	??_control_transfer
  1966  0067  3003               	movlw	3
  1967  0068                     u3215:	
  1968  0068  35A5               	lslf	??_control_transfer,f
  1969  0069  3EFF               	addlw	-1
  1970  006A  1D03               	skipz
  1971  006B  2868               	goto	u3215
  1972  006C  3525               	lslf	??_control_transfer,w
  1973  006D  047C               	iorwf	__x,w
  1974  006E  00A6               	movwf	??_control_transfer+1
  1975  006F  0826               	movf	??_control_transfer+1,w
  1976  0070  00C7               	movwf	control_transfer@cmd
  1977  0071  0847               	movf	control_transfer@cmd,w
  1978  0072  00A5               	movwf	??_control_transfer
  1979  0073  0825               	movf	??_control_transfer,w
  1980  0074  07E8               	addwf	__checksum,f
  1981                           
  1982                           ;protocol.c: 58: switch(cmd)
  1983  0075  2B30               	goto	l3069
  1984  0076                     l2765:	
  1985                           ;protocol.c: 59: {
  1986                           ;protocol.c: 60: case 0x01:
  1987                           
  1988                           
  1989                           ;protocol.c: 61: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1990  0076  307C               	movlw	__x& (0+255)
  1991  0077  2663               	fcall	_GET_CHAR_HELPER
  1992  0078  3A00               	xorlw	0
  1993  0079  1D03               	btfss	3,2
  1994  007A  0008               	return
  1995  007B  306F               	movlw	__y& (0+255)
  1996  007C  2663               	fcall	_GET_CHAR_HELPER
  1997  007D  3A00               	xorlw	0
  1998  007E  1D03               	btfss	3,2
  1999  007F  0008               	return
  2000  0080  087C               	movf	__x,w
  2001  0081  39F0               	andlw	240
  2002  0082  1D03               	btfss	3,2
  2003  0083  0008               	return
  2004  0084  0020               	movlb	0	; select bank0
  2005  0085  086F               	movf	__y,w
  2006  0086  39F0               	andlw	240
  2007  0087  1D03               	btfss	3,2
  2008  0088  0008               	return
  2009  0089  086F               	movf	__y,w
  2010  008A  00A5               	movwf	??_control_transfer
  2011  008B  3003               	movlw	3
  2012  008C                     u3265:	
  2013  008C  35A5               	lslf	??_control_transfer,f
  2014  008D  3EFF               	addlw	-1
  2015  008E  1D03               	skipz
  2016  008F  288C               	goto	u3265
  2017  0090  3525               	lslf	??_control_transfer,w
  2018  0091  047C               	iorwf	__x,w
  2019  0092  00A6               	movwf	??_control_transfer+1
  2020  0093  0826               	movf	??_control_transfer+1,w
  2021  0094  00FC               	movwf	__x
  2022  0095  087C               	movf	__x,w
  2023  0096  00A5               	movwf	??_control_transfer
  2024  0097  0825               	movf	??_control_transfer,w
  2025  0098  07E8               	addwf	__checksum,f
  2026  0099  0868               	movf	__checksum,w
  2027  009A  1D03               	skipz
  2028  009B  0008               	return
  2029  009C  307C               	movlw	__x& (0+255)
  2030  009D  2663               	fcall	_GET_CHAR_HELPER
  2031  009E  3A00               	xorlw	0
  2032  009F  1D03               	btfss	3,2
  2033  00A0  0008               	return
  2034  00A1  087C               	movf	__x,w
  2035  00A2  3A11               	xorlw	17
  2036  00A3  1D03               	btfss	3,2
  2037  00A4  0008               	return
  2038                           
  2039                           ;protocol.c: 62: SEND_SOF();
  2040  00A5  27D1               	fcall	_SEND_SOF
  2041                           
  2042                           ;protocol.c: 63: SEND_DATA_BYTE(0x02);
  2043  00A6  3002               	movlw	2
  2044  00A7  2641               	fcall	_SEND_DATA_BYTE
  2045                           
  2046                           ;protocol.c: 64: SEND_DATA_BYTE(my_random_number);
  2047  00A8  0020               	movlb	0	; select bank0
  2048  00A9  086C               	movf	_my_random_number,w
  2049  00AA  2641               	fcall	_SEND_DATA_BYTE
  2050                           
  2051                           ;protocol.c: 65: SEND_EOF();
  2052  00AB  26D3               	fcall	_SEND_EOF
  2053                           
  2054                           ;protocol.c: 66: break;
  2055  00AC  0008               	return
  2056  00AD                     l2793:	
  2057                           ;protocol.c: 67: case 0x03:
  2058                           
  2059                           
  2060                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2061  00AD  307C               	movlw	__x& (0+255)
  2062  00AE  2663               	fcall	_GET_CHAR_HELPER
  2063  00AF  3A00               	xorlw	0
  2064  00B0  1D03               	btfss	3,2
  2065  00B1  0008               	return
  2066  00B2  306F               	movlw	__y& (0+255)
  2067  00B3  2663               	fcall	_GET_CHAR_HELPER
  2068  00B4  3A00               	xorlw	0
  2069  00B5  1D03               	btfss	3,2
  2070  00B6  0008               	return
  2071  00B7  087C               	movf	__x,w
  2072  00B8  39F0               	andlw	240
  2073  00B9  1D03               	btfss	3,2
  2074  00BA  0008               	return
  2075  00BB  0020               	movlb	0	; select bank0
  2076  00BC  086F               	movf	__y,w
  2077  00BD  39F0               	andlw	240
  2078  00BE  1D03               	btfss	3,2
  2079  00BF  0008               	return
  2080  00C0  086F               	movf	__y,w
  2081  00C1  00A5               	movwf	??_control_transfer
  2082  00C2  3003               	movlw	3
  2083  00C3                     u3345:	
  2084  00C3  35A5               	lslf	??_control_transfer,f
  2085  00C4  3EFF               	addlw	-1
  2086  00C5  1D03               	skipz
  2087  00C6  28C3               	goto	u3345
  2088  00C7  3525               	lslf	??_control_transfer,w
  2089  00C8  047C               	iorwf	__x,w
  2090  00C9  00A6               	movwf	??_control_transfer+1
  2091  00CA  0826               	movf	??_control_transfer+1,w
  2092  00CB  00C8               	movwf	control_transfer@random_number
  2093  00CC  0848               	movf	control_transfer@random_number,w
  2094  00CD  00A5               	movwf	??_control_transfer
  2095  00CE  0825               	movf	??_control_transfer,w
  2096  00CF  07E8               	addwf	__checksum,f
  2097                           
  2098                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2099  00D0  307C               	movlw	__x& (0+255)
  2100  00D1  2663               	fcall	_GET_CHAR_HELPER
  2101  00D2  3A00               	xorlw	0
  2102  00D3  1D03               	btfss	3,2
  2103  00D4  0008               	return
  2104  00D5  306F               	movlw	__y& (0+255)
  2105  00D6  2663               	fcall	_GET_CHAR_HELPER
  2106  00D7  3A00               	xorlw	0
  2107  00D8  1D03               	btfss	3,2
  2108  00D9  0008               	return
  2109  00DA  087C               	movf	__x,w
  2110  00DB  39F0               	andlw	240
  2111  00DC  1D03               	btfss	3,2
  2112  00DD  0008               	return
  2113  00DE  0020               	movlb	0	; select bank0
  2114  00DF  086F               	movf	__y,w
  2115  00E0  39F0               	andlw	240
  2116  00E1  1D03               	btfss	3,2
  2117  00E2  0008               	return
  2118  00E3  086F               	movf	__y,w
  2119  00E4  00A5               	movwf	??_control_transfer
  2120  00E5  3003               	movlw	3
  2121  00E6                     u3395:	
  2122  00E6  35A5               	lslf	??_control_transfer,f
  2123  00E7  3EFF               	addlw	-1
  2124  00E8  1D03               	skipz
  2125  00E9  28E6               	goto	u3395
  2126  00EA  3525               	lslf	??_control_transfer,w
  2127  00EB  047C               	iorwf	__x,w
  2128  00EC  00A6               	movwf	??_control_transfer+1
  2129  00ED  0826               	movf	??_control_transfer+1,w
  2130  00EE  00C9               	movwf	control_transfer@id
  2131  00EF  0849               	movf	control_transfer@id,w
  2132  00F0  00A5               	movwf	??_control_transfer
  2133  00F1  0825               	movf	??_control_transfer,w
  2134  00F2  07E8               	addwf	__checksum,f
  2135                           
  2136                           ;protocol.c: 70: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2137  00F3  307C               	movlw	__x& (0+255)
  2138  00F4  2663               	fcall	_GET_CHAR_HELPER
  2139  00F5  3A00               	xorlw	0
  2140  00F6  1D03               	btfss	3,2
  2141  00F7  0008               	return
  2142  00F8  306F               	movlw	__y& (0+255)
  2143  00F9  2663               	fcall	_GET_CHAR_HELPER
  2144  00FA  3A00               	xorlw	0
  2145  00FB  1D03               	btfss	3,2
  2146  00FC  0008               	return
  2147  00FD  087C               	movf	__x,w
  2148  00FE  39F0               	andlw	240
  2149  00FF  1D03               	btfss	3,2
  2150  0100  0008               	return
  2151  0101  0020               	movlb	0	; select bank0
  2152  0102  086F               	movf	__y,w
  2153  0103  39F0               	andlw	240
  2154  0104  1D03               	btfss	3,2
  2155  0105  0008               	return
  2156  0106  086F               	movf	__y,w
  2157  0107  00A5               	movwf	??_control_transfer
  2158  0108  3003               	movlw	3
  2159  0109                     u3445:	
  2160  0109  35A5               	lslf	??_control_transfer,f
  2161  010A  3EFF               	addlw	-1
  2162  010B  1D03               	skipz
  2163  010C  2909               	goto	u3445
  2164  010D  3525               	lslf	??_control_transfer,w
  2165  010E  047C               	iorwf	__x,w
  2166  010F  00A6               	movwf	??_control_transfer+1
  2167  0110  0826               	movf	??_control_transfer+1,w
  2168  0111  00FC               	movwf	__x
  2169  0112  087C               	movf	__x,w
  2170  0113  00A5               	movwf	??_control_transfer
  2171  0114  0825               	movf	??_control_transfer,w
  2172  0115  07E8               	addwf	__checksum,f
  2173  0116  0868               	movf	__checksum,w
  2174  0117  1D03               	skipz
  2175  0118  0008               	return
  2176  0119  307C               	movlw	__x& (0+255)
  2177  011A  2663               	fcall	_GET_CHAR_HELPER
  2178  011B  3A00               	xorlw	0
  2179  011C  1D03               	btfss	3,2
  2180  011D  0008               	return
  2181  011E  087C               	movf	__x,w
  2182  011F  3A11               	xorlw	17
  2183  0120  1D03               	btfss	3,2
  2184  0121  0008               	return
  2185                           
  2186                           ;protocol.c: 71: if(random_number != my_random_number) goto err;
  2187  0122  0020               	movlb	0	; select bank0
  2188  0123  0848               	movf	control_transfer@random_number,w
  2189  0124  066C               	xorwf	_my_random_number,w
  2190  0125  1D03               	btfss	3,2
  2191  0126  0008               	return
  2192                           
  2193                           ;protocol.c: 72: SEND_SOF();
  2194  0127  27D1               	fcall	_SEND_SOF
  2195                           
  2196                           ;protocol.c: 73: SEND_DATA_BYTE(0x00);
  2197  0128  3000               	movlw	0
  2198  0129  2641               	fcall	_SEND_DATA_BYTE
  2199                           
  2200                           ;protocol.c: 74: SEND_EOF();
  2201  012A  26D3               	fcall	_SEND_EOF
  2202                           
  2203                           ;protocol.c: 75: config.id=id | (1<<9);
  2204  012B  3000               	movlw	0
  2205  012C  0020               	movlb	0	; select bank0
  2206  012D  0449               	iorwf	control_transfer@id,w
  2207  012E  0021               	movlb	1	; select bank1
  2208  012F  00C0               	movwf	_config^(0+128)
  2209  0130  3002               	movlw	2
  2210  0131  00C1               	movwf	(_config+1)^(0+128)
  2211                           
  2212                           ;protocol.c: 76: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2213  0132  30F0               	movlw	240
  2214  0133  00F1               	movwf	Save@address
  2215  0134  3007               	movlw	7
  2216  0135  00F2               	movwf	Save@address+1
  2217  0136  30C0               	movlw	_config& (0+255)
  2218  0137  0020               	movlb	0	; select bank0
  2219  0138  00A5               	movwf	??_control_transfer
  2220  0139  0825               	movf	??_control_transfer,w
  2221  013A  00F3               	movwf	Save@ptr
  2222  013B  3009               	movlw	9
  2223  013C  00A6               	movwf	??_control_transfer+1
  2224  013D  0826               	movf	??_control_transfer+1,w
  2225  013E  00F4               	movwf	Save@data_length
  2226  013F  25C2               	fcall	_Save
  2227                           
  2228                           ;protocol.c: 77: break;
  2229  0140  0008               	return
  2230  0141                     l2857:	
  2231                           ;protocol.c: 78: case 0x04:
  2232                           
  2233                           
  2234                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2235  0141  307C               	movlw	__x& (0+255)
  2236  0142  2663               	fcall	_GET_CHAR_HELPER
  2237  0143  3A00               	xorlw	0
  2238  0144  1D03               	btfss	3,2
  2239  0145  0008               	return
  2240  0146  306F               	movlw	__y& (0+255)
  2241  0147  2663               	fcall	_GET_CHAR_HELPER
  2242  0148  3A00               	xorlw	0
  2243  0149  1D03               	btfss	3,2
  2244  014A  0008               	return
  2245  014B  087C               	movf	__x,w
  2246  014C  39F0               	andlw	240
  2247  014D  1D03               	btfss	3,2
  2248  014E  0008               	return
  2249  014F  0020               	movlb	0	; select bank0
  2250  0150  086F               	movf	__y,w
  2251  0151  39F0               	andlw	240
  2252  0152  1D03               	btfss	3,2
  2253  0153  0008               	return
  2254  0154  086F               	movf	__y,w
  2255  0155  00A5               	movwf	??_control_transfer
  2256  0156  3003               	movlw	3
  2257  0157                     u3535:	
  2258  0157  35A5               	lslf	??_control_transfer,f
  2259  0158  3EFF               	addlw	-1
  2260  0159  1D03               	skipz
  2261  015A  2957               	goto	u3535
  2262  015B  3525               	lslf	??_control_transfer,w
  2263  015C  047C               	iorwf	__x,w
  2264  015D  00A6               	movwf	??_control_transfer+1
  2265  015E  0826               	movf	??_control_transfer+1,w
  2266  015F  00CE               	movwf	control_transfer@x
  2267  0160  084E               	movf	control_transfer@x,w
  2268  0161  00A5               	movwf	??_control_transfer
  2269  0162  0825               	movf	??_control_transfer,w
  2270  0163  07E8               	addwf	__checksum,f
  2271                           
  2272                           ;protocol.c: 80: *((uint8_t*)(&page))=x;
  2273  0164  084E               	movf	control_transfer@x,w
  2274  0165  00A5               	movwf	??_control_transfer
  2275  0166  0825               	movf	??_control_transfer,w
  2276  0167  00CC               	movwf	control_transfer@page
  2277                           
  2278                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2279  0168  307C               	movlw	__x& (0+255)
  2280  0169  2663               	fcall	_GET_CHAR_HELPER
  2281  016A  3A00               	xorlw	0
  2282  016B  1D03               	btfss	3,2
  2283  016C  0008               	return
  2284  016D  306F               	movlw	__y& (0+255)
  2285  016E  2663               	fcall	_GET_CHAR_HELPER
  2286  016F  3A00               	xorlw	0
  2287  0170  1D03               	btfss	3,2
  2288  0171  0008               	return
  2289  0172  087C               	movf	__x,w
  2290  0173  39F0               	andlw	240
  2291  0174  1D03               	btfss	3,2
  2292  0175  0008               	return
  2293  0176  0020               	movlb	0	; select bank0
  2294  0177  086F               	movf	__y,w
  2295  0178  39F0               	andlw	240
  2296  0179  1D03               	btfss	3,2
  2297  017A  0008               	return
  2298  017B  086F               	movf	__y,w
  2299  017C  00A5               	movwf	??_control_transfer
  2300  017D  3003               	movlw	3
  2301  017E                     u3585:	
  2302  017E  35A5               	lslf	??_control_transfer,f
  2303  017F  3EFF               	addlw	-1
  2304  0180  1D03               	skipz
  2305  0181  297E               	goto	u3585
  2306  0182  3525               	lslf	??_control_transfer,w
  2307  0183  047C               	iorwf	__x,w
  2308  0184  00A6               	movwf	??_control_transfer+1
  2309  0185  0826               	movf	??_control_transfer+1,w
  2310  0186  00CE               	movwf	control_transfer@x
  2311  0187  084E               	movf	control_transfer@x,w
  2312  0188  00A5               	movwf	??_control_transfer
  2313  0189  0825               	movf	??_control_transfer,w
  2314  018A  07E8               	addwf	__checksum,f
  2315                           
  2316                           ;protocol.c: 82: *(((uint8_t*)(&page))+1)=x;
  2317  018B  084E               	movf	control_transfer@x,w
  2318  018C  00A5               	movwf	??_control_transfer
  2319  018D  0825               	movf	??_control_transfer,w
  2320  018E  00CD               	movwf	control_transfer@page+1
  2321                           
  2322                           ;protocol.c: 83: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2323  018F  307C               	movlw	__x& (0+255)
  2324  0190  2663               	fcall	_GET_CHAR_HELPER
  2325  0191  3A00               	xorlw	0
  2326  0192  1D03               	btfss	3,2
  2327  0193  0008               	return
  2328  0194  306F               	movlw	__y& (0+255)
  2329  0195  2663               	fcall	_GET_CHAR_HELPER
  2330  0196  3A00               	xorlw	0
  2331  0197  1D03               	btfss	3,2
  2332  0198  0008               	return
  2333  0199  087C               	movf	__x,w
  2334  019A  39F0               	andlw	240
  2335  019B  1D03               	btfss	3,2
  2336  019C  0008               	return
  2337  019D  0020               	movlb	0	; select bank0
  2338  019E  086F               	movf	__y,w
  2339  019F  39F0               	andlw	240
  2340  01A0  1D03               	btfss	3,2
  2341  01A1  0008               	return
  2342  01A2  086F               	movf	__y,w
  2343  01A3  00A5               	movwf	??_control_transfer
  2344  01A4  3003               	movlw	3
  2345  01A5                     u3635:	
  2346  01A5  35A5               	lslf	??_control_transfer,f
  2347  01A6  3EFF               	addlw	-1
  2348  01A7  1D03               	skipz
  2349  01A8  29A5               	goto	u3635
  2350  01A9  3525               	lslf	??_control_transfer,w
  2351  01AA  047C               	iorwf	__x,w
  2352  01AB  00A6               	movwf	??_control_transfer+1
  2353  01AC  0826               	movf	??_control_transfer+1,w
  2354  01AD  00FC               	movwf	__x
  2355  01AE  087C               	movf	__x,w
  2356  01AF  00A5               	movwf	??_control_transfer
  2357  01B0  0825               	movf	??_control_transfer,w
  2358  01B1  07E8               	addwf	__checksum,f
  2359  01B2  0868               	movf	__checksum,w
  2360  01B3  1D03               	skipz
  2361  01B4  0008               	return
  2362  01B5  307C               	movlw	__x& (0+255)
  2363  01B6  2663               	fcall	_GET_CHAR_HELPER
  2364  01B7  3A00               	xorlw	0
  2365  01B8  1D03               	btfss	3,2
  2366  01B9  0008               	return
  2367  01BA  087C               	movf	__x,w
  2368  01BB  3A11               	xorlw	17
  2369  01BC  1D03               	btfss	3,2
  2370  01BD  0008               	return
  2371                           
  2372                           ;protocol.c: 84: Load(page,data,16);
  2373  01BE  0020               	movlb	0	; select bank0
  2374  01BF  084D               	movf	control_transfer@page+1,w
  2375  01C0  01F2               	clrf	Load@address+1
  2376  01C1  07F2               	addwf	Load@address+1,f
  2377  01C2  084C               	movf	control_transfer@page,w
  2378  01C3  01F1               	clrf	Load@address
  2379  01C4  07F1               	addwf	Load@address,f
  2380  01C5  3027               	movlw	control_transfer@data& (0+255)
  2381  01C6  00A5               	movwf	??_control_transfer
  2382  01C7  0825               	movf	??_control_transfer,w
  2383  01C8  00F3               	movwf	Load@ptr
  2384  01C9  3010               	movlw	16
  2385  01CA  00A6               	movwf	??_control_transfer+1
  2386  01CB  0826               	movf	??_control_transfer+1,w
  2387  01CC  00F4               	movwf	Load@data_length
  2388  01CD  2765               	fcall	_Load
  2389                           
  2390                           ;protocol.c: 85: SEND_SOF();
  2391  01CE  27D1               	fcall	_SEND_SOF
  2392                           
  2393                           ;protocol.c: 86: SEND_DATA_BYTE(0x05);
  2394  01CF  3005               	movlw	5
  2395  01D0  2641               	fcall	_SEND_DATA_BYTE
  2396                           
  2397                           ;protocol.c: 87: dptr=(uint8_t*)data;
  2398  01D1  3027               	movlw	control_transfer@data& (0+255)
  2399  01D2  0020               	movlb	0	; select bank0
  2400  01D3  00A5               	movwf	??_control_transfer
  2401  01D4  0825               	movf	??_control_transfer,w
  2402  01D5  00CA               	movwf	control_transfer@dptr
  2403                           
  2404                           ;protocol.c: 88: for(i=0;i<32;i++)
  2405  01D6  01CB               	clrf	control_transfer@i
  2406  01D7  3020               	movlw	32
  2407  01D8  024B               	subwf	control_transfer@i,w
  2408  01D9  1803               	btfsc	3,0
  2409  01DA  29ED               	goto	l2937
  2410  01DB                     l2929:	
  2411                           
  2412                           ;protocol.c: 89: {
  2413                           ;protocol.c: 90: SEND_DATA_BYTE(*dptr++);
  2414  01DB  084A               	movf	control_transfer@dptr,w
  2415  01DC  0086               	movwf	6
  2416  01DD  0187               	clrf	7
  2417  01DE  0801               	movf	1,w
  2418  01DF  2641               	fcall	_SEND_DATA_BYTE
  2419  01E0  3001               	movlw	1
  2420  01E1  0020               	movlb	0	; select bank0
  2421  01E2  00A5               	movwf	??_control_transfer
  2422  01E3  0825               	movf	??_control_transfer,w
  2423  01E4  07CA               	addwf	control_transfer@dptr,f
  2424  01E5  3001               	movlw	1
  2425  01E6  00A5               	movwf	??_control_transfer
  2426  01E7  0825               	movf	??_control_transfer,w
  2427  01E8  07CB               	addwf	control_transfer@i,f
  2428  01E9  3020               	movlw	32
  2429  01EA  024B               	subwf	control_transfer@i,w
  2430  01EB  1C03               	skipc
  2431  01EC  29DB               	goto	l2929
  2432  01ED                     l2937:	
  2433                           
  2434                           ;protocol.c: 91: }
  2435                           ;protocol.c: 92: SEND_EOF();
  2436  01ED  26D3               	fcall	_SEND_EOF
  2437                           
  2438                           ;protocol.c: 93: break;
  2439  01EE  0008               	return
  2440  01EF                     l2939:	
  2441                           ;protocol.c: 94: case 0x06:
  2442                           
  2443                           
  2444                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2445  01EF  307C               	movlw	__x& (0+255)
  2446  01F0  2663               	fcall	_GET_CHAR_HELPER
  2447  01F1  3A00               	xorlw	0
  2448  01F2  1D03               	btfss	3,2
  2449  01F3  0008               	return
  2450  01F4  306F               	movlw	__y& (0+255)
  2451  01F5  2663               	fcall	_GET_CHAR_HELPER
  2452  01F6  3A00               	xorlw	0
  2453  01F7  1D03               	btfss	3,2
  2454  01F8  0008               	return
  2455  01F9  087C               	movf	__x,w
  2456  01FA  39F0               	andlw	240
  2457  01FB  1D03               	btfss	3,2
  2458  01FC  0008               	return
  2459  01FD  0020               	movlb	0	; select bank0
  2460  01FE  086F               	movf	__y,w
  2461  01FF  39F0               	andlw	240
  2462  0200  1D03               	btfss	3,2
  2463  0201  0008               	return
  2464  0202  086F               	movf	__y,w
  2465  0203  00A5               	movwf	??_control_transfer
  2466  0204  3003               	movlw	3
  2467  0205                     u3735:	
  2468  0205  35A5               	lslf	??_control_transfer,f
  2469  0206  3EFF               	addlw	-1
  2470  0207  1D03               	skipz
  2471  0208  2A05               	goto	u3735
  2472  0209  3525               	lslf	??_control_transfer,w
  2473  020A  047C               	iorwf	__x,w
  2474  020B  00A6               	movwf	??_control_transfer+1
  2475  020C  0826               	movf	??_control_transfer+1,w
  2476  020D  00CE               	movwf	control_transfer@x
  2477  020E  084E               	movf	control_transfer@x,w
  2478  020F  00A5               	movwf	??_control_transfer
  2479  0210  0825               	movf	??_control_transfer,w
  2480  0211  07E8               	addwf	__checksum,f
  2481                           
  2482                           ;protocol.c: 96: *((uint8_t*)(&page))=x;
  2483  0212  084E               	movf	control_transfer@x,w
  2484  0213  00A5               	movwf	??_control_transfer
  2485  0214  0825               	movf	??_control_transfer,w
  2486  0215  00CC               	movwf	control_transfer@page
  2487                           
  2488                           ;protocol.c: 97: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2489  0216  307C               	movlw	__x& (0+255)
  2490  0217  2663               	fcall	_GET_CHAR_HELPER
  2491  0218  3A00               	xorlw	0
  2492  0219  1D03               	btfss	3,2
  2493  021A  0008               	return
  2494  021B  306F               	movlw	__y& (0+255)
  2495  021C  2663               	fcall	_GET_CHAR_HELPER
  2496  021D  3A00               	xorlw	0
  2497  021E  1D03               	btfss	3,2
  2498  021F  0008               	return
  2499  0220  087C               	movf	__x,w
  2500  0221  39F0               	andlw	240
  2501  0222  1D03               	btfss	3,2
  2502  0223  0008               	return
  2503  0224  0020               	movlb	0	; select bank0
  2504  0225  086F               	movf	__y,w
  2505  0226  39F0               	andlw	240
  2506  0227  1D03               	btfss	3,2
  2507  0228  0008               	return
  2508  0229  086F               	movf	__y,w
  2509  022A  00A5               	movwf	??_control_transfer
  2510  022B  3003               	movlw	3
  2511  022C                     u3785:	
  2512  022C  35A5               	lslf	??_control_transfer,f
  2513  022D  3EFF               	addlw	-1
  2514  022E  1D03               	skipz
  2515  022F  2A2C               	goto	u3785
  2516  0230  3525               	lslf	??_control_transfer,w
  2517  0231  047C               	iorwf	__x,w
  2518  0232  00A6               	movwf	??_control_transfer+1
  2519  0233  0826               	movf	??_control_transfer+1,w
  2520  0234  00CE               	movwf	control_transfer@x
  2521  0235  084E               	movf	control_transfer@x,w
  2522  0236  00A5               	movwf	??_control_transfer
  2523  0237  0825               	movf	??_control_transfer,w
  2524  0238  07E8               	addwf	__checksum,f
  2525                           
  2526                           ;protocol.c: 98: *(((uint8_t*)(&page))+1)=x;
  2527  0239  084E               	movf	control_transfer@x,w
  2528  023A  00A5               	movwf	??_control_transfer
  2529  023B  0825               	movf	??_control_transfer,w
  2530  023C  00CD               	movwf	control_transfer@page+1
  2531                           
  2532                           ;protocol.c: 99: dptr=(uint8_t*)data;
  2533  023D  3027               	movlw	control_transfer@data& (0+255)
  2534  023E  00A5               	movwf	??_control_transfer
  2535  023F  0825               	movf	??_control_transfer,w
  2536  0240  00CA               	movwf	control_transfer@dptr
  2537                           
  2538                           ;protocol.c: 100: for(i=0;i<32;i++)
  2539  0241  01CB               	clrf	control_transfer@i
  2540  0242  3020               	movlw	32
  2541  0243  024B               	subwf	control_transfer@i,w
  2542  0244  1803               	btfsc	3,0
  2543  0245  2A7C               	goto	l3001
  2544  0246                     l2979:	
  2545                           
  2546                           ;protocol.c: 101: {
  2547                           ;protocol.c: 102: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2548  0246  307C               	movlw	__x& (0+255)
  2549  0247  2663               	fcall	_GET_CHAR_HELPER
  2550  0248  3A00               	xorlw	0
  2551  0249  1D03               	btfss	3,2
  2552  024A  0008               	return
  2553  024B  306F               	movlw	__y& (0+255)
  2554  024C  2663               	fcall	_GET_CHAR_HELPER
  2555  024D  3A00               	xorlw	0
  2556  024E  1D03               	btfss	3,2
  2557  024F  0008               	return
  2558  0250  087C               	movf	__x,w
  2559  0251  39F0               	andlw	240
  2560  0252  1D03               	btfss	3,2
  2561  0253  0008               	return
  2562  0254  0020               	movlb	0	; select bank0
  2563  0255  086F               	movf	__y,w
  2564  0256  39F0               	andlw	240
  2565  0257  1D03               	btfss	3,2
  2566  0258  0008               	return
  2567  0259  086F               	movf	__y,w
  2568  025A  00A5               	movwf	??_control_transfer
  2569  025B  3003               	movlw	3
  2570  025C                     u3845:	
  2571  025C  35A5               	lslf	??_control_transfer,f
  2572  025D  3EFF               	addlw	-1
  2573  025E  1D03               	skipz
  2574  025F  2A5C               	goto	u3845
  2575  0260  3525               	lslf	??_control_transfer,w
  2576  0261  047C               	iorwf	__x,w
  2577  0262  00A6               	movwf	??_control_transfer+1
  2578  0263  0826               	movf	??_control_transfer+1,w
  2579  0264  00CE               	movwf	control_transfer@x
  2580  0265  084E               	movf	control_transfer@x,w
  2581  0266  00A5               	movwf	??_control_transfer
  2582  0267  0825               	movf	??_control_transfer,w
  2583  0268  07E8               	addwf	__checksum,f
  2584                           
  2585                           ;protocol.c: 103: *dptr++=x;
  2586  0269  084E               	movf	control_transfer@x,w
  2587  026A  00A5               	movwf	??_control_transfer
  2588  026B  084A               	movf	control_transfer@dptr,w
  2589  026C  0086               	movwf	6
  2590  026D  0187               	clrf	7
  2591  026E  0825               	movf	??_control_transfer,w
  2592  026F  0081               	movwf	1
  2593  0270  3001               	movlw	1
  2594  0271  00A5               	movwf	??_control_transfer
  2595  0272  0825               	movf	??_control_transfer,w
  2596  0273  07CA               	addwf	control_transfer@dptr,f
  2597  0274  3001               	movlw	1
  2598  0275  00A5               	movwf	??_control_transfer
  2599  0276  0825               	movf	??_control_transfer,w
  2600  0277  07CB               	addwf	control_transfer@i,f
  2601  0278  3020               	movlw	32
  2602  0279  024B               	subwf	control_transfer@i,w
  2603  027A  1C03               	skipc
  2604  027B  2A46               	goto	l2979
  2605  027C                     l3001:	
  2606                           
  2607                           ;protocol.c: 104: }
  2608                           ;protocol.c: 105: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2609  027C  307C               	movlw	__x& (0+255)
  2610  027D  2663               	fcall	_GET_CHAR_HELPER
  2611  027E  3A00               	xorlw	0
  2612  027F  1D03               	btfss	3,2
  2613  0280  0008               	return
  2614  0281  306F               	movlw	__y& (0+255)
  2615  0282  2663               	fcall	_GET_CHAR_HELPER
  2616  0283  3A00               	xorlw	0
  2617  0284  1D03               	btfss	3,2
  2618  0285  0008               	return
  2619  0286  087C               	movf	__x,w
  2620  0287  39F0               	andlw	240
  2621  0288  1D03               	btfss	3,2
  2622  0289  0008               	return
  2623  028A  0020               	movlb	0	; select bank0
  2624  028B  086F               	movf	__y,w
  2625  028C  39F0               	andlw	240
  2626  028D  1D03               	btfss	3,2
  2627  028E  0008               	return
  2628  028F  086F               	movf	__y,w
  2629  0290  00A5               	movwf	??_control_transfer
  2630  0291  3003               	movlw	3
  2631  0292                     u3905:	
  2632  0292  35A5               	lslf	??_control_transfer,f
  2633  0293  3EFF               	addlw	-1
  2634  0294  1D03               	skipz
  2635  0295  2A92               	goto	u3905
  2636  0296  3525               	lslf	??_control_transfer,w
  2637  0297  047C               	iorwf	__x,w
  2638  0298  00A6               	movwf	??_control_transfer+1
  2639  0299  0826               	movf	??_control_transfer+1,w
  2640  029A  00FC               	movwf	__x
  2641  029B  087C               	movf	__x,w
  2642  029C  00A5               	movwf	??_control_transfer
  2643  029D  0825               	movf	??_control_transfer,w
  2644  029E  07E8               	addwf	__checksum,f
  2645  029F  0868               	movf	__checksum,w
  2646  02A0  1D03               	skipz
  2647  02A1  0008               	return
  2648  02A2  307C               	movlw	__x& (0+255)
  2649  02A3  2663               	fcall	_GET_CHAR_HELPER
  2650  02A4  3A00               	xorlw	0
  2651  02A5  1D03               	btfss	3,2
  2652  02A6  0008               	return
  2653  02A7  087C               	movf	__x,w
  2654  02A8  3A11               	xorlw	17
  2655  02A9  1D03               	btfss	3,2
  2656  02AA  0008               	return
  2657                           
  2658                           ;protocol.c: 106: Save(page,data,16);
  2659  02AB  0020               	movlb	0	; select bank0
  2660  02AC  084D               	movf	control_transfer@page+1,w
  2661  02AD  01F2               	clrf	Save@address+1
  2662  02AE  07F2               	addwf	Save@address+1,f
  2663  02AF  084C               	movf	control_transfer@page,w
  2664  02B0  01F1               	clrf	Save@address
  2665  02B1  07F1               	addwf	Save@address,f
  2666  02B2  3027               	movlw	control_transfer@data& (0+255)
  2667  02B3  00A5               	movwf	??_control_transfer
  2668  02B4  0825               	movf	??_control_transfer,w
  2669  02B5  00F3               	movwf	Save@ptr
  2670  02B6  3010               	movlw	16
  2671  02B7  00A6               	movwf	??_control_transfer+1
  2672  02B8  0826               	movf	??_control_transfer+1,w
  2673  02B9  00F4               	movwf	Save@data_length
  2674  02BA  25C2               	fcall	_Save
  2675                           
  2676                           ;protocol.c: 107: switch(page)
  2677  02BB  2ADA               	goto	l3035
  2678  02BC                     l3029:	
  2679                           ;protocol.c: 108: {
  2680                           ;protocol.c: 109: case 0x7F0:
  2681                           
  2682                           
  2683                           ;protocol.c: 110: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2684  02BC  30F0               	movlw	240
  2685  02BD  00F1               	movwf	Load@address
  2686  02BE  3007               	movlw	7
  2687  02BF  00F2               	movwf	Load@address+1
  2688  02C0  30C0               	movlw	_config& (0+255)
  2689  02C1  0020               	movlb	0	; select bank0
  2690  02C2  00A5               	movwf	??_control_transfer
  2691  02C3  0825               	movf	??_control_transfer,w
  2692  02C4  00F3               	movwf	Load@ptr
  2693  02C5  3009               	movlw	9
  2694  02C6  00A6               	movwf	??_control_transfer+1
  2695  02C7  0826               	movf	??_control_transfer+1,w
  2696  02C8  00F4               	movwf	Load@data_length
  2697  02C9  2765               	fcall	_Load
  2698                           
  2699                           ;protocol.c: 111: break;
  2700  02CA  2AE8               	goto	l3037
  2701  02CB                     l3031:	
  2702                           ;protocol.c: 112: case 0x7E0:
  2703                           
  2704                           
  2705                           ;protocol.c: 113: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2706  02CB  30E0               	movlw	224
  2707  02CC  00F1               	movwf	Load@address
  2708  02CD  3007               	movlw	7
  2709  02CE  00F2               	movwf	Load@address+1
  2710  02CF  30A0               	movlw	_hitlist& (0+255)
  2711  02D0  0020               	movlb	0	; select bank0
  2712  02D1  00A5               	movwf	??_control_transfer
  2713  02D2  0825               	movf	??_control_transfer,w
  2714  02D3  00F3               	movwf	Load@ptr
  2715  02D4  3010               	movlw	16
  2716  02D5  00A6               	movwf	??_control_transfer+1
  2717  02D6  0826               	movf	??_control_transfer+1,w
  2718  02D7  00F4               	movwf	Load@data_length
  2719  02D8  2765               	fcall	_Load
  2720                           
  2721                           ;protocol.c: 115: }
  2722                           
  2723                           ;protocol.c: 114: break;
  2724  02D9  2AE8               	goto	l3037
  2725  02DA                     l3035:	
  2726                           
  2727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2728                           ; Switch size 1, requested type "space"
  2729                           ; Number of cases is 1, Range of values is 7 to 7
  2730                           ; switch strategies available:
  2731                           ; Name         Instructions Cycles
  2732                           ; simple_byte            4     3 (average)
  2733                           ; direct_byte           11     9 (fixed)
  2734                           ; jumptable            263     9 (fixed)
  2735                           ;	Chosen strategy is simple_byte
  2736  02DA  0020               	movlb	0	; select bank0
  2737  02DB  084D               	movf	control_transfer@page+1,w
  2738  02DC  3A07               	xorlw	7	; case 7
  2739  02DD  1903               	skipnz
  2740  02DE  2AE0               	goto	l3295
  2741  02DF  2AE8               	goto	l3037
  2742  02E0                     l3295:	
  2743                           
  2744                           ; Switch size 1, requested type "space"
  2745                           ; Number of cases is 2, Range of values is 224 to 240
  2746                           ; switch strategies available:
  2747                           ; Name         Instructions Cycles
  2748                           ; simple_byte            7     4 (average)
  2749                           ; direct_byte           43     9 (fixed)
  2750                           ; jumptable            263     9 (fixed)
  2751                           ;	Chosen strategy is simple_byte
  2752  02E0  084C               	movf	control_transfer@page,w
  2753  02E1  3AE0               	xorlw	224	; case 224
  2754  02E2  1903               	skipnz
  2755  02E3  2ACB               	goto	l3031
  2756  02E4  3A10               	xorlw	16	; case 240
  2757  02E5  1903               	skipnz
  2758  02E6  2ABC               	goto	l3029
  2759  02E7  2AE8               	goto	l3037
  2760  02E8                     l3037:	
  2761                           
  2762                           ;protocol.c: 116: SEND_SOF();
  2763  02E8  27D1               	fcall	_SEND_SOF
  2764                           
  2765                           ;protocol.c: 117: SEND_DATA_BYTE(0x00);
  2766  02E9  3000               	movlw	0
  2767  02EA  2641               	fcall	_SEND_DATA_BYTE
  2768                           
  2769                           ;protocol.c: 118: SEND_EOF();
  2770  02EB  26D3               	fcall	_SEND_EOF
  2771                           
  2772                           ;protocol.c: 119: break;
  2773  02EC  0008               	return
  2774  02ED                     l3039:	
  2775                           ;protocol.c: 120: case 0x7:
  2776                           
  2777                           
  2778                           ;protocol.c: 121: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2779  02ED  307C               	movlw	__x& (0+255)
  2780  02EE  2663               	fcall	_GET_CHAR_HELPER
  2781  02EF  3A00               	xorlw	0
  2782  02F0  1D03               	btfss	3,2
  2783  02F1  0008               	return
  2784  02F2  306F               	movlw	__y& (0+255)
  2785  02F3  2663               	fcall	_GET_CHAR_HELPER
  2786  02F4  3A00               	xorlw	0
  2787  02F5  1D03               	btfss	3,2
  2788  02F6  0008               	return
  2789  02F7  087C               	movf	__x,w
  2790  02F8  39F0               	andlw	240
  2791  02F9  1D03               	btfss	3,2
  2792  02FA  0008               	return
  2793  02FB  0020               	movlb	0	; select bank0
  2794  02FC  086F               	movf	__y,w
  2795  02FD  39F0               	andlw	240
  2796  02FE  1D03               	btfss	3,2
  2797  02FF  0008               	return
  2798  0300  086F               	movf	__y,w
  2799  0301  00A5               	movwf	??_control_transfer
  2800  0302  3003               	movlw	3
  2801  0303                     u3985:	
  2802  0303  35A5               	lslf	??_control_transfer,f
  2803  0304  3EFF               	addlw	-1
  2804  0305  1D03               	skipz
  2805  0306  2B03               	goto	u3985
  2806  0307  3525               	lslf	??_control_transfer,w
  2807  0308  047C               	iorwf	__x,w
  2808  0309  00A6               	movwf	??_control_transfer+1
  2809  030A  0826               	movf	??_control_transfer+1,w
  2810  030B  00FC               	movwf	__x
  2811  030C  087C               	movf	__x,w
  2812  030D  00A5               	movwf	??_control_transfer
  2813  030E  0825               	movf	??_control_transfer,w
  2814  030F  07E8               	addwf	__checksum,f
  2815  0310  0868               	movf	__checksum,w
  2816  0311  1D03               	skipz
  2817  0312  0008               	return
  2818  0313  307C               	movlw	__x& (0+255)
  2819  0314  2663               	fcall	_GET_CHAR_HELPER
  2820  0315  3A00               	xorlw	0
  2821  0316  1D03               	btfss	3,2
  2822  0317  0008               	return
  2823  0318  087C               	movf	__x,w
  2824  0319  3A11               	xorlw	17
  2825  031A  1D03               	btfss	3,2
  2826  031B  0008               	return
  2827                           
  2828                           ;protocol.c: 122: play_song(one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2829  031C  3020               	movlw	low (_one_up| (0+32768))
  2830  031D  00F1               	movwf	play_song@song
  2831  031E  3087               	movlw	high (_one_up| (0+32768))
  2832  031F  00F2               	movwf	play_song@song+1
  2833  0320  3006               	movlw	6
  2834  0321  0020               	movlb	0	; select bank0
  2835  0322  00A5               	movwf	??_control_transfer
  2836  0323  0825               	movf	??_control_transfer,w
  2837  0324  00F3               	movwf	play_song@length
  2838  0325  30E8               	movlw	232
  2839  0326  00F4               	movwf	play_song@note_duration
  2840  0327  30FD               	movlw	253
  2841  0328  00F5               	movwf	play_song@note_duration+1
  2842  0329  01F6               	clrf	play_song@repeat
  2843  032A  278A               	fcall	_play_song
  2844                           
  2845                           ;protocol.c: 123: SEND_SOF();
  2846  032B  27D1               	fcall	_SEND_SOF
  2847                           
  2848                           ;protocol.c: 124: SEND_DATA_BYTE(0x00);
  2849  032C  3000               	movlw	0
  2850  032D  2641               	fcall	_SEND_DATA_BYTE
  2851                           
  2852                           ;protocol.c: 125: SEND_EOF();
  2853  032E  26D3               	fcall	_SEND_EOF
  2854                           
  2855                           ;protocol.c: 130: }
  2856                           
  2857                           ;protocol.c: 129: goto err;
  2858                           
  2859                           ;protocol.c: 128: default:
  2860                           
  2861                           ;protocol.c: 126: break;
  2862  032F  0008               	return
  2863  0330                     l3069:	
  2864  0330  0020               	movlb	0	; select bank0
  2865  0331  0847               	movf	control_transfer@cmd,w
  2866                           
  2867                           ; Switch size 1, requested type "space"
  2868                           ; Number of cases is 5, Range of values is 1 to 7
  2869                           ; switch strategies available:
  2870                           ; Name         Instructions Cycles
  2871                           ; simple_byte           16     9 (average)
  2872                           ; direct_byte           23     9 (fixed)
  2873                           ; jumptable            263     9 (fixed)
  2874                           ;	Chosen strategy is simple_byte
  2875  0332  3A01               	xorlw	1	; case 1
  2876  0333  1903               	skipnz
  2877  0334  2876               	goto	l2765
  2878  0335  3A02               	xorlw	2	; case 3
  2879  0336  1903               	skipnz
  2880  0337  28AD               	goto	l2793
  2881  0338  3A07               	xorlw	7	; case 4
  2882  0339  1903               	skipnz
  2883  033A  2941               	goto	l2857
  2884  033B  3A02               	xorlw	2	; case 6
  2885  033C  1903               	skipnz
  2886  033D  29EF               	goto	l2939
  2887  033E  3A01               	xorlw	1	; case 7
  2888  033F  1903               	skipnz
  2889  0340  2AED               	goto	l3039
  2890  0341  2B43               	goto	l437
  2891  0342  0008               	return
  2892  0343                     l437:	
  2893                           ;protocol.c: 132: return;
  2894                           
  2895                           ;protocol.c: 131: err:
  2896                           
  2897  0343  0008               	return
  2898  0344                     __end_of_control_transfer:	
  2899                           
  2900                           	psect	text6
  2901  07D1                     __ptext6:	
  2902 ;; *************** function _SEND_SOF *****************
  2903 ;; Defined at:
  2904 ;;		line 38 in file "protocol.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;		None
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;		None
  2909 ;; Return value:  Size  Location     Type
  2910 ;;		None               void
  2911 ;; Registers used:
  2912 ;;		wreg, status,2, status,0, pclath, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2918 ;;      Params:         0       0       0       0
  2919 ;;      Locals:         0       0       0       0
  2920 ;;      Temps:          0       1       0       0
  2921 ;;      Totals:         0       1       0       0
  2922 ;;Total ram usage:        1 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    5
  2925 ;; This function calls:
  2926 ;;		_SEND_DATA_BYTE
  2927 ;;		_Send_Byte
  2928 ;; This function is called by:
  2929 ;;		_control_transfer
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           
  2934                           ;psect for function _SEND_SOF
  2935  07D1                     _SEND_SOF:	
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2939  07D1  3010               	movlw	16
  2940  07D2  2609               	fcall	_Send_Byte
  2941  07D3  3085               	movlw	133
  2942  07D4  0020               	movlb	0	; select bank0
  2943  07D5  00A4               	movwf	??_SEND_SOF
  2944  07D6                     u4387:	
  2945  07D6  0BA4               	decfsz	??_SEND_SOF,f
  2946  07D7  2FD6               	goto	u4387
  2947  07D8  0020               	movlb	0	; select bank0
  2948  07D9  01E8               	clrf	__checksum
  2949  07DA  0021               	movlb	1	; select bank1
  2950  07DB  0840               	movf	_config^(0+128),w
  2951  07DC  2641               	fcall	_SEND_DATA_BYTE
  2952  07DD  0008               	return
  2953  07DE                     __end_of_SEND_SOF:	
  2954                           
  2955                           	psect	text7
  2956  06D3                     __ptext7:	
  2957 ;; *************** function _SEND_EOF *****************
  2958 ;; Defined at:
  2959 ;;		line 39 in file "protocol.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;		None               void
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2973 ;;      Params:         0       0       0       0
  2974 ;;      Locals:         0       0       0       0
  2975 ;;      Temps:          0       1       0       0
  2976 ;;      Totals:         0       1       0       0
  2977 ;;Total ram usage:        1 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    5
  2980 ;; This function calls:
  2981 ;;		_SEND_DATA_BYTE
  2982 ;;		_Send_Byte
  2983 ;; This function is called by:
  2984 ;;		_control_transfer
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function _SEND_EOF
  2990  06D3                     _SEND_EOF:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2994  06D3  0020               	movlb	0	; select bank0
  2995  06D4  0868               	movf	__checksum,w
  2996  06D5  2641               	fcall	_SEND_DATA_BYTE
  2997  06D6  3011               	movlw	17
  2998  06D7  2609               	fcall	_Send_Byte
  2999  06D8  3085               	movlw	133
  3000  06D9  0020               	movlb	0	; select bank0
  3001  06DA  00A4               	movwf	??_SEND_EOF
  3002  06DB                     u4397:	
  3003  06DB  0BA4               	decfsz	??_SEND_EOF,f
  3004  06DC  2EDB               	goto	u4397
  3005  06DD  0008               	return
  3006  06DE                     __end_of_SEND_EOF:	
  3007                           
  3008                           	psect	text8
  3009  0641                     __ptext8:	
  3010 ;; *************** function _SEND_DATA_BYTE *****************
  3011 ;; Defined at:
  3012 ;;		line 37 in file "protocol.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  b               1    wreg     unsigned char 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  b               1    3[BANK0 ] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;		None               void
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0, pclath, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3026 ;;      Params:         0       0       0       0
  3027 ;;      Locals:         0       1       0       0
  3028 ;;      Temps:          2       0       0       0
  3029 ;;      Totals:         2       1       0       0
  3030 ;;Total ram usage:        3 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    4
  3033 ;; This function calls:
  3034 ;;		_Send_Byte
  3035 ;; This function is called by:
  3036 ;;		_SEND_SOF
  3037 ;;		_SEND_EOF
  3038 ;;		_control_transfer
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           
  3043                           ;psect for function _SEND_DATA_BYTE
  3044  0641                     _SEND_DATA_BYTE:	
  3045                           
  3046                           ;incstack = 0
  3047                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3048                           ;SEND_DATA_BYTE@b stored from wreg
  3049  0641  0020               	movlb	0	; select bank0
  3050  0642  00A3               	movwf	SEND_DATA_BYTE@b
  3051  0643  0823               	movf	SEND_DATA_BYTE@b,w
  3052  0644  390F               	andlw	15
  3053  0645  00FA               	movwf	??_SEND_DATA_BYTE
  3054  0646  087A               	movf	??_SEND_DATA_BYTE,w
  3055  0647  00FC               	movwf	__x
  3056  0648  0823               	movf	SEND_DATA_BYTE@b,w
  3057  0649  00FA               	movwf	??_SEND_DATA_BYTE
  3058  064A  3004               	movlw	4
  3059  064B                     u3075:	
  3060  064B  36FA               	lsrf	??_SEND_DATA_BYTE,f
  3061  064C  0B89               	decfsz	9,f
  3062  064D  2E4B               	goto	u3075
  3063  064E  087A               	movf	??_SEND_DATA_BYTE,w
  3064  064F  00FB               	movwf	??_SEND_DATA_BYTE+1
  3065  0650  087B               	movf	??_SEND_DATA_BYTE+1,w
  3066  0651  00EF               	movwf	__y
  3067  0652  087C               	movf	__x,w
  3068  0653  2609               	fcall	_Send_Byte
  3069  0654  3085               	movlw	133
  3070  0655  00FA               	movwf	??_SEND_DATA_BYTE
  3071  0656                     u4407:	
  3072  0656  0BFA               	decfsz	??_SEND_DATA_BYTE,f
  3073  0657  2E56               	goto	u4407
  3074  0658  0020               	movlb	0	; select bank0
  3075  0659  086F               	movf	__y,w
  3076  065A  2609               	fcall	_Send_Byte
  3077  065B  3085               	movlw	133
  3078  065C  00FA               	movwf	??_SEND_DATA_BYTE
  3079  065D                     u4417:	
  3080  065D  0BFA               	decfsz	??_SEND_DATA_BYTE,f
  3081  065E  2E5D               	goto	u4417
  3082  065F  0020               	movlb	0	; select bank0
  3083  0660  0823               	movf	SEND_DATA_BYTE@b,w
  3084  0661  02E8               	subwf	__checksum,f
  3085  0662  0008               	return
  3086  0663                     __end_of_SEND_DATA_BYTE:	
  3087                           
  3088                           	psect	text9
  3089  0663                     __ptext9:	
  3090 ;; *************** function _GET_CHAR_HELPER *****************
  3091 ;; Defined at:
  3092 ;;		line 31 in file "protocol.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  val             1    wreg     PTR unsigned char 
  3095 ;;		 -> _y(1), _x(1), 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  val             1    2[COMMON] PTR unsigned char 
  3098 ;;		 -> _y(1), _x(1), 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      unsigned char 
  3101 ;; Registers used:
  3102 ;;		wreg, fsr1l, fsr1h, status,2
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3108 ;;      Params:         0       0       0       0
  3109 ;;      Locals:         1       0       0       0
  3110 ;;      Temps:          1       0       0       0
  3111 ;;      Totals:         2       0       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    1
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_control_transfer
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           
  3123                           ;psect for function _GET_CHAR_HELPER
  3124  0663                     _GET_CHAR_HELPER:	
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3128                           ;GET_CHAR_HELPER@val stored from wreg
  3129  0663  00F2               	movwf	GET_CHAR_HELPER@val
  3130  0664  0020               	movlb	0	; select bank0
  3131  0665  01DE               	clrf	__i
  3132  0666  01DF               	clrf	__i+1
  3133  0667                     l317:	
  3134  0667  1A91               	btfsc	17,5	;volatile
  3135  0668  2E76               	goto	l1903
  3136  0669  3001               	movlw	1
  3137  066A  07DE               	addwf	__i,f
  3138  066B  3000               	movlw	0
  3139  066C  3DDF               	addwfc	__i+1,f
  3140  066D  3075               	movlw	117
  3141  066E  025F               	subwf	__i+1,w
  3142  066F  3030               	movlw	48
  3143  0670  1903               	skipnz
  3144  0671  025E               	subwf	__i,w
  3145  0672  1C03               	skipc
  3146  0673  2E67               	goto	l317
  3147  0674  3001               	movlw	1
  3148  0675  0008               	return
  3149  0676                     l1903:	
  3150  0676  0023               	movlb	3	; select bank3
  3151  0677  0819               	movf	25,w	;volatile
  3152  0678  00F1               	movwf	??_GET_CHAR_HELPER
  3153  0679  0872               	movf	GET_CHAR_HELPER@val,w
  3154  067A  0086               	movwf	6
  3155  067B  0187               	clrf	7
  3156  067C  0871               	movf	??_GET_CHAR_HELPER,w
  3157  067D  0081               	movwf	1
  3158  067E  3000               	movlw	0
  3159  067F  0008               	return
  3160  0680                     __end_of_GET_CHAR_HELPER:	
  3161                           
  3162                           	psect	text10
  3163  056E                     __ptext10:	
  3164 ;; *************** function _add_to_hitlist *****************
  3165 ;; Defined at:
  3166 ;;		line 342 in file "user.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  gun             1    wreg     unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  gun             1    5[COMMON] unsigned char 
  3171 ;;  i               1    8[COMMON] unsigned char 
  3172 ;;  gun16           2    6[COMMON] unsigned int 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;		None               void
  3175 ;; Registers used:
  3176 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3182 ;;      Params:         0       0       0       0
  3183 ;;      Locals:         4       0       0       0
  3184 ;;      Temps:          4       0       0       0
  3185 ;;      Totals:         8       0       0       0
  3186 ;;Total ram usage:        8 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    1
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_hit_by
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _add_to_hitlist
  3198  056E                     _add_to_hitlist:	
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3202                           ;add_to_hitlist@gun stored from wreg
  3203  056E  00F5               	movwf	add_to_hitlist@gun
  3204                           
  3205                           ;user.c: 344: uint16_t gun16 = gun & 0x7F;
  3206  056F  0875               	movf	add_to_hitlist@gun,w
  3207  0570  397F               	andlw	127
  3208  0571  00F1               	movwf	??_add_to_hitlist
  3209  0572  01F2               	clrf	??_add_to_hitlist+1
  3210  0573  0871               	movf	??_add_to_hitlist,w
  3211  0574  00F6               	movwf	add_to_hitlist@gun16
  3212  0575  0872               	movf	??_add_to_hitlist+1,w
  3213  0576  00F7               	movwf	add_to_hitlist@gun16+1
  3214                           
  3215                           ;user.c: 345: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3216  0577  01F8               	clrf	add_to_hitlist@i
  3217  0578                     L2:	
  3218  0578  3010               	movlw	16
  3219  0579  0278               	subwf	add_to_hitlist@i,w
  3220  057A  1803               	btfsc	3,0
  3221  057B  0008               	return
  3222                           
  3223                           ;user.c: 346: {
  3224                           ;user.c: 347: if(!(hitlist[i] & 0x007F))
  3225  057C  3578               	lslf	add_to_hitlist@i,w
  3226  057D  3EA0               	addlw	_hitlist& (0+255)
  3227  057E  0086               	movwf	6
  3228  057F  0187               	clrf	7
  3229  0580  3F40               	moviw [0]fsr1
  3230  0581  00F1               	movwf	??_add_to_hitlist
  3231  0582  3F41               	moviw [1]fsr1
  3232  0583  00F2               	movwf	??_add_to_hitlist+1
  3233  0584  307F               	movlw	127
  3234  0585  0571               	andwf	??_add_to_hitlist,w
  3235  0586  00F3               	movwf	??_add_to_hitlist+2
  3236  0587  3000               	movlw	0
  3237  0588  0572               	andwf	??_add_to_hitlist+1,w
  3238  0589  00F4               	movwf	??_add_to_hitlist+3
  3239  058A  0874               	movf	??_add_to_hitlist+3,w
  3240  058B  0473               	iorwf	??_add_to_hitlist+2,w
  3241  058C  1D03               	skipz
  3242  058D  2D98               	goto	l2333
  3243                           
  3244                           ;user.c: 348: {
  3245                           ;user.c: 349: hitlist[i] |= gun16;
  3246  058E  3578               	lslf	add_to_hitlist@i,w
  3247  058F  3EA0               	addlw	_hitlist& (0+255)
  3248  0590  0086               	movwf	6
  3249  0591  0187               	clrf	7
  3250  0592  0876               	movf	add_to_hitlist@gun16,w
  3251  0593  0481               	iorwf	1,f
  3252  0594  3141               	addfsr 1,1
  3253  0595  0877               	movf	add_to_hitlist@gun16+1,w
  3254  0596  0481               	iorwf	1,f
  3255                           
  3256                           ;user.c: 350: return;
  3257  0597  0008               	return
  3258  0598                     l2333:	
  3259                           
  3260                           ;user.c: 351: }
  3261                           ;user.c: 352: if(!(hitlist[i] & 0x3F80))
  3262  0598  3578               	lslf	add_to_hitlist@i,w
  3263  0599  3EA0               	addlw	_hitlist& (0+255)
  3264  059A  0086               	movwf	6
  3265  059B  0187               	clrf	7
  3266  059C  3F40               	moviw [0]fsr1
  3267  059D  00F1               	movwf	??_add_to_hitlist
  3268  059E  3F41               	moviw [1]fsr1
  3269  059F  00F2               	movwf	??_add_to_hitlist+1
  3270  05A0  3080               	movlw	128
  3271  05A1  0571               	andwf	??_add_to_hitlist,w
  3272  05A2  00F3               	movwf	??_add_to_hitlist+2
  3273  05A3  303F               	movlw	63
  3274  05A4  0572               	andwf	??_add_to_hitlist+1,w
  3275  05A5  00F4               	movwf	??_add_to_hitlist+3
  3276  05A6  0874               	movf	??_add_to_hitlist+3,w
  3277  05A7  0473               	iorwf	??_add_to_hitlist+2,w
  3278  05A8  1D03               	skipz
  3279  05A9  2DBD               	goto	l2339
  3280                           
  3281                           ;user.c: 353: {
  3282                           ;user.c: 354: hitlist[i] |= gun16 << 7;
  3283  05AA  0877               	movf	add_to_hitlist@gun16+1,w
  3284  05AB  00F2               	movwf	??_add_to_hitlist+1
  3285  05AC  0876               	movf	add_to_hitlist@gun16,w
  3286  05AD  00F1               	movwf	??_add_to_hitlist
  3287  05AE  3007               	movlw	7
  3288  05AF                     u2655:	
  3289  05AF  35F1               	lslf	??_add_to_hitlist,f
  3290  05B0  0DF2               	rlf	??_add_to_hitlist+1,f
  3291  05B1  0B89               	decfsz	9,f
  3292  05B2  2DAF               	goto	u2655
  3293  05B3  3578               	lslf	add_to_hitlist@i,w
  3294  05B4  3EA0               	addlw	_hitlist& (0+255)
  3295  05B5  0086               	movwf	6
  3296  05B6  0187               	clrf	7
  3297  05B7  0871               	movf	??_add_to_hitlist,w
  3298  05B8  0481               	iorwf	1,f
  3299  05B9  3141               	addfsr 1,1
  3300  05BA  0872               	movf	??_add_to_hitlist+1,w
  3301  05BB  0481               	iorwf	1,f
  3302                           
  3303                           ;user.c: 355: return;
  3304  05BC  0008               	return
  3305  05BD                     l2339:	
  3306  05BD  3001               	movlw	1
  3307  05BE  00F1               	movwf	??_add_to_hitlist
  3308  05BF  0871               	movf	??_add_to_hitlist,w
  3309  05C0  07F8               	addwf	add_to_hitlist@i,f
  3310  05C1  2D78               	goto	L2
  3311  05C2                     __end_of_add_to_hitlist:	
  3312                           
  3313                           	psect	text11
  3314  0344                     __ptext11:	
  3315 ;; *************** function _handle_fire *****************
  3316 ;; Defined at:
  3317 ;;		line 253 in file "user.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  a               2    3[BANK0 ] unsigned int 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3331 ;;      Params:         0       0       0       0
  3332 ;;      Locals:         0       2       0       0
  3333 ;;      Temps:          2       0       0       0
  3334 ;;      Totals:         2       2       0       0
  3335 ;;Total ram usage:        4 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    4
  3338 ;; This function calls:
  3339 ;;		_ADC_read
  3340 ;;		_Send_Byte
  3341 ;;		_cheat
  3342 ;;		_led_off
  3343 ;;		_play_song
  3344 ;;		_red_led_on
  3345 ;;		_stop_song
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _handle_fire
  3353  0344                     _handle_fire:	
  3354                           
  3355                           ;user.c: 254: static uint16_t timer = 0;
  3356                           ;user.c: 255: static uint16_t counter = 0;
  3357                           ;user.c: 256: uint16_t a;
  3358                           ;user.c: 258: a=ADC_read();
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3362  0344  2680               	fcall	_ADC_read
  3363  0345  0872               	movf	?_ADC_read+1,w
  3364  0346  0020               	movlb	0	; select bank0
  3365  0347  01A4               	clrf	handle_fire@a+1
  3366  0348  07A4               	addwf	handle_fire@a+1,f
  3367  0349  0871               	movf	?_ADC_read,w
  3368  034A  01A3               	clrf	handle_fire@a
  3369  034B  07A3               	addwf	handle_fire@a,f
  3370                           
  3371                           ;user.c: 259: if (a > config.fire_cheating){
  3372  034C  0824               	movf	handle_fire@a+1,w
  3373  034D  0021               	movlb	1	; select bank1
  3374  034E  024D               	subwf	((_config+1)^(0+128)+12),w
  3375  034F  1D03               	skipz
  3376  0350  2B55               	goto	u4235
  3377  0351  0020               	movlb	0	; select bank0
  3378  0352  0823               	movf	handle_fire@a,w
  3379  0353  0021               	movlb	1	; select bank1
  3380  0354  024C               	subwf	(_config^(0+128)+12),w
  3381  0355                     u4235:	
  3382  0355  1803               	skipnc
  3383  0356  2B58               	goto	l3209
  3384                           
  3385                           ;user.c: 260: cheat();
  3386  0357  26B4               	fcall	_cheat
  3387  0358                     l3209:	
  3388                           
  3389                           ;user.c: 261: }
  3390                           ;user.c: 262: if (a > config.fire_threshold && a < config.fire_cheating)
  3391  0358  0020               	movlb	0	; select bank0
  3392  0359  0824               	movf	handle_fire@a+1,w
  3393  035A  0021               	movlb	1	; select bank1
  3394  035B  024B               	subwf	((_config+1)^(0+128)+10),w
  3395  035C  1D03               	skipz
  3396  035D  2B62               	goto	u4245
  3397  035E  0020               	movlb	0	; select bank0
  3398  035F  0823               	movf	handle_fire@a,w
  3399  0360  0021               	movlb	1	; select bank1
  3400  0361  024A               	subwf	(_config^(0+128)+10),w
  3401  0362                     u4245:	
  3402  0362  1803               	skipnc
  3403  0363  2BC5               	goto	l3237
  3404  0364  084D               	movf	((_config+1)^(0+128)+12),w
  3405  0365  0020               	movlb	0	; select bank0
  3406  0366  0224               	subwf	handle_fire@a+1,w
  3407  0367  1D03               	skipz
  3408  0368  2B6D               	goto	u4255
  3409  0369  0021               	movlb	1	; select bank1
  3410  036A  084C               	movf	(_config^(0+128)+12),w
  3411  036B  0020               	movlb	0	; select bank0
  3412  036C  0223               	subwf	handle_fire@a,w
  3413  036D                     u4255:	
  3414  036D  1803               	skipnc
  3415  036E  2BC5               	goto	l3237
  3416  036F                     l223:	
  3417                           ;user.c: 263: {
  3418                           ;user.c: 264: while(!my_random_number){
  3419                           
  3420  036F  086C               	movf	_my_random_number,w
  3421  0370  1D03               	skipz
  3422  0371  2B77               	goto	l3217
  3423                           
  3424                           ;user.c: 265: my_random_number = TMR0;
  3425  0372  0815               	movf	21,w	;volatile
  3426  0373  00FA               	movwf	??_handle_fire
  3427  0374  087A               	movf	??_handle_fire,w
  3428  0375  00EC               	movwf	_my_random_number
  3429  0376  2B6F               	goto	l223
  3430  0377                     l3217:	
  3431                           
  3432                           ;user.c: 266: }
  3433                           ;user.c: 267: if(timer < config.fire_holdoff)
  3434  0377  0021               	movlb	1	; select bank1
  3435  0378  084F               	movf	((_config+1)^(0+128)+14),w
  3436  0379  0020               	movlb	0	; select bank0
  3437  037A  0267               	subwf	handle_fire@timer+1,w
  3438  037B  1D03               	skipz
  3439  037C  2B81               	goto	u4275
  3440  037D  0021               	movlb	1	; select bank1
  3441  037E  084E               	movf	(_config^(0+128)+14),w
  3442  037F  0020               	movlb	0	; select bank0
  3443  0380  0266               	subwf	handle_fire@timer,w
  3444  0381                     u4275:	
  3445  0381  1803               	skipnc
  3446  0382  2B88               	goto	l3221
  3447                           
  3448                           ;user.c: 268: {
  3449                           ;user.c: 269: timer ++;
  3450  0383  3001               	movlw	1
  3451  0384  07E6               	addwf	handle_fire@timer,f
  3452  0385  3000               	movlw	0
  3453  0386  3DE7               	addwfc	handle_fire@timer+1,f
  3454                           
  3455                           ;user.c: 270: }
  3456  0387  0008               	return
  3457  0388                     l3221:	
  3458                           
  3459                           ;user.c: 271: else
  3460                           ;user.c: 272: {
  3461                           ;user.c: 273: if(!config.power || counter <= config.power)
  3462  0388  3002               	movlw	2
  3463  0389  3EC0               	addlw	_config& (0+255)
  3464  038A  0086               	movwf	6
  3465  038B  0187               	clrf	7
  3466  038C  0016               	moviw fsr1++
  3467  038D  0401               	iorwf	1,w
  3468  038E  1903               	skipnz
  3469  038F  2B9B               	goto	l3225
  3470  0390  0865               	movf	handle_fire@counter+1,w
  3471  0391  0021               	movlb	1	; select bank1
  3472  0392  0243               	subwf	((_config+1)^(0+128)+2),w
  3473  0393  1D03               	skipz
  3474  0394  2B99               	goto	u4295
  3475  0395  0020               	movlb	0	; select bank0
  3476  0396  0864               	movf	handle_fire@counter,w
  3477  0397  0021               	movlb	1	; select bank1
  3478  0398  0242               	subwf	(_config^(0+128)+2),w
  3479  0399                     u4295:	
  3480  0399  1C03               	skipc
  3481  039A  2BC3               	goto	l3235
  3482  039B                     l3225:	
  3483                           
  3484                           ;user.c: 274: {
  3485                           ;user.c: 275: if(!counter)
  3486  039B  0020               	movlb	0	; select bank0
  3487  039C  0865               	movf	handle_fire@counter+1,w
  3488  039D  0464               	iorwf	handle_fire@counter,w
  3489  039E  1D03               	skipz
  3490  039F  2BBA               	goto	l3231
  3491                           
  3492                           ;user.c: 276: {
  3493                           ;user.c: 277: red_led_on();
  3494  03A0  26F0               	fcall	_red_led_on
  3495                           
  3496                           ;user.c: 278: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  3497  03A1  3000               	movlw	low (_fire_song| (0+32768))
  3498  03A2  00F1               	movwf	play_song@song
  3499  03A3  3087               	movlw	high (_fire_song| (0+32768))
  3500  03A4  00F2               	movwf	play_song@song+1
  3501  03A5  3010               	movlw	16
  3502  03A6  00FA               	movwf	??_handle_fire
  3503  03A7  087A               	movf	??_handle_fire,w
  3504  03A8  00F3               	movwf	play_song@length
  3505  03A9  30B8               	movlw	184
  3506  03AA  00F4               	movwf	play_song@note_duration
  3507  03AB  300B               	movlw	11
  3508  03AC  00F5               	movwf	play_song@note_duration+1
  3509  03AD  3002               	movlw	2
  3510  03AE  3EC0               	addlw	_config& (0+255)
  3511  03AF  0086               	movwf	6
  3512  03B0  0187               	clrf	7
  3513  03B1  0016               	moviw fsr1++
  3514  03B2  0401               	iorwf	1,w
  3515  03B3  3000               	movlw	0
  3516  03B4  1903               	skipnz
  3517  03B5  3001               	movlw	1
  3518  03B6  00FB               	movwf	??_handle_fire+1
  3519  03B7  087B               	movf	??_handle_fire+1,w
  3520  03B8  00F6               	movwf	play_song@repeat
  3521  03B9  278A               	fcall	_play_song
  3522  03BA                     l3231:	
  3523                           
  3524                           ;user.c: 279: }
  3525                           ;user.c: 280: Send_Byte(config.id);
  3526  03BA  0021               	movlb	1	; select bank1
  3527  03BB  0840               	movf	_config^(0+128),w
  3528  03BC  2609               	fcall	_Send_Byte
  3529                           
  3530                           ;user.c: 281: counter++;
  3531  03BD  3001               	movlw	1
  3532  03BE  0020               	movlb	0	; select bank0
  3533  03BF  07E4               	addwf	handle_fire@counter,f
  3534  03C0  3000               	movlw	0
  3535  03C1  3DE5               	addwfc	handle_fire@counter+1,f
  3536                           
  3537                           ;user.c: 282: }
  3538  03C2  0008               	return
  3539  03C3                     l3235:	
  3540                           
  3541                           ;user.c: 283: else
  3542                           ;user.c: 284: {
  3543                           ;user.c: 285: led_off();
  3544  03C3  26F9               	fcall	_led_off
  3545                           
  3546                           ;user.c: 286: }
  3547                           ;user.c: 287: }
  3548                           ;user.c: 288: }
  3549  03C4  0008               	return
  3550  03C5                     l3237:	
  3551                           
  3552                           ;user.c: 289: else
  3553                           ;user.c: 290: {
  3554                           ;user.c: 291: led_off();
  3555  03C5  26F9               	fcall	_led_off
  3556                           
  3557                           ;user.c: 292: if(!config.power && counter) stop_song();
  3558  03C6  0021               	movlb	1	; select bank1
  3559  03C7  0843               	movf	((_config+1)^(0+128)+2),w
  3560  03C8  0442               	iorwf	(_config^(0+128)+2),w
  3561  03C9  1D03               	skipz
  3562  03CA  2BD1               	goto	l3245
  3563  03CB  0020               	movlb	0	; select bank0
  3564  03CC  0865               	movf	handle_fire@counter+1,w
  3565  03CD  0464               	iorwf	handle_fire@counter,w
  3566  03CE  1903               	skipnz
  3567  03CF  2BD1               	goto	l3245
  3568  03D0  26EB               	fcall	_stop_song
  3569  03D1                     l3245:	
  3570                           
  3571                           ;user.c: 293: timer = 0;
  3572  03D1  0020               	movlb	0	; select bank0
  3573  03D2  01E6               	clrf	handle_fire@timer
  3574  03D3  01E7               	clrf	handle_fire@timer+1
  3575                           
  3576                           ;user.c: 294: counter = 0;
  3577  03D4  01E4               	clrf	handle_fire@counter
  3578  03D5  01E5               	clrf	handle_fire@counter+1
  3579                           
  3580                           ;user.c: 295: return 0;
  3581                           ;	Return value of _handle_fire is never used
  3582  03D6  0008               	return
  3583  03D7                     __end_of_handle_fire:	
  3584                           ;user.c: 296: }
  3585                           ;user.c: 297: return 1;
  3586                           ;	Return value of _handle_fire is never used
  3587                           
  3588                           
  3589                           	psect	text12
  3590  06EB                     __ptext12:	
  3591 ;; *************** function _stop_song *****************
  3592 ;; Defined at:
  3593 ;;		line 110 in file "user.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;		None               void
  3600 ;; Registers used:
  3601 ;;		status,2, status,0, pclath, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3607 ;;      Params:         0       0       0       0
  3608 ;;      Locals:         0       0       0       0
  3609 ;;      Temps:          0       0       0       0
  3610 ;;      Totals:         0       0       0       0
  3611 ;;Total ram usage:        0 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    2
  3614 ;; This function calls:
  3615 ;;		_tone_off
  3616 ;; This function is called by:
  3617 ;;		_handle_music
  3618 ;;		_handle_fire
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _stop_song
  3624  06EB                     _stop_song:	
  3625                           
  3626                           ;user.c: 112: tone_off();
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  3630  06EB  26FC               	fcall	_tone_off
  3631                           
  3632                           ;user.c: 113: T1CONbits.TMR1ON=0;
  3633  06EC  0020               	movlb	0	; select bank0
  3634  06ED  1018               	bcf	24,0	;volatile
  3635                           
  3636                           ;user.c: 114: PIR1bits.TMR1IF=0;
  3637  06EE  1011               	bcf	17,0	;volatile
  3638  06EF  0008               	return
  3639  06F0                     __end_of_stop_song:	
  3640                           
  3641                           	psect	text13
  3642  06F0                     __ptext13:	
  3643 ;; *************** function _red_led_on *****************
  3644 ;; Defined at:
  3645 ;;		line 80 in file "user.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;		None
  3650 ;; Return value:  Size  Location     Type
  3651 ;;		None               void
  3652 ;; Registers used:
  3653 ;;		None
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3659 ;;      Params:         0       0       0       0
  3660 ;;      Locals:         0       0       0       0
  3661 ;;      Temps:          0       0       0       0
  3662 ;;      Totals:         0       0       0       0
  3663 ;;Total ram usage:        0 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_handle_fire
  3670 ;;		_super_dead_mode
  3671 ;;		_hit_by
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _red_led_on
  3677  06F0                     _red_led_on:	
  3678                           
  3679                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _red_led_on: []
  3683  06F0  0021               	movlb	1	; select bank1
  3684  06F1  128C               	bcf	12,5	;volatile
  3685                           
  3686                           ;user.c: 83: PORTAbits.RA5 = 0;
  3687  06F2  0020               	movlb	0	; select bank0
  3688  06F3  128C               	bcf	12,5	;volatile
  3689  06F4  0008               	return
  3690  06F5                     __end_of_red_led_on:	
  3691                           
  3692                           	psect	text14
  3693  078A                     __ptext14:	
  3694 ;; *************** function _play_song *****************
  3695 ;; Defined at:
  3696 ;;		line 97 in file "user.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  song            2    1[COMMON] PTR unsigned int 
  3699 ;;		 -> one_up(12), death_song(2), dead_song(6), fire_song(32), 
  3700 ;;  length          1    3[COMMON] unsigned char 
  3701 ;;  note_duratio    2    4[COMMON] unsigned int 
  3702 ;;  repeat          1    6[COMMON] unsigned char 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3714 ;;      Params:         6       0       0       0
  3715 ;;      Locals:         0       0       0       0
  3716 ;;      Temps:          2       0       0       0
  3717 ;;      Totals:         8       0       0       0
  3718 ;;Total ram usage:        8 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    1
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_handle_fire
  3725 ;;		_super_dead_mode
  3726 ;;		_hit_by
  3727 ;;		_control_transfer
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           
  3732                           ;psect for function _play_song
  3733  078A                     _play_song:	
  3734                           
  3735                           ;user.c: 99: cur_song=song;
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3739  078A  0872               	movf	play_song@song+1,w
  3740  078B  0020               	movlb	0	; select bank0
  3741  078C  01E1               	clrf	_cur_song+1
  3742  078D  07E1               	addwf	_cur_song+1,f
  3743  078E  0871               	movf	play_song@song,w
  3744  078F  01E0               	clrf	_cur_song
  3745  0790  07E0               	addwf	_cur_song,f
  3746                           
  3747                           ;user.c: 100: cur_song_length=length;
  3748  0791  0873               	movf	play_song@length,w
  3749  0792  00F7               	movwf	??_play_song
  3750  0793  0877               	movf	??_play_song,w
  3751  0794  00E9               	movwf	_cur_song_length
  3752                           
  3753                           ;user.c: 101: cur_song_ptr=0;
  3754  0795  01EA               	clrf	_cur_song_ptr
  3755                           
  3756                           ;user.c: 102: cur_song_repeat=repeat;
  3757  0796  0876               	movf	play_song@repeat,w
  3758  0797  00F7               	movwf	??_play_song
  3759  0798  0877               	movf	??_play_song,w
  3760  0799  00EB               	movwf	_cur_song_repeat
  3761                           
  3762                           ;user.c: 103: cur_song_duration=note_duration;
  3763  079A  0875               	movf	play_song@note_duration+1,w
  3764  079B  01E3               	clrf	_cur_song_duration+1
  3765  079C  07E3               	addwf	_cur_song_duration+1,f
  3766  079D  0874               	movf	play_song@note_duration,w
  3767  079E  01E2               	clrf	_cur_song_duration
  3768  079F  07E2               	addwf	_cur_song_duration,f
  3769                           
  3770                           ;user.c: 105: TMR1 = -cur_song_duration;
  3771  07A0  0962               	comf	_cur_song_duration,w
  3772  07A1  00F7               	movwf	??_play_song
  3773  07A2  0963               	comf	_cur_song_duration+1,w
  3774  07A3  00F8               	movwf	??_play_song+1
  3775  07A4  0AF7               	incf	??_play_song,f
  3776  07A5  1903               	skipnz
  3777  07A6  0AF8               	incf	??_play_song+1,f
  3778  07A7  0877               	movf	??_play_song,w
  3779  07A8  0096               	movwf	22	;volatile
  3780  07A9  0878               	movf	??_play_song+1,w
  3781  07AA  0097               	movwf	23	;volatile
  3782                           
  3783                           ;user.c: 106: PIR1bits.TMR1IF = 1;
  3784  07AB  1411               	bsf	17,0	;volatile
  3785                           
  3786                           ;user.c: 107: T1CONbits.TMR1ON = 1;
  3787  07AC  1418               	bsf	24,0	;volatile
  3788  07AD  0008               	return
  3789  07AE                     __end_of_play_song:	
  3790                           
  3791                           	psect	text15
  3792  06F9                     __ptext15:	
  3793 ;; *************** function _led_off *****************
  3794 ;; Defined at:
  3795 ;;		line 92 in file "user.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;		None               void
  3802 ;; Registers used:
  3803 ;;		None
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3809 ;;      Params:         0       0       0       0
  3810 ;;      Locals:         0       0       0       0
  3811 ;;      Temps:          0       0       0       0
  3812 ;;      Totals:         0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_handle_fire
  3820 ;;		_super_dead_mode
  3821 ;;		_hit_by
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _led_off
  3827  06F9                     _led_off:	
  3828                           
  3829                           ;user.c: 94: TRISAbits.TRISA5 = 1;
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _led_off: []
  3833  06F9  0021               	movlb	1	; select bank1
  3834  06FA  168C               	bsf	12,5	;volatile
  3835  06FB  0008               	return
  3836  06FC                     __end_of_led_off:	
  3837                           
  3838                           	psect	text16
  3839  0609                     __ptext16:	
  3840 ;; *************** function _Send_Byte *****************
  3841 ;; Defined at:
  3842 ;;		line 160 in file "user.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  data            1    wreg     unsigned char 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  data            1    0[BANK0 ] unsigned char 
  3847 ;;  i               2    1[BANK0 ] unsigned int 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;		None               void
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0, pclath, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3857 ;;      Params:         0       0       0       0
  3858 ;;      Locals:         0       3       0       0
  3859 ;;      Temps:          2       0       0       0
  3860 ;;      Totals:         2       3       0       0
  3861 ;;Total ram usage:        5 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		_Disable_Modulation
  3866 ;;		_Modulate_Serial
  3867 ;;		_cheat
  3868 ;; This function is called by:
  3869 ;;		_handle_fire
  3870 ;;		_super_dead_mode
  3871 ;;		_SEND_DATA_BYTE
  3872 ;;		_SEND_SOF
  3873 ;;		_SEND_EOF
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           
  3878                           ;psect for function _Send_Byte
  3879  0609                     _Send_Byte:	
  3880                           
  3881                           ;incstack = 0
  3882                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3883                           ;Send_Byte@data stored from wreg
  3884  0609  0020               	movlb	0	; select bank0
  3885  060A  00A0               	movwf	Send_Byte@data
  3886                           
  3887                           ;user.c: 162: RCSTAbits.CREN = 0;
  3888  060B  0023               	movlb	3	; select bank3
  3889  060C  121D               	bcf	29,4	;volatile
  3890                           
  3891                           ;user.c: 164: for(uint16_t i=0; i<100; i++){
  3892  060D  0020               	movlb	0	; select bank0
  3893  060E  01A1               	clrf	Send_Byte@i
  3894  060F  01A2               	clrf	Send_Byte@i+1
  3895  0610  3000               	movlw	0
  3896  0611  0222               	subwf	Send_Byte@i+1,w
  3897  0612  3064               	movlw	100
  3898  0613  1903               	skipnz
  3899  0614  0221               	subwf	Send_Byte@i,w
  3900  0615  1803               	btfsc	3,0
  3901  0616  2E35               	goto	l2667
  3902  0617                     l179:	
  3903                           
  3904                           ;user.c: 165: if(PORTAbits.RA1){break;}
  3905  0617  188C               	btfsc	12,1	;volatile
  3906  0618  2E35               	goto	l2667
  3907                           
  3908                           ;user.c: 166: _delay((unsigned long)((1)*(16000000/4000.0)));
  3909  0619  3006               	movlw	6
  3910  061A  00F9               	movwf	??_Send_Byte+1
  3911  061B  3030               	movlw	48
  3912  061C  00F8               	movwf	??_Send_Byte
  3913  061D                     u4427:	
  3914  061D  0BF8               	decfsz	??_Send_Byte,f
  3915  061E  2E1D               	goto	u4427
  3916  061F  0BF9               	decfsz	??_Send_Byte+1,f
  3917  0620  2E1D               	goto	u4427
  3918  0621  0000               	nop
  3919                           
  3920                           ;user.c: 167: if(i==99){cheat();}
  3921  0622  3063               	movlw	99
  3922  0623  0020               	movlb	0	; select bank0
  3923  0624  0621               	xorwf	Send_Byte@i,w
  3924  0625  0422               	iorwf	Send_Byte@i+1,w
  3925  0626  1D03               	skipz
  3926  0627  2E29               	goto	l2663
  3927  0628  26B4               	fcall	_cheat
  3928  0629                     l2663:	
  3929  0629  3001               	movlw	1
  3930  062A  0020               	movlb	0	; select bank0
  3931  062B  07A1               	addwf	Send_Byte@i,f
  3932  062C  3000               	movlw	0
  3933  062D  3DA2               	addwfc	Send_Byte@i+1,f
  3934  062E  3000               	movlw	0
  3935  062F  0222               	subwf	Send_Byte@i+1,w
  3936  0630  3064               	movlw	100
  3937  0631  1903               	skipnz
  3938  0632  0221               	subwf	Send_Byte@i,w
  3939  0633  1C03               	skipc
  3940  0634  2E17               	goto	l179
  3941  0635                     l2667:	
  3942                           
  3943                           ;user.c: 168: }
  3944                           ;user.c: 169: Modulate_Serial();
  3945  0635  26DE               	fcall	_Modulate_Serial
  3946                           
  3947                           ;user.c: 170: TXREG = data;
  3948  0636  0020               	movlb	0	; select bank0
  3949  0637  0820               	movf	Send_Byte@data,w
  3950  0638  0023               	movlb	3	; select bank3
  3951  0639  009A               	movwf	26	;volatile
  3952  063A                     l183:	
  3953                           ;user.c: 171: while(!TXSTAbits.TRMT);
  3954                           
  3955  063A  1C9E               	btfss	30,1	;volatile
  3956  063B  2E3A               	goto	l183
  3957                           
  3958                           ;user.c: 172: Disable_Modulation();
  3959  063C  26F5               	fcall	_Disable_Modulation
  3960                           
  3961                           ;user.c: 173: RCSTAbits.CREN = 1;
  3962  063D  0023               	movlb	3	; select bank3
  3963  063E  161D               	bsf	29,4	;volatile
  3964                           
  3965                           ;user.c: 174: RCREG;
  3966  063F  0819               	movf	25,w	;volatile
  3967  0640  0008               	return
  3968  0641                     __end_of_Send_Byte:	
  3969                           
  3970                           	psect	text17
  3971  06B4                     __ptext17:	
  3972 ;; *************** function _cheat *****************
  3973 ;; Defined at:
  3974 ;;		line 244 in file "user.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;		None               void
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0, pclath, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3988 ;;      Params:         0       0       0       0
  3989 ;;      Locals:         0       0       0       0
  3990 ;;      Temps:          3       0       0       0
  3991 ;;      Totals:         3       0       0       0
  3992 ;;Total ram usage:        3 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    2
  3995 ;; This function calls:
  3996 ;;		_tone
  3997 ;;		_tone_off
  3998 ;; This function is called by:
  3999 ;;		_Send_Byte
  4000 ;;		_handle_fire
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           
  4005                           ;psect for function _cheat
  4006  06B4                     _cheat:	
  4007  06B4                     l211:	
  4008                           ;incstack = 0
  4009                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  4010                           ;user.c: 245: while(1){
  4011                           
  4012                           
  4013                           ;user.c: 247: tone(7813);
  4014  06B4  3085               	movlw	133
  4015  06B5  00F1               	movwf	tone@period
  4016  06B6  301E               	movlw	30
  4017  06B7  00F2               	movwf	tone@period+1
  4018  06B8  269D               	fcall	_tone
  4019                           
  4020                           ;user.c: 248: _delay((unsigned long)((200)*(16000000/4000.0)));
  4021  06B9  3005               	movlw	5
  4022  06BA  00F7               	movwf	??_cheat+2
  4023  06BB  300F               	movlw	15
  4024  06BC  00F6               	movwf	??_cheat+1
  4025  06BD  30F4               	movlw	244
  4026  06BE  00F5               	movwf	??_cheat
  4027  06BF                     u4437:	
  4028  06BF  0BF5               	decfsz	??_cheat,f
  4029  06C0  2EBF               	goto	u4437
  4030  06C1  0BF6               	decfsz	??_cheat+1,f
  4031  06C2  2EBF               	goto	u4437
  4032  06C3  0BF7               	decfsz	??_cheat+2,f
  4033  06C4  2EBF               	goto	u4437
  4034                           
  4035                           ;user.c: 249: tone_off();
  4036  06C5  26FC               	fcall	_tone_off
  4037  06C6  2EB4               	goto	l211
  4038  06C7                     __end_of_cheat:	
  4039                           
  4040                           	psect	text18
  4041  06FC                     __ptext18:	
  4042 ;; *************** function _tone_off *****************
  4043 ;; Defined at:
  4044 ;;		line 148 in file "user.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;		None               void
  4051 ;; Registers used:
  4052 ;;		None
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4058 ;;      Params:         0       0       0       0
  4059 ;;      Locals:         0       0       0       0
  4060 ;;      Temps:          0       0       0       0
  4061 ;;      Totals:         0       0       0       0
  4062 ;;Total ram usage:        0 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    1
  4065 ;; This function calls:
  4066 ;;		Nothing
  4067 ;; This function is called by:
  4068 ;;		_stop_song
  4069 ;;		_cheat
  4070 ;;		_Buzz
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _tone_off
  4076  06FC                     _tone_off:	
  4077                           
  4078                           ;user.c: 150: PWM3CONbits.PWM3OE = 0;
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _tone_off: []
  4082  06FC  003B               	movlb	27	; select bank27
  4083  06FD  133B               	bcf	59,6	;volatile
  4084  06FE  0008               	return
  4085  06FF                     __end_of_tone_off:	
  4086                           
  4087                           	psect	text19
  4088  069D                     __ptext19:	
  4089 ;; *************** function _tone *****************
  4090 ;; Defined at:
  4091 ;;		line 138 in file "user.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  period          2    1[COMMON] unsigned int 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;		None               void
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4105 ;;      Params:         2       0       0       0
  4106 ;;      Locals:         0       0       0       0
  4107 ;;      Temps:          2       0       0       0
  4108 ;;      Totals:         4       0       0       0
  4109 ;;Total ram usage:        4 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    1
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_handle_music
  4116 ;;		_cheat
  4117 ;;		_Buzz
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _tone
  4123  069D                     _tone:	
  4124                           
  4125                           ;user.c: 140: PWM3CONbits.PWM3EN = 1;
  4126                           
  4127                           ;incstack = 0
  4128                           ; Regs used in _tone: [wreg+status,2+status,0]
  4129  069D  003B               	movlb	27	; select bank27
  4130  069E  17BB               	bsf	59,7	;volatile
  4131                           
  4132                           ;user.c: 141: PWM3CONbits.PWM3OE = 1;
  4133  069F  173B               	bsf	59,6	;volatile
  4134                           
  4135                           ;user.c: 142: PWM3PR = period;
  4136  06A0  0872               	movf	tone@period+1,w
  4137  06A1  01B6               	clrf	54	;volatile
  4138  06A2  07B6               	addwf	54,f	;volatile
  4139  06A3  0871               	movf	tone@period,w
  4140  06A4  01B5               	clrf	53	;volatile
  4141  06A5  07B5               	addwf	53,f	;volatile
  4142                           
  4143                           ;user.c: 143: PWM3DC = period >> 1;
  4144  06A6  0872               	movf	tone@period+1,w
  4145  06A7  00F4               	movwf	??_tone+1
  4146  06A8  0871               	movf	tone@period,w
  4147  06A9  00F3               	movwf	??_tone
  4148  06AA  36F4               	lsrf	??_tone+1,f
  4149  06AB  0CF3               	rrf	??_tone,f
  4150  06AC  0873               	movf	??_tone,w
  4151  06AD  00B3               	movwf	51	;volatile
  4152  06AE  0874               	movf	??_tone+1,w
  4153  06AF  00B4               	movwf	52	;volatile
  4154                           
  4155                           ;user.c: 144: PWM3PH = 0x0000;
  4156  06B0  01B1               	clrf	49	;volatile
  4157  06B1  01B2               	clrf	50	;volatile
  4158                           
  4159                           ;user.c: 145: PWM3LDCONbits.PWM3LD = 1;
  4160  06B2  17BF               	bsf	63,7	;volatile
  4161  06B3  0008               	return
  4162  06B4                     __end_of_tone:	
  4163                           
  4164                           	psect	text20
  4165  06DE                     __ptext20:	
  4166 ;; *************** function _Modulate_Serial *****************
  4167 ;; Defined at:
  4168 ;;		line 177 in file "user.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;		None
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;		None
  4173 ;; Return value:  Size  Location     Type
  4174 ;;		None               void
  4175 ;; Registers used:
  4176 ;;		status,2
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4182 ;;      Params:         0       0       0       0
  4183 ;;      Locals:         0       0       0       0
  4184 ;;      Temps:          0       0       0       0
  4185 ;;      Totals:         0       0       0       0
  4186 ;;Total ram usage:        0 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    1
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_Send_Byte
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function _Modulate_Serial
  4198  06DE                     _Modulate_Serial:	
  4199                           
  4200                           ;user.c: 178: DACCON0bits.DACEN = 1;
  4201                           
  4202                           ;incstack = 0
  4203                           ; Regs used in _Modulate_Serial: [status,2]
  4204  06DE  0022               	movlb	2	; select bank2
  4205  06DF  1798               	bsf	24,7	;volatile
  4206                           
  4207                           ;user.c: 179: TMR0=0;
  4208  06E0  0020               	movlb	0	; select bank0
  4209  06E1  0195               	clrf	21	;volatile
  4210                           
  4211                           ;user.c: 180: INTCONbits.TMR0IF=1;
  4212  06E2  150B               	bsf	11,2	;volatile
  4213                           
  4214                           ;user.c: 181: INTCONbits.TMR0IE=1;
  4215  06E3  168B               	bsf	11,5	;volatile
  4216  06E4  0008               	return
  4217  06E5                     __end_of_Modulate_Serial:	
  4218                           
  4219                           	psect	text21
  4220  06F5                     __ptext21:	
  4221 ;; *************** function _Disable_Modulation *****************
  4222 ;; Defined at:
  4223 ;;		line 184 in file "user.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;		None               void
  4230 ;; Registers used:
  4231 ;;		None
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4237 ;;      Params:         0       0       0       0
  4238 ;;      Locals:         0       0       0       0
  4239 ;;      Temps:          0       0       0       0
  4240 ;;      Totals:         0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    1
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_Send_Byte
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _Disable_Modulation
  4253  06F5                     _Disable_Modulation:	
  4254                           
  4255                           ;user.c: 185: INTCONbits.TMR0IE=0;
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in _Disable_Modulation: []
  4259  06F5  128B               	bcf	11,5	;volatile
  4260                           
  4261                           ;user.c: 186: DACCON0bits.DACEN=0;
  4262  06F6  0022               	movlb	2	; select bank2
  4263  06F7  1398               	bcf	24,7	;volatile
  4264  06F8  0008               	return
  4265  06F9                     __end_of_Disable_Modulation:	
  4266                           
  4267                           	psect	text22
  4268  0680                     __ptext22:	
  4269 ;; *************** function _ADC_read *****************
  4270 ;; Defined at:
  4271 ;;		line 70 in file "user.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  2    1[COMMON] unsigned int 
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4285 ;;      Params:         2       0       0       0
  4286 ;;      Locals:         0       0       0       0
  4287 ;;      Temps:          2       0       0       0
  4288 ;;      Totals:         4       0       0       0
  4289 ;;Total ram usage:        4 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_handle_fire
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _ADC_read
  4301  0680                     _ADC_read:	
  4302                           
  4303                           ;user.c: 72: ADCON0bits.CHS = 3;
  4304                           
  4305                           ;incstack = 0
  4306                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4307  0680  0021               	movlb	1	; select bank1
  4308  0681  081D               	movf	29,w	;volatile
  4309  0682  3983               	andlw	-125
  4310  0683  380C               	iorlw	12
  4311  0684  009D               	movwf	29	;volatile
  4312                           
  4313                           ;user.c: 73: ADCON0bits.ADON = 1;
  4314  0685  141D               	bsf	29,0	;volatile
  4315                           
  4316                           ;user.c: 74: _delay((unsigned long)((6)*(16000000/4000000.0)));
  4317  0686  3007               	movlw	7
  4318  0687  00F3               	movwf	??_ADC_read
  4319  0688                     u4447:	
  4320  0688  0BF3               	decfsz	??_ADC_read,f
  4321  0689  2E88               	goto	u4447
  4322  068A  3200               	nop2	;nop
  4323                           
  4324                           ;user.c: 75: ADCON0bits.GO = 1;
  4325  068B  0021               	movlb	1	; select bank1
  4326  068C  149D               	bsf	29,1	;volatile
  4327  068D                     l139:	
  4328                           ;user.c: 76: while(ADCON0bits.GO){};
  4329                           
  4330  068D  189D               	btfsc	29,1	;volatile
  4331  068E  2E8D               	goto	l139
  4332                           
  4333                           ;user.c: 77: return ADRES >> 6;
  4334  068F  081C               	movf	28,w	;volatile
  4335  0690  00F4               	movwf	??_ADC_read+1
  4336  0691  081B               	movf	27,w	;volatile
  4337  0692  00F3               	movwf	??_ADC_read
  4338  0693  3006               	movlw	6
  4339  0694                     u2685:	
  4340  0694  36F4               	lsrf	??_ADC_read+1,f
  4341  0695  0CF3               	rrf	??_ADC_read,f
  4342  0696  0B89               	decfsz	9,f
  4343  0697  2E94               	goto	u2685
  4344  0698  0873               	movf	??_ADC_read,w
  4345  0699  00F1               	movwf	?_ADC_read
  4346  069A  0874               	movf	??_ADC_read+1,w
  4347  069B  00F2               	movwf	?_ADC_read+1
  4348  069C  0008               	return
  4349  069D                     __end_of_ADC_read:	
  4350                           
  4351                           	psect	text23
  4352  07AE                     __ptext23:	
  4353 ;; *************** function _Setup *****************
  4354 ;; Defined at:
  4355 ;;		line 33 in file "user.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, status,2, status,0
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4369 ;;      Params:         0       0       0       0
  4370 ;;      Locals:         0       0       0       0
  4371 ;;      Temps:          1       0       0       0
  4372 ;;      Totals:         1       0       0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    1
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _Setup
  4385  07AE                     _Setup:	
  4386                           
  4387                           ;user.c: 35: OSCCON = 0b01111010;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4391  07AE  307A               	movlw	122
  4392  07AF  0021               	movlb	1	; select bank1
  4393  07B0  0099               	movwf	25	;volatile
  4394                           
  4395                           ;user.c: 37: ANSELA = 0x00;
  4396  07B1  0023               	movlb	3	; select bank3
  4397  07B2  018C               	clrf	12	;volatile
  4398                           
  4399                           ;user.c: 38: TRISAbits.TRISA2 = 0;
  4400  07B3  0021               	movlb	1	; select bank1
  4401  07B4  110C               	bcf	12,2	;volatile
  4402                           
  4403                           ;user.c: 39: TRISAbits.TRISA0 = 0;
  4404  07B5  100C               	bcf	12,0	;volatile
  4405                           
  4406                           ;user.c: 42: ANSELAbits.ANSA4 = 1;
  4407  07B6  0023               	movlb	3	; select bank3
  4408  07B7  160C               	bsf	12,4	;volatile
  4409                           
  4410                           ;user.c: 43: ADCON1 |= 0b00110000;
  4411  07B8  3030               	movlw	48
  4412  07B9  00F1               	movwf	??_Setup
  4413  07BA  0871               	movf	??_Setup,w
  4414  07BB  0021               	movlb	1	; select bank1
  4415  07BC  049E               	iorwf	30,f	;volatile
  4416                           
  4417                           ;user.c: 46: SPBRGL = 103;
  4418  07BD  3067               	movlw	103
  4419  07BE  0023               	movlb	3	; select bank3
  4420  07BF  009B               	movwf	27	;volatile
  4421                           
  4422                           ;user.c: 47: TXSTAbits.SYNC = 0;
  4423  07C0  121E               	bcf	30,4	;volatile
  4424                           
  4425                           ;user.c: 48: RCSTAbits.SPEN = 1;
  4426  07C1  179D               	bsf	29,7	;volatile
  4427                           
  4428                           ;user.c: 49: BAUDCONbits.SCKP = 1;
  4429  07C2  161F               	bsf	31,4	;volatile
  4430                           
  4431                           ;user.c: 50: TXSTAbits.TXEN = 1;
  4432  07C3  169E               	bsf	30,5	;volatile
  4433                           
  4434                           ;user.c: 53: RCSTAbits.CREN = 1;
  4435  07C4  161D               	bsf	29,4	;volatile
  4436                           
  4437                           ;user.c: 56: INTCONbits.GIE = 1;
  4438  07C5  178B               	bsf	11,7	;volatile
  4439                           
  4440                           ;user.c: 59: OPTION_REGbits.TMR0CS = 0;
  4441  07C6  0021               	movlb	1	; select bank1
  4442  07C7  1295               	bcf	21,5	;volatile
  4443                           
  4444                           ;user.c: 62: T1CONbits.T1CKPS=3;
  4445  07C8  3030               	movlw	48
  4446  07C9  0020               	movlb	0	; select bank0
  4447  07CA  0498               	iorwf	24,f	;volatile
  4448                           
  4449                           ;user.c: 65: T2CONbits.T2CKPS = 3;
  4450  07CB  3003               	movlw	3
  4451  07CC  049C               	iorwf	28,f	;volatile
  4452                           
  4453                           ;user.c: 66: T2CONbits.T2OUTPS = 15;
  4454  07CD  3078               	movlw	120
  4455  07CE  049C               	iorwf	28,f	;volatile
  4456                           
  4457                           ;user.c: 67: T2CONbits.TMR2ON = 1;
  4458  07CF  151C               	bsf	28,2	;volatile
  4459  07D0  0008               	return
  4460  07D1                     __end_of_Setup:	
  4461                           
  4462                           	psect	text24
  4463  045C                     __ptext24:	
  4464 ;; *************** function _LoadFromFlash *****************
  4465 ;; Defined at:
  4466 ;;		line 28 in file "main.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;		None               void
  4473 ;; Registers used:
  4474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4480 ;;      Params:         0       0       0       0
  4481 ;;      Locals:         0       0       0       0
  4482 ;;      Temps:          2       0       0       0
  4483 ;;      Totals:         2       0       0       0
  4484 ;;Total ram usage:        2 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    2
  4487 ;; This function calls:
  4488 ;;		_Load
  4489 ;;		_Save
  4490 ;; This function is called by:
  4491 ;;		_main
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           
  4496                           ;psect for function _LoadFromFlash
  4497  045C                     _LoadFromFlash:	
  4498                           
  4499                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4503  045C  30F0               	movlw	240
  4504  045D  00F1               	movwf	Load@address
  4505  045E  3007               	movlw	7
  4506  045F  00F2               	movwf	Load@address+1
  4507  0460  30C0               	movlw	_config& (0+255)
  4508  0461  00F7               	movwf	??_LoadFromFlash
  4509  0462  0877               	movf	??_LoadFromFlash,w
  4510  0463  00F3               	movwf	Load@ptr
  4511  0464  3009               	movlw	9
  4512  0465  00F8               	movwf	??_LoadFromFlash+1
  4513  0466  0878               	movf	??_LoadFromFlash+1,w
  4514  0467  00F4               	movwf	Load@data_length
  4515  0468  2765               	fcall	_Load
  4516                           
  4517                           ;main.c: 31: if(config.id == 0x3FFF)
  4518  0469  303F               	movlw	63
  4519  046A  0021               	movlb	1	; select bank1
  4520  046B  0641               	xorwf	(_config+1)^(0+128),w
  4521  046C  1D03               	skipz
  4522  046D  2C70               	goto	u2765
  4523  046E  30FF               	movlw	255
  4524  046F  0640               	xorwf	_config^(0+128),w
  4525  0470                     u2765:	
  4526  0470  1D03               	skipz
  4527  0471  2CAE               	goto	l2435
  4528                           
  4529                           ;main.c: 32: {
  4530                           ;main.c: 33: config.health = 2;
  4531  0472  3002               	movlw	2
  4532  0473  00C4               	movwf	(_config^(0+128)+4)
  4533  0474  3000               	movlw	0
  4534  0475  00C5               	movwf	(_config^(0+128)+5)
  4535                           
  4536                           ;main.c: 34: config.id = 0x80;
  4537  0476  3080               	movlw	128
  4538  0477  00C0               	movwf	_config^(0+128)
  4539  0478  3000               	movlw	0
  4540  0479  00C1               	movwf	(_config^(0+128)+1)
  4541                           
  4542                           ;main.c: 35: config.power = 0;
  4543  047A  01C2               	clrf	(_config^(0+128)+2)
  4544  047B  01C3               	clrf	((_config+1)^(0+128)+2)
  4545                           
  4546                           ;main.c: 36: config.respawn_delay = 100;
  4547  047C  3064               	movlw	100
  4548  047D  00C8               	movwf	(_config^(0+128)+8)
  4549  047E  3000               	movlw	0
  4550  047F  00C9               	movwf	(_config^(0+128)+9)
  4551                           
  4552                           ;main.c: 37: config.fire_threshold = 500;
  4553  0480  30F4               	movlw	244
  4554  0481  00CA               	movwf	(_config^(0+128)+10)
  4555  0482  3001               	movlw	1
  4556  0483  00CB               	movwf	(_config^(0+128)+11)
  4557                           
  4558                           ;main.c: 38: config.fire_holdoff = 8000;
  4559  0484  3040               	movlw	64
  4560  0485  00CE               	movwf	(_config^(0+128)+14)
  4561  0486  301F               	movlw	31
  4562  0487  00CF               	movwf	(_config^(0+128)+15)
  4563                           
  4564                           ;main.c: 39: config.shield = 2;
  4565  0488  3002               	movlw	2
  4566  0489  00C6               	movwf	(_config^(0+128)+6)
  4567  048A  3000               	movlw	0
  4568  048B  00C7               	movwf	(_config^(0+128)+7)
  4569                           
  4570                           ;main.c: 40: config.fire_cheating = 1000;
  4571  048C  30E8               	movlw	232
  4572  048D  00CC               	movwf	(_config^(0+128)+12)
  4573  048E  3003               	movlw	3
  4574  048F  00CD               	movwf	(_config^(0+128)+13)
  4575                           
  4576                           ;main.c: 41: config.death_period = 3000;
  4577  0490  30B8               	movlw	184
  4578  0491  00D0               	movwf	(_config^(0+128)+16)
  4579  0492  300B               	movlw	11
  4580  0493  00D1               	movwf	(_config^(0+128)+17)
  4581                           
  4582                           ;main.c: 42: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4583  0494  30F0               	movlw	240
  4584  0495  00F1               	movwf	Save@address
  4585  0496  3007               	movlw	7
  4586  0497  00F2               	movwf	Save@address+1
  4587  0498  30C0               	movlw	_config& (0+255)
  4588  0499  00F7               	movwf	??_LoadFromFlash
  4589  049A  0877               	movf	??_LoadFromFlash,w
  4590  049B  00F3               	movwf	Save@ptr
  4591  049C  3009               	movlw	9
  4592  049D  00F8               	movwf	??_LoadFromFlash+1
  4593  049E  0878               	movf	??_LoadFromFlash+1,w
  4594  049F  00F4               	movwf	Save@data_length
  4595  04A0  25C2               	fcall	_Save
  4596                           
  4597                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4598  04A1  30E0               	movlw	224
  4599  04A2  00F1               	movwf	Save@address
  4600  04A3  3007               	movlw	7
  4601  04A4  00F2               	movwf	Save@address+1
  4602  04A5  30A0               	movlw	_hitlist& (0+255)
  4603  04A6  00F7               	movwf	??_LoadFromFlash
  4604  04A7  0877               	movf	??_LoadFromFlash,w
  4605  04A8  00F3               	movwf	Save@ptr
  4606  04A9  3010               	movlw	16
  4607  04AA  00F8               	movwf	??_LoadFromFlash+1
  4608  04AB  0878               	movf	??_LoadFromFlash+1,w
  4609  04AC  00F4               	movwf	Save@data_length
  4610  04AD  25C2               	fcall	_Save
  4611  04AE                     l2435:	
  4612                           
  4613                           ;main.c: 44: }
  4614                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4615  04AE  30E0               	movlw	224
  4616  04AF  00F1               	movwf	Load@address
  4617  04B0  3007               	movlw	7
  4618  04B1  00F2               	movwf	Load@address+1
  4619  04B2  30A0               	movlw	_hitlist& (0+255)
  4620  04B3  00F7               	movwf	??_LoadFromFlash
  4621  04B4  0877               	movf	??_LoadFromFlash,w
  4622  04B5  00F3               	movwf	Load@ptr
  4623  04B6  3010               	movlw	16
  4624  04B7  00F8               	movwf	??_LoadFromFlash+1
  4625  04B8  0878               	movf	??_LoadFromFlash+1,w
  4626  04B9  00F4               	movwf	Load@data_length
  4627  04BA  2765               	fcall	_Load
  4628  04BB  0008               	return
  4629  04BC                     __end_of_LoadFromFlash:	
  4630                           
  4631                           	psect	text25
  4632  05C2                     __ptext25:	
  4633 ;; *************** function _Save *****************
  4634 ;; Defined at:
  4635 ;;		line 210 in file "user.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  address         2    1[COMMON] unsigned int 
  4638 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4639 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4640 ;;  data_length     1    4[COMMON] unsigned char 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  i               1    6[COMMON] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;		None               void
  4645 ;; Registers used:
  4646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4652 ;;      Params:         4       0       0       0
  4653 ;;      Locals:         1       0       0       0
  4654 ;;      Temps:          1       0       0       0
  4655 ;;      Totals:         6       0       0       0
  4656 ;;Total ram usage:        6 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    1
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_LoadFromFlash
  4663 ;;		_hit_by
  4664 ;;		_control_transfer
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _Save
  4670  05C2                     _Save:	
  4671                           
  4672                           ;user.c: 212: INTCONbits.GIE = 0;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4676  05C2  138B               	bcf	11,7	;volatile
  4677                           
  4678                           ;user.c: 213: PMADR = address;
  4679  05C3  0872               	movf	Save@address+1,w
  4680  05C4  0023               	movlb	3	; select bank3
  4681  05C5  0192               	clrf	18	;volatile
  4682  05C6  0792               	addwf	18,f	;volatile
  4683  05C7  0871               	movf	Save@address,w
  4684  05C8  0191               	clrf	17	;volatile
  4685  05C9  0791               	addwf	17,f	;volatile
  4686                           
  4687                           ;user.c: 214: PMCON1bits.CFGS = 0;
  4688  05CA  1315               	bcf	21,6	;volatile
  4689                           
  4690                           ;user.c: 215: PMCON1bits.FREE = 1;
  4691  05CB  1615               	bsf	21,4	;volatile
  4692                           
  4693                           ;user.c: 216: PMCON1bits.WREN = 1;
  4694  05CC  1515               	bsf	21,2	;volatile
  4695                           
  4696                           ;user.c: 217: PMCON2 = 0x55;
  4697  05CD  3055               	movlw	85
  4698  05CE  0096               	movwf	22	;volatile
  4699                           
  4700                           ;user.c: 218: PMCON2 = 0xAA;
  4701  05CF  30AA               	movlw	170
  4702  05D0  0096               	movwf	22	;volatile
  4703                           
  4704                           ;user.c: 219: PMCON1bits.WR = 1;
  4705  05D1  1495               	bsf	21,1	;volatile
  4706                           
  4707                           ;user.c: 220: __nop();
  4708  05D2  0000               	nop
  4709                           
  4710                           ;user.c: 221: __nop();
  4711  05D3  0000               	nop
  4712                           
  4713                           ;user.c: 222: PMCON1bits.WREN = 0;
  4714  05D4  0023               	movlb	3	; select bank3
  4715  05D5  1115               	bcf	21,2	;volatile
  4716                           
  4717                           ;user.c: 224: PMADR = address;
  4718  05D6  0872               	movf	Save@address+1,w
  4719  05D7  0192               	clrf	18	;volatile
  4720  05D8  0792               	addwf	18,f	;volatile
  4721  05D9  0871               	movf	Save@address,w
  4722  05DA  0191               	clrf	17	;volatile
  4723  05DB  0791               	addwf	17,f	;volatile
  4724                           
  4725                           ;user.c: 225: PMCON1bits.CFGS = 0;
  4726  05DC  1315               	bcf	21,6	;volatile
  4727                           
  4728                           ;user.c: 226: PMCON1bits.FREE = 0;
  4729  05DD  1215               	bcf	21,4	;volatile
  4730                           
  4731                           ;user.c: 227: PMCON1bits.WREN = 1;
  4732  05DE  1515               	bsf	21,2	;volatile
  4733                           
  4734                           ;user.c: 228: PMCON1bits.LWLO = 1;
  4735  05DF  1695               	bsf	21,5	;volatile
  4736                           
  4737                           ;user.c: 230: for (uint8_t i=1; i<=data_length; i++){
  4738  05E0  01F6               	clrf	Save@i
  4739  05E1  0AF6               	incf	Save@i,f
  4740  05E2                     l204:	
  4741  05E2  0876               	movf	Save@i,w
  4742  05E3  0274               	subwf	Save@data_length,w
  4743  05E4  1C03               	btfss	3,0
  4744  05E5  2E06               	goto	l207
  4745                           
  4746                           ;user.c: 231: PMDAT = *ptr++;
  4747  05E6  0873               	movf	Save@ptr,w
  4748  05E7  0086               	movwf	6
  4749  05E8  0187               	clrf	7
  4750  05E9  3F40               	moviw [0]fsr1
  4751  05EA  0093               	movwf	19	;volatile
  4752  05EB  3F41               	moviw [1]fsr1
  4753  05EC  0094               	movwf	20	;volatile
  4754  05ED  3002               	movlw	2
  4755  05EE  00F5               	movwf	??_Save
  4756  05EF  0875               	movf	??_Save,w
  4757  05F0  07F3               	addwf	Save@ptr,f
  4758                           
  4759                           ;user.c: 232: if(i == data_length) PMCON1bits.LWLO = 0;
  4760  05F1  0876               	movf	Save@i,w
  4761  05F2  0674               	xorwf	Save@data_length,w
  4762  05F3  1903               	btfsc	3,2
  4763  05F4  1295               	bcf	21,5	;volatile
  4764                           
  4765                           ;user.c: 233: PMCON2 = 0x55;
  4766  05F5  3055               	movlw	85
  4767  05F6  0096               	movwf	22	;volatile
  4768                           
  4769                           ;user.c: 234: PMCON2 = 0xAA;
  4770  05F7  30AA               	movlw	170
  4771  05F8  0096               	movwf	22	;volatile
  4772                           
  4773                           ;user.c: 235: PMCON1bits.WR = 1;
  4774  05F9  1495               	bsf	21,1	;volatile
  4775                           
  4776                           ;user.c: 236: __nop();
  4777  05FA  0000               	nop
  4778                           
  4779                           ;user.c: 237: __nop();
  4780  05FB  0000               	nop
  4781                           
  4782                           ;user.c: 238: PMADRL++;
  4783  05FC  3001               	movlw	1
  4784  05FD  00F5               	movwf	??_Save
  4785  05FE  0875               	movf	??_Save,w
  4786  05FF  0023               	movlb	3	; select bank3
  4787  0600  0791               	addwf	17,f	;volatile
  4788  0601  3001               	movlw	1
  4789  0602  00F5               	movwf	??_Save
  4790  0603  0875               	movf	??_Save,w
  4791  0604  07F6               	addwf	Save@i,f
  4792  0605  2DE2               	goto	l204
  4793  0606                     l207:	
  4794                           
  4795                           ;user.c: 239: }
  4796                           ;user.c: 240: PMCON1bits.WREN = 0;
  4797  0606  1115               	bcf	21,2	;volatile
  4798                           
  4799                           ;user.c: 241: INTCONbits.GIE = 1;
  4800  0607  178B               	bsf	11,7	;volatile
  4801  0608  0008               	return
  4802  0609                     __end_of_Save:	
  4803                           
  4804                           	psect	text26
  4805  0765                     __ptext26:	
  4806 ;; *************** function _Load *****************
  4807 ;; Defined at:
  4808 ;;		line 198 in file "user.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  address         2    1[COMMON] unsigned int 
  4811 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4812 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4813 ;;  data_length     1    4[COMMON] unsigned char 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  i               1    6[COMMON] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4825 ;;      Params:         4       0       0       0
  4826 ;;      Locals:         1       0       0       0
  4827 ;;      Temps:          1       0       0       0
  4828 ;;      Totals:         6       0       0       0
  4829 ;;Total ram usage:        6 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    1
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_LoadFromFlash
  4836 ;;		_control_transfer
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _Load
  4842  0765                     _Load:	
  4843                           
  4844                           ;user.c: 199: PMCON1bits.CFGS = 0;
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4848  0765  0023               	movlb	3	; select bank3
  4849  0766  1315               	bcf	21,6	;volatile
  4850                           
  4851                           ;user.c: 200: PMADR = address;
  4852  0767  0872               	movf	Load@address+1,w
  4853  0768  0192               	clrf	18	;volatile
  4854  0769  0792               	addwf	18,f	;volatile
  4855  076A  0871               	movf	Load@address,w
  4856  076B  0191               	clrf	17	;volatile
  4857  076C  0791               	addwf	17,f	;volatile
  4858                           
  4859                           ;user.c: 201: for (uint8_t i=0; i<data_length; i++){
  4860  076D  01F6               	clrf	Load@i
  4861  076E                     l1819:	
  4862  076E  0874               	movf	Load@data_length,w
  4863  076F  0276               	subwf	Load@i,w
  4864  0770  1803               	btfsc	3,0
  4865  0771  0008               	return
  4866                           
  4867                           ;user.c: 202: PMCON1bits.RD = 1;
  4868  0772  1415               	bsf	21,0	;volatile
  4869                           
  4870                           ;user.c: 203: __nop();
  4871  0773  0000               	nop
  4872                           
  4873                           ;user.c: 204: __nop();
  4874  0774  0000               	nop
  4875                           
  4876                           ;user.c: 205: *ptr++ = PMDAT;
  4877  0775  0873               	movf	Load@ptr,w
  4878  0776  0086               	movwf	6
  4879  0777  0187               	clrf	7
  4880  0778  0023               	movlb	3	; select bank3
  4881  0779  0813               	movf	19,w	;volatile
  4882  077A  3FC0               	movwi [0]fsr1
  4883  077B  0814               	movf	20,w	;volatile
  4884  077C  3FC1               	movwi [1]fsr1
  4885  077D  3002               	movlw	2
  4886  077E  00F5               	movwf	??_Load
  4887  077F  0875               	movf	??_Load,w
  4888  0780  07F3               	addwf	Load@ptr,f
  4889                           
  4890                           ;user.c: 206: PMADR ++;
  4891  0781  3001               	movlw	1
  4892  0782  0791               	addwf	17,f	;volatile
  4893  0783  3000               	movlw	0
  4894  0784  3D92               	addwfc	18,f	;volatile
  4895  0785  3001               	movlw	1
  4896  0786  00F5               	movwf	??_Load
  4897  0787  0875               	movf	??_Load,w
  4898  0788  07F6               	addwf	Load@i,f
  4899  0789  2F6E               	goto	l1819
  4900  078A                     __end_of_Load:	
  4901                           
  4902                           	psect	intentry
  4903  0004                     __pintentry:	
  4904 ;; *************** function _High_Priority_Interrupt *****************
  4905 ;; Defined at:
  4906 ;;		line 318 in file "user.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;		None               void
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4920 ;;      Params:         0       0       0       0
  4921 ;;      Locals:         0       0       0       0
  4922 ;;      Temps:          1       0       0       0
  4923 ;;      Totals:         1       0       0       0
  4924 ;;Total ram usage:        1 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		Interrupt level 1
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933  0004                     _High_Priority_Interrupt:	
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4937  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4938  0005  3180               	pagesel	$
  4939  0006  0020               	movlb	0	; select bank0
  4940  0007  087F               	movf	127,w
  4941  0008  00F0               	movwf	??_High_Priority_Interrupt
  4942                           
  4943                           ;user.c: 319: if(INTCONbits.TMR0IF)
  4944  0009  1D0B               	btfss	11,2	;volatile
  4945  000A  2813               	goto	i1l242
  4946  000B  0022               	banksel	280	;# 
  4947  000C  0818               	movf	24,w	;# 
  4948  000D  3A20               	xorlw	32	;# 
  4949  000E  0098               	movwf	24	;# 
  4950                           
  4951                           ;user.c: 326: TMR0 -= 50;
  4952  000F  3032               	movlw	50
  4953  0010  0020               	movlb	0	; select bank0
  4954  0011  0295               	subwf	21,f	;volatile
  4955                           
  4956                           ;user.c: 327: INTCONbits.TMR0IF = 0;
  4957  0012  110B               	bcf	11,2	;volatile
  4958  0013                     i1l242:	
  4959  0013  0870               	movf	??_High_Priority_Interrupt,w
  4960  0014  00FF               	movwf	127
  4961  0015  107E               	bcf	126,0	;clear compiler interrupt flag
  4962  0016  0009               	retfie
  4963  0017                     __end_of_High_Priority_Interrupt:	
  4964  007E                     btemp	set	126	;btemp
  4965  007E                     pic14e$flags	set	126
  4966  007E                     wtemp	set	126
  4967  007E                     wtemp0	set	126
  4968  0080                     wtemp1	set	128
  4969  0082                     wtemp2	set	130
  4970  0084                     wtemp3	set	132
  4971  0086                     wtemp4	set	134
  4972  0088                     wtemp5	set	136
  4973  007F                     wtemp6	set	127
  4974  007E                     ttemp	set	126
  4975  007E                     ttemp0	set	126
  4976  0081                     ttemp1	set	129
  4977  0084                     ttemp2	set	132
  4978  0087                     ttemp3	set	135
  4979  007F                     ttemp4	set	127
  4980  007E                     ltemp	set	126
  4981  007E                     ltemp0	set	126
  4982  0082                     ltemp1	set	130
  4983  0086                     ltemp2	set	134
  4984  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    52
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     62      80
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 32
		 -> one_up(CODE[12]), death_song(CODE[2]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 32
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[2]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _main->_handle_fire
    _handle_music->_tone
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_EOF
    _control_transfer->_SEND_SOF
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   31544
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   18824
                                             59 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   11530
                                             52 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0    8790
                                             47 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     257
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    7105
                                              5 BANK0     42    42      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     867
                                              4 BANK0      1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     867
                                              4 BANK0      1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     480
                                             10 COMMON     2     2      0
                                              3 BANK0      1     1      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     913
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    1676
                                             10 COMMON     2     2      0
                                              3 BANK0      2     2      0
                           _ADC_read
                          _Send_Byte
                              _cheat
                            _led_off
                          _play_song
                         _red_led_on
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     936
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _led_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            5     5      0     387
                                              8 COMMON     2     2      0
                                              0 BANK0      3     3      0
                 _Disable_Modulation
                    _Modulate_Serial
                              _cheat
 ---------------------------------------------------------------------------------
 (5) _cheat                                                3     3      0     257
                                              5 COMMON     3     3      0
                               _tone
                           _tone_off
 ---------------------------------------------------------------------------------
 (4) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     257
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1997
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1111
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
   _handle_fire
     _ADC_read
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
       _cheat
         _tone
         _tone_off
     _cheat
       _tone
       _tone_off
     _led_off
     _play_song
     _red_led_on
     _stop_song
       _tone_off
   _handle_music
     _stop_song
       _tone_off
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
             _cheat
               _tone
               _tone_off
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
             _cheat
               _tone
               _tone_off
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _handle_music
         _stop_song
           _tone_off
         _tone
       _led_off
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
               _cheat
                 _tone
                 _tone_off
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
                 _cheat
                   _tone
                   _tone_off
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
               _cheat
                 _tone
                 _tone_off
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
                 _cheat
                   _tone
                   _tone_off
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
               _cheat
                 _tone
                 _tone_off
           _Save
           _play_song
         _handle_music
           _stop_song
             _tone_off
           _tone
         _led_off
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
       _cheat
         _tone
         _tone_off
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
             _cheat
               _tone
               _tone_off
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
             _cheat
               _tone
               _tone_off
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
           _cheat
             _tone
             _tone_off
       _Save
       _play_song
     _handle_music
       _stop_song
         _tone_off
       _tone
     _led_off
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3E      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Aug 21 00:25:09 2014

                     __CFG_CP$OFF 0000                                l26 06CF                                __i 005E  
                              __x 007C                                __y 006F                     _LoadFromFlash 045C  
                             l211 06B4                               l204 05E2                               l207 0606  
                             l223 036F                               l139 068D                               l317 0667  
                             l183 063A                               l179 0617                               l437 0343  
                    __CFG_BORV$LO 0000                               wreg 0009                   _super_dead_mode 04BC  
                    __CFG_LVP$OFF 0000                              l3001 027C                              l3031 02CB  
                            l3103 04BF                       Load@address 0071                              l3121 0410  
                            l3035 02DA                              l3221 0388                              l2333 0598  
                            l3037 02E8                              l3029 02BC                              l3141 043D  
                            l3133 0429                              l3231 03BA                              l3039 02ED  
                            l3225 039B                              l3217 0377                              l3209 0358  
                            l3145 0445                              l2435 04AE                              l3235 03C3  
                            l2339 05BD                              l3245 03D1                              l3237 03C5  
                            l3069 0330                              l3085 04D6                              l1903 0676  
                            l3159 041A                              l3169 0529                              l1819 076E  
                            l2723 0742                              l3099 0506                              l2663 0629  
                            l3295 02E0                              l2719 0740                              l2667 0635  
                            l2765 0076                              l2937 01ED                              l2929 01DB  
                            l2857 0141                              l2793 00AD                              l2939 01EF  
                            l2979 0246                              u3215 0068                              u3075 064B  
                            u3155 0040                              u4045 04EE                              u4055 0516  
                            u3345 00C3                              u3265 008C                              u4225 0561  
                            u4235 0355                              u4245 0362                              u3445 0109  
                            u4255 036D                              u2655 05AF                              u4407 0656  
                            u3535 0157                              u4175 053B                              u4417 065D  
                            u4427 061D                              u4275 0381                              u3635 01A5  
                            u3395 00E6                              u2765 0470                              u2685 0694  
                            u4437 06BF                              u4357 042F                              u4447 0688  
                            u4295 0399                              u3735 0205                              u4367 0451  
                            u3905 0292                              u3585 017E                              u4377 04DF  
                            u4387 07D6                              u4397 06DB                              u3845 025C  
                            u3785 022C                              u3985 0303              control_transfer@data 0027  
                            _TMR0 0015                              _TMR1 0016                              _TMR2 001A  
            control_transfer@page 004C              control_transfer@dptr 004A                              _Load 0765  
                    __CFG_WRT$OFF 0000                              _Save 05C2                              _main 06C7  
                   Send_Byte@data 0020                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              _tone 069D  
                            indf1 0001                              fsr1l 0006                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E                              start 0017  
                            ttemp 007E                              wtemp 007E                  __end_of_ADC_read 069D  
               ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000               hit_by@respawn_timer 0057  
                  ?_LoadFromFlash 0070                             ?_Load 0071                             ?_Save 0071  
                           ?_main 0070                             _ADRES 009B                     __CFG_WDTE$OFF 0000  
__size_of_High_Priority_Interrupt 0013                             ?_tone 0071                             i1l242 0013  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 06DE                  __end_of_SEND_SOF 07DE                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_797 005A  
                           _Setup 07AE                   __end_of_led_off 06FC                             _cheat 06B4  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0344                        Send_Byte@i 0021                   __initialization 0018  
                    __end_of_Load 078A                      __end_of_Save 0609                      __end_of_main 06D3  
                    __end_of_tone 06B4                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 051A                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 0765                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                            ?_cheat 0070              __size_of_handle_fire 0093  
                          _ADCON1 009E                            _ANSELA 018C                            _PMADRL 0191  
                          _PMCON2 0196                            _OSCCON 0099                            _PWM3DC 0DB3  
                          _PWM3PH 0DB1                            _SPBRGL 019B                            _PWM3PR 0DB5  
                  __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077                __size_of_Send_Byte 0038  
                  __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 007A                            _config 00C0  
                          _hit_by 03D7                   play_song@length 0073                            _one_up 0720  
                 play_song@repeat 0076                         ??_led_off 0071        __end_of_Disable_Modulation 06F9  
                     Save@address 0071                  _my_random_number 006C                         ?_ADC_read 0071  
                __end_of_tone_off 06FF          __size_of_Modulate_Serial 0007           __end_of__initialization 0025  
         handle_serial@rx_counter 006D                         ?_SEND_EOF 0070                         ?_SEND_SOF 0070  
                  __pcstackCOMMON 0070                     __end_of_Setup 07D1                     __end_of_cheat 06C7  
         _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070                  super_dead_mode@b 0051  
                  _OPTION_REGbits 0095                        ??_ADC_read 0073                           ??_Setup 0071  
                         ??_cheat 0075                   _GET_CHAR_HELPER 0663                 __end_of_Send_Byte 0641  
         __size_of_add_to_hitlist 0054                        __pbssBANK0 005E                        __pbssBANK1 00A0  
           __end_of_handle_serial 056E                        _death_song 0732                        ??_SEND_EOF 0024  
                      ??_SEND_SOF 0024                        __pmaintext 06C7                 _cur_song_duration 0062  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0732                           Load@ptr 0073  
              __size_of_stop_song 0005                 ??_Modulate_Serial 0071                           Save@ptr 0073  
                    _handle_music 0734                 ?_control_transfer 0070                ??_control_transfer 0025  
                 SEND_DATA_BYTE@b 0023         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0720  
                       ?_tone_off 0070                   __size_of_hit_by 0085                           __ptext1 051A  
                         __ptext2 03D7                           __ptext3 04BC                           __ptext4 0734  
                         __ptext5 0028                           __ptext6 07D1                           __ptext7 06D3  
                         __ptext8 0641                           __ptext9 0663                           _led_off 06F9  
                      _red_led_on 06F0                         _T1CONbits 0018           __end_of_GET_CHAR_HELPER 0680  
                         _hitlist 00A0                         _T2CONbits 001C                           clrloop0 06E6  
               add_to_hitlist@gun 0075              end_of_initialization 0025                           hit_by@i 0059  
               __end_of_play_song 07AE                         _RCSTAbits 019D                        ??_tone_off 0071  
                    __pstringtext 0700                         _PORTAbits 000C                 __end_of_stop_song 06F0  
                   ??_handle_fire 007A                  __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C  
                     _DACCON0bits 0118                    _add_to_hitlist 056E                 __size_of_ADC_read 001D  
              _Disable_Modulation 06F5                         _TXSTAbits 019E               control_transfer@cmd 0047  
             ?_Disable_Modulation 0070                handle_fire@counter 0064                 __size_of_SEND_EOF 000B  
               __size_of_SEND_SOF 000D             __end_of_LoadFromFlash 04BC                       _BAUDCONbits 019F  
                  __end_of_hit_by 045C                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 072C                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             start_initialization 0018              ??_Disable_Modulation 0071            __end_of_add_to_hitlist 05C2  
             __end_of_handle_fire 03D7                         _Send_Byte 0609                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 006A                          ??_hit_by 0054  
                     __pbssCOMMON 007C                         ___latbits 0000                   _Modulate_Serial 06DE  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 0022  
                       __checksum 0068                  handle_fire@timer 0066          __size_of_super_dead_mode 005E  
                 Save@data_length 0074                         _dead_song 072C                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 005D                 __size_of_tone_off 0003  
                       _fire_song 0700            __size_of_handle_serial 0054                          ?_led_off 0070  
       __size_of_control_transfer 031C                       _handle_fire 0344                          _ADC_read 0680  
                  __size_of_Setup 0023                    __size_of_cheat 0013                         clear_ram0 06E5  
                        _PIE1bits 0091                   Load@data_length 0074                         _play_song 078A  
                        _PIR1bits 0011                          _SEND_EOF 06D3                          _SEND_SOF 07D1  
         __end_of_Modulate_Serial 06E5                        _ADCON0bits 009D                __end_of_death_song 0734  
              control_transfer@id 0049                        tone@period 0071               add_to_hitlist@gun16 0076  
                       _stop_song 06EB                         hit_by@who 0056            super_dead_mode@counter 0052  
                     ??_Send_Byte 0078                     _handle_serial 051A                 ??_super_dead_mode 004F  
        ?_High_Priority_Interrupt 0070                        ?_play_song 0071                      ??_red_led_on 0071  
                      _ANSELAbits 018C                  __size_of_led_off 0003                    _SEND_DATA_BYTE 0641  
                      ?_stop_song 0070                   _cur_song_length 0069     control_transfer@random_number 0048  
                        __ptext10 056E                          __ptext11 0344                          __ptext20 06DE  
                        __ptext12 06EB                          __ptext21 06F5                          __ptext13 06F0  
                        __ptext22 0680                          __ptext14 078A                          __ptext23 07AE  
                        __ptext15 06F9                          __ptext24 045C                          __ptext16 0609  
                        __ptext25 05C2                          __ptext17 06B4                          __ptext26 0765  
                        __ptext18 06FC                          __ptext19 069D                   _cur_song_repeat 006B  
                   __size_of_Load 0025                    ?_handle_serial 0070                          _cur_song 0060  
                   __size_of_Save 0047                     __size_of_main 000C                     __size_of_tone 0017  
              __end_of_red_led_on 06F5                          _tone_off 06FC                 control_transfer@i 004B  
               control_transfer@x 004E            play_song@note_duration 0074                  ?_Modulate_Serial 0070  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 0663                  _control_transfer 0028  
                      _INTCONbits 000B       __size_of_Disable_Modulation 0004                       _PWM3CONbits 0DBB  
                     pic14e$flags 007E                          intlevel1 0000          __size_of_GET_CHAR_HELPER 001D  
 __end_of_High_Priority_Interrupt 0017                      handle_fire@a 0023            __size_of_LoadFromFlash 0060  
                      _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070  
                     ??_play_song 0077                   ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070  
                     ??_stop_song 0071                   ??_handle_serial 005B                handle_serial@rx_id 006E  
                  ??_handle_music 0075  
