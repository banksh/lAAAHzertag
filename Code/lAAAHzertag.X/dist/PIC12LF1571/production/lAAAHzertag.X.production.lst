

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Aug 18 23:33:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  008C                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  010C                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0115                     	;# 
    88  0116                     	;# 
    89  0117                     	;# 
    90  0118                     	;# 
    91  0119                     	;# 
    92  011D                     	;# 
    93  011D                     	;# 
    94  018C                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0194                     	;# 
   101  0195                     	;# 
   102  0196                     	;# 
   103  0197                     	;# 
   104  0199                     	;# 
   105  019A                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019E                     	;# 
   111  019F                     	;# 
   112  020C                     	;# 
   113  028C                     	;# 
   114  030C                     	;# 
   115  038C                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  0691                     	;# 
   120  0692                     	;# 
   121  0693                     	;# 
   122  0694                     	;# 
   123  0695                     	;# 
   124  0D8E                     	;# 
   125  0D8F                     	;# 
   126  0D90                     	;# 
   127  0D91                     	;# 
   128  0D91                     	;# 
   129  0D92                     	;# 
   130  0D93                     	;# 
   131  0D93                     	;# 
   132  0D94                     	;# 
   133  0D95                     	;# 
   134  0D95                     	;# 
   135  0D96                     	;# 
   136  0D97                     	;# 
   137  0D97                     	;# 
   138  0D98                     	;# 
   139  0D99                     	;# 
   140  0D99                     	;# 
   141  0D9A                     	;# 
   142  0D9B                     	;# 
   143  0D9C                     	;# 
   144  0D9D                     	;# 
   145  0D9E                     	;# 
   146  0D9F                     	;# 
   147  0DA0                     	;# 
   148  0DA1                     	;# 
   149  0DA1                     	;# 
   150  0DA2                     	;# 
   151  0DA3                     	;# 
   152  0DA3                     	;# 
   153  0DA4                     	;# 
   154  0DA5                     	;# 
   155  0DA5                     	;# 
   156  0DA6                     	;# 
   157  0DA7                     	;# 
   158  0DA7                     	;# 
   159  0DA8                     	;# 
   160  0DA9                     	;# 
   161  0DA9                     	;# 
   162  0DAA                     	;# 
   163  0DAB                     	;# 
   164  0DAC                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBD                     	;# 
   187  0DBE                     	;# 
   188  0DBF                     	;# 
   189  0DC0                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0115                     	;# 
   249  0116                     	;# 
   250  0117                     	;# 
   251  0118                     	;# 
   252  0119                     	;# 
   253  011D                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0197                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  028C                     	;# 
   275  030C                     	;# 
   276  038C                     	;# 
   277  0391                     	;# 
   278  0392                     	;# 
   279  0393                     	;# 
   280  0691                     	;# 
   281  0692                     	;# 
   282  0693                     	;# 
   283  0694                     	;# 
   284  0695                     	;# 
   285  0D8E                     	;# 
   286  0D8F                     	;# 
   287  0D90                     	;# 
   288  0D91                     	;# 
   289  0D91                     	;# 
   290  0D92                     	;# 
   291  0D93                     	;# 
   292  0D93                     	;# 
   293  0D94                     	;# 
   294  0D95                     	;# 
   295  0D95                     	;# 
   296  0D96                     	;# 
   297  0D97                     	;# 
   298  0D97                     	;# 
   299  0D98                     	;# 
   300  0D99                     	;# 
   301  0D99                     	;# 
   302  0D9A                     	;# 
   303  0D9B                     	;# 
   304  0D9C                     	;# 
   305  0D9D                     	;# 
   306  0D9E                     	;# 
   307  0D9F                     	;# 
   308  0DA0                     	;# 
   309  0DA1                     	;# 
   310  0DA1                     	;# 
   311  0DA2                     	;# 
   312  0DA3                     	;# 
   313  0DA3                     	;# 
   314  0DA4                     	;# 
   315  0DA5                     	;# 
   316  0DA5                     	;# 
   317  0DA6                     	;# 
   318  0DA7                     	;# 
   319  0DA7                     	;# 
   320  0DA8                     	;# 
   321  0DA9                     	;# 
   322  0DA9                     	;# 
   323  0DAA                     	;# 
   324  0DAB                     	;# 
   325  0DAC                     	;# 
   326  0DAD                     	;# 
   327  0DAE                     	;# 
   328  0DAF                     	;# 
   329  0DB0                     	;# 
   330  0DB1                     	;# 
   331  0DB1                     	;# 
   332  0DB2                     	;# 
   333  0DB3                     	;# 
   334  0DB3                     	;# 
   335  0DB4                     	;# 
   336  0DB5                     	;# 
   337  0DB5                     	;# 
   338  0DB6                     	;# 
   339  0DB7                     	;# 
   340  0DB7                     	;# 
   341  0DB8                     	;# 
   342  0DB9                     	;# 
   343  0DB9                     	;# 
   344  0DBA                     	;# 
   345  0DBB                     	;# 
   346  0DBC                     	;# 
   347  0DBD                     	;# 
   348  0DBE                     	;# 
   349  0DBF                     	;# 
   350  0DC0                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0013                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0093                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  0111                     	;# 
   408  0112                     	;# 
   409  0115                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  0118                     	;# 
   413  0119                     	;# 
   414  011D                     	;# 
   415  011D                     	;# 
   416  018C                     	;# 
   417  0191                     	;# 
   418  0191                     	;# 
   419  0192                     	;# 
   420  0193                     	;# 
   421  0193                     	;# 
   422  0194                     	;# 
   423  0195                     	;# 
   424  0196                     	;# 
   425  0197                     	;# 
   426  0199                     	;# 
   427  019A                     	;# 
   428  019B                     	;# 
   429  019B                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  020C                     	;# 
   435  028C                     	;# 
   436  030C                     	;# 
   437  038C                     	;# 
   438  0391                     	;# 
   439  0392                     	;# 
   440  0393                     	;# 
   441  0691                     	;# 
   442  0692                     	;# 
   443  0693                     	;# 
   444  0694                     	;# 
   445  0695                     	;# 
   446  0D8E                     	;# 
   447  0D8F                     	;# 
   448  0D90                     	;# 
   449  0D91                     	;# 
   450  0D91                     	;# 
   451  0D92                     	;# 
   452  0D93                     	;# 
   453  0D93                     	;# 
   454  0D94                     	;# 
   455  0D95                     	;# 
   456  0D95                     	;# 
   457  0D96                     	;# 
   458  0D97                     	;# 
   459  0D97                     	;# 
   460  0D98                     	;# 
   461  0D99                     	;# 
   462  0D99                     	;# 
   463  0D9A                     	;# 
   464  0D9B                     	;# 
   465  0D9C                     	;# 
   466  0D9D                     	;# 
   467  0D9E                     	;# 
   468  0D9F                     	;# 
   469  0DA0                     	;# 
   470  0DA1                     	;# 
   471  0DA1                     	;# 
   472  0DA2                     	;# 
   473  0DA3                     	;# 
   474  0DA3                     	;# 
   475  0DA4                     	;# 
   476  0DA5                     	;# 
   477  0DA5                     	;# 
   478  0DA6                     	;# 
   479  0DA7                     	;# 
   480  0DA7                     	;# 
   481  0DA8                     	;# 
   482  0DA9                     	;# 
   483  0DA9                     	;# 
   484  0DAA                     	;# 
   485  0DAB                     	;# 
   486  0DAC                     	;# 
   487  0DAD                     	;# 
   488  0DAE                     	;# 
   489  0DAF                     	;# 
   490  0DB0                     	;# 
   491  0DB1                     	;# 
   492  0DB1                     	;# 
   493  0DB2                     	;# 
   494  0DB3                     	;# 
   495  0DB3                     	;# 
   496  0DB4                     	;# 
   497  0DB5                     	;# 
   498  0DB5                     	;# 
   499  0DB6                     	;# 
   500  0DB7                     	;# 
   501  0DB7                     	;# 
   502  0DB8                     	;# 
   503  0DB9                     	;# 
   504  0DB9                     	;# 
   505  0DBA                     	;# 
   506  0DBB                     	;# 
   507  0DBC                     	;# 
   508  0DBD                     	;# 
   509  0DBE                     	;# 
   510  0DBF                     	;# 
   511  0DC0                     	;# 
   512  0FE4                     	;# 
   513  0FE5                     	;# 
   514  0FE6                     	;# 
   515  0FE7                     	;# 
   516  0FE8                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEA                     	;# 
   521  0FEB                     	;# 
   522  0FED                     	;# 
   523  0FEE                     	;# 
   524  0FEE                     	;# 
   525  0FEF                     	;# 
   526                           
   527                           	psect	idataBANK1
   528  0636                     __pidataBANK1:	
   529                           
   530                           ;initializer for _fire_song
   531  0636  34A0               	retlw	160
   532  0637  340F               	retlw	15
   533  0638  34DB               	retlw	219
   534  0639  3411               	retlw	17
   535  063A  34D5               	retlw	213
   536  063B  3414               	retlw	20
   537  063C  3400               	retlw	0
   538  063D  3419               	retlw	25
   539  063E  3440               	retlw	64
   540  063F  341F               	retlw	31
   541  0640  34AA               	retlw	170
   542  0641  3429               	retlw	41
   543  0642  3480               	retlw	128
   544  0643  343E               	retlw	62
   545  0644  3400               	retlw	0
   546  0645  347D               	retlw	125
   547  0646  34E3               	retlw	227
   548  0647  348A               	retlw	138
   549  0648  3440               	retlw	64
   550  0649  349C               	retlw	156
   551  064A  3492               	retlw	146
   552  064B  34B2               	retlw	178
   553  064C  3455               	retlw	85
   554  064D  34D0               	retlw	208
   555  064E  341A               	retlw	26
   556  064F  34FF               	retlw	255
   557  0650  3400               	retlw	0
   558  0651  3400               	retlw	0
   559  0652  3400               	retlw	0
   560  0653  3400               	retlw	0
   561  0654  3400               	retlw	0
   562  0655  3400               	retlw	0
   563  0016                     _TMR1	set	22
   564  000B                     _INTCONbits	set	11
   565  0011                     _PIR1bits	set	17
   566  000C                     _PORTAbits	set	12
   567  0018                     _T1CONbits	set	24
   568  0015                     _TMR0	set	21
   569  009B                     _ADRES	set	155
   570  009D                     _ADCON0bits	set	157
   571  009E                     _ADCON1	set	158
   572  0095                     _OPTION_REGbits	set	149
   573  0099                     _OSCCON	set	153
   574  0091                     _PIE1bits	set	145
   575  008C                     _TRISAbits	set	140
   576  0118                     _DACCON0bits	set	280
   577  0191                     _PMADR	set	401
   578  0193                     _PMDAT	set	403
   579  018C                     _ANSELA	set	396
   580  018C                     _ANSELAbits	set	396
   581  019F                     _BAUDCONbits	set	415
   582  0191                     _PMADRL	set	401
   583  0195                     _PMCON1bits	set	405
   584  0196                     _PMCON2	set	406
   585  0199                     _RCREG	set	409
   586  019D                     _RCSTAbits	set	413
   587  019B                     _SPBRGL	set	411
   588  019A                     _TXREG	set	410
   589  019E                     _TXSTAbits	set	414
   590  0DB3                     _PWM3DC	set	3507
   591  0DB1                     _PWM3PH	set	3505
   592  0DB5                     _PWM3PR	set	3509
   593  0DBB                     _PWM3CONbits	set	3515
   594  0DBF                     _PWM3LDCONbits	set	3519
   595                           
   596                           ; #config settings
   597  0000                     
   598                           	psect	cinit
   599  0016                     start_initialization:	
   600  0016                     __initialization:	
   601                           
   602                           ; Clear objects allocated to BANK0
   603  0016  304B               	movlw	low __pbssBANK0
   604  0017  0084               	movwf	4
   605  0018  3000               	movlw	high __pbssBANK0
   606  0019  0085               	movwf	5
   607  001A  3022               	movlw	34
   608  001B  26F5               	fcall	clear_ram0
   609                           
   610                           ; Clear objects allocated to BANK1
   611  001C  30A0               	movlw	low __pbssBANK1
   612  001D  0084               	movwf	4
   613  001E  3000               	movlw	high __pbssBANK1
   614  001F  0085               	movwf	5
   615  0020  3020               	movlw	32
   616  0021  26F5               	fcall	clear_ram0
   617                           
   618                           ; Initialize objects allocated to BANK1
   619  0022  3036               	movlw	low __pidataBANK1
   620  0023  0084               	movwf	4
   621  0024  3086               	movlw	(high __pidataBANK1)| (0+128)
   622  0025  0085               	movwf	5
   623  0026  30C0               	movlw	low __pdataBANK1
   624  0027  0086               	movwf	6
   625  0028  3000               	movlw	high __pdataBANK1
   626  0029  0087               	movwf	7
   627  002A  3020               	movlw	32
   628  002B  26FB               	fcall	init_ram
   629  002C                     end_of_initialization:	
   630                           ;End of C runtime variable initialization code
   631                           
   632  002C                     __end_of__initialization:	
   633  002C  0020               	movlb	0
   634  002D  2F01               	ljmp	_main	;jump to C main() function
   635                           
   636                           	psect	bssBANK0
   637  004B                     __pbssBANK0:	
   638  004B                     __i:	
   639  004B                     	ds	2
   640  004D                     _cur_song_duration:	
   641  004D                     	ds	2
   642  004F                     handle_fire@counter:	
   643  004F                     	ds	2
   644  0051                     handle_fire@timer:	
   645  0051                     	ds	2
   646  0053                     __checksum:	
   647  0053                     	ds	1
   648  0054                     _cur_song:	
   649  0054                     	ds	1
   650  0055                     _cur_song_length:	
   651  0055                     	ds	1
   652  0056                     _cur_song_ptr:	
   653  0056                     	ds	1
   654  0057                     _cur_song_repeat:	
   655  0057                     	ds	1
   656  0058                     _my_random_number:	
   657  0058                     	ds	1
   658  0059                     handle_serial@rx_counter:	
   659  0059                     	ds	1
   660  005A                     handle_serial@rx_id:	
   661  005A                     	ds	1
   662  005B                     _config:	
   663  005B                     	ds	16
   664  006B                     __x:	
   665  006B                     	ds	1
   666  006C                     __y:	
   667  006C                     	ds	1
   668                           
   669                           	psect	bssBANK1
   670  00A0                     __pbssBANK1:	
   671  00A0                     _hitlist:	
   672  00A0                     	ds	32
   673                           
   674                           	psect	dataBANK1
   675  00C0                     __pdataBANK1:	
   676  00C0                     _fire_song:	
   677  00C0                     	ds	32
   678                           
   679                           	psect	clrtext
   680  06F5                     clear_ram0:	
   681                           ;	Called with FSR0 containing the base address, and
   682                           ;	WREG with the size to clear
   683                           
   684  06F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   685  06F6                     clrloop0:	
   686  06F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   687  06F7  3101               	addfsr 0,1
   688  06F8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   689  06F9  2EF6               	goto	clrloop0	;have we reached the end yet?
   690  06FA  3400               	retlw	0	;all done for this memory range, return
   691                           
   692                           	psect	inittext
   693  06FB                     init_ram:	
   694  06FB  00FE               	movwf	126
   695  06FC                     initloop:	
   696  06FC  0012               	moviw fsr0++
   697  06FD  001E               	movwi fsr1++
   698  06FE  0BFE               	decfsz	126,f
   699  06FF  2EFC               	goto	initloop
   700  0700  3400               	retlw	0
   701                           
   702                           	psect	cstackCOMMON
   703  0070                     __pcstackCOMMON:	
   704  0070                     ?_Setup:	
   705  0070                     ?_handle_music:	
   706                           ; 0 bytes @ 0x0
   707                           
   708  0070                     ?_add_to_hitlist:	
   709                           ; 0 bytes @ 0x0
   710                           
   711  0070                     ?_tone_off:	
   712                           ; 0 bytes @ 0x0
   713                           
   714  0070                     ?_Modulate_Serial:	
   715                           ; 0 bytes @ 0x0
   716                           
   717  0070                     ?_Disable_Modulation:	
   718                           ; 0 bytes @ 0x0
   719                           
   720  0070                     ?_LoadFromFlash:	
   721                           ; 0 bytes @ 0x0
   722                           
   723  0070                     ?_main:	
   724                           ; 0 bytes @ 0x0
   725                           
   726  0070                     ?_hit_by:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0070                     ?_green_led_on:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ?_led_off:	
   733                           ; 0 bytes @ 0x0
   734                           
   735  0070                     ?_stop_song:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_Send_Byte:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_High_Priority_Interrupt:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ??_High_Priority_Interrupt:	
   745                           ; 0 bytes @ 0x0
   746                           
   747  0070                     ?_SEND_DATA_BYTE:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_SEND_SOF:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_SEND_EOF:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?_control_transfer:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_handle_serial:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_handle_fire:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0070                     ?_get_hitlist_length:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0070                     ?_GET_CHAR_HELPER:	
   769                           ; 1 bytes @ 0x0
   770                           
   771                           
   772                           ; 1 bytes @ 0x0
   773  0070                     	ds	1
   774  0071                     ?_Load:	
   775  0071                     ??_Setup:	
   776                           ; 0 bytes @ 0x1
   777                           
   778  0071                     ??_add_to_hitlist:	
   779                           ; 0 bytes @ 0x1
   780                           
   781  0071                     ?_Save:	
   782                           ; 0 bytes @ 0x1
   783                           
   784  0071                     ??_get_hitlist_length:	
   785                           ; 0 bytes @ 0x1
   786                           
   787  0071                     ??_tone_off:	
   788                           ; 0 bytes @ 0x1
   789                           
   790  0071                     ??_Modulate_Serial:	
   791                           ; 0 bytes @ 0x1
   792                           
   793  0071                     ??_Disable_Modulation:	
   794                           ; 0 bytes @ 0x1
   795                           
   796  0071                     ??_green_led_on:	
   797                           ; 0 bytes @ 0x1
   798                           
   799  0071                     ??_led_off:	
   800                           ; 0 bytes @ 0x1
   801                           
   802  0071                     ?_play_song:	
   803                           ; 0 bytes @ 0x1
   804                           
   805  0071                     ??_stop_song:	
   806                           ; 0 bytes @ 0x1
   807                           
   808  0071                     ??_Send_Byte:	
   809                           ; 0 bytes @ 0x1
   810                           
   811  0071                     ??_GET_CHAR_HELPER:	
   812                           ; 0 bytes @ 0x1
   813                           
   814  0071                     ?_ADC_read:	
   815                           ; 0 bytes @ 0x1
   816                           
   817  0071                     ?___aldiv:	
   818                           ; 2 bytes @ 0x1
   819                           
   820  0071                     play_song@length:	
   821                           ; 4 bytes @ 0x1
   822                           
   823  0071                     Send_Byte@data:	
   824                           ; 1 bytes @ 0x1
   825                           
   826  0071                     Load@address:	
   827                           ; 1 bytes @ 0x1
   828                           
   829  0071                     Save@address:	
   830                           ; 2 bytes @ 0x1
   831                           
   832  0071                     ___aldiv@divisor:	
   833                           ; 2 bytes @ 0x1
   834                           
   835                           
   836                           ; 4 bytes @ 0x1
   837  0071                     	ds	1
   838  0072                     ??_SEND_DATA_BYTE:	
   839  0072                     GET_CHAR_HELPER@val:	
   840                           ; 0 bytes @ 0x2
   841                           
   842  0072                     play_song@note_duration:	
   843                           ; 1 bytes @ 0x2
   844                           
   845                           
   846                           ; 2 bytes @ 0x2
   847  0072                     	ds	1
   848  0073                     ??_ADC_read:	
   849  0073                     Load@ptr:	
   850                           ; 0 bytes @ 0x3
   851                           
   852  0073                     Save@ptr:	
   853                           ; 1 bytes @ 0x3
   854                           
   855                           
   856                           ; 1 bytes @ 0x3
   857  0073                     	ds	1
   858  0074                     play_song@repeat:	
   859  0074                     Load@data_length:	
   860                           ; 1 bytes @ 0x4
   861                           
   862  0074                     Save@data_length:	
   863                           ; 1 bytes @ 0x4
   864                           
   865  0074                     SEND_DATA_BYTE@b:	
   866                           ; 1 bytes @ 0x4
   867                           
   868                           
   869                           ; 1 bytes @ 0x4
   870  0074                     	ds	1
   871  0075                     ??_Load:	
   872  0075                     ??_Save:	
   873                           ; 0 bytes @ 0x5
   874                           
   875  0075                     ??_play_song:	
   876                           ; 0 bytes @ 0x5
   877                           
   878  0075                     ??_SEND_SOF:	
   879                           ; 0 bytes @ 0x5
   880                           
   881  0075                     ??_SEND_EOF:	
   882                           ; 0 bytes @ 0x5
   883                           
   884  0075                     get_hitlist_length@i:	
   885                           ; 0 bytes @ 0x5
   886                           
   887  0075                     add_to_hitlist@gun:	
   888                           ; 1 bytes @ 0x5
   889                           
   890  0075                     ___aldiv@dividend:	
   891                           ; 1 bytes @ 0x5
   892                           
   893                           
   894                           ; 4 bytes @ 0x5
   895  0075                     	ds	1
   896  0076                     Load@i:	
   897  0076                     Save@i:	
   898                           ; 1 bytes @ 0x6
   899                           
   900  0076                     add_to_hitlist@gun16:	
   901                           ; 1 bytes @ 0x6
   902                           
   903                           
   904                           ; 2 bytes @ 0x6
   905  0076                     	ds	1
   906  0077                     ??_LoadFromFlash:	
   907  0077                     ??_control_transfer:	
   908                           ; 0 bytes @ 0x7
   909                           
   910  0077                     play_song@song:	
   911                           ; 0 bytes @ 0x7
   912                           
   913                           
   914                           ; 1 bytes @ 0x7
   915  0077                     	ds	1
   916  0078                     ??_handle_fire:	
   917  0078                     add_to_hitlist@i:	
   918                           ; 0 bytes @ 0x8
   919                           
   920                           
   921                           ; 1 bytes @ 0x8
   922  0078                     	ds	1
   923  0079                     ??___aldiv:	
   924                           
   925                           ; 0 bytes @ 0x9
   926  0079                     	ds	1
   927  007A                     ??_tone:	
   928  007A                     handle_fire@a:	
   929                           ; 0 bytes @ 0xA
   930                           
   931                           
   932                           ; 2 bytes @ 0xA
   933  007A                     	ds	2
   934  007C                     hit_by@who:	
   935                           
   936                           ; 1 bytes @ 0xC
   937  007C                     	ds	1
   938  007D                     ??_main:	
   939                           
   940                           	psect	cstackBANK0
   941  0020                     __pcstackBANK0:	
   942                           ; 0 bytes @ 0xD
   943                           
   944  0020                     ___aldiv@counter:	
   945  0020                     control_transfer@data:	
   946                           ; 1 bytes @ 0x0
   947                           
   948                           
   949                           ; 32 bytes @ 0x0
   950  0020                     	ds	1
   951  0021                     ___aldiv@sign:	
   952                           
   953                           ; 1 bytes @ 0x1
   954  0021                     	ds	1
   955  0022                     ___aldiv@quotient:	
   956                           
   957                           ; 4 bytes @ 0x2
   958  0022                     	ds	4
   959  0026                     ?_tone:	
   960  0026                     tone@period:	
   961                           ; 0 bytes @ 0x6
   962                           
   963                           
   964                           ; 2 bytes @ 0x6
   965  0026                     	ds	2
   966  0028                     ??_handle_music:	
   967  0028                     ?_Buzz:	
   968                           ; 0 bytes @ 0x8
   969                           
   970  0028                     Buzz@freq:	
   971                           ; 0 bytes @ 0x8
   972                           
   973                           
   974                           ; 2 bytes @ 0x8
   975  0028                     	ds	2
   976  002A                     Buzz@dur_ms:	
   977                           
   978                           ; 2 bytes @ 0xA
   979  002A                     	ds	2
   980  002C                     ??_Buzz:	
   981                           
   982                           ; 0 bytes @ 0xC
   983  002C                     	ds	2
   984  002E                     Buzz@i:	
   985                           
   986                           ; 2 bytes @ 0xE
   987  002E                     	ds	2
   988  0030                     ??_hit_by:	
   989                           
   990                           ; 0 bytes @ 0x10
   991  0030                     	ds	16
   992  0040                     control_transfer@cmd:	
   993                           
   994                           ; 1 bytes @ 0x20
   995  0040                     	ds	1
   996  0041                     control_transfer@random_number:	
   997                           
   998                           ; 1 bytes @ 0x21
   999  0041                     	ds	1
  1000  0042                     control_transfer@id:	
  1001                           
  1002                           ; 1 bytes @ 0x22
  1003  0042                     	ds	1
  1004  0043                     control_transfer@dptr:	
  1005                           
  1006                           ; 1 bytes @ 0x23
  1007  0043                     	ds	1
  1008  0044                     control_transfer@i:	
  1009                           
  1010                           ; 1 bytes @ 0x24
  1011  0044                     	ds	1
  1012  0045                     control_transfer@page:	
  1013                           
  1014                           ; 2 bytes @ 0x25
  1015  0045                     	ds	2
  1016  0047                     control_transfer@x:	
  1017                           
  1018                           ; 1 bytes @ 0x27
  1019  0047                     	ds	1
  1020  0048                     ??_handle_serial:	
  1021                           
  1022                           ; 0 bytes @ 0x28
  1023  0048                     	ds	2
  1024  004A                     handle_serial@b:	
  1025                           
  1026                           ; 1 bytes @ 0x2A
  1027  004A                     	ds	1
  1028                           
  1029                           	psect	maintext
  1030  0701                     __pmaintext:	
  1031 ;;
  1032 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1033 ;;
  1034 ;; *************** function _main *****************
  1035 ;; Defined at:
  1036 ;;		line 49 in file "main.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;		None               void
  1043 ;; Registers used:
  1044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 17F/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1050 ;;      Params:         0       0       0       0
  1051 ;;      Locals:         0       0       0       0
  1052 ;;      Temps:          0       0       0       0
  1053 ;;      Totals:         0       0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels required when called:    7
  1056 ;; This function calls:
  1057 ;;		_LoadFromFlash
  1058 ;;		_Setup
  1059 ;;		_handle_serial
  1060 ;;		_handle_fire
  1061 ;;		_handle_music
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _main
  1069  0701                     _main:	
  1070                           
  1071                           ;main.c: 50: Setup();
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _main: [allreg]
  1075  0701  2656               	fcall	_Setup
  1076                           
  1077                           ;main.c: 51: LoadFromFlash();
  1078  0702  2489               	fcall	_LoadFromFlash
  1079  0703                     l1588:	
  1080                           ;main.c: 53: while(1)
  1081                           
  1082                           
  1083                           ;main.c: 54: {
  1084                           ;main.c: 55: handle_serial();
  1085  0703  24C9               	fcall	_handle_serial
  1086                           
  1087                           ;main.c: 56: handle_fire();
  1088  0704  238B               	fcall	_handle_fire
  1089                           
  1090                           ;main.c: 57: handle_music();
  1091  0705  25A1               	fcall	_handle_music
  1092  0706  2F03               	goto	l1588
  1093  0707                     __end_of_main:	
  1094                           
  1095                           	psect	text1
  1096  05A1                     __ptext1:	
  1097 ;; *************** function _handle_music *****************
  1098 ;; Defined at:
  1099 ;;		line 100 in file "user.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;		None               void
  1106 ;; Registers used:
  1107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1113 ;;      Params:         0       0       0       0
  1114 ;;      Locals:         0       0       0       0
  1115 ;;      Temps:          0       2       0       0
  1116 ;;      Totals:         0       2       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    3
  1120 ;; This function calls:
  1121 ;;		_stop_song
  1122 ;;		_tone
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           
  1129                           ;psect for function _handle_music
  1130  05A1                     _handle_music:	
  1131                           
  1132                           ;user.c: 101: if(!PIR1bits.TMR1IF) return;
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in _handle_music: [allreg]
  1136  05A1  0020               	movlb	0	; select bank0
  1137  05A2  1C11               	btfss	17,0	;volatile
  1138  05A3  0008               	return
  1139                           
  1140                           ;user.c: 102: tone(cur_song[cur_song_ptr]);
  1141  05A4  3556               	lslf	_cur_song_ptr,w
  1142  05A5  0754               	addwf	_cur_song,w
  1143  05A6  00A8               	movwf	??_handle_music
  1144  05A7  0828               	movf	??_handle_music,w
  1145  05A8  0086               	movwf	6
  1146  05A9  0187               	clrf	7
  1147  05AA  3F40               	moviw [0]fsr1
  1148  05AB  00A6               	movwf	?_tone
  1149  05AC  3F41               	moviw [1]fsr1
  1150  05AD  00A7               	movwf	?_tone+1
  1151  05AE  26AE               	fcall	_tone
  1152                           
  1153                           ;user.c: 103: TMR1 = -cur_song_duration;
  1154  05AF  0020               	movlb	0	; select bank0
  1155  05B0  094D               	comf	_cur_song_duration,w
  1156  05B1  00A8               	movwf	??_handle_music
  1157  05B2  094E               	comf	_cur_song_duration+1,w
  1158  05B3  00A9               	movwf	??_handle_music+1
  1159  05B4  0AA8               	incf	??_handle_music,f
  1160  05B5  1903               	skipnz
  1161  05B6  0AA9               	incf	??_handle_music+1,f
  1162  05B7  0828               	movf	??_handle_music,w
  1163  05B8  0096               	movwf	22	;volatile
  1164  05B9  0829               	movf	??_handle_music+1,w
  1165  05BA  0097               	movwf	23	;volatile
  1166                           
  1167                           ;user.c: 104: cur_song_ptr++;
  1168  05BB  3001               	movlw	1
  1169  05BC  00A8               	movwf	??_handle_music
  1170  05BD  0828               	movf	??_handle_music,w
  1171  05BE  07D6               	addwf	_cur_song_ptr,f
  1172                           
  1173                           ;user.c: 105: if(cur_song_ptr >= cur_song_length)
  1174  05BF  0855               	movf	_cur_song_length,w
  1175  05C0  0256               	subwf	_cur_song_ptr,w
  1176  05C1  1C03               	skipc
  1177  05C2  2DC9               	goto	l1676
  1178                           
  1179                           ;user.c: 106: {
  1180                           ;user.c: 107: if(cur_song_repeat)
  1181  05C3  0857               	movf	_cur_song_repeat,w
  1182  05C4  1903               	btfsc	3,2
  1183  05C5  2DC8               	goto	l1674
  1184                           
  1185                           ;user.c: 108: {
  1186                           ;user.c: 109: cur_song_ptr=0;
  1187  05C6  01D6               	clrf	_cur_song_ptr
  1188                           
  1189                           ;user.c: 110: }
  1190  05C7  2DC9               	goto	l1676
  1191  05C8                     l1674:	
  1192                           
  1193                           ;user.c: 111: else
  1194                           ;user.c: 112: {
  1195                           ;user.c: 113: stop_song();
  1196  05C8  2707               	fcall	_stop_song
  1197  05C9                     l1676:	
  1198                           
  1199                           ;user.c: 114: }
  1200                           ;user.c: 115: }
  1201                           ;user.c: 116: PIR1bits.TMR1IF=0;
  1202  05C9  0020               	movlb	0	; select bank0
  1203  05CA  1011               	bcf	17,0	;volatile
  1204  05CB  0008               	return
  1205  05CC                     __end_of_handle_music:	
  1206                           
  1207                           	psect	text2
  1208  038B                     __ptext2:	
  1209 ;; *************** function _handle_fire *****************
  1210 ;; Defined at:
  1211 ;;		line 219 in file "user.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  a               2   10[COMMON] unsigned int 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      unsigned char 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1225 ;;      Params:         0       0       0       0
  1226 ;;      Locals:         2       0       0       0
  1227 ;;      Temps:          2       0       0       0
  1228 ;;      Totals:         4       0       0       0
  1229 ;;Total ram usage:        4 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    3
  1232 ;; This function calls:
  1233 ;;		_ADC_read
  1234 ;;		_green_led_on
  1235 ;;		_led_off
  1236 ;;		_play_song
  1237 ;;		_stop_song
  1238 ;;		_Send_Byte
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function _handle_fire
  1246  038B                     _handle_fire:	
  1247                           
  1248                           ;user.c: 220: static uint16_t timer = 0;
  1249                           ;user.c: 221: static uint16_t counter = 0;
  1250                           ;user.c: 222: uint16_t a;
  1251                           ;user.c: 223: a=ADC_read();
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _handle_fire: [allreg]
  1255  038B  2674               	fcall	_ADC_read
  1256  038C  0872               	movf	?_ADC_read+1,w
  1257  038D  01FB               	clrf	handle_fire@a+1
  1258  038E  07FB               	addwf	handle_fire@a+1,f
  1259  038F  0871               	movf	?_ADC_read,w
  1260  0390  01FA               	clrf	handle_fire@a
  1261  0391  07FA               	addwf	handle_fire@a,f
  1262                           
  1263                           ;user.c: 224: if (a > config.fire_threshold && a < config.fire_cheating)
  1264  0392  087B               	movf	handle_fire@a+1,w
  1265  0393  0020               	movlb	0	; select bank0
  1266  0394  0266               	subwf	_config+11,w
  1267  0395  1D03               	skipz
  1268  0396  2B99               	goto	u1395
  1269  0397  087A               	movf	handle_fire@a,w
  1270  0398  0265               	subwf	_config+10,w
  1271  0399                     u1395:	
  1272  0399  1803               	skipnc
  1273  039A  2BE6               	goto	l1648
  1274  039B  0868               	movf	_config+13,w
  1275  039C  027B               	subwf	handle_fire@a+1,w
  1276  039D  1D03               	skipz
  1277  039E  2BA1               	goto	u1405
  1278  039F  0867               	movf	_config+12,w
  1279  03A0  027A               	subwf	handle_fire@a,w
  1280  03A1                     u1405:	
  1281  03A1  1803               	skipnc
  1282  03A2  2BE6               	goto	l1648
  1283                           
  1284                           ;user.c: 225: {
  1285                           ;user.c: 226: if(timer < config.fire_holdoff)
  1286  03A3  086A               	movf	_config+15,w
  1287  03A4  0252               	subwf	handle_fire@timer+1,w
  1288  03A5  1D03               	skipz
  1289  03A6  2BA9               	goto	u1415
  1290  03A7  0869               	movf	_config+14,w
  1291  03A8  0251               	subwf	handle_fire@timer,w
  1292  03A9                     u1415:	
  1293  03A9  1803               	skipnc
  1294  03AA  2BB0               	goto	l1632
  1295                           
  1296                           ;user.c: 227: {
  1297                           ;user.c: 228: timer ++;
  1298  03AB  3001               	movlw	1
  1299  03AC  07D1               	addwf	handle_fire@timer,f
  1300  03AD  3000               	movlw	0
  1301  03AE  3DD2               	addwfc	handle_fire@timer+1,f
  1302                           
  1303                           ;user.c: 229: }
  1304  03AF  0008               	return
  1305  03B0                     l1632:	
  1306                           
  1307                           ;user.c: 230: else
  1308                           ;user.c: 231: {
  1309                           ;user.c: 232: if(!config.power || counter <= config.power)
  1310  03B0  3002               	movlw	2
  1311  03B1  3E5B               	addlw	_config& (0+255)
  1312  03B2  0086               	movwf	6
  1313  03B3  0187               	clrf	7
  1314  03B4  0016               	moviw fsr1++
  1315  03B5  0401               	iorwf	1,w
  1316  03B6  1903               	skipnz
  1317  03B7  2BC0               	goto	l1636
  1318  03B8  0850               	movf	handle_fire@counter+1,w
  1319  03B9  025E               	subwf	_config+3,w
  1320  03BA  1D03               	skipz
  1321  03BB  2BBE               	goto	u1435
  1322  03BC  084F               	movf	handle_fire@counter,w
  1323  03BD  025D               	subwf	_config+2,w
  1324  03BE                     u1435:	
  1325  03BE  1C03               	skipc
  1326  03BF  2BE4               	goto	l1646
  1327  03C0                     l1636:	
  1328                           
  1329                           ;user.c: 233: {
  1330                           ;user.c: 234: if(!counter)
  1331  03C0  0850               	movf	handle_fire@counter+1,w
  1332  03C1  044F               	iorwf	handle_fire@counter,w
  1333  03C2  1D03               	skipz
  1334  03C3  2BDB               	goto	l1642
  1335                           
  1336                           ;user.c: 235: {
  1337                           ;user.c: 236: green_led_on();
  1338  03C4  270C               	fcall	_green_led_on
  1339                           
  1340                           ;user.c: 237: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  1341  03C5  3010               	movlw	16
  1342  03C6  00F8               	movwf	??_handle_fire
  1343  03C7  0878               	movf	??_handle_fire,w
  1344  03C8  00F1               	movwf	?_play_song
  1345  03C9  30B8               	movlw	184
  1346  03CA  00F2               	movwf	?_play_song+1
  1347  03CB  300B               	movlw	11
  1348  03CC  00F3               	movwf	?_play_song+2
  1349  03CD  3002               	movlw	2
  1350  03CE  3E5B               	addlw	_config& (0+255)
  1351  03CF  0086               	movwf	6
  1352  03D0  0187               	clrf	7
  1353  03D1  0016               	moviw fsr1++
  1354  03D2  0401               	iorwf	1,w
  1355  03D3  3000               	movlw	0
  1356  03D4  1903               	skipnz
  1357  03D5  3001               	movlw	1
  1358  03D6  00F9               	movwf	??_handle_fire+1
  1359  03D7  0879               	movf	??_handle_fire+1,w
  1360  03D8  00F4               	movwf	?_play_song+3
  1361  03D9  30C0               	movlw	_fire_song& (0+255)
  1362  03DA  25F1               	fcall	_play_song
  1363  03DB                     l1642:	
  1364                           
  1365                           ;user.c: 238: }
  1366                           ;user.c: 239: Send_Byte(config.id);
  1367  03DB  0020               	movlb	0	; select bank0
  1368  03DC  085B               	movf	_config,w
  1369  03DD  26CB               	fcall	_Send_Byte
  1370                           
  1371                           ;user.c: 240: counter++;
  1372  03DE  3001               	movlw	1
  1373  03DF  0020               	movlb	0	; select bank0
  1374  03E0  07CF               	addwf	handle_fire@counter,f
  1375  03E1  3000               	movlw	0
  1376  03E2  3DD0               	addwfc	handle_fire@counter+1,f
  1377                           
  1378                           ;user.c: 241: }
  1379  03E3  0008               	return
  1380  03E4                     l1646:	
  1381                           
  1382                           ;user.c: 242: else
  1383                           ;user.c: 243: {
  1384                           ;user.c: 244: led_off();
  1385  03E4  2715               	fcall	_led_off
  1386                           
  1387                           ;user.c: 245: }
  1388                           ;user.c: 246: }
  1389                           ;user.c: 247: }
  1390  03E5  0008               	return
  1391  03E6                     l1648:	
  1392                           
  1393                           ;user.c: 248: else
  1394                           ;user.c: 249: {
  1395                           ;user.c: 250: led_off();
  1396  03E6  2715               	fcall	_led_off
  1397                           
  1398                           ;user.c: 251: stop_song();
  1399  03E7  2707               	fcall	_stop_song
  1400                           
  1401                           ;user.c: 252: timer = 0;
  1402  03E8  0020               	movlb	0	; select bank0
  1403  03E9  01D1               	clrf	handle_fire@timer
  1404  03EA  01D2               	clrf	handle_fire@timer+1
  1405                           
  1406                           ;user.c: 253: counter = 0;
  1407  03EB  01CF               	clrf	handle_fire@counter
  1408  03EC  01D0               	clrf	handle_fire@counter+1
  1409                           
  1410                           ;user.c: 254: return 0;
  1411                           ;	Return value of _handle_fire is never used
  1412  03ED  0008               	return
  1413  03EE                     __end_of_handle_fire:	
  1414                           ;user.c: 255: }
  1415                           ;user.c: 256: return 1;
  1416                           ;	Return value of _handle_fire is never used
  1417                           
  1418                           
  1419                           	psect	text3
  1420  0707                     __ptext3:	
  1421 ;; *************** function _stop_song *****************
  1422 ;; Defined at:
  1423 ;;		line 93 in file "user.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;		None               void
  1430 ;; Registers used:
  1431 ;;		status,2, status,0, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1437 ;;      Params:         0       0       0       0
  1438 ;;      Locals:         0       0       0       0
  1439 ;;      Temps:          0       0       0       0
  1440 ;;      Totals:         0       0       0       0
  1441 ;;Total ram usage:        0 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    2
  1444 ;; This function calls:
  1445 ;;		_tone_off
  1446 ;; This function is called by:
  1447 ;;		_handle_music
  1448 ;;		_handle_fire
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           
  1453                           ;psect for function _stop_song
  1454  0707                     _stop_song:	
  1455                           
  1456                           ;user.c: 94: tone_off();
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  1460  0707  2718               	fcall	_tone_off
  1461                           
  1462                           ;user.c: 95: T1CONbits.TMR1ON=0;
  1463  0708  0020               	movlb	0	; select bank0
  1464  0709  1018               	bcf	24,0	;volatile
  1465                           
  1466                           ;user.c: 96: PIR1bits.TMR1IF=0;
  1467  070A  1011               	bcf	17,0	;volatile
  1468  070B  0008               	return
  1469  070C                     __end_of_stop_song:	
  1470                           
  1471                           	psect	text4
  1472  05F1                     __ptext4:	
  1473 ;; *************** function _play_song *****************
  1474 ;; Defined at:
  1475 ;;		line 80 in file "user.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  song            1    wreg     PTR unsigned int 
  1478 ;;		 -> fire_song(32), 
  1479 ;;  length          1    1[COMMON] unsigned char 
  1480 ;;  note_duratio    2    2[COMMON] unsigned int 
  1481 ;;  repeat          1    4[COMMON] unsigned char 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  song            1    7[COMMON] PTR unsigned int 
  1484 ;;		 -> fire_song(32), 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;		None               void
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1494 ;;      Params:         4       0       0       0
  1495 ;;      Locals:         1       0       0       0
  1496 ;;      Temps:          2       0       0       0
  1497 ;;      Totals:         7       0       0       0
  1498 ;;Total ram usage:        7 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    1
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_handle_fire
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _play_song
  1510  05F1                     _play_song:	
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _play_song: [wreg+status,2+status,0]
  1514                           ;play_song@song stored from wreg
  1515  05F1  00F7               	movwf	play_song@song
  1516                           
  1517                           ;user.c: 81: cur_song=song;
  1518  05F2  0877               	movf	play_song@song,w
  1519  05F3  00F5               	movwf	??_play_song
  1520  05F4  0875               	movf	??_play_song,w
  1521  05F5  0020               	movlb	0	; select bank0
  1522  05F6  00D4               	movwf	_cur_song
  1523                           
  1524                           ;user.c: 82: cur_song_length=length;
  1525  05F7  0871               	movf	play_song@length,w
  1526  05F8  00F5               	movwf	??_play_song
  1527  05F9  0875               	movf	??_play_song,w
  1528  05FA  00D5               	movwf	_cur_song_length
  1529                           
  1530                           ;user.c: 83: cur_song_ptr=0;
  1531  05FB  01D6               	clrf	_cur_song_ptr
  1532                           
  1533                           ;user.c: 84: cur_song_repeat=repeat;
  1534  05FC  0874               	movf	play_song@repeat,w
  1535  05FD  00F5               	movwf	??_play_song
  1536  05FE  0875               	movf	??_play_song,w
  1537  05FF  00D7               	movwf	_cur_song_repeat
  1538                           
  1539                           ;user.c: 85: cur_song_duration=note_duration;
  1540  0600  0873               	movf	play_song@note_duration+1,w
  1541  0601  01CE               	clrf	_cur_song_duration+1
  1542  0602  07CE               	addwf	_cur_song_duration+1,f
  1543  0603  0872               	movf	play_song@note_duration,w
  1544  0604  01CD               	clrf	_cur_song_duration
  1545  0605  07CD               	addwf	_cur_song_duration,f
  1546                           
  1547                           ;user.c: 87: TMR1 = -cur_song_duration;
  1548  0606  094D               	comf	_cur_song_duration,w
  1549  0607  00F5               	movwf	??_play_song
  1550  0608  094E               	comf	_cur_song_duration+1,w
  1551  0609  00F6               	movwf	??_play_song+1
  1552  060A  0AF5               	incf	??_play_song,f
  1553  060B  1903               	skipnz
  1554  060C  0AF6               	incf	??_play_song+1,f
  1555  060D  0875               	movf	??_play_song,w
  1556  060E  0096               	movwf	22	;volatile
  1557  060F  0876               	movf	??_play_song+1,w
  1558  0610  0097               	movwf	23	;volatile
  1559                           
  1560                           ;user.c: 88: PIR1bits.TMR1IF = 1;
  1561  0611  1411               	bsf	17,0	;volatile
  1562                           
  1563                           ;user.c: 89: T1CONbits.TMR1ON = 1;
  1564  0612  1418               	bsf	24,0	;volatile
  1565  0613  0008               	return
  1566  0614                     __end_of_play_song:	
  1567                           
  1568                           	psect	text5
  1569  0715                     __ptext5:	
  1570 ;; *************** function _led_off *****************
  1571 ;; Defined at:
  1572 ;;		line 75 in file "user.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		None
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1586 ;;      Params:         0       0       0       0
  1587 ;;      Locals:         0       0       0       0
  1588 ;;      Temps:          0       0       0       0
  1589 ;;      Totals:         0       0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    1
  1593 ;; This function calls:
  1594 ;;		Nothing
  1595 ;; This function is called by:
  1596 ;;		_handle_fire
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           
  1601                           ;psect for function _led_off
  1602  0715                     _led_off:	
  1603                           
  1604                           ;user.c: 76: TRISAbits.TRISA5 = 1;
  1605                           
  1606                           ;incstack = 0
  1607                           ; Regs used in _led_off: []
  1608  0715  0021               	movlb	1	; select bank1
  1609  0716  168C               	bsf	12,5	;volatile
  1610  0717  0008               	return
  1611  0718                     __end_of_led_off:	
  1612                           
  1613                           	psect	text6
  1614  070C                     __ptext6:	
  1615 ;; *************** function _green_led_on *****************
  1616 ;; Defined at:
  1617 ;;		line 69 in file "user.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;		None               void
  1624 ;; Registers used:
  1625 ;;		None
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1631 ;;      Params:         0       0       0       0
  1632 ;;      Locals:         0       0       0       0
  1633 ;;      Temps:          0       0       0       0
  1634 ;;      Totals:         0       0       0       0
  1635 ;;Total ram usage:        0 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_handle_fire
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           
  1646                           ;psect for function _green_led_on
  1647  070C                     _green_led_on:	
  1648                           
  1649                           ;user.c: 70: TRISAbits.TRISA5 = 0;
  1650                           
  1651                           ;incstack = 0
  1652                           ; Regs used in _green_led_on: []
  1653  070C  0021               	movlb	1	; select bank1
  1654  070D  128C               	bcf	12,5	;volatile
  1655                           
  1656                           ;user.c: 71: PORTAbits.RA5 = 1;
  1657  070E  0020               	movlb	0	; select bank0
  1658  070F  168C               	bsf	12,5	;volatile
  1659  0710  0008               	return
  1660  0711                     __end_of_green_led_on:	
  1661                           
  1662                           	psect	text7
  1663  0674                     __ptext7:	
  1664 ;; *************** function _ADC_read *****************
  1665 ;; Defined at:
  1666 ;;		line 53 in file "user.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  2    1[COMMON] unsigned int 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1680 ;;      Params:         2       0       0       0
  1681 ;;      Locals:         0       0       0       0
  1682 ;;      Temps:          2       0       0       0
  1683 ;;      Totals:         4       0       0       0
  1684 ;;Total ram usage:        4 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_handle_fire
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           
  1695                           ;psect for function _ADC_read
  1696  0674                     _ADC_read:	
  1697                           
  1698                           ;user.c: 54: ADCON0bits.CHS = 3;
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1702  0674  0021               	movlb	1	; select bank1
  1703  0675  081D               	movf	29,w	;volatile
  1704  0676  3983               	andlw	-125
  1705  0677  380C               	iorlw	12
  1706  0678  009D               	movwf	29	;volatile
  1707                           
  1708                           ;user.c: 55: ADCON0bits.ADON = 1;
  1709  0679  141D               	bsf	29,0	;volatile
  1710                           
  1711                           ;user.c: 56: _delay((unsigned long)((6)*(16000000/4000000.0)));
  1712  067A  3007               	movlw	7
  1713  067B  00F3               	movwf	??_ADC_read
  1714  067C                     u2607:	
  1715  067C  0BF3               	decfsz	??_ADC_read,f
  1716  067D  2E7C               	goto	u2607
  1717  067E  2E7F               	nop2	;nop
  1718                           
  1719                           ;user.c: 57: ADCON0bits.GO = 1;
  1720  067F  0021               	movlb	1	; select bank1
  1721  0680  149D               	bsf	29,1	;volatile
  1722  0681                     l134:	
  1723                           ;user.c: 58: while(ADCON0bits.GO){};
  1724                           
  1725  0681  189D               	btfsc	29,1	;volatile
  1726  0682  2E81               	goto	l134
  1727                           
  1728                           ;user.c: 59: return ADRES >> 6;
  1729  0683  081C               	movf	28,w	;volatile
  1730  0684  00F4               	movwf	??_ADC_read+1
  1731  0685  081B               	movf	27,w	;volatile
  1732  0686  00F3               	movwf	??_ADC_read
  1733  0687  3006               	movlw	6
  1734  0688                     u1625:	
  1735  0688  36F4               	lsrf	??_ADC_read+1,f
  1736  0689  0CF3               	rrf	??_ADC_read,f
  1737  068A  0B89               	decfsz	9,f
  1738  068B  2E88               	goto	u1625
  1739  068C  0873               	movf	??_ADC_read,w
  1740  068D  00F1               	movwf	?_ADC_read
  1741  068E  0874               	movf	??_ADC_read+1,w
  1742  068F  00F2               	movwf	?_ADC_read+1
  1743  0690  0008               	return
  1744  0691                     __end_of_ADC_read:	
  1745                           
  1746                           	psect	text8
  1747  04C9                     __ptext8:	
  1748 ;; *************** function _handle_serial *****************
  1749 ;; Defined at:
  1750 ;;		line 127 in file "protocol.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  b               1   42[BANK0 ] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      unsigned char 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1764 ;;      Params:         0       0       0       0
  1765 ;;      Locals:         0       1       0       0
  1766 ;;      Temps:          0       2       0       0
  1767 ;;      Totals:         0       3       0       0
  1768 ;;Total ram usage:        3 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    6
  1771 ;; This function calls:
  1772 ;;		_hit_by
  1773 ;;		_control_transfer
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           
  1780                           ;psect for function _handle_serial
  1781  04C9                     _handle_serial:	
  1782                           
  1783                           ;protocol.c: 128: static uint8_t rx_id=0;
  1784                           ;protocol.c: 129: static uint8_t rx_counter=0;
  1785                           ;protocol.c: 130: uint8_t b;
  1786                           ;protocol.c: 132: if(!(PIR1bits.RCIF)) return 0;
  1787                           
  1788                           ;incstack = 0
  1789                           ; Regs used in _handle_serial: [allreg]
  1790  04C9  0020               	movlb	0	; select bank0
  1791  04CA  1E91               	btfss	17,5	;volatile
  1792  04CB  0008               	return
  1793                           
  1794                           ;protocol.c: 133: b=(RCREG);
  1795                           
  1796                           ;	Return value of _handle_serial is never used
  1797  04CC  0023               	movlb	3	; select bank3
  1798  04CD  0819               	movf	25,w	;volatile
  1799  04CE  0020               	movlb	0	; select bank0
  1800  04CF  00C8               	movwf	??_handle_serial
  1801  04D0  0848               	movf	??_handle_serial,w
  1802  04D1  00CA               	movwf	handle_serial@b
  1803                           
  1804                           ;protocol.c: 134: if(b == 0x10) {
  1805  04D2  084A               	movf	handle_serial@b,w
  1806  04D3  3A10               	xorlw	16
  1807  04D4  1D03               	skipz
  1808  04D5  2CD8               	goto	l1602
  1809                           
  1810                           ;protocol.c: 135: control_transfer();
  1811  04D6  202E               	fcall	_control_transfer
  1812                           
  1813                           ;protocol.c: 136: }
  1814  04D7  0008               	return
  1815  04D8                     l1602:	
  1816                           
  1817                           ;protocol.c: 137: else if((b > 0x80) && (b != config.id)) {
  1818  04D8  3081               	movlw	129
  1819  04D9  0020               	movlb	0	; select bank0
  1820  04DA  024A               	subwf	handle_serial@b,w
  1821  04DB  1C03               	skipc
  1822  04DC  0008               	return
  1823  04DD  084A               	movf	handle_serial@b,w
  1824  04DE  00C8               	movwf	??_handle_serial
  1825  04DF  01C9               	clrf	??_handle_serial+1
  1826  04E0  085C               	movf	_config+1,w
  1827  04E1  0649               	xorwf	??_handle_serial+1,w
  1828  04E2  1D03               	skipz
  1829  04E3  2CE6               	goto	u1365
  1830  04E4  085B               	movf	_config,w
  1831  04E5  0648               	xorwf	??_handle_serial,w
  1832  04E6                     u1365:	
  1833  04E6  1903               	skipnz
  1834  04E7  0008               	return
  1835                           
  1836                           ;protocol.c: 138: if(b != rx_id) rx_counter=0;
  1837  04E8  084A               	movf	handle_serial@b,w
  1838  04E9  065A               	xorwf	handle_serial@rx_id,w
  1839  04EA  1D03               	btfss	3,2
  1840  04EB  01D9               	clrf	handle_serial@rx_counter
  1841                           
  1842                           ;protocol.c: 139: rx_id = b;
  1843  04EC  084A               	movf	handle_serial@b,w
  1844  04ED  00C8               	movwf	??_handle_serial
  1845  04EE  0848               	movf	??_handle_serial,w
  1846  04EF  00DA               	movwf	handle_serial@rx_id
  1847                           
  1848                           ;protocol.c: 140: rx_counter++;
  1849  04F0  3001               	movlw	1
  1850  04F1  00C8               	movwf	??_handle_serial
  1851  04F2  0848               	movf	??_handle_serial,w
  1852  04F3  07D9               	addwf	handle_serial@rx_counter,f
  1853                           
  1854                           ;protocol.c: 141: if(rx_counter > config.shield) {
  1855  04F4  0859               	movf	handle_serial@rx_counter,w
  1856  04F5  00C8               	movwf	??_handle_serial
  1857  04F6  01C9               	clrf	??_handle_serial+1
  1858  04F7  0849               	movf	??_handle_serial+1,w
  1859  04F8  0262               	subwf	_config+7,w
  1860  04F9  1D03               	skipz
  1861  04FA  2CFD               	goto	u1385
  1862  04FB  0848               	movf	??_handle_serial,w
  1863  04FC  0261               	subwf	_config+6,w
  1864  04FD                     u1385:	
  1865  04FD  1803               	skipnc
  1866  04FE  0008               	return
  1867                           
  1868                           ;protocol.c: 142: hit_by(b);
  1869  04FF  084A               	movf	handle_serial@b,w
  1870  0500  2570               	fcall	_hit_by
  1871                           
  1872                           ;protocol.c: 143: rx_id = 0;
  1873  0501  0020               	movlb	0	; select bank0
  1874  0502  01DA               	clrf	handle_serial@rx_id
  1875  0503  0008               	return
  1876  0504                     __end_of_handle_serial:	
  1877                           ;protocol.c: 144: }
  1878                           ;protocol.c: 145: }
  1879                           ;protocol.c: 146: return 1;
  1880                           ;	Return value of _handle_serial is never used
  1881                           
  1882                           
  1883                           	psect	text9
  1884  002E                     __ptext9:	
  1885 ;; *************** function _control_transfer *****************
  1886 ;; Defined at:
  1887 ;;		line 44 in file "protocol.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  data           32    0[BANK0 ] unsigned int [16]
  1892 ;;  page            2   37[BANK0 ] unsigned int 
  1893 ;;  x               1   39[BANK0 ] unsigned char 
  1894 ;;  i               1   36[BANK0 ] unsigned char 
  1895 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1896 ;;		 -> control_transfer@data(32), 
  1897 ;;  id              1   34[BANK0 ] unsigned char 
  1898 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1899 ;;  cmd             1   32[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;		None               void
  1902 ;; Registers used:
  1903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1909 ;;      Params:         0       0       0       0
  1910 ;;      Locals:         0      40       0       0
  1911 ;;      Temps:          2       0       0       0
  1912 ;;      Totals:         2      40       0       0
  1913 ;;Total ram usage:       42 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    5
  1916 ;; This function calls:
  1917 ;;		_Load
  1918 ;;		_Save
  1919 ;;		_GET_CHAR_HELPER
  1920 ;;		_SEND_DATA_BYTE
  1921 ;;		_SEND_SOF
  1922 ;;		_SEND_EOF
  1923 ;; This function is called by:
  1924 ;;		_handle_serial
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _control_transfer
  1930  002E                     _control_transfer:	
  1931                           
  1932                           ;protocol.c: 45: uint8_t i;
  1933                           ;protocol.c: 46: uint8_t cmd;
  1934                           ;protocol.c: 47: uint8_t random_number,id;
  1935                           ;protocol.c: 49: uint16_t page;
  1936                           ;protocol.c: 50: uint16_t data[16];
  1937                           ;protocol.c: 51: uint8_t* dptr;
  1938                           ;protocol.c: 52: uint8_t x;
  1939                           ;protocol.c: 54: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != config.id) goto err;
  1940                           
  1941                           ;incstack = 0
  1942                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1943  002E  0020               	movlb	0	; select bank0
  1944  002F  01D3               	clrf	__checksum
  1945  0030  306B               	movlw	__x& (0+255)
  1946  0031  2691               	fcall	_GET_CHAR_HELPER
  1947  0032  3A00               	xorlw	0
  1948  0033  1D03               	btfss	3,2
  1949  0034  0008               	return
  1950  0035  306C               	movlw	__y& (0+255)
  1951  0036  2691               	fcall	_GET_CHAR_HELPER
  1952  0037  3A00               	xorlw	0
  1953  0038  1D03               	btfss	3,2
  1954  0039  0008               	return
  1955  003A  0020               	movlb	0	; select bank0
  1956  003B  086B               	movf	__x,w
  1957  003C  39F0               	andlw	240
  1958  003D  1D03               	btfss	3,2
  1959  003E  0008               	return
  1960  003F  086C               	movf	__y,w
  1961  0040  39F0               	andlw	240
  1962  0041  1D03               	btfss	3,2
  1963  0042  0008               	return
  1964  0043  086C               	movf	__y,w
  1965  0044  00F7               	movwf	??_control_transfer
  1966  0045  3003               	movlw	3
  1967  0046                     u1715:	
  1968  0046  35F7               	lslf	??_control_transfer,f
  1969  0047  3EFF               	addlw	-1
  1970  0048  1D03               	skipz
  1971  0049  2846               	goto	u1715
  1972  004A  3577               	lslf	??_control_transfer,w
  1973  004B  046B               	iorwf	__x,w
  1974  004C  00F8               	movwf	??_control_transfer+1
  1975  004D  0878               	movf	??_control_transfer+1,w
  1976  004E  00EB               	movwf	__x
  1977  004F  086B               	movf	__x,w
  1978  0050  00F7               	movwf	??_control_transfer
  1979  0051  0877               	movf	??_control_transfer,w
  1980  0052  07D3               	addwf	__checksum,f
  1981  0053  086B               	movf	__x,w
  1982  0054  00F7               	movwf	??_control_transfer
  1983  0055  01F8               	clrf	??_control_transfer+1
  1984  0056  085C               	movf	_config+1,w
  1985  0057  0678               	xorwf	??_control_transfer+1,w
  1986  0058  1D03               	skipz
  1987  0059  285C               	goto	u1725
  1988  005A  085B               	movf	_config,w
  1989  005B  0677               	xorwf	??_control_transfer,w
  1990  005C                     u1725:	
  1991  005C  1D03               	btfss	3,2
  1992  005D  0008               	return
  1993                           
  1994                           ;protocol.c: 55: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd;
  1995  005E  306B               	movlw	__x& (0+255)
  1996  005F  2691               	fcall	_GET_CHAR_HELPER
  1997  0060  3A00               	xorlw	0
  1998  0061  1D03               	btfss	3,2
  1999  0062  0008               	return
  2000  0063  306C               	movlw	__y& (0+255)
  2001  0064  2691               	fcall	_GET_CHAR_HELPER
  2002  0065  3A00               	xorlw	0
  2003  0066  1D03               	btfss	3,2
  2004  0067  0008               	return
  2005  0068  0020               	movlb	0	; select bank0
  2006  0069  086B               	movf	__x,w
  2007  006A  39F0               	andlw	240
  2008  006B  1D03               	btfss	3,2
  2009  006C  0008               	return
  2010  006D  086C               	movf	__y,w
  2011  006E  39F0               	andlw	240
  2012  006F  1D03               	btfss	3,2
  2013  0070  0008               	return
  2014  0071  086C               	movf	__y,w
  2015  0072  00F7               	movwf	??_control_transfer
  2016  0073  3003               	movlw	3
  2017  0074                     u1775:	
  2018  0074  35F7               	lslf	??_control_transfer,f
  2019  0075  3EFF               	addlw	-1
  2020  0076  1D03               	skipz
  2021  0077  2874               	goto	u1775
  2022  0078  3577               	lslf	??_control_transfer,w
  2023  0079  046B               	iorwf	__x,w
  2024  007A  00F8               	movwf	??_control_transfer+1
  2025  007B  0878               	movf	??_control_transfer+1,w
  2026  007C  00C0               	movwf	control_transfer@cmd
  2027  007D  0840               	movf	control_transfer@cmd,w
  2028  007E  00F7               	movwf	??_control_transfer
  2029  007F  0877               	movf	??_control_transfer,w
  2030  0080  07D3               	addwf	__checksum,f
  2031                           
  2032                           ;protocol.c: 57: switch(cmd)
  2033  0081  2AF8               	goto	l2216
  2034  0082                     l1940:	
  2035                           ;protocol.c: 58: {
  2036                           ;protocol.c: 59: case 0x01:
  2037                           
  2038                           
  2039                           ;protocol.c: 60: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2040  0082  306B               	movlw	__x& (0+255)
  2041  0083  2691               	fcall	_GET_CHAR_HELPER
  2042  0084  3A00               	xorlw	0
  2043  0085  1D03               	btfss	3,2
  2044  0086  0008               	return
  2045  0087  306C               	movlw	__y& (0+255)
  2046  0088  2691               	fcall	_GET_CHAR_HELPER
  2047  0089  3A00               	xorlw	0
  2048  008A  1D03               	btfss	3,2
  2049  008B  0008               	return
  2050  008C  0020               	movlb	0	; select bank0
  2051  008D  086B               	movf	__x,w
  2052  008E  39F0               	andlw	240
  2053  008F  1D03               	btfss	3,2
  2054  0090  0008               	return
  2055  0091  086C               	movf	__y,w
  2056  0092  39F0               	andlw	240
  2057  0093  1D03               	btfss	3,2
  2058  0094  0008               	return
  2059  0095  086C               	movf	__y,w
  2060  0096  00F7               	movwf	??_control_transfer
  2061  0097  3003               	movlw	3
  2062  0098                     u1825:	
  2063  0098  35F7               	lslf	??_control_transfer,f
  2064  0099  3EFF               	addlw	-1
  2065  009A  1D03               	skipz
  2066  009B  2898               	goto	u1825
  2067  009C  3577               	lslf	??_control_transfer,w
  2068  009D  046B               	iorwf	__x,w
  2069  009E  00F8               	movwf	??_control_transfer+1
  2070  009F  0878               	movf	??_control_transfer+1,w
  2071  00A0  00EB               	movwf	__x
  2072  00A1  086B               	movf	__x,w
  2073  00A2  00F7               	movwf	??_control_transfer
  2074  00A3  0877               	movf	??_control_transfer,w
  2075  00A4  07D3               	addwf	__checksum,f
  2076  00A5  0853               	movf	__checksum,w
  2077  00A6  1D03               	skipz
  2078  00A7  0008               	return
  2079  00A8  306B               	movlw	__x& (0+255)
  2080  00A9  2691               	fcall	_GET_CHAR_HELPER
  2081  00AA  3A00               	xorlw	0
  2082  00AB  1D03               	btfss	3,2
  2083  00AC  0008               	return
  2084  00AD  0020               	movlb	0	; select bank0
  2085  00AE  086B               	movf	__x,w
  2086  00AF  3A11               	xorlw	17
  2087  00B0  1D03               	btfss	3,2
  2088  00B1  0008               	return
  2089                           
  2090                           ;protocol.c: 61: SEND_SOF();
  2091  00B2  26D9               	fcall	_SEND_SOF
  2092                           
  2093                           ;protocol.c: 62: SEND_DATA_BYTE(0x02);
  2094  00B3  3002               	movlw	2
  2095  00B4  2614               	fcall	_SEND_DATA_BYTE
  2096                           
  2097                           ;protocol.c: 63: SEND_DATA_BYTE(my_random_number);
  2098  00B5  0020               	movlb	0	; select bank0
  2099  00B6  0858               	movf	_my_random_number,w
  2100  00B7  2614               	fcall	_SEND_DATA_BYTE
  2101                           
  2102                           ;protocol.c: 64: SEND_EOF();
  2103  00B8  26E4               	fcall	_SEND_EOF
  2104                           
  2105                           ;protocol.c: 65: break;
  2106  00B9  0008               	return
  2107  00BA                     l1968:	
  2108                           ;protocol.c: 66: case 0x03:
  2109                           
  2110                           
  2111                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2112  00BA  306B               	movlw	__x& (0+255)
  2113  00BB  2691               	fcall	_GET_CHAR_HELPER
  2114  00BC  3A00               	xorlw	0
  2115  00BD  1D03               	btfss	3,2
  2116  00BE  0008               	return
  2117  00BF  306C               	movlw	__y& (0+255)
  2118  00C0  2691               	fcall	_GET_CHAR_HELPER
  2119  00C1  3A00               	xorlw	0
  2120  00C2  1D03               	btfss	3,2
  2121  00C3  0008               	return
  2122  00C4  0020               	movlb	0	; select bank0
  2123  00C5  086B               	movf	__x,w
  2124  00C6  39F0               	andlw	240
  2125  00C7  1D03               	btfss	3,2
  2126  00C8  0008               	return
  2127  00C9  086C               	movf	__y,w
  2128  00CA  39F0               	andlw	240
  2129  00CB  1D03               	btfss	3,2
  2130  00CC  0008               	return
  2131  00CD  086C               	movf	__y,w
  2132  00CE  00F7               	movwf	??_control_transfer
  2133  00CF  3003               	movlw	3
  2134  00D0                     u1905:	
  2135  00D0  35F7               	lslf	??_control_transfer,f
  2136  00D1  3EFF               	addlw	-1
  2137  00D2  1D03               	skipz
  2138  00D3  28D0               	goto	u1905
  2139  00D4  3577               	lslf	??_control_transfer,w
  2140  00D5  046B               	iorwf	__x,w
  2141  00D6  00F8               	movwf	??_control_transfer+1
  2142  00D7  0878               	movf	??_control_transfer+1,w
  2143  00D8  00C1               	movwf	control_transfer@random_number
  2144  00D9  0841               	movf	control_transfer@random_number,w
  2145  00DA  00F7               	movwf	??_control_transfer
  2146  00DB  0877               	movf	??_control_transfer,w
  2147  00DC  07D3               	addwf	__checksum,f
  2148                           
  2149                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2150  00DD  306B               	movlw	__x& (0+255)
  2151  00DE  2691               	fcall	_GET_CHAR_HELPER
  2152  00DF  3A00               	xorlw	0
  2153  00E0  1D03               	btfss	3,2
  2154  00E1  0008               	return
  2155  00E2  306C               	movlw	__y& (0+255)
  2156  00E3  2691               	fcall	_GET_CHAR_HELPER
  2157  00E4  3A00               	xorlw	0
  2158  00E5  1D03               	btfss	3,2
  2159  00E6  0008               	return
  2160  00E7  0020               	movlb	0	; select bank0
  2161  00E8  086B               	movf	__x,w
  2162  00E9  39F0               	andlw	240
  2163  00EA  1D03               	btfss	3,2
  2164  00EB  0008               	return
  2165  00EC  086C               	movf	__y,w
  2166  00ED  39F0               	andlw	240
  2167  00EE  1D03               	btfss	3,2
  2168  00EF  0008               	return
  2169  00F0  086C               	movf	__y,w
  2170  00F1  00F7               	movwf	??_control_transfer
  2171  00F2  3003               	movlw	3
  2172  00F3                     u1955:	
  2173  00F3  35F7               	lslf	??_control_transfer,f
  2174  00F4  3EFF               	addlw	-1
  2175  00F5  1D03               	skipz
  2176  00F6  28F3               	goto	u1955
  2177  00F7  3577               	lslf	??_control_transfer,w
  2178  00F8  046B               	iorwf	__x,w
  2179  00F9  00F8               	movwf	??_control_transfer+1
  2180  00FA  0878               	movf	??_control_transfer+1,w
  2181  00FB  00C2               	movwf	control_transfer@id
  2182  00FC  0842               	movf	control_transfer@id,w
  2183  00FD  00F7               	movwf	??_control_transfer
  2184  00FE  0877               	movf	??_control_transfer,w
  2185  00FF  07D3               	addwf	__checksum,f
  2186                           
  2187                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2188  0100  306B               	movlw	__x& (0+255)
  2189  0101  2691               	fcall	_GET_CHAR_HELPER
  2190  0102  3A00               	xorlw	0
  2191  0103  1D03               	btfss	3,2
  2192  0104  0008               	return
  2193  0105  306C               	movlw	__y& (0+255)
  2194  0106  2691               	fcall	_GET_CHAR_HELPER
  2195  0107  3A00               	xorlw	0
  2196  0108  1D03               	btfss	3,2
  2197  0109  0008               	return
  2198  010A  0020               	movlb	0	; select bank0
  2199  010B  086B               	movf	__x,w
  2200  010C  39F0               	andlw	240
  2201  010D  1D03               	btfss	3,2
  2202  010E  0008               	return
  2203  010F  086C               	movf	__y,w
  2204  0110  39F0               	andlw	240
  2205  0111  1D03               	btfss	3,2
  2206  0112  0008               	return
  2207  0113  086C               	movf	__y,w
  2208  0114  00F7               	movwf	??_control_transfer
  2209  0115  3003               	movlw	3
  2210  0116                     u2005:	
  2211  0116  35F7               	lslf	??_control_transfer,f
  2212  0117  3EFF               	addlw	-1
  2213  0118  1D03               	skipz
  2214  0119  2916               	goto	u2005
  2215  011A  3577               	lslf	??_control_transfer,w
  2216  011B  046B               	iorwf	__x,w
  2217  011C  00F8               	movwf	??_control_transfer+1
  2218  011D  0878               	movf	??_control_transfer+1,w
  2219  011E  00EB               	movwf	__x
  2220  011F  086B               	movf	__x,w
  2221  0120  00F7               	movwf	??_control_transfer
  2222  0121  0877               	movf	??_control_transfer,w
  2223  0122  07D3               	addwf	__checksum,f
  2224  0123  0853               	movf	__checksum,w
  2225  0124  1D03               	skipz
  2226  0125  0008               	return
  2227  0126  306B               	movlw	__x& (0+255)
  2228  0127  2691               	fcall	_GET_CHAR_HELPER
  2229  0128  3A00               	xorlw	0
  2230  0129  1D03               	btfss	3,2
  2231  012A  0008               	return
  2232  012B  0020               	movlb	0	; select bank0
  2233  012C  086B               	movf	__x,w
  2234  012D  3A11               	xorlw	17
  2235  012E  1D03               	btfss	3,2
  2236  012F  0008               	return
  2237                           
  2238                           ;protocol.c: 70: if(random_number != my_random_number) goto err;
  2239  0130  0841               	movf	control_transfer@random_number,w
  2240  0131  0658               	xorwf	_my_random_number,w
  2241  0132  1D03               	btfss	3,2
  2242  0133  0008               	return
  2243                           
  2244                           ;protocol.c: 71: SEND_SOF();
  2245  0134  26D9               	fcall	_SEND_SOF
  2246                           
  2247                           ;protocol.c: 72: SEND_DATA_BYTE(0x00);
  2248  0135  3000               	movlw	0
  2249  0136  2614               	fcall	_SEND_DATA_BYTE
  2250                           
  2251                           ;protocol.c: 73: SEND_EOF();
  2252  0137  26E4               	fcall	_SEND_EOF
  2253                           
  2254                           ;protocol.c: 74: config.id=id;
  2255  0138  0020               	movlb	0	; select bank0
  2256  0139  0842               	movf	control_transfer@id,w
  2257  013A  00F7               	movwf	??_control_transfer
  2258  013B  01F8               	clrf	??_control_transfer+1
  2259  013C  0877               	movf	??_control_transfer,w
  2260  013D  00DB               	movwf	_config
  2261  013E  0878               	movf	??_control_transfer+1,w
  2262  013F  00DC               	movwf	_config+1
  2263                           
  2264                           ;protocol.c: 75: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2265  0140  30D0               	movlw	208
  2266  0141  00F1               	movwf	?_Save
  2267  0142  3007               	movlw	7
  2268  0143  00F2               	movwf	?_Save+1
  2269  0144  305B               	movlw	_config& (0+255)
  2270  0145  00F7               	movwf	??_control_transfer
  2271  0146  0877               	movf	??_control_transfer,w
  2272  0147  00F3               	movwf	?_Save+2
  2273  0148  3008               	movlw	8
  2274  0149  00F8               	movwf	??_control_transfer+1
  2275  014A  0878               	movf	??_control_transfer+1,w
  2276  014B  00F4               	movwf	?_Save+3
  2277  014C  2442               	fcall	_Save
  2278                           
  2279                           ;protocol.c: 76: break;
  2280  014D  0008               	return
  2281  014E                     l2032:	
  2282                           ;protocol.c: 77: case 0x04:
  2283                           
  2284                           
  2285                           ;protocol.c: 78: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2286  014E  306B               	movlw	__x& (0+255)
  2287  014F  2691               	fcall	_GET_CHAR_HELPER
  2288  0150  3A00               	xorlw	0
  2289  0151  1D03               	btfss	3,2
  2290  0152  0008               	return
  2291  0153  306C               	movlw	__y& (0+255)
  2292  0154  2691               	fcall	_GET_CHAR_HELPER
  2293  0155  3A00               	xorlw	0
  2294  0156  1D03               	btfss	3,2
  2295  0157  0008               	return
  2296  0158  0020               	movlb	0	; select bank0
  2297  0159  086B               	movf	__x,w
  2298  015A  39F0               	andlw	240
  2299  015B  1D03               	btfss	3,2
  2300  015C  0008               	return
  2301  015D  086C               	movf	__y,w
  2302  015E  39F0               	andlw	240
  2303  015F  1D03               	btfss	3,2
  2304  0160  0008               	return
  2305  0161  086C               	movf	__y,w
  2306  0162  00F7               	movwf	??_control_transfer
  2307  0163  3003               	movlw	3
  2308  0164                     u2095:	
  2309  0164  35F7               	lslf	??_control_transfer,f
  2310  0165  3EFF               	addlw	-1
  2311  0166  1D03               	skipz
  2312  0167  2964               	goto	u2095
  2313  0168  3577               	lslf	??_control_transfer,w
  2314  0169  046B               	iorwf	__x,w
  2315  016A  00F8               	movwf	??_control_transfer+1
  2316  016B  0878               	movf	??_control_transfer+1,w
  2317  016C  00C7               	movwf	control_transfer@x
  2318  016D  0847               	movf	control_transfer@x,w
  2319  016E  00F7               	movwf	??_control_transfer
  2320  016F  0877               	movf	??_control_transfer,w
  2321  0170  07D3               	addwf	__checksum,f
  2322                           
  2323                           ;protocol.c: 79: *((uint8_t*)(&page))=x;
  2324  0171  0847               	movf	control_transfer@x,w
  2325  0172  00F7               	movwf	??_control_transfer
  2326  0173  0877               	movf	??_control_transfer,w
  2327  0174  00C5               	movwf	control_transfer@page
  2328                           
  2329                           ;protocol.c: 80: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2330  0175  306B               	movlw	__x& (0+255)
  2331  0176  2691               	fcall	_GET_CHAR_HELPER
  2332  0177  3A00               	xorlw	0
  2333  0178  1D03               	btfss	3,2
  2334  0179  0008               	return
  2335  017A  306C               	movlw	__y& (0+255)
  2336  017B  2691               	fcall	_GET_CHAR_HELPER
  2337  017C  3A00               	xorlw	0
  2338  017D  1D03               	btfss	3,2
  2339  017E  0008               	return
  2340  017F  0020               	movlb	0	; select bank0
  2341  0180  086B               	movf	__x,w
  2342  0181  39F0               	andlw	240
  2343  0182  1D03               	btfss	3,2
  2344  0183  0008               	return
  2345  0184  086C               	movf	__y,w
  2346  0185  39F0               	andlw	240
  2347  0186  1D03               	btfss	3,2
  2348  0187  0008               	return
  2349  0188  086C               	movf	__y,w
  2350  0189  00F7               	movwf	??_control_transfer
  2351  018A  3003               	movlw	3
  2352  018B                     u2145:	
  2353  018B  35F7               	lslf	??_control_transfer,f
  2354  018C  3EFF               	addlw	-1
  2355  018D  1D03               	skipz
  2356  018E  298B               	goto	u2145
  2357  018F  3577               	lslf	??_control_transfer,w
  2358  0190  046B               	iorwf	__x,w
  2359  0191  00F8               	movwf	??_control_transfer+1
  2360  0192  0878               	movf	??_control_transfer+1,w
  2361  0193  00C7               	movwf	control_transfer@x
  2362  0194  0847               	movf	control_transfer@x,w
  2363  0195  00F7               	movwf	??_control_transfer
  2364  0196  0877               	movf	??_control_transfer,w
  2365  0197  07D3               	addwf	__checksum,f
  2366                           
  2367                           ;protocol.c: 81: *(((uint8_t*)(&page))+1)=x;
  2368  0198  0847               	movf	control_transfer@x,w
  2369  0199  00F7               	movwf	??_control_transfer
  2370  019A  0877               	movf	??_control_transfer,w
  2371  019B  00C6               	movwf	control_transfer@page+1
  2372                           
  2373                           ;protocol.c: 82: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2374  019C  306B               	movlw	__x& (0+255)
  2375  019D  2691               	fcall	_GET_CHAR_HELPER
  2376  019E  3A00               	xorlw	0
  2377  019F  1D03               	btfss	3,2
  2378  01A0  0008               	return
  2379  01A1  306C               	movlw	__y& (0+255)
  2380  01A2  2691               	fcall	_GET_CHAR_HELPER
  2381  01A3  3A00               	xorlw	0
  2382  01A4  1D03               	btfss	3,2
  2383  01A5  0008               	return
  2384  01A6  0020               	movlb	0	; select bank0
  2385  01A7  086B               	movf	__x,w
  2386  01A8  39F0               	andlw	240
  2387  01A9  1D03               	btfss	3,2
  2388  01AA  0008               	return
  2389  01AB  086C               	movf	__y,w
  2390  01AC  39F0               	andlw	240
  2391  01AD  1D03               	btfss	3,2
  2392  01AE  0008               	return
  2393  01AF  086C               	movf	__y,w
  2394  01B0  00F7               	movwf	??_control_transfer
  2395  01B1  3003               	movlw	3
  2396  01B2                     u2195:	
  2397  01B2  35F7               	lslf	??_control_transfer,f
  2398  01B3  3EFF               	addlw	-1
  2399  01B4  1D03               	skipz
  2400  01B5  29B2               	goto	u2195
  2401  01B6  3577               	lslf	??_control_transfer,w
  2402  01B7  046B               	iorwf	__x,w
  2403  01B8  00F8               	movwf	??_control_transfer+1
  2404  01B9  0878               	movf	??_control_transfer+1,w
  2405  01BA  00EB               	movwf	__x
  2406  01BB  086B               	movf	__x,w
  2407  01BC  00F7               	movwf	??_control_transfer
  2408  01BD  0877               	movf	??_control_transfer,w
  2409  01BE  07D3               	addwf	__checksum,f
  2410  01BF  0853               	movf	__checksum,w
  2411  01C0  1D03               	skipz
  2412  01C1  0008               	return
  2413  01C2  306B               	movlw	__x& (0+255)
  2414  01C3  2691               	fcall	_GET_CHAR_HELPER
  2415  01C4  3A00               	xorlw	0
  2416  01C5  1D03               	btfss	3,2
  2417  01C6  0008               	return
  2418  01C7  0020               	movlb	0	; select bank0
  2419  01C8  086B               	movf	__x,w
  2420  01C9  3A11               	xorlw	17
  2421  01CA  1D03               	btfss	3,2
  2422  01CB  0008               	return
  2423                           
  2424                           ;protocol.c: 83: Load(page,data,16);
  2425  01CC  0846               	movf	control_transfer@page+1,w
  2426  01CD  01F2               	clrf	?_Load+1
  2427  01CE  07F2               	addwf	?_Load+1,f
  2428  01CF  0845               	movf	control_transfer@page,w
  2429  01D0  01F1               	clrf	?_Load
  2430  01D1  07F1               	addwf	?_Load,f
  2431  01D2  3020               	movlw	control_transfer@data& (0+255)
  2432  01D3  00F7               	movwf	??_control_transfer
  2433  01D4  0877               	movf	??_control_transfer,w
  2434  01D5  00F3               	movwf	?_Load+2
  2435  01D6  3010               	movlw	16
  2436  01D7  00F8               	movwf	??_control_transfer+1
  2437  01D8  0878               	movf	??_control_transfer+1,w
  2438  01D9  00F4               	movwf	?_Load+3
  2439  01DA  25CC               	fcall	_Load
  2440                           
  2441                           ;protocol.c: 84: SEND_SOF();
  2442  01DB  26D9               	fcall	_SEND_SOF
  2443                           
  2444                           ;protocol.c: 85: SEND_DATA_BYTE(0x05);
  2445  01DC  3005               	movlw	5
  2446  01DD  2614               	fcall	_SEND_DATA_BYTE
  2447                           
  2448                           ;protocol.c: 86: dptr=(uint8_t*)data;
  2449  01DE  3020               	movlw	control_transfer@data& (0+255)
  2450  01DF  00F7               	movwf	??_control_transfer
  2451  01E0  0877               	movf	??_control_transfer,w
  2452  01E1  0020               	movlb	0	; select bank0
  2453  01E2  00C3               	movwf	control_transfer@dptr
  2454                           
  2455                           ;protocol.c: 87: for(i=0;i<32;i++)
  2456  01E3  01C4               	clrf	control_transfer@i
  2457  01E4  3020               	movlw	32
  2458  01E5  0244               	subwf	control_transfer@i,w
  2459  01E6  1803               	btfsc	3,0
  2460  01E7  29FA               	goto	l2112
  2461  01E8                     l2104:	
  2462                           
  2463                           ;protocol.c: 88: {
  2464                           ;protocol.c: 89: SEND_DATA_BYTE(*dptr++);
  2465  01E8  0843               	movf	control_transfer@dptr,w
  2466  01E9  0086               	movwf	6
  2467  01EA  0187               	clrf	7
  2468  01EB  0801               	movf	1,w
  2469  01EC  2614               	fcall	_SEND_DATA_BYTE
  2470  01ED  3001               	movlw	1
  2471  01EE  00F7               	movwf	??_control_transfer
  2472  01EF  0877               	movf	??_control_transfer,w
  2473  01F0  0020               	movlb	0	; select bank0
  2474  01F1  07C3               	addwf	control_transfer@dptr,f
  2475  01F2  3001               	movlw	1
  2476  01F3  00F7               	movwf	??_control_transfer
  2477  01F4  0877               	movf	??_control_transfer,w
  2478  01F5  07C4               	addwf	control_transfer@i,f
  2479  01F6  3020               	movlw	32
  2480  01F7  0244               	subwf	control_transfer@i,w
  2481  01F8  1C03               	skipc
  2482  01F9  29E8               	goto	l2104
  2483  01FA                     l2112:	
  2484                           
  2485                           ;protocol.c: 90: }
  2486                           ;protocol.c: 91: SEND_EOF();
  2487  01FA  26E4               	fcall	_SEND_EOF
  2488                           
  2489                           ;protocol.c: 92: break;
  2490  01FB  0008               	return
  2491  01FC                     l2114:	
  2492                           ;protocol.c: 93: case 0x06:
  2493                           
  2494                           
  2495                           ;protocol.c: 94: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2496  01FC  306B               	movlw	__x& (0+255)
  2497  01FD  2691               	fcall	_GET_CHAR_HELPER
  2498  01FE  3A00               	xorlw	0
  2499  01FF  1D03               	btfss	3,2
  2500  0200  0008               	return
  2501  0201  306C               	movlw	__y& (0+255)
  2502  0202  2691               	fcall	_GET_CHAR_HELPER
  2503  0203  3A00               	xorlw	0
  2504  0204  1D03               	btfss	3,2
  2505  0205  0008               	return
  2506  0206  0020               	movlb	0	; select bank0
  2507  0207  086B               	movf	__x,w
  2508  0208  39F0               	andlw	240
  2509  0209  1D03               	btfss	3,2
  2510  020A  0008               	return
  2511  020B  086C               	movf	__y,w
  2512  020C  39F0               	andlw	240
  2513  020D  1D03               	btfss	3,2
  2514  020E  0008               	return
  2515  020F  086C               	movf	__y,w
  2516  0210  00F7               	movwf	??_control_transfer
  2517  0211  3003               	movlw	3
  2518  0212                     u2295:	
  2519  0212  35F7               	lslf	??_control_transfer,f
  2520  0213  3EFF               	addlw	-1
  2521  0214  1D03               	skipz
  2522  0215  2A12               	goto	u2295
  2523  0216  3577               	lslf	??_control_transfer,w
  2524  0217  046B               	iorwf	__x,w
  2525  0218  00F8               	movwf	??_control_transfer+1
  2526  0219  0878               	movf	??_control_transfer+1,w
  2527  021A  00C7               	movwf	control_transfer@x
  2528  021B  0847               	movf	control_transfer@x,w
  2529  021C  00F7               	movwf	??_control_transfer
  2530  021D  0877               	movf	??_control_transfer,w
  2531  021E  07D3               	addwf	__checksum,f
  2532                           
  2533                           ;protocol.c: 95: *((uint8_t*)(&page))=x;
  2534  021F  0847               	movf	control_transfer@x,w
  2535  0220  00F7               	movwf	??_control_transfer
  2536  0221  0877               	movf	??_control_transfer,w
  2537  0222  00C5               	movwf	control_transfer@page
  2538                           
  2539                           ;protocol.c: 96: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2540  0223  306B               	movlw	__x& (0+255)
  2541  0224  2691               	fcall	_GET_CHAR_HELPER
  2542  0225  3A00               	xorlw	0
  2543  0226  1D03               	btfss	3,2
  2544  0227  0008               	return
  2545  0228  306C               	movlw	__y& (0+255)
  2546  0229  2691               	fcall	_GET_CHAR_HELPER
  2547  022A  3A00               	xorlw	0
  2548  022B  1D03               	btfss	3,2
  2549  022C  0008               	return
  2550  022D  0020               	movlb	0	; select bank0
  2551  022E  086B               	movf	__x,w
  2552  022F  39F0               	andlw	240
  2553  0230  1D03               	btfss	3,2
  2554  0231  0008               	return
  2555  0232  086C               	movf	__y,w
  2556  0233  39F0               	andlw	240
  2557  0234  1D03               	btfss	3,2
  2558  0235  0008               	return
  2559  0236  086C               	movf	__y,w
  2560  0237  00F7               	movwf	??_control_transfer
  2561  0238  3003               	movlw	3
  2562  0239                     u2345:	
  2563  0239  35F7               	lslf	??_control_transfer,f
  2564  023A  3EFF               	addlw	-1
  2565  023B  1D03               	skipz
  2566  023C  2A39               	goto	u2345
  2567  023D  3577               	lslf	??_control_transfer,w
  2568  023E  046B               	iorwf	__x,w
  2569  023F  00F8               	movwf	??_control_transfer+1
  2570  0240  0878               	movf	??_control_transfer+1,w
  2571  0241  00C7               	movwf	control_transfer@x
  2572  0242  0847               	movf	control_transfer@x,w
  2573  0243  00F7               	movwf	??_control_transfer
  2574  0244  0877               	movf	??_control_transfer,w
  2575  0245  07D3               	addwf	__checksum,f
  2576                           
  2577                           ;protocol.c: 97: *(((uint8_t*)(&page))+1)=x;
  2578  0246  0847               	movf	control_transfer@x,w
  2579  0247  00F7               	movwf	??_control_transfer
  2580  0248  0877               	movf	??_control_transfer,w
  2581  0249  00C6               	movwf	control_transfer@page+1
  2582                           
  2583                           ;protocol.c: 98: dptr=(uint8_t*)data;
  2584  024A  3020               	movlw	control_transfer@data& (0+255)
  2585  024B  00F7               	movwf	??_control_transfer
  2586  024C  0877               	movf	??_control_transfer,w
  2587  024D  00C3               	movwf	control_transfer@dptr
  2588                           
  2589                           ;protocol.c: 99: for(i=0;i<32;i++)
  2590  024E  01C4               	clrf	control_transfer@i
  2591  024F  3020               	movlw	32
  2592  0250  0244               	subwf	control_transfer@i,w
  2593  0251  1803               	btfsc	3,0
  2594  0252  2A89               	goto	l2176
  2595  0253                     l2154:	
  2596                           
  2597                           ;protocol.c: 100: {
  2598                           ;protocol.c: 101: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2599  0253  306B               	movlw	__x& (0+255)
  2600  0254  2691               	fcall	_GET_CHAR_HELPER
  2601  0255  3A00               	xorlw	0
  2602  0256  1D03               	btfss	3,2
  2603  0257  0008               	return
  2604  0258  306C               	movlw	__y& (0+255)
  2605  0259  2691               	fcall	_GET_CHAR_HELPER
  2606  025A  3A00               	xorlw	0
  2607  025B  1D03               	btfss	3,2
  2608  025C  0008               	return
  2609  025D  0020               	movlb	0	; select bank0
  2610  025E  086B               	movf	__x,w
  2611  025F  39F0               	andlw	240
  2612  0260  1D03               	btfss	3,2
  2613  0261  0008               	return
  2614  0262  086C               	movf	__y,w
  2615  0263  39F0               	andlw	240
  2616  0264  1D03               	btfss	3,2
  2617  0265  0008               	return
  2618  0266  086C               	movf	__y,w
  2619  0267  00F7               	movwf	??_control_transfer
  2620  0268  3003               	movlw	3
  2621  0269                     u2405:	
  2622  0269  35F7               	lslf	??_control_transfer,f
  2623  026A  3EFF               	addlw	-1
  2624  026B  1D03               	skipz
  2625  026C  2A69               	goto	u2405
  2626  026D  3577               	lslf	??_control_transfer,w
  2627  026E  046B               	iorwf	__x,w
  2628  026F  00F8               	movwf	??_control_transfer+1
  2629  0270  0878               	movf	??_control_transfer+1,w
  2630  0271  00C7               	movwf	control_transfer@x
  2631  0272  0847               	movf	control_transfer@x,w
  2632  0273  00F7               	movwf	??_control_transfer
  2633  0274  0877               	movf	??_control_transfer,w
  2634  0275  07D3               	addwf	__checksum,f
  2635                           
  2636                           ;protocol.c: 102: *dptr++=x;
  2637  0276  0847               	movf	control_transfer@x,w
  2638  0277  00F7               	movwf	??_control_transfer
  2639  0278  0843               	movf	control_transfer@dptr,w
  2640  0279  0086               	movwf	6
  2641  027A  0187               	clrf	7
  2642  027B  0877               	movf	??_control_transfer,w
  2643  027C  0081               	movwf	1
  2644  027D  3001               	movlw	1
  2645  027E  00F7               	movwf	??_control_transfer
  2646  027F  0877               	movf	??_control_transfer,w
  2647  0280  07C3               	addwf	control_transfer@dptr,f
  2648  0281  3001               	movlw	1
  2649  0282  00F7               	movwf	??_control_transfer
  2650  0283  0877               	movf	??_control_transfer,w
  2651  0284  07C4               	addwf	control_transfer@i,f
  2652  0285  3020               	movlw	32
  2653  0286  0244               	subwf	control_transfer@i,w
  2654  0287  1C03               	skipc
  2655  0288  2A53               	goto	l2154
  2656  0289                     l2176:	
  2657                           
  2658                           ;protocol.c: 103: }
  2659                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2660  0289  306B               	movlw	__x& (0+255)
  2661  028A  2691               	fcall	_GET_CHAR_HELPER
  2662  028B  3A00               	xorlw	0
  2663  028C  1D03               	btfss	3,2
  2664  028D  0008               	return
  2665  028E  306C               	movlw	__y& (0+255)
  2666  028F  2691               	fcall	_GET_CHAR_HELPER
  2667  0290  3A00               	xorlw	0
  2668  0291  1D03               	btfss	3,2
  2669  0292  0008               	return
  2670  0293  0020               	movlb	0	; select bank0
  2671  0294  086B               	movf	__x,w
  2672  0295  39F0               	andlw	240
  2673  0296  1D03               	btfss	3,2
  2674  0297  0008               	return
  2675  0298  086C               	movf	__y,w
  2676  0299  39F0               	andlw	240
  2677  029A  1D03               	btfss	3,2
  2678  029B  0008               	return
  2679  029C  086C               	movf	__y,w
  2680  029D  00F7               	movwf	??_control_transfer
  2681  029E  3003               	movlw	3
  2682  029F                     u2465:	
  2683  029F  35F7               	lslf	??_control_transfer,f
  2684  02A0  3EFF               	addlw	-1
  2685  02A1  1D03               	skipz
  2686  02A2  2A9F               	goto	u2465
  2687  02A3  3577               	lslf	??_control_transfer,w
  2688  02A4  046B               	iorwf	__x,w
  2689  02A5  00F8               	movwf	??_control_transfer+1
  2690  02A6  0878               	movf	??_control_transfer+1,w
  2691  02A7  00EB               	movwf	__x
  2692  02A8  086B               	movf	__x,w
  2693  02A9  00F7               	movwf	??_control_transfer
  2694  02AA  0877               	movf	??_control_transfer,w
  2695  02AB  07D3               	addwf	__checksum,f
  2696  02AC  0853               	movf	__checksum,w
  2697  02AD  1D03               	skipz
  2698  02AE  0008               	return
  2699  02AF  306B               	movlw	__x& (0+255)
  2700  02B0  2691               	fcall	_GET_CHAR_HELPER
  2701  02B1  3A00               	xorlw	0
  2702  02B2  1D03               	btfss	3,2
  2703  02B3  0008               	return
  2704  02B4  0020               	movlb	0	; select bank0
  2705  02B5  086B               	movf	__x,w
  2706  02B6  3A11               	xorlw	17
  2707  02B7  1D03               	btfss	3,2
  2708  02B8  0008               	return
  2709                           
  2710                           ;protocol.c: 105: Save(page,data,16);
  2711  02B9  0846               	movf	control_transfer@page+1,w
  2712  02BA  01F2               	clrf	?_Save+1
  2713  02BB  07F2               	addwf	?_Save+1,f
  2714  02BC  0845               	movf	control_transfer@page,w
  2715  02BD  01F1               	clrf	?_Save
  2716  02BE  07F1               	addwf	?_Save,f
  2717  02BF  3020               	movlw	control_transfer@data& (0+255)
  2718  02C0  00F7               	movwf	??_control_transfer
  2719  02C1  0877               	movf	??_control_transfer,w
  2720  02C2  00F3               	movwf	?_Save+2
  2721  02C3  3010               	movlw	16
  2722  02C4  00F8               	movwf	??_control_transfer+1
  2723  02C5  0878               	movf	??_control_transfer+1,w
  2724  02C6  00F4               	movwf	?_Save+3
  2725  02C7  2442               	fcall	_Save
  2726                           
  2727                           ;protocol.c: 106: switch(page)
  2728  02C8  2AE5               	goto	l2210
  2729  02C9                     l2204:	
  2730                           ;protocol.c: 107: {
  2731                           ;protocol.c: 108: case 0x7D0:
  2732                           
  2733                           
  2734                           ;protocol.c: 109: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2735  02C9  30D0               	movlw	208
  2736  02CA  00F1               	movwf	?_Load
  2737  02CB  3007               	movlw	7
  2738  02CC  00F2               	movwf	?_Load+1
  2739  02CD  305B               	movlw	_config& (0+255)
  2740  02CE  00F7               	movwf	??_control_transfer
  2741  02CF  0877               	movf	??_control_transfer,w
  2742  02D0  00F3               	movwf	?_Load+2
  2743  02D1  3008               	movlw	8
  2744  02D2  00F8               	movwf	??_control_transfer+1
  2745  02D3  0878               	movf	??_control_transfer+1,w
  2746  02D4  00F4               	movwf	?_Load+3
  2747  02D5  25CC               	fcall	_Load
  2748                           
  2749                           ;protocol.c: 110: break;
  2750  02D6  2AF3               	goto	l2212
  2751  02D7                     l2206:	
  2752                           ;protocol.c: 111: case 0x7E0:
  2753                           
  2754                           
  2755                           ;protocol.c: 112: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2756  02D7  30E0               	movlw	224
  2757  02D8  00F1               	movwf	?_Load
  2758  02D9  3007               	movlw	7
  2759  02DA  00F2               	movwf	?_Load+1
  2760  02DB  30A0               	movlw	_hitlist& (0+255)
  2761  02DC  00F7               	movwf	??_control_transfer
  2762  02DD  0877               	movf	??_control_transfer,w
  2763  02DE  00F3               	movwf	?_Load+2
  2764  02DF  3010               	movlw	16
  2765  02E0  00F8               	movwf	??_control_transfer+1
  2766  02E1  0878               	movf	??_control_transfer+1,w
  2767  02E2  00F4               	movwf	?_Load+3
  2768  02E3  25CC               	fcall	_Load
  2769                           
  2770                           ;protocol.c: 114: }
  2771                           
  2772                           ;protocol.c: 113: break;
  2773  02E4  2AF3               	goto	l2212
  2774  02E5                     l2210:	
  2775                           
  2776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2777                           ; Switch size 1, requested type "space"
  2778                           ; Number of cases is 1, Range of values is 7 to 7
  2779                           ; switch strategies available:
  2780                           ; Name         Instructions Cycles
  2781                           ; simple_byte            4     3 (average)
  2782                           ; direct_byte           11     9 (fixed)
  2783                           ; jumptable            263     9 (fixed)
  2784                           ;	Chosen strategy is simple_byte
  2785  02E5  0020               	movlb	0	; select bank0
  2786  02E6  0846               	movf	control_transfer@page+1,w
  2787  02E7  3A07               	xorlw	7	; case 7
  2788  02E8  1903               	skipnz
  2789  02E9  2AEB               	goto	l2282
  2790  02EA  2AF3               	goto	l2212
  2791  02EB                     l2282:	
  2792                           
  2793                           ; Switch size 1, requested type "space"
  2794                           ; Number of cases is 2, Range of values is 208 to 224
  2795                           ; switch strategies available:
  2796                           ; Name         Instructions Cycles
  2797                           ; simple_byte            7     4 (average)
  2798                           ; direct_byte           43     9 (fixed)
  2799                           ; jumptable            263     9 (fixed)
  2800                           ;	Chosen strategy is simple_byte
  2801  02EB  0845               	movf	control_transfer@page,w
  2802  02EC  3AD0               	xorlw	208	; case 208
  2803  02ED  1903               	skipnz
  2804  02EE  2AC9               	goto	l2204
  2805  02EF  3A30               	xorlw	48	; case 224
  2806  02F0  1903               	skipnz
  2807  02F1  2AD7               	goto	l2206
  2808  02F2  2AF3               	goto	l2212
  2809  02F3                     l2212:	
  2810                           
  2811                           ;protocol.c: 115: SEND_SOF();
  2812  02F3  26D9               	fcall	_SEND_SOF
  2813                           
  2814                           ;protocol.c: 116: SEND_DATA_BYTE(0x00);
  2815  02F4  3000               	movlw	0
  2816  02F5  2614               	fcall	_SEND_DATA_BYTE
  2817                           
  2818                           ;protocol.c: 117: SEND_EOF();
  2819  02F6  26E4               	fcall	_SEND_EOF
  2820                           
  2821                           ;protocol.c: 121: }
  2822                           
  2823                           ;protocol.c: 120: goto err;
  2824                           
  2825                           ;protocol.c: 119: default:
  2826                           
  2827                           ;protocol.c: 118: break;
  2828  02F7  0008               	return
  2829  02F8                     l2216:	
  2830  02F8  0020               	movlb	0	; select bank0
  2831  02F9  0840               	movf	control_transfer@cmd,w
  2832                           
  2833                           ; Switch size 1, requested type "space"
  2834                           ; Number of cases is 4, Range of values is 1 to 6
  2835                           ; switch strategies available:
  2836                           ; Name         Instructions Cycles
  2837                           ; simple_byte           13     7 (average)
  2838                           ; direct_byte           21     9 (fixed)
  2839                           ; jumptable            263     9 (fixed)
  2840                           ;	Chosen strategy is simple_byte
  2841  02FA  3A01               	xorlw	1	; case 1
  2842  02FB  1903               	skipnz
  2843  02FC  2882               	goto	l1940
  2844  02FD  3A02               	xorlw	2	; case 3
  2845  02FE  1903               	skipnz
  2846  02FF  28BA               	goto	l1968
  2847  0300  3A07               	xorlw	7	; case 4
  2848  0301  1903               	skipnz
  2849  0302  294E               	goto	l2032
  2850  0303  3A02               	xorlw	2	; case 6
  2851  0304  1903               	skipnz
  2852  0305  29FC               	goto	l2114
  2853  0306  2B08               	goto	l378
  2854  0307  0008               	return
  2855  0308                     l378:	
  2856                           ;protocol.c: 123: return;
  2857                           
  2858                           ;protocol.c: 122: err:
  2859                           
  2860  0308  0008               	return
  2861  0309                     __end_of_control_transfer:	
  2862                           
  2863                           	psect	text10
  2864  06E4                     __ptext10:	
  2865 ;; *************** function _SEND_EOF *****************
  2866 ;; Defined at:
  2867 ;;		line 36 in file "protocol.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;		None               void
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0, pclath, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2881 ;;      Params:         0       0       0       0
  2882 ;;      Locals:         0       0       0       0
  2883 ;;      Temps:          1       0       0       0
  2884 ;;      Totals:         1       0       0       0
  2885 ;;Total ram usage:        1 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    4
  2888 ;; This function calls:
  2889 ;;		_Send_Byte
  2890 ;;		_SEND_DATA_BYTE
  2891 ;; This function is called by:
  2892 ;;		_control_transfer
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function _SEND_EOF
  2898  06E4                     _SEND_EOF:	
  2899                           
  2900                           ;incstack = 0
  2901                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2902  06E4  0020               	movlb	0	; select bank0
  2903  06E5  0853               	movf	__checksum,w
  2904  06E6  2614               	fcall	_SEND_DATA_BYTE
  2905  06E7  3011               	movlw	17
  2906  06E8  26CB               	fcall	_Send_Byte
  2907  06E9  3085               	movlw	133
  2908  06EA  00F5               	movwf	??_SEND_EOF
  2909  06EB                     u2617:	
  2910  06EB  0BF5               	decfsz	??_SEND_EOF,f
  2911  06EC  2EEB               	goto	u2617
  2912  06ED  0008               	return
  2913  06EE                     __end_of_SEND_EOF:	
  2914                           
  2915                           	psect	text11
  2916  06D9                     __ptext11:	
  2917 ;; *************** function _SEND_SOF *****************
  2918 ;; Defined at:
  2919 ;;		line 35 in file "protocol.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;		None               void
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, pclath, cstack
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         0       0       0       0
  2934 ;;      Locals:         0       0       0       0
  2935 ;;      Temps:          1       0       0       0
  2936 ;;      Totals:         1       0       0       0
  2937 ;;Total ram usage:        1 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    4
  2940 ;; This function calls:
  2941 ;;		_Send_Byte
  2942 ;;		_SEND_DATA_BYTE
  2943 ;; This function is called by:
  2944 ;;		_control_transfer
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           
  2949                           ;psect for function _SEND_SOF
  2950  06D9                     _SEND_SOF:	
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2954  06D9  3010               	movlw	16
  2955  06DA  26CB               	fcall	_Send_Byte
  2956  06DB  3085               	movlw	133
  2957  06DC  00F5               	movwf	??_SEND_SOF
  2958  06DD                     u2627:	
  2959  06DD  0BF5               	decfsz	??_SEND_SOF,f
  2960  06DE  2EDD               	goto	u2627
  2961  06DF  0020               	movlb	0	; select bank0
  2962  06E0  01D3               	clrf	__checksum
  2963  06E1  085B               	movf	_config,w
  2964  06E2  2614               	fcall	_SEND_DATA_BYTE
  2965  06E3  0008               	return
  2966  06E4                     __end_of_SEND_SOF:	
  2967                           
  2968                           	psect	text12
  2969  0614                     __ptext12:	
  2970 ;; *************** function _SEND_DATA_BYTE *****************
  2971 ;; Defined at:
  2972 ;;		line 34 in file "protocol.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  b               1    wreg     unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  b               1    4[COMMON] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;		None               void
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0, pclath, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2986 ;;      Params:         0       0       0       0
  2987 ;;      Locals:         1       0       0       0
  2988 ;;      Temps:          2       0       0       0
  2989 ;;      Totals:         3       0       0       0
  2990 ;;Total ram usage:        3 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    3
  2993 ;; This function calls:
  2994 ;;		_Send_Byte
  2995 ;; This function is called by:
  2996 ;;		_SEND_SOF
  2997 ;;		_SEND_EOF
  2998 ;;		_control_transfer
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _SEND_DATA_BYTE
  3004  0614                     _SEND_DATA_BYTE:	
  3005                           
  3006                           ;incstack = 0
  3007                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3008                           ;SEND_DATA_BYTE@b stored from wreg
  3009  0614  00F4               	movwf	SEND_DATA_BYTE@b
  3010  0615  0874               	movf	SEND_DATA_BYTE@b,w
  3011  0616  390F               	andlw	15
  3012  0617  00F2               	movwf	??_SEND_DATA_BYTE
  3013  0618  0872               	movf	??_SEND_DATA_BYTE,w
  3014  0619  0020               	movlb	0	; select bank0
  3015  061A  00EB               	movwf	__x
  3016  061B  0874               	movf	SEND_DATA_BYTE@b,w
  3017  061C  00F2               	movwf	??_SEND_DATA_BYTE
  3018  061D  3004               	movlw	4
  3019  061E                     u1665:	
  3020  061E  36F2               	lsrf	??_SEND_DATA_BYTE,f
  3021  061F  0B89               	decfsz	9,f
  3022  0620  2E1E               	goto	u1665
  3023  0621  0872               	movf	??_SEND_DATA_BYTE,w
  3024  0622  00F3               	movwf	??_SEND_DATA_BYTE+1
  3025  0623  0873               	movf	??_SEND_DATA_BYTE+1,w
  3026  0624  00EC               	movwf	__y
  3027  0625  086B               	movf	__x,w
  3028  0626  26CB               	fcall	_Send_Byte
  3029  0627  3085               	movlw	133
  3030  0628  00F2               	movwf	??_SEND_DATA_BYTE
  3031  0629                     u2637:	
  3032  0629  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3033  062A  2E29               	goto	u2637
  3034  062B  0020               	movlb	0	; select bank0
  3035  062C  086C               	movf	__y,w
  3036  062D  26CB               	fcall	_Send_Byte
  3037  062E  3085               	movlw	133
  3038  062F  00F2               	movwf	??_SEND_DATA_BYTE
  3039  0630                     u2647:	
  3040  0630  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3041  0631  2E30               	goto	u2647
  3042  0632  0874               	movf	SEND_DATA_BYTE@b,w
  3043  0633  0020               	movlb	0	; select bank0
  3044  0634  02D3               	subwf	__checksum,f
  3045  0635  0008               	return
  3046  0636                     __end_of_SEND_DATA_BYTE:	
  3047                           
  3048                           	psect	text13
  3049  06CB                     __ptext13:	
  3050 ;; *************** function _Send_Byte *****************
  3051 ;; Defined at:
  3052 ;;		line 142 in file "user.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  data            1    wreg     unsigned char 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  data            1    1[COMMON] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;		None               void
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3066 ;;      Params:         0       0       0       0
  3067 ;;      Locals:         1       0       0       0
  3068 ;;      Temps:          0       0       0       0
  3069 ;;      Totals:         1       0       0       0
  3070 ;;Total ram usage:        1 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    2
  3073 ;; This function calls:
  3074 ;;		_Modulate_Serial
  3075 ;;		_Disable_Modulation
  3076 ;; This function is called by:
  3077 ;;		_handle_fire
  3078 ;;		_SEND_DATA_BYTE
  3079 ;;		_SEND_SOF
  3080 ;;		_SEND_EOF
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function _Send_Byte
  3086  06CB                     _Send_Byte:	
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3090                           ;Send_Byte@data stored from wreg
  3091  06CB  00F1               	movwf	Send_Byte@data
  3092                           
  3093                           ;user.c: 143: RCSTAbits.CREN = 0;
  3094  06CC  0023               	movlb	3	; select bank3
  3095  06CD  121D               	bcf	29,4	;volatile
  3096                           
  3097                           ;user.c: 144: Modulate_Serial();
  3098  06CE  26EE               	fcall	_Modulate_Serial
  3099                           
  3100                           ;user.c: 145: TXREG = data;
  3101  06CF  0871               	movf	Send_Byte@data,w
  3102  06D0  0023               	movlb	3	; select bank3
  3103  06D1  009A               	movwf	26	;volatile
  3104  06D2                     l174:	
  3105                           ;user.c: 146: while(!TXSTAbits.TRMT);
  3106                           
  3107  06D2  1C9E               	btfss	30,1	;volatile
  3108  06D3  2ED2               	goto	l174
  3109                           
  3110                           ;user.c: 147: Disable_Modulation();
  3111  06D4  2711               	fcall	_Disable_Modulation
  3112                           
  3113                           ;user.c: 148: RCSTAbits.CREN = 1;
  3114  06D5  0023               	movlb	3	; select bank3
  3115  06D6  161D               	bsf	29,4	;volatile
  3116                           
  3117                           ;user.c: 149: RCREG;
  3118  06D7  0819               	movf	25,w	;volatile
  3119  06D8  0008               	return
  3120  06D9                     __end_of_Send_Byte:	
  3121                           
  3122                           	psect	text14
  3123  0711                     __ptext14:	
  3124 ;; *************** function _Disable_Modulation *****************
  3125 ;; Defined at:
  3126 ;;		line 159 in file "user.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;		None
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		None
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3140 ;;      Params:         0       0       0       0
  3141 ;;      Locals:         0       0       0       0
  3142 ;;      Temps:          0       0       0       0
  3143 ;;      Totals:         0       0       0       0
  3144 ;;Total ram usage:        0 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    1
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_Send_Byte
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _Disable_Modulation
  3156  0711                     _Disable_Modulation:	
  3157                           
  3158                           ;user.c: 160: INTCONbits.TMR0IE=0;
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _Disable_Modulation: []
  3162  0711  128B               	bcf	11,5	;volatile
  3163                           
  3164                           ;user.c: 161: DACCON0bits.DACEN=0;
  3165  0712  0022               	movlb	2	; select bank2
  3166  0713  1398               	bcf	24,7	;volatile
  3167  0714  0008               	return
  3168  0715                     __end_of_Disable_Modulation:	
  3169                           
  3170                           	psect	text15
  3171  06EE                     __ptext15:	
  3172 ;; *************** function _Modulate_Serial *****************
  3173 ;; Defined at:
  3174 ;;		line 152 in file "user.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;		None               void
  3181 ;; Registers used:
  3182 ;;		status,2
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3188 ;;      Params:         0       0       0       0
  3189 ;;      Locals:         0       0       0       0
  3190 ;;      Temps:          0       0       0       0
  3191 ;;      Totals:         0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    1
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_Send_Byte
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _Modulate_Serial
  3204  06EE                     _Modulate_Serial:	
  3205                           
  3206                           ;user.c: 153: DACCON0bits.DACEN = 1;
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _Modulate_Serial: [status,2]
  3210  06EE  0022               	movlb	2	; select bank2
  3211  06EF  1798               	bsf	24,7	;volatile
  3212                           
  3213                           ;user.c: 154: TMR0=0;
  3214  06F0  0020               	movlb	0	; select bank0
  3215  06F1  0195               	clrf	21	;volatile
  3216                           
  3217                           ;user.c: 155: INTCONbits.TMR0IF=1;
  3218  06F2  150B               	bsf	11,2	;volatile
  3219                           
  3220                           ;user.c: 156: INTCONbits.TMR0IE=1;
  3221  06F3  168B               	bsf	11,5	;volatile
  3222  06F4  0008               	return
  3223  06F5                     __end_of_Modulate_Serial:	
  3224                           
  3225                           	psect	text16
  3226  0691                     __ptext16:	
  3227 ;; *************** function _GET_CHAR_HELPER *****************
  3228 ;; Defined at:
  3229 ;;		line 28 in file "protocol.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  val             1    wreg     PTR unsigned char 
  3232 ;;		 -> _y(1), _x(1), 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  val             1    2[COMMON] PTR unsigned char 
  3235 ;;		 -> _y(1), _x(1), 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      unsigned char 
  3238 ;; Registers used:
  3239 ;;		wreg, fsr1l, fsr1h, status,2
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3245 ;;      Params:         0       0       0       0
  3246 ;;      Locals:         1       0       0       0
  3247 ;;      Temps:          1       0       0       0
  3248 ;;      Totals:         2       0       0       0
  3249 ;;Total ram usage:        2 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    1
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_control_transfer
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function _GET_CHAR_HELPER
  3261  0691                     _GET_CHAR_HELPER:	
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3265                           ;GET_CHAR_HELPER@val stored from wreg
  3266  0691  00F2               	movwf	GET_CHAR_HELPER@val
  3267  0692  0020               	movlb	0	; select bank0
  3268  0693  01CB               	clrf	__i
  3269  0694  01CC               	clrf	__i+1
  3270  0695                     l265:	
  3271  0695  1A91               	btfsc	17,5	;volatile
  3272  0696  2EA4               	goto	l1874
  3273  0697  3001               	movlw	1
  3274  0698  07CB               	addwf	__i,f
  3275  0699  3000               	movlw	0
  3276  069A  3DCC               	addwfc	__i+1,f
  3277  069B  3027               	movlw	39
  3278  069C  024C               	subwf	__i+1,w
  3279  069D  3010               	movlw	16
  3280  069E  1903               	skipnz
  3281  069F  024B               	subwf	__i,w
  3282  06A0  1C03               	skipc
  3283  06A1  2E95               	goto	l265
  3284  06A2  3001               	movlw	1
  3285  06A3  0008               	return
  3286  06A4                     l1874:	
  3287  06A4  0023               	movlb	3	; select bank3
  3288  06A5  0819               	movf	25,w	;volatile
  3289  06A6  00F1               	movwf	??_GET_CHAR_HELPER
  3290  06A7  0872               	movf	GET_CHAR_HELPER@val,w
  3291  06A8  0086               	movwf	6
  3292  06A9  0187               	clrf	7
  3293  06AA  0871               	movf	??_GET_CHAR_HELPER,w
  3294  06AB  0081               	movwf	1
  3295  06AC  3000               	movlw	0
  3296  06AD  0008               	return
  3297  06AE                     __end_of_GET_CHAR_HELPER:	
  3298                           
  3299                           	psect	text17
  3300  0570                     __ptext17:	
  3301 ;; *************** function _hit_by *****************
  3302 ;; Defined at:
  3303 ;;		line 62 in file "main.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  who             1    wreg     unsigned char 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  who             1   12[COMMON] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3317 ;;      Params:         0       0       0       0
  3318 ;;      Locals:         1       0       0       0
  3319 ;;      Temps:          0       2       0       0
  3320 ;;      Totals:         1       2       0       0
  3321 ;;Total ram usage:        3 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    3
  3324 ;; This function calls:
  3325 ;;		_add_to_hitlist
  3326 ;;		_Save
  3327 ;;		_Buzz
  3328 ;;		_get_hitlist_length
  3329 ;; This function is called by:
  3330 ;;		_handle_serial
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _hit_by
  3336  0570                     _hit_by:	
  3337                           
  3338                           ;incstack = 0
  3339                           ; Regs used in _hit_by: [allreg]
  3340                           ;hit_by@who stored from wreg
  3341  0570  00FC               	movwf	hit_by@who
  3342                           
  3343                           ;main.c: 63: add_to_hitlist(who);
  3344  0571  087C               	movf	hit_by@who,w
  3345  0572  23EE               	fcall	_add_to_hitlist
  3346                           
  3347                           ;main.c: 64: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3348  0573  30E0               	movlw	224
  3349  0574  00F1               	movwf	?_Save
  3350  0575  3007               	movlw	7
  3351  0576  00F2               	movwf	?_Save+1
  3352  0577  30A0               	movlw	_hitlist& (0+255)
  3353  0578  0020               	movlb	0	; select bank0
  3354  0579  00B0               	movwf	??_hit_by
  3355  057A  0830               	movf	??_hit_by,w
  3356  057B  00F3               	movwf	?_Save+2
  3357  057C  3010               	movlw	16
  3358  057D  00B1               	movwf	??_hit_by+1
  3359  057E  0831               	movf	??_hit_by+1,w
  3360  057F  00F4               	movwf	?_Save+3
  3361  0580  2442               	fcall	_Save
  3362                           
  3363                           ;main.c: 65: Buzz(1000,50);
  3364  0581  30E8               	movlw	232
  3365  0582  0020               	movlb	0	; select bank0
  3366  0583  00A8               	movwf	?_Buzz
  3367  0584  3003               	movlw	3
  3368  0585  00A9               	movwf	?_Buzz+1
  3369  0586  3032               	movlw	50
  3370  0587  00AA               	movwf	?_Buzz+2
  3371  0588  3000               	movlw	0
  3372  0589  00AB               	movwf	?_Buzz+3
  3373  058A  253C               	fcall	_Buzz
  3374                           
  3375                           ;main.c: 66: if(get_hitlist_length() > config.health)
  3376  058B  2504               	fcall	_get_hitlist_length
  3377  058C  0020               	movlb	0	; select bank0
  3378  058D  00B0               	movwf	??_hit_by
  3379  058E  01B1               	clrf	??_hit_by+1
  3380  058F  0831               	movf	??_hit_by+1,w
  3381  0590  0260               	subwf	_config+5,w
  3382  0591  1D03               	skipz
  3383  0592  2D95               	goto	u1485
  3384  0593  0830               	movf	??_hit_by,w
  3385  0594  025F               	subwf	_config+4,w
  3386  0595                     u1485:	
  3387  0595  1803               	skipnc
  3388  0596  0008               	return
  3389                           
  3390                           ;main.c: 67: {
  3391                           ;main.c: 68: Buzz(100,2000);
  3392  0597  3064               	movlw	100
  3393  0598  00A8               	movwf	?_Buzz
  3394  0599  3000               	movlw	0
  3395  059A  00A9               	movwf	?_Buzz+1
  3396  059B  30D0               	movlw	208
  3397  059C  00AA               	movwf	?_Buzz+2
  3398  059D  3007               	movlw	7
  3399  059E  00AB               	movwf	?_Buzz+3
  3400  059F  253C               	fcall	_Buzz
  3401  05A0  0008               	return
  3402  05A1                     __end_of_hit_by:	
  3403                           
  3404                           	psect	text18
  3405  0504                     __ptext18:	
  3406 ;; *************** function _get_hitlist_length *****************
  3407 ;; Defined at:
  3408 ;;		line 291 in file "user.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;  i               1    5[COMMON] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      unsigned char 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3422 ;;      Params:         0       0       0       0
  3423 ;;      Locals:         1       0       0       0
  3424 ;;      Temps:          4       0       0       0
  3425 ;;      Totals:         5       0       0       0
  3426 ;;Total ram usage:        5 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_hit_by
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _get_hitlist_length
  3438  0504                     _get_hitlist_length:	
  3439                           
  3440                           ;user.c: 292: uint8_t i;
  3441                           ;user.c: 293: for(i=0;i<(sizeof(hitlist_t)/2);i++)
  3442                           
  3443                           ;incstack = 0
  3444                           ; Regs used in _get_hitlist_length: [wreg+fsr1l+fsr1h+status,2+status,0]
  3445  0504  01F5               	clrf	get_hitlist_length@i
  3446  0505  3010               	movlw	16
  3447  0506  0275               	subwf	get_hitlist_length@i,w
  3448  0507  1803               	btfsc	3,0
  3449  0508  2D3A               	goto	l1790
  3450  0509                     l1774:	
  3451                           
  3452                           ;user.c: 294: {
  3453                           ;user.c: 295: if(!(hitlist[i] & 0x007F)) return 2*i;
  3454  0509  3575               	lslf	get_hitlist_length@i,w
  3455  050A  3EA0               	addlw	_hitlist& (0+255)
  3456  050B  0086               	movwf	6
  3457  050C  0187               	clrf	7
  3458  050D  3F40               	moviw [0]fsr1
  3459  050E  00F1               	movwf	??_get_hitlist_length
  3460  050F  3F41               	moviw [1]fsr1
  3461  0510  00F2               	movwf	??_get_hitlist_length+1
  3462  0511  307F               	movlw	127
  3463  0512  0571               	andwf	??_get_hitlist_length,w
  3464  0513  00F3               	movwf	??_get_hitlist_length+2
  3465  0514  3000               	movlw	0
  3466  0515  0572               	andwf	??_get_hitlist_length+1,w
  3467  0516  00F4               	movwf	??_get_hitlist_length+3
  3468  0517  0874               	movf	??_get_hitlist_length+3,w
  3469  0518  0473               	iorwf	??_get_hitlist_length+2,w
  3470  0519  1D03               	skipz
  3471  051A  2D1D               	goto	l1780
  3472  051B  3575               	lslf	get_hitlist_length@i,w
  3473  051C  0008               	return
  3474  051D                     l1780:	
  3475                           
  3476                           ;user.c: 296: if(!(hitlist[i] & 0x3F80)) return 2*i+1;
  3477  051D  3575               	lslf	get_hitlist_length@i,w
  3478  051E  3EA0               	addlw	_hitlist& (0+255)
  3479  051F  0086               	movwf	6
  3480  0520  0187               	clrf	7
  3481  0521  3F40               	moviw [0]fsr1
  3482  0522  00F1               	movwf	??_get_hitlist_length
  3483  0523  3F41               	moviw [1]fsr1
  3484  0524  00F2               	movwf	??_get_hitlist_length+1
  3485  0525  3080               	movlw	128
  3486  0526  0571               	andwf	??_get_hitlist_length,w
  3487  0527  00F3               	movwf	??_get_hitlist_length+2
  3488  0528  303F               	movlw	63
  3489  0529  0572               	andwf	??_get_hitlist_length+1,w
  3490  052A  00F4               	movwf	??_get_hitlist_length+3
  3491  052B  0874               	movf	??_get_hitlist_length+3,w
  3492  052C  0473               	iorwf	??_get_hitlist_length+2,w
  3493  052D  1D03               	skipz
  3494  052E  2D32               	goto	l1786
  3495  052F  1403               	setc
  3496  0530  0D75               	rlf	get_hitlist_length@i,w
  3497  0531  0008               	return
  3498  0532                     l1786:	
  3499  0532  3001               	movlw	1
  3500  0533  00F1               	movwf	??_get_hitlist_length
  3501  0534  0871               	movf	??_get_hitlist_length,w
  3502  0535  07F5               	addwf	get_hitlist_length@i,f
  3503  0536  3010               	movlw	16
  3504  0537  0275               	subwf	get_hitlist_length@i,w
  3505  0538  1C03               	skipc
  3506  0539  2D09               	goto	l1774
  3507  053A                     l1790:	
  3508                           
  3509                           ;user.c: 297: }
  3510                           ;user.c: 298: return 2*i;
  3511  053A  3575               	lslf	get_hitlist_length@i,w
  3512  053B  0008               	return
  3513  053C                     __end_of_get_hitlist_length:	
  3514                           
  3515                           	psect	text19
  3516  053C                     __ptext19:	
  3517 ;; *************** function _Buzz *****************
  3518 ;; Defined at:
  3519 ;;		line 135 in file "user.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  freq            2    8[BANK0 ] unsigned int 
  3522 ;;  dur_ms          2   10[BANK0 ] unsigned int 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  i               2   14[BANK0 ] unsigned int 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;		None               void
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, pclath, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3534 ;;      Params:         0       4       0       0
  3535 ;;      Locals:         0       2       0       0
  3536 ;;      Temps:          0       2       0       0
  3537 ;;      Totals:         0       8       0       0
  3538 ;;Total ram usage:        8 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    2
  3541 ;; This function calls:
  3542 ;;		_tone_off
  3543 ;;		_tone
  3544 ;;		___aldiv
  3545 ;; This function is called by:
  3546 ;;		_hit_by
  3547 ;;		_Sleep
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _Buzz
  3553  053C                     _Buzz:	
  3554                           
  3555                           ;user.c: 136: tone((16000000 / freq)-1);
  3556                           
  3557                           ;incstack = 0
  3558                           ; Regs used in _Buzz: [wreg+status,2+status,0+pclath+cstack]
  3559  053C  0020               	movlb	0	; select bank0
  3560  053D  0828               	movf	Buzz@freq,w
  3561  053E  00F1               	movwf	?___aldiv
  3562  053F  0829               	movf	Buzz@freq+1,w
  3563  0540  00F2               	movwf	?___aldiv+1
  3564  0541  01F3               	clrf	?___aldiv+2
  3565  0542  01F4               	clrf	?___aldiv+3
  3566  0543  3000               	movlw	0
  3567  0544  00F8               	movwf	?___aldiv+7
  3568  0545  30F4               	movlw	244
  3569  0546  00F7               	movwf	?___aldiv+6
  3570  0547  3024               	movlw	36
  3571  0548  00F6               	movwf	?___aldiv+5
  3572  0549  3000               	movlw	0
  3573  054A  00F5               	movwf	?___aldiv+4
  3574  054B  2309               	fcall	___aldiv
  3575  054C  0871               	movf	?___aldiv,w
  3576  054D  3EFF               	addlw	255
  3577  054E  0020               	movlb	0	; select bank0
  3578  054F  00A6               	movwf	?_tone
  3579  0550  30FF               	movlw	255
  3580  0551  3D72               	addwfc	?___aldiv+1,w
  3581  0552  00A7               	movwf	?_tone+1
  3582  0553  26AE               	fcall	_tone
  3583                           
  3584                           ;user.c: 137: for(uint16_t i=0;i<dur_ms;i++) _delay((unsigned long)((1)*(16000000/4000.0
      +                          )));
  3585  0554  0020               	movlb	0	; select bank0
  3586  0555  01AE               	clrf	Buzz@i
  3587  0556  01AF               	clrf	Buzz@i+1
  3588  0557                     l168:	
  3589  0557  082B               	movf	Buzz@dur_ms+1,w
  3590  0558  022F               	subwf	Buzz@i+1,w
  3591  0559  1D03               	skipz
  3592  055A  2D5D               	goto	u1565
  3593  055B  082A               	movf	Buzz@dur_ms,w
  3594  055C  022E               	subwf	Buzz@i,w
  3595  055D                     u1565:	
  3596  055D  1803               	btfsc	3,0
  3597  055E  2D6E               	goto	l1766
  3598  055F  3006               	movlw	6
  3599  0560  00AD               	movwf	??_Buzz+1
  3600  0561  3030               	movlw	48
  3601  0562  00AC               	movwf	??_Buzz
  3602  0563                     u2657:	
  3603  0563  0BAC               	decfsz	??_Buzz,f
  3604  0564  2D63               	goto	u2657
  3605  0565  0BAD               	decfsz	??_Buzz+1,f
  3606  0566  2D63               	goto	u2657
  3607  0567  0000               	nop
  3608  0568  3001               	movlw	1
  3609  0569  0020               	movlb	0	; select bank0
  3610  056A  07AE               	addwf	Buzz@i,f
  3611  056B  3000               	movlw	0
  3612  056C  3DAF               	addwfc	Buzz@i+1,f
  3613  056D  2D57               	goto	l168
  3614  056E                     l1766:	
  3615                           
  3616                           ;user.c: 138: tone_off();
  3617  056E  2718               	fcall	_tone_off
  3618  056F  0008               	return
  3619  0570                     __end_of_Buzz:	
  3620                           
  3621                           	psect	text20
  3622  0309                     __ptext20:	
  3623 ;; *************** function ___aldiv *****************
  3624 ;; Defined at:
  3625 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\aldiv.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  divisor         4    1[COMMON] long 
  3628 ;;  dividend        4    5[COMMON] long 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  quotient        4    2[BANK0 ] long 
  3631 ;;  sign            1    1[BANK0 ] unsigned char 
  3632 ;;  counter         1    0[BANK0 ] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  4    1[COMMON] long 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3642 ;;      Params:         8       0       0       0
  3643 ;;      Locals:         0       6       0       0
  3644 ;;      Temps:          1       0       0       0
  3645 ;;      Totals:         9       6       0       0
  3646 ;;Total ram usage:       15 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    1
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_Buzz
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function ___aldiv
  3658  0309                     ___aldiv:	
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3662  0309  0020               	movlb	0	; select bank0
  3663  030A  01A1               	clrf	___aldiv@sign
  3664  030B  1FF4               	btfss	___aldiv@divisor+3,7
  3665  030C  2B1A               	goto	l426
  3666  030D  09F1               	comf	___aldiv@divisor,f
  3667  030E  09F2               	comf	___aldiv@divisor+1,f
  3668  030F  09F3               	comf	___aldiv@divisor+2,f
  3669  0310  09F4               	comf	___aldiv@divisor+3,f
  3670  0311  0AF1               	incf	___aldiv@divisor,f
  3671  0312  1903               	skipnz
  3672  0313  0AF2               	incf	___aldiv@divisor+1,f
  3673  0314  1903               	skipnz
  3674  0315  0AF3               	incf	___aldiv@divisor+2,f
  3675  0316  1903               	skipnz
  3676  0317  0AF4               	incf	___aldiv@divisor+3,f
  3677  0318  01A1               	clrf	___aldiv@sign
  3678  0319  0AA1               	incf	___aldiv@sign,f
  3679  031A                     l426:	
  3680  031A  1FF8               	btfss	___aldiv@dividend+3,7
  3681  031B  2B2B               	goto	l2232
  3682  031C  09F5               	comf	___aldiv@dividend,f
  3683  031D  09F6               	comf	___aldiv@dividend+1,f
  3684  031E  09F7               	comf	___aldiv@dividend+2,f
  3685  031F  09F8               	comf	___aldiv@dividend+3,f
  3686  0320  0AF5               	incf	___aldiv@dividend,f
  3687  0321  1903               	skipnz
  3688  0322  0AF6               	incf	___aldiv@dividend+1,f
  3689  0323  1903               	skipnz
  3690  0324  0AF7               	incf	___aldiv@dividend+2,f
  3691  0325  1903               	skipnz
  3692  0326  0AF8               	incf	___aldiv@dividend+3,f
  3693  0327  3001               	movlw	1
  3694  0328  00F9               	movwf	??___aldiv
  3695  0329  0879               	movf	??___aldiv,w
  3696  032A  06A1               	xorwf	___aldiv@sign,f
  3697  032B                     l2232:	
  3698  032B  3000               	movlw	0
  3699  032C  00A5               	movwf	___aldiv@quotient+3
  3700  032D  3000               	movlw	0
  3701  032E  00A4               	movwf	___aldiv@quotient+2
  3702  032F  3000               	movlw	0
  3703  0330  00A3               	movwf	___aldiv@quotient+1
  3704  0331  3000               	movlw	0
  3705  0332  00A2               	movwf	___aldiv@quotient
  3706  0333  0874               	movf	___aldiv@divisor+3,w
  3707  0334  0473               	iorwf	___aldiv@divisor+2,w
  3708  0335  0472               	iorwf	___aldiv@divisor+1,w
  3709  0336  0471               	iorwf	___aldiv@divisor,w
  3710  0337  1903               	skipnz
  3711  0338  2B74               	goto	l2254
  3712  0339  01A0               	clrf	___aldiv@counter
  3713  033A  0AA0               	incf	___aldiv@counter,f
  3714  033B                     l2240:	
  3715  033B  1BF4               	btfsc	___aldiv@divisor+3,7
  3716  033C  2B49               	goto	l2242
  3717  033D  3001               	movlw	1
  3718  033E                     u2535:	
  3719  033E  35F1               	lslf	___aldiv@divisor,f
  3720  033F  0DF2               	rlf	___aldiv@divisor+1,f
  3721  0340  0DF3               	rlf	___aldiv@divisor+2,f
  3722  0341  0DF4               	rlf	___aldiv@divisor+3,f
  3723  0342  0B89               	decfsz	9,f
  3724  0343  2B3E               	goto	u2535
  3725  0344  3001               	movlw	1
  3726  0345  00F9               	movwf	??___aldiv
  3727  0346  0879               	movf	??___aldiv,w
  3728  0347  07A0               	addwf	___aldiv@counter,f
  3729  0348  2B3B               	goto	l2240
  3730  0349                     l2242:	
  3731  0349  3001               	movlw	1
  3732  034A                     u2555:	
  3733  034A  35A2               	lslf	___aldiv@quotient,f
  3734  034B  0DA3               	rlf	___aldiv@quotient+1,f
  3735  034C  0DA4               	rlf	___aldiv@quotient+2,f
  3736  034D  0DA5               	rlf	___aldiv@quotient+3,f
  3737  034E  0B89               	decfsz	9,f
  3738  034F  2B4A               	goto	u2555
  3739  0350  0874               	movf	___aldiv@divisor+3,w
  3740  0351  0278               	subwf	___aldiv@dividend+3,w
  3741  0352  1D03               	skipz
  3742  0353  2B5E               	goto	u2565
  3743  0354  0873               	movf	___aldiv@divisor+2,w
  3744  0355  0277               	subwf	___aldiv@dividend+2,w
  3745  0356  1D03               	skipz
  3746  0357  2B5E               	goto	u2565
  3747  0358  0872               	movf	___aldiv@divisor+1,w
  3748  0359  0276               	subwf	___aldiv@dividend+1,w
  3749  035A  1D03               	skipz
  3750  035B  2B5E               	goto	u2565
  3751  035C  0871               	movf	___aldiv@divisor,w
  3752  035D  0275               	subwf	___aldiv@dividend,w
  3753  035E                     u2565:	
  3754  035E  1C03               	skipc
  3755  035F  2B69               	goto	l2250
  3756  0360  0871               	movf	___aldiv@divisor,w
  3757  0361  02F5               	subwf	___aldiv@dividend,f
  3758  0362  0872               	movf	___aldiv@divisor+1,w
  3759  0363  3BF6               	subwfb	___aldiv@dividend+1,f
  3760  0364  0873               	movf	___aldiv@divisor+2,w
  3761  0365  3BF7               	subwfb	___aldiv@dividend+2,f
  3762  0366  0874               	movf	___aldiv@divisor+3,w
  3763  0367  3BF8               	subwfb	___aldiv@dividend+3,f
  3764  0368  1422               	bsf	___aldiv@quotient,0
  3765  0369                     l2250:	
  3766  0369  3001               	movlw	1
  3767  036A                     u2575:	
  3768  036A  36F4               	lsrf	___aldiv@divisor+3,f
  3769  036B  0CF3               	rrf	___aldiv@divisor+2,f
  3770  036C  0CF2               	rrf	___aldiv@divisor+1,f
  3771  036D  0CF1               	rrf	___aldiv@divisor,f
  3772  036E  0B89               	decfsz	9,f
  3773  036F  2B6A               	goto	u2575
  3774  0370  3001               	movlw	1
  3775  0371  02A0               	subwf	___aldiv@counter,f
  3776  0372  1D03               	btfss	3,2
  3777  0373  2B49               	goto	l2242
  3778  0374                     l2254:	
  3779  0374  0821               	movf	___aldiv@sign,w
  3780  0375  1903               	btfsc	3,2
  3781  0376  2B82               	goto	l2258
  3782  0377  09A2               	comf	___aldiv@quotient,f
  3783  0378  09A3               	comf	___aldiv@quotient+1,f
  3784  0379  09A4               	comf	___aldiv@quotient+2,f
  3785  037A  09A5               	comf	___aldiv@quotient+3,f
  3786  037B  0AA2               	incf	___aldiv@quotient,f
  3787  037C  1903               	skipnz
  3788  037D  0AA3               	incf	___aldiv@quotient+1,f
  3789  037E  1903               	skipnz
  3790  037F  0AA4               	incf	___aldiv@quotient+2,f
  3791  0380  1903               	skipnz
  3792  0381  0AA5               	incf	___aldiv@quotient+3,f
  3793  0382                     l2258:	
  3794  0382  0825               	movf	___aldiv@quotient+3,w
  3795  0383  00F4               	movwf	?___aldiv+3
  3796  0384  0824               	movf	___aldiv@quotient+2,w
  3797  0385  00F3               	movwf	?___aldiv+2
  3798  0386  0823               	movf	___aldiv@quotient+1,w
  3799  0387  00F2               	movwf	?___aldiv+1
  3800  0388  0822               	movf	___aldiv@quotient,w
  3801  0389  00F1               	movwf	?___aldiv
  3802  038A  0008               	return
  3803  038B                     __end_of___aldiv:	
  3804                           
  3805                           	psect	text21
  3806  06AE                     __ptext21:	
  3807 ;; *************** function _tone *****************
  3808 ;; Defined at:
  3809 ;;		line 120 in file "user.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  period          2    6[BANK0 ] unsigned int 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;		None               void
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3823 ;;      Params:         0       2       0       0
  3824 ;;      Locals:         0       0       0       0
  3825 ;;      Temps:          2       0       0       0
  3826 ;;      Totals:         2       2       0       0
  3827 ;;Total ram usage:        4 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    1
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_handle_music
  3834 ;;		_Buzz
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _tone
  3840  06AE                     _tone:	
  3841                           
  3842                           ;user.c: 121: PWM3CONbits.PWM3EN = 1;
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _tone: [wreg+status,2+status,0]
  3846  06AE  003B               	movlb	27	; select bank27
  3847  06AF  17BB               	bsf	59,7	;volatile
  3848                           
  3849                           ;user.c: 122: PWM3CONbits.PWM3OE = 1;
  3850  06B0  173B               	bsf	59,6	;volatile
  3851                           
  3852                           ;user.c: 123: PWM3PR = period;
  3853  06B1  0020               	movlb	0	; select bank0
  3854  06B2  0827               	movf	tone@period+1,w
  3855  06B3  003B               	movlb	27	; select bank27
  3856  06B4  01B6               	clrf	54	;volatile
  3857  06B5  07B6               	addwf	54,f	;volatile
  3858  06B6  0020               	movlb	0	; select bank0
  3859  06B7  0826               	movf	tone@period,w
  3860  06B8  003B               	movlb	27	; select bank27
  3861  06B9  01B5               	clrf	53	;volatile
  3862  06BA  07B5               	addwf	53,f	;volatile
  3863                           
  3864                           ;user.c: 124: PWM3DC = period >> 1;
  3865  06BB  0020               	movlb	0	; select bank0
  3866  06BC  0827               	movf	tone@period+1,w
  3867  06BD  00FB               	movwf	??_tone+1
  3868  06BE  0826               	movf	tone@period,w
  3869  06BF  00FA               	movwf	??_tone
  3870  06C0  36FB               	lsrf	??_tone+1,f
  3871  06C1  0CFA               	rrf	??_tone,f
  3872  06C2  087A               	movf	??_tone,w
  3873  06C3  003B               	movlb	27	; select bank27
  3874  06C4  00B3               	movwf	51	;volatile
  3875  06C5  087B               	movf	??_tone+1,w
  3876  06C6  00B4               	movwf	52	;volatile
  3877                           
  3878                           ;user.c: 125: PWM3PH = 0x0000;
  3879  06C7  01B1               	clrf	49	;volatile
  3880  06C8  01B2               	clrf	50	;volatile
  3881                           
  3882                           ;user.c: 126: PWM3LDCONbits.PWM3LD = 1;
  3883  06C9  17BF               	bsf	63,7	;volatile
  3884  06CA  0008               	return
  3885  06CB                     __end_of_tone:	
  3886                           
  3887                           	psect	text22
  3888  0718                     __ptext22:	
  3889 ;; *************** function _tone_off *****************
  3890 ;; Defined at:
  3891 ;;		line 130 in file "user.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;		None               void
  3898 ;; Registers used:
  3899 ;;		None
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3905 ;;      Params:         0       0       0       0
  3906 ;;      Locals:         0       0       0       0
  3907 ;;      Temps:          0       0       0       0
  3908 ;;      Totals:         0       0       0       0
  3909 ;;Total ram usage:        0 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    1
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_stop_song
  3916 ;;		_Buzz
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _tone_off
  3922  0718                     _tone_off:	
  3923                           
  3924                           ;user.c: 131: PWM3CONbits.PWM3OE = 0;
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _tone_off: []
  3928  0718  003B               	movlb	27	; select bank27
  3929  0719  133B               	bcf	59,6	;volatile
  3930  071A  0008               	return
  3931  071B                     __end_of_tone_off:	
  3932                           
  3933                           	psect	text23
  3934  0442                     __ptext23:	
  3935 ;; *************** function _Save *****************
  3936 ;; Defined at:
  3937 ;;		line 185 in file "user.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  address         2    1[COMMON] unsigned int 
  3940 ;;  ptr             1    3[COMMON] PTR unsigned int 
  3941 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  3942 ;;  data_length     1    4[COMMON] unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  i               1    6[COMMON] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;		None               void
  3947 ;; Registers used:
  3948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3954 ;;      Params:         4       0       0       0
  3955 ;;      Locals:         1       0       0       0
  3956 ;;      Temps:          1       0       0       0
  3957 ;;      Totals:         6       0       0       0
  3958 ;;Total ram usage:        6 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    1
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_hit_by
  3965 ;;		_control_transfer
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           
  3970                           ;psect for function _Save
  3971  0442                     _Save:	
  3972                           
  3973                           ;user.c: 187: INTCONbits.GIE = 0;
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  3977  0442  138B               	bcf	11,7	;volatile
  3978                           
  3979                           ;user.c: 188: PMADR = address;
  3980  0443  0872               	movf	Save@address+1,w
  3981  0444  0023               	movlb	3	; select bank3
  3982  0445  0192               	clrf	18	;volatile
  3983  0446  0792               	addwf	18,f	;volatile
  3984  0447  0871               	movf	Save@address,w
  3985  0448  0191               	clrf	17	;volatile
  3986  0449  0791               	addwf	17,f	;volatile
  3987                           
  3988                           ;user.c: 189: PMCON1bits.CFGS = 0;
  3989  044A  1315               	bcf	21,6	;volatile
  3990                           
  3991                           ;user.c: 190: PMCON1bits.FREE = 1;
  3992  044B  1615               	bsf	21,4	;volatile
  3993                           
  3994                           ;user.c: 191: PMCON1bits.WREN = 1;
  3995  044C  1515               	bsf	21,2	;volatile
  3996                           
  3997                           ;user.c: 192: PMCON2 = 0x55;
  3998  044D  3055               	movlw	85
  3999  044E  0096               	movwf	22	;volatile
  4000                           
  4001                           ;user.c: 193: PMCON2 = 0xAA;
  4002  044F  30AA               	movlw	170
  4003  0450  0096               	movwf	22	;volatile
  4004                           
  4005                           ;user.c: 194: PMCON1bits.WR = 1;
  4006  0451  1495               	bsf	21,1	;volatile
  4007                           
  4008                           ;user.c: 195: _nop();
  4009  0452  0000               	nop
  4010                           
  4011                           ;user.c: 196: _nop();
  4012  0453  0000               	nop
  4013                           
  4014                           ;user.c: 197: PMCON1bits.WREN = 0;
  4015  0454  0023               	movlb	3	; select bank3
  4016  0455  1115               	bcf	21,2	;volatile
  4017                           
  4018                           ;user.c: 199: PMADR = address;
  4019  0456  0872               	movf	Save@address+1,w
  4020  0457  0192               	clrf	18	;volatile
  4021  0458  0792               	addwf	18,f	;volatile
  4022  0459  0871               	movf	Save@address,w
  4023  045A  0191               	clrf	17	;volatile
  4024  045B  0791               	addwf	17,f	;volatile
  4025                           
  4026                           ;user.c: 200: PMCON1bits.CFGS = 0;
  4027  045C  1315               	bcf	21,6	;volatile
  4028                           
  4029                           ;user.c: 201: PMCON1bits.FREE = 0;
  4030  045D  1215               	bcf	21,4	;volatile
  4031                           
  4032                           ;user.c: 202: PMCON1bits.WREN = 1;
  4033  045E  1515               	bsf	21,2	;volatile
  4034                           
  4035                           ;user.c: 203: PMCON1bits.LWLO = 1;
  4036  045F  1695               	bsf	21,5	;volatile
  4037                           
  4038                           ;user.c: 205: for (uint8_t i=1; i<=data_length; i++){
  4039  0460  01F6               	clrf	Save@i
  4040  0461  0AF6               	incf	Save@i,f
  4041  0462                     l195:	
  4042  0462  0876               	movf	Save@i,w
  4043  0463  0274               	subwf	Save@data_length,w
  4044  0464  1C03               	btfss	3,0
  4045  0465  2C86               	goto	l198
  4046                           
  4047                           ;user.c: 206: PMDAT = *ptr++;
  4048  0466  0873               	movf	Save@ptr,w
  4049  0467  0086               	movwf	6
  4050  0468  0187               	clrf	7
  4051  0469  3F40               	moviw [0]fsr1
  4052  046A  0093               	movwf	19	;volatile
  4053  046B  3F41               	moviw [1]fsr1
  4054  046C  0094               	movwf	20	;volatile
  4055  046D  3002               	movlw	2
  4056  046E  00F5               	movwf	??_Save
  4057  046F  0875               	movf	??_Save,w
  4058  0470  07F3               	addwf	Save@ptr,f
  4059                           
  4060                           ;user.c: 207: if(i == data_length) PMCON1bits.LWLO = 0;
  4061  0471  0876               	movf	Save@i,w
  4062  0472  0674               	xorwf	Save@data_length,w
  4063  0473  1903               	btfsc	3,2
  4064  0474  1295               	bcf	21,5	;volatile
  4065                           
  4066                           ;user.c: 208: PMCON2 = 0x55;
  4067  0475  3055               	movlw	85
  4068  0476  0096               	movwf	22	;volatile
  4069                           
  4070                           ;user.c: 209: PMCON2 = 0xAA;
  4071  0477  30AA               	movlw	170
  4072  0478  0096               	movwf	22	;volatile
  4073                           
  4074                           ;user.c: 210: PMCON1bits.WR = 1;
  4075  0479  1495               	bsf	21,1	;volatile
  4076                           
  4077                           ;user.c: 211: _nop();
  4078  047A  0000               	nop
  4079                           
  4080                           ;user.c: 212: _nop();
  4081  047B  0000               	nop
  4082                           
  4083                           ;user.c: 213: PMADRL++;
  4084  047C  3001               	movlw	1
  4085  047D  00F5               	movwf	??_Save
  4086  047E  0875               	movf	??_Save,w
  4087  047F  0023               	movlb	3	; select bank3
  4088  0480  0791               	addwf	17,f	;volatile
  4089  0481  3001               	movlw	1
  4090  0482  00F5               	movwf	??_Save
  4091  0483  0875               	movf	??_Save,w
  4092  0484  07F6               	addwf	Save@i,f
  4093  0485  2C62               	goto	l195
  4094  0486                     l198:	
  4095                           
  4096                           ;user.c: 214: }
  4097                           ;user.c: 215: PMCON1bits.WREN = 0;
  4098  0486  1115               	bcf	21,2	;volatile
  4099                           
  4100                           ;user.c: 216: INTCONbits.GIE = 1;
  4101  0487  178B               	bsf	11,7	;volatile
  4102  0488  0008               	return
  4103  0489                     __end_of_Save:	
  4104                           
  4105                           	psect	text24
  4106  03EE                     __ptext24:	
  4107 ;; *************** function _add_to_hitlist *****************
  4108 ;; Defined at:
  4109 ;;		line 302 in file "user.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  gun             1    wreg     unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  gun             1    5[COMMON] unsigned char 
  4114 ;;  i               1    8[COMMON] unsigned char 
  4115 ;;  gun16           2    6[COMMON] unsigned int 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;		None               void
  4118 ;; Registers used:
  4119 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4125 ;;      Params:         0       0       0       0
  4126 ;;      Locals:         4       0       0       0
  4127 ;;      Temps:          4       0       0       0
  4128 ;;      Totals:         8       0       0       0
  4129 ;;Total ram usage:        8 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    1
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_hit_by
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _add_to_hitlist
  4141  03EE                     _add_to_hitlist:	
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  4145                           ;add_to_hitlist@gun stored from wreg
  4146  03EE  00F5               	movwf	add_to_hitlist@gun
  4147                           
  4148                           ;user.c: 303: uint16_t gun16 = gun & 0x7F;
  4149  03EF  0875               	movf	add_to_hitlist@gun,w
  4150  03F0  397F               	andlw	127
  4151  03F1  00F1               	movwf	??_add_to_hitlist
  4152  03F2  01F2               	clrf	??_add_to_hitlist+1
  4153  03F3  0871               	movf	??_add_to_hitlist,w
  4154  03F4  00F6               	movwf	add_to_hitlist@gun16
  4155  03F5  0872               	movf	??_add_to_hitlist+1,w
  4156  03F6  00F7               	movwf	add_to_hitlist@gun16+1
  4157                           
  4158                           ;user.c: 304: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  4159  03F7  01F8               	clrf	add_to_hitlist@i
  4160  03F8                     L1:	
  4161  03F8  3010               	movlw	16
  4162  03F9  0278               	subwf	add_to_hitlist@i,w
  4163  03FA  1803               	btfsc	3,0
  4164  03FB  0008               	return
  4165                           
  4166                           ;user.c: 305: {
  4167                           ;user.c: 306: if(!(hitlist[i] & 0x007F))
  4168  03FC  3578               	lslf	add_to_hitlist@i,w
  4169  03FD  3EA0               	addlw	_hitlist& (0+255)
  4170  03FE  0086               	movwf	6
  4171  03FF  0187               	clrf	7
  4172  0400  3F40               	moviw [0]fsr1
  4173  0401  00F1               	movwf	??_add_to_hitlist
  4174  0402  3F41               	moviw [1]fsr1
  4175  0403  00F2               	movwf	??_add_to_hitlist+1
  4176  0404  307F               	movlw	127
  4177  0405  0571               	andwf	??_add_to_hitlist,w
  4178  0406  00F3               	movwf	??_add_to_hitlist+2
  4179  0407  3000               	movlw	0
  4180  0408  0572               	andwf	??_add_to_hitlist+1,w
  4181  0409  00F4               	movwf	??_add_to_hitlist+3
  4182  040A  0874               	movf	??_add_to_hitlist+3,w
  4183  040B  0473               	iorwf	??_add_to_hitlist+2,w
  4184  040C  1D03               	skipz
  4185  040D  2C18               	goto	l1698
  4186                           
  4187                           ;user.c: 307: {
  4188                           ;user.c: 308: hitlist[i] |= gun16;
  4189  040E  3578               	lslf	add_to_hitlist@i,w
  4190  040F  3EA0               	addlw	_hitlist& (0+255)
  4191  0410  0086               	movwf	6
  4192  0411  0187               	clrf	7
  4193  0412  0876               	movf	add_to_hitlist@gun16,w
  4194  0413  0481               	iorwf	1,f
  4195  0414  3141               	addfsr 1,1
  4196  0415  0877               	movf	add_to_hitlist@gun16+1,w
  4197  0416  0481               	iorwf	1,f
  4198                           
  4199                           ;user.c: 309: return;
  4200  0417  0008               	return
  4201  0418                     l1698:	
  4202                           
  4203                           ;user.c: 310: }
  4204                           ;user.c: 311: if(!(hitlist[i] & 0x3F80))
  4205  0418  3578               	lslf	add_to_hitlist@i,w
  4206  0419  3EA0               	addlw	_hitlist& (0+255)
  4207  041A  0086               	movwf	6
  4208  041B  0187               	clrf	7
  4209  041C  3F40               	moviw [0]fsr1
  4210  041D  00F1               	movwf	??_add_to_hitlist
  4211  041E  3F41               	moviw [1]fsr1
  4212  041F  00F2               	movwf	??_add_to_hitlist+1
  4213  0420  3080               	movlw	128
  4214  0421  0571               	andwf	??_add_to_hitlist,w
  4215  0422  00F3               	movwf	??_add_to_hitlist+2
  4216  0423  303F               	movlw	63
  4217  0424  0572               	andwf	??_add_to_hitlist+1,w
  4218  0425  00F4               	movwf	??_add_to_hitlist+3
  4219  0426  0874               	movf	??_add_to_hitlist+3,w
  4220  0427  0473               	iorwf	??_add_to_hitlist+2,w
  4221  0428  1D03               	skipz
  4222  0429  2C3D               	goto	l1704
  4223                           
  4224                           ;user.c: 312: {
  4225                           ;user.c: 313: hitlist[i] |= gun16 << 7;
  4226  042A  0877               	movf	add_to_hitlist@gun16+1,w
  4227  042B  00F2               	movwf	??_add_to_hitlist+1
  4228  042C  0876               	movf	add_to_hitlist@gun16,w
  4229  042D  00F1               	movwf	??_add_to_hitlist
  4230  042E  3007               	movlw	7
  4231  042F                     u1525:	
  4232  042F  35F1               	lslf	??_add_to_hitlist,f
  4233  0430  0DF2               	rlf	??_add_to_hitlist+1,f
  4234  0431  0B89               	decfsz	9,f
  4235  0432  2C2F               	goto	u1525
  4236  0433  3578               	lslf	add_to_hitlist@i,w
  4237  0434  3EA0               	addlw	_hitlist& (0+255)
  4238  0435  0086               	movwf	6
  4239  0436  0187               	clrf	7
  4240  0437  0871               	movf	??_add_to_hitlist,w
  4241  0438  0481               	iorwf	1,f
  4242  0439  3141               	addfsr 1,1
  4243  043A  0872               	movf	??_add_to_hitlist+1,w
  4244  043B  0481               	iorwf	1,f
  4245                           
  4246                           ;user.c: 314: return;
  4247  043C  0008               	return
  4248  043D                     l1704:	
  4249  043D  3001               	movlw	1
  4250  043E  00F1               	movwf	??_add_to_hitlist
  4251  043F  0871               	movf	??_add_to_hitlist,w
  4252  0440  07F8               	addwf	add_to_hitlist@i,f
  4253  0441  2BF8               	goto	L1
  4254  0442                     __end_of_add_to_hitlist:	
  4255                           
  4256                           	psect	text25
  4257  0656                     __ptext25:	
  4258 ;; *************** function _Setup *****************
  4259 ;; Defined at:
  4260 ;;		line 21 in file "user.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;		None
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;		None               void
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4274 ;;      Params:         0       0       0       0
  4275 ;;      Locals:         0       0       0       0
  4276 ;;      Temps:          1       0       0       0
  4277 ;;      Totals:         1       0       0       0
  4278 ;;Total ram usage:        1 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_main
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _Setup
  4290  0656                     _Setup:	
  4291                           
  4292                           ;user.c: 22: OSCCON = 0b01111010;
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4296  0656  307A               	movlw	122
  4297  0657  0021               	movlb	1	; select bank1
  4298  0658  0099               	movwf	25	;volatile
  4299                           
  4300                           ;user.c: 24: ANSELA = 0x00;
  4301  0659  0023               	movlb	3	; select bank3
  4302  065A  018C               	clrf	12	;volatile
  4303                           
  4304                           ;user.c: 25: TRISAbits.TRISA2 = 0;
  4305  065B  0021               	movlb	1	; select bank1
  4306  065C  110C               	bcf	12,2	;volatile
  4307                           
  4308                           ;user.c: 26: TRISAbits.TRISA0 = 0;
  4309  065D  100C               	bcf	12,0	;volatile
  4310                           
  4311                           ;user.c: 29: ANSELAbits.ANSA4 = 1;
  4312  065E  0023               	movlb	3	; select bank3
  4313  065F  160C               	bsf	12,4	;volatile
  4314                           
  4315                           ;user.c: 30: ADCON1 |= 0b00110000;
  4316  0660  3030               	movlw	48
  4317  0661  00F1               	movwf	??_Setup
  4318  0662  0871               	movf	??_Setup,w
  4319  0663  0021               	movlb	1	; select bank1
  4320  0664  049E               	iorwf	30,f	;volatile
  4321                           
  4322                           ;user.c: 33: SPBRGL = 103;
  4323  0665  3067               	movlw	103
  4324  0666  0023               	movlb	3	; select bank3
  4325  0667  009B               	movwf	27	;volatile
  4326                           
  4327                           ;user.c: 34: TXSTAbits.SYNC = 0;
  4328  0668  121E               	bcf	30,4	;volatile
  4329                           
  4330                           ;user.c: 35: RCSTAbits.SPEN = 1;
  4331  0669  179D               	bsf	29,7	;volatile
  4332                           
  4333                           ;user.c: 36: BAUDCONbits.SCKP = 1;
  4334  066A  161F               	bsf	31,4	;volatile
  4335                           
  4336                           ;user.c: 37: TXSTAbits.TXEN = 1;
  4337  066B  169E               	bsf	30,5	;volatile
  4338                           
  4339                           ;user.c: 40: RCSTAbits.CREN = 1;
  4340  066C  161D               	bsf	29,4	;volatile
  4341                           
  4342                           ;user.c: 43: INTCONbits.GIE = 1;
  4343  066D  178B               	bsf	11,7	;volatile
  4344                           
  4345                           ;user.c: 46: OPTION_REGbits.TMR0CS = 0;
  4346  066E  0021               	movlb	1	; select bank1
  4347  066F  1295               	bcf	21,5	;volatile
  4348                           
  4349                           ;user.c: 49: T1CONbits.T1CKPS=3;
  4350  0670  3030               	movlw	48
  4351  0671  0020               	movlb	0	; select bank0
  4352  0672  0498               	iorwf	24,f	;volatile
  4353  0673  0008               	return
  4354  0674                     __end_of_Setup:	
  4355                           
  4356                           	psect	text26
  4357  0489                     __ptext26:	
  4358 ;; *************** function _LoadFromFlash *****************
  4359 ;; Defined at:
  4360 ;;		line 29 in file "main.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4374 ;;      Params:         0       0       0       0
  4375 ;;      Locals:         0       0       0       0
  4376 ;;      Temps:          2       0       0       0
  4377 ;;      Totals:         2       0       0       0
  4378 ;;Total ram usage:        2 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    2
  4381 ;; This function calls:
  4382 ;;		_Load
  4383 ;; This function is called by:
  4384 ;;		_main
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _LoadFromFlash
  4390  0489                     _LoadFromFlash:	
  4391                           
  4392                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4396  0489  30D0               	movlw	208
  4397  048A  00F1               	movwf	?_Load
  4398  048B  3007               	movlw	7
  4399  048C  00F2               	movwf	?_Load+1
  4400  048D  305B               	movlw	_config& (0+255)
  4401  048E  00F7               	movwf	??_LoadFromFlash
  4402  048F  0877               	movf	??_LoadFromFlash,w
  4403  0490  00F3               	movwf	?_Load+2
  4404  0491  3008               	movlw	8
  4405  0492  00F8               	movwf	??_LoadFromFlash+1
  4406  0493  0878               	movf	??_LoadFromFlash+1,w
  4407  0494  00F4               	movwf	?_Load+3
  4408  0495  25CC               	fcall	_Load
  4409                           
  4410                           ;main.c: 31: if(config.id == 0x3FFF)
  4411  0496  303F               	movlw	63
  4412  0497  0020               	movlb	0	; select bank0
  4413  0498  065C               	xorwf	_config+1,w
  4414  0499  1D03               	skipz
  4415  049A  2C9D               	goto	u1315
  4416  049B  30FF               	movlw	255
  4417  049C  065B               	xorwf	_config,w
  4418  049D                     u1315:	
  4419  049D  1D03               	skipz
  4420  049E  2CBB               	goto	l1566
  4421                           
  4422                           ;main.c: 32: {
  4423                           ;main.c: 33: config.health = 16;
  4424  049F  3010               	movlw	16
  4425  04A0  00DF               	movwf	_config+4
  4426  04A1  3000               	movlw	0
  4427  04A2  00E0               	movwf	_config+5
  4428                           
  4429                           ;main.c: 34: config.id = 0x80;
  4430  04A3  3080               	movlw	128
  4431  04A4  00DB               	movwf	_config
  4432  04A5  3000               	movlw	0
  4433  04A6  00DC               	movwf	_config+1
  4434                           
  4435                           ;main.c: 35: config.power = 0;
  4436  04A7  01DD               	clrf	_config+2
  4437  04A8  01DE               	clrf	_config+3
  4438                           
  4439                           ;main.c: 36: config.respawn_timer = 10;
  4440  04A9  300A               	movlw	10
  4441  04AA  00E3               	movwf	_config+8
  4442  04AB  3000               	movlw	0
  4443  04AC  00E4               	movwf	_config+9
  4444                           
  4445                           ;main.c: 37: config.fire_threshold = 500;
  4446  04AD  30F4               	movlw	244
  4447  04AE  00E5               	movwf	_config+10
  4448  04AF  3001               	movlw	1
  4449  04B0  00E6               	movwf	_config+11
  4450                           
  4451                           ;main.c: 39: config.fire_holdoff = 0;
  4452  04B1  01E9               	clrf	_config+14
  4453  04B2  01EA               	clrf	_config+15
  4454                           
  4455                           ;main.c: 40: config.shield = 1;
  4456  04B3  3001               	movlw	1
  4457  04B4  00E1               	movwf	_config+6
  4458  04B5  3000               	movlw	0
  4459  04B6  00E2               	movwf	_config+7
  4460                           
  4461                           ;main.c: 41: config.fire_cheating = 2000;
  4462  04B7  30D0               	movlw	208
  4463  04B8  00E7               	movwf	_config+12
  4464  04B9  3007               	movlw	7
  4465  04BA  00E8               	movwf	_config+13
  4466  04BB                     l1566:	
  4467                           
  4468                           ;main.c: 44: }
  4469                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4470  04BB  30E0               	movlw	224
  4471  04BC  00F1               	movwf	?_Load
  4472  04BD  3007               	movlw	7
  4473  04BE  00F2               	movwf	?_Load+1
  4474  04BF  30A0               	movlw	_hitlist& (0+255)
  4475  04C0  00F7               	movwf	??_LoadFromFlash
  4476  04C1  0877               	movf	??_LoadFromFlash,w
  4477  04C2  00F3               	movwf	?_Load+2
  4478  04C3  3010               	movlw	16
  4479  04C4  00F8               	movwf	??_LoadFromFlash+1
  4480  04C5  0878               	movf	??_LoadFromFlash+1,w
  4481  04C6  00F4               	movwf	?_Load+3
  4482  04C7  25CC               	fcall	_Load
  4483  04C8  0008               	return
  4484  04C9                     __end_of_LoadFromFlash:	
  4485                           
  4486                           	psect	text27
  4487  05CC                     __ptext27:	
  4488 ;; *************** function _Load *****************
  4489 ;; Defined at:
  4490 ;;		line 173 in file "user.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  address         2    1[COMMON] unsigned int 
  4493 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4494 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  4495 ;;  data_length     1    4[COMMON] unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  i               1    6[COMMON] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;		None               void
  4500 ;; Registers used:
  4501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4507 ;;      Params:         4       0       0       0
  4508 ;;      Locals:         1       0       0       0
  4509 ;;      Temps:          1       0       0       0
  4510 ;;      Totals:         6       0       0       0
  4511 ;;Total ram usage:        6 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    1
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_LoadFromFlash
  4518 ;;		_control_transfer
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _Load
  4524  05CC                     _Load:	
  4525                           
  4526                           ;user.c: 174: PMCON1bits.CFGS = 0;
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4530  05CC  0023               	movlb	3	; select bank3
  4531  05CD  1315               	bcf	21,6	;volatile
  4532                           
  4533                           ;user.c: 175: PMADR = address;
  4534  05CE  0872               	movf	Load@address+1,w
  4535  05CF  0192               	clrf	18	;volatile
  4536  05D0  0792               	addwf	18,f	;volatile
  4537  05D1  0871               	movf	Load@address,w
  4538  05D2  0191               	clrf	17	;volatile
  4539  05D3  0791               	addwf	17,f	;volatile
  4540                           
  4541                           ;user.c: 176: for (uint8_t i=0; i<data_length; i++){
  4542  05D4  01F6               	clrf	Load@i
  4543  05D5                     l1582:	
  4544  05D5  0874               	movf	Load@data_length,w
  4545  05D6  0276               	subwf	Load@i,w
  4546  05D7  1803               	btfsc	3,0
  4547  05D8  0008               	return
  4548                           
  4549                           ;user.c: 177: PMCON1bits.RD = 1;
  4550  05D9  1415               	bsf	21,0	;volatile
  4551                           
  4552                           ;user.c: 178: _nop();
  4553  05DA  0000               	nop
  4554                           
  4555                           ;user.c: 179: _nop();
  4556  05DB  0000               	nop
  4557                           
  4558                           ;user.c: 180: *ptr++ = PMDAT;
  4559  05DC  0873               	movf	Load@ptr,w
  4560  05DD  0086               	movwf	6
  4561  05DE  0187               	clrf	7
  4562  05DF  0023               	movlb	3	; select bank3
  4563  05E0  0813               	movf	19,w	;volatile
  4564  05E1  3FC0               	movwi [0]fsr1
  4565  05E2  0814               	movf	20,w	;volatile
  4566  05E3  3FC1               	movwi [1]fsr1
  4567  05E4  3002               	movlw	2
  4568  05E5  00F5               	movwf	??_Load
  4569  05E6  0875               	movf	??_Load,w
  4570  05E7  07F3               	addwf	Load@ptr,f
  4571                           
  4572                           ;user.c: 181: PMADR ++;
  4573  05E8  3001               	movlw	1
  4574  05E9  0791               	addwf	17,f	;volatile
  4575  05EA  3000               	movlw	0
  4576  05EB  3D92               	addwfc	18,f	;volatile
  4577  05EC  3001               	movlw	1
  4578  05ED  00F5               	movwf	??_Load
  4579  05EE  0875               	movf	??_Load,w
  4580  05EF  07F6               	addwf	Load@i,f
  4581  05F0  2DD5               	goto	l1582
  4582  05F1                     __end_of_Load:	
  4583                           
  4584                           	psect	intentry
  4585  0004                     __pintentry:	
  4586 ;; *************** function _High_Priority_Interrupt *****************
  4587 ;; Defined at:
  4588 ;;		line 277 in file "user.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;		None               void
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4602 ;;      Params:         0       0       0       0
  4603 ;;      Locals:         0       0       0       0
  4604 ;;      Temps:          1       0       0       0
  4605 ;;      Totals:         1       0       0       0
  4606 ;;Total ram usage:        1 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		Interrupt level 1
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615  0004                     _High_Priority_Interrupt:	
  4616                           
  4617                           ;incstack = 0
  4618                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4619  0004  3180               	pagesel	$
  4620  0005  0020               	movlb	0	; select bank0
  4621  0006  087F               	movf	127,w
  4622  0007  00F0               	movwf	??_High_Priority_Interrupt
  4623                           
  4624                           ;user.c: 278: if(INTCONbits.TMR0IF)
  4625  0008  1D0B               	btfss	11,2	;volatile
  4626  0009  2812               	goto	i1l222
  4627  000A  0022               	banksel	280	;# 
  4628  000B  0818               	movf	24,w	;# 
  4629  000C  3A20               	xorlw	32	;# 
  4630  000D  0098               	movwf	24	;# 
  4631                           
  4632                           ;user.c: 285: TMR0 -= 50;
  4633  000E  3032               	movlw	50
  4634  000F  0020               	movlb	0	; select bank0
  4635  0010  0295               	subwf	21,f	;volatile
  4636                           
  4637                           ;user.c: 286: INTCONbits.TMR0IF = 0;
  4638  0011  110B               	bcf	11,2	;volatile
  4639  0012                     i1l222:	
  4640  0012  0870               	movf	??_High_Priority_Interrupt,w
  4641  0013  00FF               	movwf	127
  4642  0014  0009               	retfie
  4643  0015                     __end_of_High_Priority_Interrupt:	
  4644  007E                     btemp	set	126	;btemp
  4645  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     43      77
    BANK1            80      0      64
    BANK2            80      0       0

Pointer List with Targets:

    ?___aldiv	long  size(1) Largest target is 0

    ?_ADC_read	unsigned int  size(1) Largest target is 0

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    play_song@song	PTR unsigned int  size(1) Largest target is 32
		 -> fire_song(BANK1[32]), 

    cur_song	PTR unsigned int  size(1) Largest target is 32
		 -> NULL(NULL[0]), fire_song(BANK1[32]), 


Critical Paths under _main in COMMON

    _handle_music->_tone
    _handle_fire->_play_song
    _handle_serial->_hit_by
    _control_transfer->_Load
    _control_transfer->_Save
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _Buzz->_tone
    _tone->___aldiv
    _LoadFromFlash->_Load

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_music->_tone
    _handle_serial->_control_transfer
    _hit_by->_Buzz
    _Buzz->_tone
    _tone->___aldiv

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2659
                      _LoadFromFlash
                              _Setup
                      _handle_serial
                        _handle_fire
                       _handle_music
 ---------------------------------------------------------------------------------
 (1) _handle_music                                         2     2      0      44
                                              8 BANK0      2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0     155
                                              8 COMMON     4     4      0
                           _ADC_read
                       _green_led_on
                            _led_off
                          _play_song
                          _stop_song
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (2) _play_song                                            7     3      4      88
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _led_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0    2369
                                             40 BANK0      3     3      0
                             _hit_by
                   _control_transfer
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    1288
                                              7 COMMON     2     2      0
                                              0 BANK0     40    40      0
                               _Load
                               _Save
                    _GET_CHAR_HELPER
                     _SEND_DATA_BYTE
                           _SEND_SOF
                           _SEND_EOF
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0      88
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _Send_Byte                                            1     1      0      22
                                              1 COMMON     1     1      0
                    _Modulate_Serial
                 _Disable_Modulation
 ---------------------------------------------------------------------------------
 (3) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               3     3      0     948
                                             12 COMMON     1     1      0
                                             16 BANK0      2     2      0
                     _add_to_hitlist
                               _Save
                               _Buzz
                 _get_hitlist_length
 ---------------------------------------------------------------------------------
 (3) _get_hitlist_length                                   5     5      0     156
                                              1 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _Buzz                                                 8     4      4     412
                                              8 BANK0      8     4      4
                           _tone_off
                               _tone
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     300
                                              1 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _tone                                                 4     2      2      44
                                             10 COMMON     2     2      0
                                              6 BANK0      2     0      2
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4     157
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0      91
                                              7 COMMON     2     2      0
                               _Load
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4      91
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
   _Setup
   _handle_serial
     _hit_by
       _add_to_hitlist
       _Save
       _Buzz
         _tone_off
         _tone
           ___aldiv (ARG)
         ___aldiv
       _get_hitlist_length
     _control_transfer
       _Load
       _Save
       _GET_CHAR_HELPER
       _SEND_DATA_BYTE
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
       _SEND_SOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
       _SEND_EOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
   _handle_fire
     _ADC_read
     _green_led_on
     _led_off
     _play_song
     _stop_song
       _tone_off
     _Send_Byte
       _Modulate_Serial
       _Disable_Modulation
   _handle_music
     _stop_song
       _tone_off
     _tone
       ___aldiv (ARG)

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       6       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      9A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      A0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Aug 18 23:33:17 2014

     __size_of_get_hitlist_length 0038                       __CFG_CP$OFF 0000                                __i 004B  
                              __x 006B                                __y 006C                     _LoadFromFlash 0489  
                             l134 0681                               l174 06D2                               l168 0557  
                             l265 0695                               l426 031A                               l195 0462  
                             l198 0486                               l378 0308                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_LVP$OFF 0000                              l2112 01FA  
                            l2104 01E8                              l2032 014E                              l2210 02E5  
                            l2114 01FC                              l2212 02F3                              l2204 02C9  
                            l2206 02D7                       Load@address 0071                              l2240 033B  
                            l2232 032B                              l2216 02F8                              l2250 0369  
                            l2242 0349                              l2154 0253                              l1602 04D8  
                            l2254 0374                              l1704 043D                              l2176 0289  
                            l1632 03B0                              l2258 0382                              l2282 02EB  
                            l1642 03DB                              l1636 03C0                              l1582 05D5  
                            l1566 04BB                              l1646 03E4                              l1648 03E6  
                            l1674 05C8                              l1780 051D                              l1940 0082  
                            l1676 05C9                              l1588 0703                              l1766 056E  
                            l1790 053A                              l1774 0509                              l1698 0418  
                            l1786 0532                              l1874 06A4                              l1968 00BA  
                            u2005 0116                              u1315 049D                              u1405 03A1  
                            u1415 03A9                              u2145 018B                              u1435 03BE  
                            u1525 042F                              u2405 0269                              u1365 04E6  
                            u2095 0164                              u2345 0239                              u1385 04FD  
                            u1625 0688                              u2195 01B2                              u1715 0046  
                            u1395 0399                              u1565 055D                              u1485 0595  
                            u1725 005C                              u2535 033E                              u2295 0212  
                            u2607 067C                              u1665 061E                              u2617 06EB  
                            u2465 029F                              u1905 00D0                              u1825 0098  
                            u2555 034A                              u2627 06DD                              u2565 035E  
                            u2637 0629                              u2575 036A                              u2647 0630  
                            u1775 0074                              u2657 0563                              u1955 00F3  
            control_transfer@data 0020                              _TMR0 0015                              _TMR1 0016  
            control_transfer@page 0045              control_transfer@dptr 0043                              _Load 05CC  
                            _Buzz 053C                      __CFG_WRT$OFF 0000                              _Save 0442  
                            _main 0701                     Send_Byte@data 0071                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 06AE                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              start 0015  
                __end_of_ADC_read 0691                        Buzz@dur_ms 002A                 ??_GET_CHAR_HELPER 0071  
                   __CFG_MCLRE$ON 0000                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Buzz 0028                             ?_Save 0071                   __end_of___aldiv 038B  
                           ?_main 0070                             _ADRES 009B                     __CFG_WDTE$OFF 0000  
__size_of_High_Priority_Interrupt 0011                             ?_tone 0026                             i1l222 0012  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 06EE                  __end_of_SEND_SOF 06E4                             Load@i 0076  
                           _TXREG 019A                             Buzz@i 002E                             Save@i 0076  
                           _Setup 0656                   __end_of_led_off 0718                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             status 0003                             wtemp0 007E  
        __end_of_control_transfer 0309                   __initialization 0016                      __end_of_Load 05F1  
                    __end_of_Buzz 0570                      __end_of_Save 0489                      __end_of_main 0707  
                    __end_of_tone 06CB                            DACCON0 0118                            ??_Load 0075  
                          ??_Buzz 002C                            ??_Save 0075                            ??_main 007D  
                          ??_tone 007A              __end_of_handle_music 05CC                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071              __size_of_handle_fire 0063  
                          _ADCON1 009E                            _ANSELA 018C                            _PMADRL 0191  
                          _PMCON2 0196                            _OSCCON 0099                            _PWM3DC 0DB3  
                          _PWM3PH 0DB1                            _SPBRGL 019B                            _PWM3PR 0DB5  
                  __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077                         ??___aldiv 0079  
              __size_of_Send_Byte 000E                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0072  
                          _config 005B                            _hit_by 0570                   play_song@length 0071  
                 play_song@repeat 0074                         ??_led_off 0071        __end_of_Disable_Modulation 0715  
                     Save@address 0071                  _my_random_number 0058                         ?_ADC_read 0071  
                __end_of_tone_off 071B          __size_of_Modulate_Serial 0007           __end_of__initialization 002C  
         handle_serial@rx_counter 0059                         ?_SEND_EOF 0070                         ?_SEND_SOF 0070  
                  __pcstackCOMMON 0070                     __end_of_Setup 0674                      __pidataBANK1 0636  
         _High_Priority_Interrupt 0004                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0071                   _GET_CHAR_HELPER 0691                 __end_of_Send_Byte 06D9  
         __size_of_add_to_hitlist 0054                        __pbssBANK0 004B                        __pbssBANK1 00A0  
           __end_of_handle_serial 0504        __end_of_get_hitlist_length 053C                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 0701              __end_of_green_led_on 0711  
               _cur_song_duration 004D                        __pintentry 0004             __size_of_handle_music 002B  
                         ?_hit_by 0070                __size_of_play_song 0023                           Load@ptr 0073  
              __size_of_stop_song 0005                 ??_Modulate_Serial 0071                           Save@ptr 0073  
                    _handle_music 05A1                 ?_control_transfer 0070                ??_control_transfer 0077  
                 SEND_DATA_BYTE@b 0074         ??_High_Priority_Interrupt 0070                           ___aldiv 0309  
                       ?_tone_off 0070                   __size_of_hit_by 0031                           __ptext1 05A1  
                         __ptext2 038B                           __ptext3 0707                           __ptext4 05F1  
                         __ptext5 0715                           __ptext6 070C                           __ptext7 0674  
                         __ptext8 04C9                           __ptext9 002E                           _led_off 0715  
                       _T1CONbits 0018           __end_of_GET_CHAR_HELPER 06AE                           _hitlist 00A0  
                ___aldiv@dividend 0075                           clrloop0 06F6                 add_to_hitlist@gun 0075  
            end_of_initialization 002C                 __end_of_play_song 0614                           init_ram 06FB  
                         initloop 06FC                         _RCSTAbits 019D                  ___aldiv@quotient 0022  
                      ??_tone_off 0071                         _PORTAbits 000C                 __end_of_stop_song 070C  
                   ??_handle_fire 0078                  __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C  
                     _DACCON0bits 0118                    _add_to_hitlist 03EE                 __size_of_ADC_read 001D  
              _Disable_Modulation 0711                         _TXSTAbits 019E               control_transfer@cmd 0040  
           __size_of_green_led_on 0005               ?_Disable_Modulation 0070                handle_fire@counter 004F  
               __size_of_SEND_EOF 000A                 __size_of_SEND_SOF 000B             __end_of_LoadFromFlash 04C9  
                     _BAUDCONbits 019F                    __end_of_hit_by 05A1                GET_CHAR_HELPER@val 0072  
                   play_song@song 0077                  ?_GET_CHAR_HELPER 0070               start_initialization 0016  
            ??_Disable_Modulation 0071            __end_of_add_to_hitlist 0442                      _green_led_on 070C  
             __end_of_handle_fire 03EE                         _Send_Byte 06CB                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0056                       __pdataBANK1 00C0  
                        ??_hit_by 0030                _get_hitlist_length 0504                   _Modulate_Serial 06EE  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 0022  
                       __checksum 0053               ?_get_hitlist_length 0070                  handle_fire@timer 0051  
                 Save@data_length 0074                        ?_Send_Byte 0070              ??_get_hitlist_length 0071  
                        ?___aldiv 0071                    handle_serial@b 004A                 __size_of_tone_off 0003  
                       _fire_song 00C0            __size_of_handle_serial 003B                          ?_led_off 0070  
       __size_of_control_transfer 02DB                       _handle_fire 038B                          _ADC_read 0674  
                  __size_of_Setup 001E                   ___aldiv@divisor 0071                   ___aldiv@counter 0020  
                       clear_ram0 06F5                          _PIE1bits 0091                   Load@data_length 0074  
                       _play_song 05F1                          _PIR1bits 0011                          _SEND_EOF 06E4  
                        _SEND_SOF 06D9           __end_of_Modulate_Serial 06F5                        _ADCON0bits 009D  
             get_hitlist_length@i 0075                control_transfer@id 0042                        tone@period 0026  
                        Buzz@freq 0028               add_to_hitlist@gun16 0076                         _stop_song 0707  
                       hit_by@who 007C                       ??_Send_Byte 0071                     _handle_serial 04C9  
        ?_High_Priority_Interrupt 0070                        ?_play_song 0071                  __size_of___aldiv 0082  
                      _ANSELAbits 018C                  __size_of_led_off 0003                    _SEND_DATA_BYTE 0614  
                      ?_stop_song 0070                   _cur_song_length 0055     control_transfer@random_number 0041  
                        __ptext10 06E4                          __ptext11 06D9                          __ptext20 0309  
                        __ptext12 0614                          __ptext21 06AE                          __ptext13 06CB  
                        __ptext22 0718                          __ptext14 0711                          __ptext23 0442  
                        __ptext15 06EE                          __ptext24 03EE                          __ptext16 0691  
                        __ptext25 0656                          __ptext17 0570                          __ptext26 0489  
                        __ptext18 0504                          __ptext27 05CC                          __ptext19 053C  
                 _cur_song_repeat 0057                     __size_of_Load 0025                    ?_handle_serial 0070  
                   __size_of_Buzz 0034                          _cur_song 0054                     __size_of_Save 0047  
                   __size_of_main 0006                     __size_of_tone 001D                          _tone_off 0718  
               control_transfer@i 0044                 control_transfer@x 0047            play_song@note_duration 0072  
                ?_Modulate_Serial 0070                  ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 0636  
                _control_transfer 002E                        _INTCONbits 000B       __size_of_Disable_Modulation 0004  
                     _PWM3CONbits 0DBB                          intlevel1 0000          __size_of_GET_CHAR_HELPER 001D  
 __end_of_High_Priority_Interrupt 0015                      handle_fire@a 007A            __size_of_LoadFromFlash 0040  
                      _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070  
                     ??_play_song 0075                   ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070  
                    ___aldiv@sign 0021                       ??_stop_song 0071                   ??_handle_serial 0048  
              handle_serial@rx_id 005A                    ??_handle_music 0028  
