

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Aug 25 08:41:03 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0197                     	;# 
   100  0199                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019C                     	;# 
   105  019D                     	;# 
   106  019E                     	;# 
   107  019F                     	;# 
   108  020C                     	;# 
   109  028C                     	;# 
   110  030C                     	;# 
   111  038C                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0691                     	;# 
   116  0692                     	;# 
   117  0693                     	;# 
   118  0694                     	;# 
   119  0695                     	;# 
   120  0D8E                     	;# 
   121  0D8F                     	;# 
   122  0D90                     	;# 
   123  0D91                     	;# 
   124  0D91                     	;# 
   125  0D92                     	;# 
   126  0D93                     	;# 
   127  0D93                     	;# 
   128  0D94                     	;# 
   129  0D95                     	;# 
   130  0D95                     	;# 
   131  0D96                     	;# 
   132  0D97                     	;# 
   133  0D97                     	;# 
   134  0D98                     	;# 
   135  0D99                     	;# 
   136  0D99                     	;# 
   137  0D9A                     	;# 
   138  0D9B                     	;# 
   139  0D9C                     	;# 
   140  0D9C                     	;# 
   141  0D9D                     	;# 
   142  0D9D                     	;# 
   143  0D9E                     	;# 
   144  0D9F                     	;# 
   145  0DA0                     	;# 
   146  0DA1                     	;# 
   147  0DA1                     	;# 
   148  0DA2                     	;# 
   149  0DA3                     	;# 
   150  0DA3                     	;# 
   151  0DA4                     	;# 
   152  0DA5                     	;# 
   153  0DA5                     	;# 
   154  0DA6                     	;# 
   155  0DA7                     	;# 
   156  0DA7                     	;# 
   157  0DA8                     	;# 
   158  0DA9                     	;# 
   159  0DA9                     	;# 
   160  0DAA                     	;# 
   161  0DAB                     	;# 
   162  0DAC                     	;# 
   163  0DAC                     	;# 
   164  0DAD                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBC                     	;# 
   187  0DBD                     	;# 
   188  0DBD                     	;# 
   189  0DBE                     	;# 
   190  0DBF                     	;# 
   191  0DC0                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  028C                     	;# 
   277  030C                     	;# 
   278  038C                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0691                     	;# 
   283  0692                     	;# 
   284  0693                     	;# 
   285  0694                     	;# 
   286  0695                     	;# 
   287  0D8E                     	;# 
   288  0D8F                     	;# 
   289  0D90                     	;# 
   290  0D91                     	;# 
   291  0D91                     	;# 
   292  0D92                     	;# 
   293  0D93                     	;# 
   294  0D93                     	;# 
   295  0D94                     	;# 
   296  0D95                     	;# 
   297  0D95                     	;# 
   298  0D96                     	;# 
   299  0D97                     	;# 
   300  0D97                     	;# 
   301  0D98                     	;# 
   302  0D99                     	;# 
   303  0D99                     	;# 
   304  0D9A                     	;# 
   305  0D9B                     	;# 
   306  0D9C                     	;# 
   307  0D9C                     	;# 
   308  0D9D                     	;# 
   309  0D9D                     	;# 
   310  0D9E                     	;# 
   311  0D9F                     	;# 
   312  0DA0                     	;# 
   313  0DA1                     	;# 
   314  0DA1                     	;# 
   315  0DA2                     	;# 
   316  0DA3                     	;# 
   317  0DA3                     	;# 
   318  0DA4                     	;# 
   319  0DA5                     	;# 
   320  0DA5                     	;# 
   321  0DA6                     	;# 
   322  0DA7                     	;# 
   323  0DA7                     	;# 
   324  0DA8                     	;# 
   325  0DA9                     	;# 
   326  0DA9                     	;# 
   327  0DAA                     	;# 
   328  0DAB                     	;# 
   329  0DAC                     	;# 
   330  0DAC                     	;# 
   331  0DAD                     	;# 
   332  0DAD                     	;# 
   333  0DAE                     	;# 
   334  0DAF                     	;# 
   335  0DB0                     	;# 
   336  0DB1                     	;# 
   337  0DB1                     	;# 
   338  0DB2                     	;# 
   339  0DB3                     	;# 
   340  0DB3                     	;# 
   341  0DB4                     	;# 
   342  0DB5                     	;# 
   343  0DB5                     	;# 
   344  0DB6                     	;# 
   345  0DB7                     	;# 
   346  0DB7                     	;# 
   347  0DB8                     	;# 
   348  0DB9                     	;# 
   349  0DB9                     	;# 
   350  0DBA                     	;# 
   351  0DBB                     	;# 
   352  0DBC                     	;# 
   353  0DBC                     	;# 
   354  0DBD                     	;# 
   355  0DBD                     	;# 
   356  0DBE                     	;# 
   357  0DBF                     	;# 
   358  0DC0                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  028C                     	;# 
   444  030C                     	;# 
   445  038C                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  0695                     	;# 
   454  0D8E                     	;# 
   455  0D8F                     	;# 
   456  0D90                     	;# 
   457  0D91                     	;# 
   458  0D91                     	;# 
   459  0D92                     	;# 
   460  0D93                     	;# 
   461  0D93                     	;# 
   462  0D94                     	;# 
   463  0D95                     	;# 
   464  0D95                     	;# 
   465  0D96                     	;# 
   466  0D97                     	;# 
   467  0D97                     	;# 
   468  0D98                     	;# 
   469  0D99                     	;# 
   470  0D99                     	;# 
   471  0D9A                     	;# 
   472  0D9B                     	;# 
   473  0D9C                     	;# 
   474  0D9C                     	;# 
   475  0D9D                     	;# 
   476  0D9D                     	;# 
   477  0D9E                     	;# 
   478  0D9F                     	;# 
   479  0DA0                     	;# 
   480  0DA1                     	;# 
   481  0DA1                     	;# 
   482  0DA2                     	;# 
   483  0DA3                     	;# 
   484  0DA3                     	;# 
   485  0DA4                     	;# 
   486  0DA5                     	;# 
   487  0DA5                     	;# 
   488  0DA6                     	;# 
   489  0DA7                     	;# 
   490  0DA7                     	;# 
   491  0DA8                     	;# 
   492  0DA9                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAC                     	;# 
   498  0DAD                     	;# 
   499  0DAD                     	;# 
   500  0DAE                     	;# 
   501  0DAF                     	;# 
   502  0DB0                     	;# 
   503  0DB1                     	;# 
   504  0DB1                     	;# 
   505  0DB2                     	;# 
   506  0DB3                     	;# 
   507  0DB3                     	;# 
   508  0DB4                     	;# 
   509  0DB5                     	;# 
   510  0DB5                     	;# 
   511  0DB6                     	;# 
   512  0DB7                     	;# 
   513  0DB7                     	;# 
   514  0DB8                     	;# 
   515  0DB9                     	;# 
   516  0DB9                     	;# 
   517  0DBA                     	;# 
   518  0DBB                     	;# 
   519  0DBC                     	;# 
   520  0DBC                     	;# 
   521  0DBD                     	;# 
   522  0DBD                     	;# 
   523  0DBE                     	;# 
   524  0DBF                     	;# 
   525  0DC0                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540                           
   541                           	psect	stringtext
   542  0600                     __pstringtext:	
   543  0600                     _death_song:	
   544  0600  3462               	retlw	98
   545  0601  34F0               	retlw	240
   546  0602  3400               	retlw	0
   547  0603  34FA               	retlw	250
   548  0604  3400               	retlw	0
   549  0605  3400               	retlw	0
   550  0606  3400               	retlw	0
   551  0607  3400               	retlw	0
   552  0608  3400               	retlw	0
   553  0609  3400               	retlw	0
   554  060A  3400               	retlw	0
   555  060B  3400               	retlw	0
   556  060C  346F               	retlw	111
   557  060D  3477               	retlw	119
   558  060E  347A               	retlw	122
   559  060F  3459               	retlw	89
   560  0610  3400               	retlw	0
   561  0611  3400               	retlw	0
   562  0612  34CC               	retlw	204
   563  0613  345E               	retlw	94
   564  0614  347A               	retlw	122
   565  0615  3459               	retlw	89
   566  0616  34CC               	retlw	204
   567  0617  345E               	retlw	94
   568  0618  346B               	retlw	107
   569  0619  346A               	retlw	106
   570  061A  3400               	retlw	0
   571  061B  3400               	retlw	0
   572  061C  346F               	retlw	111
   573  061D  3477               	retlw	119
   574  061E  3470               	retlw	112
   575  061F  349F               	retlw	159
   576  0620  3400               	retlw	0
   577  0621  3400               	retlw	0
   578  0622  3470               	retlw	112
   579  0623  349F               	retlw	159
   580  0624  34EA               	retlw	234
   581  0625  34EE               	retlw	238
   582  0626                     __end_of_death_song:	
   583  0626                     _fire_song:	
   584  0626  34A0               	retlw	160
   585  0627  340F               	retlw	15
   586  0628  34DB               	retlw	219
   587  0629  3411               	retlw	17
   588  062A  34D5               	retlw	213
   589  062B  3414               	retlw	20
   590  062C  3400               	retlw	0
   591  062D  3419               	retlw	25
   592  062E  3440               	retlw	64
   593  062F  341F               	retlw	31
   594  0630  34AA               	retlw	170
   595  0631  3429               	retlw	41
   596  0632  3480               	retlw	128
   597  0633  343E               	retlw	62
   598  0634  3400               	retlw	0
   599  0635  347D               	retlw	125
   600  0636                     __end_of_fire_song:	
   601  0636                     _one_up:	
   602  0636  34CC               	retlw	204
   603  0637  345E               	retlw	94
   604  0638  34B8               	retlw	184
   605  0639  344F               	retlw	79
   606  063A  3467               	retlw	103
   607  063B  342F               	retlw	47
   608  063C  34B9               	retlw	185
   609  063D  343B               	retlw	59
   610  063E  3434               	retlw	52
   611  063F  3435               	retlw	53
   612  0640  34DC               	retlw	220
   613  0641  3427               	retlw	39
   614  0642                     __end_of_one_up:	
   615  0642                     _dead_song:	
   616  0642  346F               	retlw	111
   617  0643  3477               	retlw	119
   618  0644  3470               	retlw	112
   619  0645  349F               	retlw	159
   620  0646  34EA               	retlw	234
   621  0647  34EE               	retlw	238
   622  0648                     __end_of_dead_song:	
   623  0016                     _TMR1	set	22
   624  000B                     _INTCONbits	set	11
   625  0011                     _PIR1bits	set	17
   626  000C                     _PORTAbits	set	12
   627  0018                     _T1CONbits	set	24
   628  001C                     _T2CONbits	set	28
   629  0015                     _TMR0	set	21
   630  001A                     _TMR2	set	26
   631  009B                     _ADRES	set	155
   632  009D                     _ADCON0bits	set	157
   633  009E                     _ADCON1	set	158
   634  0095                     _OPTION_REGbits	set	149
   635  0099                     _OSCCON	set	153
   636  008C                     _TRISAbits	set	140
   637  0118                     _DACCON0bits	set	280
   638  0191                     _PMADR	set	401
   639  0193                     _PMDAT	set	403
   640  018C                     _ANSELA	set	396
   641  018C                     _ANSELAbits	set	396
   642  019F                     _BAUDCONbits	set	415
   643  0191                     _PMADRL	set	401
   644  0195                     _PMCON1bits	set	405
   645  0196                     _PMCON2	set	406
   646  0199                     _RCREG	set	409
   647  019D                     _RCSTAbits	set	413
   648  019B                     _SPBRGL	set	411
   649  019A                     _TXREG	set	410
   650  019E                     _TXSTAbits	set	414
   651  0DB3                     _PWM3DC	set	3507
   652  0DB1                     _PWM3PH	set	3505
   653  0DB5                     _PWM3PR	set	3509
   654  0DBB                     _PWM3CONbits	set	3515
   655  0DBF                     _PWM3LDCONbits	set	3519
   656                           
   657                           ; #config settings
   658  0000                     
   659                           	psect	cinit
   660  0016                     start_initialization:	
   661  0016                     __initialization:	
   662                           
   663                           ; Clear objects allocated to COMMON
   664  0016  01FC               	clrf	__pbssCOMMON& (0+127)
   665                           
   666                           ; Clear objects allocated to BANK0
   667  0017  305C               	movlw	low __pbssBANK0
   668  0018  0084               	movwf	4
   669  0019  3000               	movlw	high __pbssBANK0
   670  001A  0085               	movwf	5
   671  001B  3012               	movlw	18
   672  001C  25E4               	fcall	clear_ram0
   673                           
   674                           ; Clear objects allocated to BANK1
   675  001D  30A0               	movlw	low __pbssBANK1
   676  001E  0084               	movwf	4
   677  001F  3000               	movlw	high __pbssBANK1
   678  0020  0085               	movwf	5
   679  0021  3032               	movlw	50
   680  0022  25E4               	fcall	clear_ram0
   681  0023                     end_of_initialization:	
   682                           ;End of C runtime variable initialization code
   683                           
   684  0023                     __end_of__initialization:	
   685  0023  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   686  0024  0020               	movlb	0
   687  0025  2DD0               	ljmp	_main	;jump to C main() function
   688                           
   689                           	psect	bssCOMMON
   690  007C                     __pbssCOMMON:	
   691  007C                     __x:	
   692  007C                     	ds	1
   693                           
   694                           	psect	bssBANK0
   695  005C                     __pbssBANK0:	
   696  005C                     __i:	
   697  005C                     	ds	2
   698  005E                     _cur_song:	
   699  005E                     	ds	2
   700  0060                     _cur_song_duration:	
   701  0060                     	ds	2
   702  0062                     handle_fire@counter:	
   703  0062                     	ds	2
   704  0064                     handle_fire@timer:	
   705  0064                     	ds	2
   706  0066                     __checksum:	
   707  0066                     	ds	1
   708  0067                     _cur_song_length:	
   709  0067                     	ds	1
   710  0068                     _cur_song_ptr:	
   711  0068                     	ds	1
   712  0069                     _cur_song_repeat:	
   713  0069                     	ds	1
   714  006A                     _my_random_number:	
   715  006A                     	ds	1
   716  006B                     handle_serial@rx_counter:	
   717  006B                     	ds	1
   718  006C                     handle_serial@rx_id:	
   719  006C                     	ds	1
   720  006D                     __y:	
   721  006D                     	ds	1
   722                           
   723                           	psect	bssBANK1
   724  00A0                     __pbssBANK1:	
   725  00A0                     _hitlist:	
   726  00A0                     	ds	32
   727  00C0                     _config:	
   728  00C0                     	ds	18
   729                           
   730                           	psect	clrtext
   731  05E4                     clear_ram0:	
   732                           ;	Called with FSR0 containing the base address, and
   733                           ;	WREG with the size to clear
   734                           
   735  05E4  0064               	clrwdt	;clear the watchdog before getting into this loop
   736  05E5                     clrloop0:	
   737  05E5  0180               	clrf	0	;clear RAM location pointed to by FSR
   738  05E6  3101               	addfsr 0,1
   739  05E7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   740  05E8  2DE5               	goto	clrloop0	;have we reached the end yet?
   741  05E9  3400               	retlw	0	;all done for this memory range, return
   742                           
   743                           	psect	cstackCOMMON
   744  0070                     __pcstackCOMMON:	
   745  0070                     ?_Setup:	
   746  0070                     ?_super_dead_mode:	
   747                           ; 0 bytes @ 0x0
   748                           
   749  0070                     ?_handle_music:	
   750                           ; 0 bytes @ 0x0
   751                           
   752  0070                     ?_delay_1_ms:	
   753                           ; 0 bytes @ 0x0
   754                           
   755  0070                     ?_cheat:	
   756                           ; 0 bytes @ 0x0
   757                           
   758  0070                     ?_control_transfer:	
   759                           ; 0 bytes @ 0x0
   760                           
   761  0070                     ?_LoadFromFlash:	
   762                           ; 0 bytes @ 0x0
   763                           
   764  0070                     ?_main:	
   765                           ; 0 bytes @ 0x0
   766                           
   767  0070                     ?_red_led_on:	
   768                           ; 0 bytes @ 0x0
   769                           
   770  0070                     ?_green_led_on:	
   771                           ; 0 bytes @ 0x0
   772                           
   773  0070                     ?_stop_song:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0070                     ?_Send_Byte:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0070                     ?_High_Priority_Interrupt:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0070                     ??_High_Priority_Interrupt:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0070                     ?_add_to_hitlist:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0070                     ?_hit_by:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0070                     ?_SEND_DATA_BYTE:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0070                     ?_SEND_SOF:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0070                     ?_SEND_EOF:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0070                     ?_handle_serial:	
   801                           ; 0 bytes @ 0x0
   802                           
   803  0070                     ?_handle_fire:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_GET_CHAR_HELPER:	
   807                           ; 1 bytes @ 0x0
   808                           
   809                           
   810                           ; 1 bytes @ 0x0
   811  0070                     	ds	1
   812  0071                     ?_Load:	
   813  0071                     ?_Save:	
   814                           ; 0 bytes @ 0x1
   815                           
   816  0071                     ??_delay_1_ms:	
   817                           ; 0 bytes @ 0x1
   818                           
   819  0071                     ?_tone:	
   820                           ; 0 bytes @ 0x1
   821                           
   822  0071                     ??_red_led_on:	
   823                           ; 0 bytes @ 0x1
   824                           
   825  0071                     ??_green_led_on:	
   826                           ; 0 bytes @ 0x1
   827                           
   828  0071                     ?_play_song:	
   829                           ; 0 bytes @ 0x1
   830                           
   831  0071                     ??_stop_song:	
   832                           ; 0 bytes @ 0x1
   833                           
   834  0071                     ??_add_to_hitlist:	
   835                           ; 0 bytes @ 0x1
   836                           
   837  0071                     ??_GET_CHAR_HELPER:	
   838                           ; 0 bytes @ 0x1
   839                           
   840  0071                     ?_ADC_read:	
   841                           ; 0 bytes @ 0x1
   842                           
   843  0071                     play_song@song:	
   844                           ; 2 bytes @ 0x1
   845                           
   846  0071                     tone@period:	
   847                           ; 2 bytes @ 0x1
   848                           
   849  0071                     Load@address:	
   850                           ; 2 bytes @ 0x1
   851                           
   852  0071                     Save@address:	
   853                           ; 2 bytes @ 0x1
   854                           
   855  0071                     delay_1_ms@i:	
   856                           ; 2 bytes @ 0x1
   857                           
   858                           
   859                           ; 2 bytes @ 0x1
   860  0071                     	ds	1
   861  0072                     GET_CHAR_HELPER@val:	
   862                           
   863                           ; 1 bytes @ 0x2
   864  0072                     	ds	1
   865  0073                     ??_Setup:	
   866  0073                     ??_tone:	
   867                           ; 0 bytes @ 0x3
   868                           
   869  0073                     ??_ADC_read:	
   870                           ; 0 bytes @ 0x3
   871                           
   872  0073                     play_song@length:	
   873                           ; 0 bytes @ 0x3
   874                           
   875  0073                     Load@ptr:	
   876                           ; 1 bytes @ 0x3
   877                           
   878  0073                     Save@ptr:	
   879                           ; 1 bytes @ 0x3
   880                           
   881                           
   882                           ; 1 bytes @ 0x3
   883  0073                     	ds	1
   884  0074                     Load@data_length:	
   885  0074                     Save@data_length:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0074                     play_song@note_duration:	
   889                           ; 1 bytes @ 0x4
   890                           
   891                           
   892                           ; 2 bytes @ 0x4
   893  0074                     	ds	1
   894  0075                     ??_Load:	
   895  0075                     ??_Save:	
   896                           ; 0 bytes @ 0x5
   897                           
   898  0075                     ??_handle_music:	
   899                           ; 0 bytes @ 0x5
   900                           
   901  0075                     ??_cheat:	
   902                           ; 0 bytes @ 0x5
   903                           
   904  0075                     add_to_hitlist@gun:	
   905                           ; 0 bytes @ 0x5
   906                           
   907                           
   908                           ; 1 bytes @ 0x5
   909  0075                     	ds	1
   910  0076                     play_song@repeat:	
   911  0076                     Load@i:	
   912                           ; 1 bytes @ 0x6
   913                           
   914  0076                     Save@i:	
   915                           ; 1 bytes @ 0x6
   916                           
   917  0076                     cheat@i:	
   918                           ; 1 bytes @ 0x6
   919                           
   920  0076                     add_to_hitlist@gun16:	
   921                           ; 1 bytes @ 0x6
   922                           
   923                           
   924                           ; 2 bytes @ 0x6
   925  0076                     	ds	1
   926  0077                     ??_LoadFromFlash:	
   927  0077                     ??_play_song:	
   928                           ; 0 bytes @ 0x7
   929                           
   930  0077                     cheat@i_724:	
   931                           ; 0 bytes @ 0x7
   932                           
   933                           
   934                           ; 1 bytes @ 0x7
   935  0077                     	ds	1
   936  0078                     ??_Send_Byte:	
   937  0078                     add_to_hitlist@i:	
   938                           ; 0 bytes @ 0x8
   939                           
   940                           
   941                           ; 1 bytes @ 0x8
   942  0078                     	ds	1
   943  0079                     Send_Byte@data:	
   944                           
   945                           ; 1 bytes @ 0x9
   946  0079                     	ds	1
   947  007A                     Send_Byte@i:	
   948                           
   949                           ; 2 bytes @ 0xA
   950  007A                     	ds	2
   951  007C                     ??_main:	
   952  007C                     ??_SEND_SOF:	
   953                           ; 0 bytes @ 0xC
   954                           
   955  007C                     ??_SEND_EOF:	
   956                           ; 0 bytes @ 0xC
   957                           
   958                           
   959                           	psect	cstackBANK0
   960  0020                     __pcstackBANK0:	
   961                           ; 0 bytes @ 0xC
   962                           
   963  0020                     ??_handle_fire:	
   964  0020                     ??_SEND_DATA_BYTE:	
   965                           ; 0 bytes @ 0x0
   966                           
   967                           
   968                           ; 0 bytes @ 0x0
   969  0020                     	ds	2
   970  0022                     SEND_DATA_BYTE@b:	
   971  0022                     handle_fire@a:	
   972                           ; 1 bytes @ 0x2
   973                           
   974                           
   975                           ; 2 bytes @ 0x2
   976  0022                     	ds	1
   977  0023                     ??_control_transfer:	
   978                           
   979                           ; 0 bytes @ 0x3
   980  0023                     	ds	2
   981  0025                     control_transfer@data:	
   982                           
   983                           ; 32 bytes @ 0x5
   984  0025                     	ds	32
   985  0045                     control_transfer@cmd:	
   986                           
   987                           ; 1 bytes @ 0x25
   988  0045                     	ds	1
   989  0046                     control_transfer@random_number:	
   990                           
   991                           ; 1 bytes @ 0x26
   992  0046                     	ds	1
   993  0047                     control_transfer@id:	
   994                           
   995                           ; 1 bytes @ 0x27
   996  0047                     	ds	1
   997  0048                     control_transfer@dptr:	
   998                           
   999                           ; 1 bytes @ 0x28
  1000  0048                     	ds	1
  1001  0049                     control_transfer@i:	
  1002                           
  1003                           ; 1 bytes @ 0x29
  1004  0049                     	ds	1
  1005  004A                     control_transfer@page:	
  1006                           
  1007                           ; 2 bytes @ 0x2A
  1008  004A                     	ds	2
  1009  004C                     control_transfer@x:	
  1010                           
  1011                           ; 1 bytes @ 0x2C
  1012  004C                     	ds	1
  1013  004D                     ??_super_dead_mode:	
  1014                           
  1015                           ; 0 bytes @ 0x2D
  1016  004D                     	ds	2
  1017  004F                     super_dead_mode@b:	
  1018                           
  1019                           ; 1 bytes @ 0x2F
  1020  004F                     	ds	1
  1021  0050                     super_dead_mode@counter:	
  1022                           
  1023                           ; 2 bytes @ 0x30
  1024  0050                     	ds	2
  1025  0052                     ??_hit_by:	
  1026                           
  1027                           ; 0 bytes @ 0x32
  1028  0052                     	ds	2
  1029  0054                     hit_by@who:	
  1030                           
  1031                           ; 1 bytes @ 0x34
  1032  0054                     	ds	1
  1033  0055                     hit_by@respawn_timer:	
  1034                           
  1035                           ; 2 bytes @ 0x35
  1036  0055                     	ds	2
  1037  0057                     hit_by@i:	
  1038                           
  1039                           ; 1 bytes @ 0x37
  1040  0057                     	ds	1
  1041  0058                     hit_by@i_747:	
  1042                           
  1043                           ; 1 bytes @ 0x38
  1044  0058                     	ds	1
  1045  0059                     ??_handle_serial:	
  1046                           
  1047                           ; 0 bytes @ 0x39
  1048  0059                     	ds	2
  1049  005B                     handle_serial@b:	
  1050                           
  1051                           ; 1 bytes @ 0x3B
  1052  005B                     	ds	1
  1053                           
  1054                           	psect	maintext
  1055  05D0                     __pmaintext:	
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 48 in file "main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 17F/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1075 ;;      Params:         0       0       0       0
  1076 ;;      Locals:         0       0       0       0
  1077 ;;      Temps:          0       0       0       0
  1078 ;;      Totals:         0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:   10
  1081 ;; This function calls:
  1082 ;;		_LoadFromFlash
  1083 ;;		_Setup
  1084 ;;		_handle_fire
  1085 ;;		_handle_music
  1086 ;;		_handle_serial
  1087 ;;		_super_dead_mode
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _main
  1095  05D0                     _main:	
  1096                           
  1097                           ;main.c: 50: Setup();
  1098                           
  1099                           ;incstack = 0
  1100                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1101  05D0  26FA               	fcall	_Setup
  1102                           
  1103                           ;main.c: 51: LoadFromFlash();
  1104  05D1  2451               	fcall	_LoadFromFlash
  1105                           
  1106                           ;main.c: 52: if(!config.health) {
  1107  05D2  0021               	movlb	1	; select bank1
  1108  05D3  0845               	movf	((_config+1)^(0+128)+4),w
  1109  05D4  0444               	iorwf	(_config^(0+128)+4),w
  1110  05D5  1D03               	skipz
  1111  05D6  2DD8               	goto	l26
  1112                           
  1113                           ;main.c: 53: super_dead_mode();
  1114  05D7  24B1               	fcall	_super_dead_mode
  1115  05D8                     l26:	
  1116                           ;main.c: 54: }
  1117                           ;main.c: 56: while(1)
  1118                           
  1119                           
  1120                           ;main.c: 57: {
  1121                           ;main.c: 58: handle_serial();
  1122  05D8  255C               	fcall	_handle_serial
  1123                           
  1124                           ;main.c: 59: handle_fire();
  1125  05D9  2346               	fcall	_handle_fire
  1126                           
  1127                           ;main.c: 60: handle_music();
  1128  05DA  26C9               	fcall	_handle_music
  1129  05DB  2DD8               	goto	l26
  1130  05DC                     __end_of_main:	
  1131                           
  1132                           	psect	text1
  1133  055C                     __ptext1:	
  1134 ;; *************** function _handle_serial *****************
  1135 ;; Defined at:
  1136 ;;		line 133 in file "protocol.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;		None
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  b               1   59[BANK0 ] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      unsigned char 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1150 ;;      Params:         0       0       0       0
  1151 ;;      Locals:         0       1       0       0
  1152 ;;      Temps:          0       2       0       0
  1153 ;;      Totals:         0       3       0       0
  1154 ;;Total ram usage:        3 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    9
  1157 ;; This function calls:
  1158 ;;		_control_transfer
  1159 ;;		_hit_by
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _handle_serial
  1167  055C                     _handle_serial:	
  1168                           
  1169                           ;protocol.c: 135: static uint8_t rx_id=0;
  1170                           ;protocol.c: 136: static uint8_t rx_counter=0;
  1171                           ;protocol.c: 137: uint8_t b;
  1172                           ;protocol.c: 139: if(!(PIR1bits.RCIF)) return 0;
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1176  055C  0020               	movlb	0	; select bank0
  1177  055D  1E91               	btfss	17,5	;volatile
  1178  055E  0008               	return
  1179                           
  1180                           ;protocol.c: 140: b=(RCREG^0b10101010);
  1181                           
  1182                           ;	Return value of _handle_serial is never used
  1183  055F  0023               	movlb	3	; select bank3
  1184  0560  0819               	movf	25,w	;volatile
  1185  0561  3AAA               	xorlw	170
  1186  0562  0020               	movlb	0	; select bank0
  1187  0563  00D9               	movwf	??_handle_serial
  1188  0564  0859               	movf	??_handle_serial,w
  1189  0565  00DB               	movwf	handle_serial@b
  1190                           
  1191                           ;protocol.c: 141: if(b == 0x10) {
  1192  0566  085B               	movf	handle_serial@b,w
  1193  0567  3A10               	xorlw	16
  1194  0568  1D03               	skipz
  1195  0569  2D6C               	goto	l3175
  1196                           
  1197                           ;protocol.c: 142: control_transfer();
  1198  056A  2026               	fcall	_control_transfer
  1199                           
  1200                           ;protocol.c: 143: }
  1201  056B  0008               	return
  1202  056C                     l3175:	
  1203                           
  1204                           ;protocol.c: 145: else if((b > 0x80) && (b != config.id) && (config.id != 0x80)) {
  1205  056C  3081               	movlw	129
  1206  056D  0020               	movlb	0	; select bank0
  1207  056E  025B               	subwf	handle_serial@b,w
  1208  056F  1C03               	skipc
  1209  0570  0008               	return
  1210  0571  085B               	movf	handle_serial@b,w
  1211  0572  00D9               	movwf	??_handle_serial
  1212  0573  01DA               	clrf	??_handle_serial+1
  1213  0574  0021               	movlb	1	; select bank1
  1214  0575  0841               	movf	(_config+1)^(0+128),w
  1215  0576  0020               	movlb	0	; select bank0
  1216  0577  065A               	xorwf	??_handle_serial+1,w
  1217  0578  1D03               	skipz
  1218  0579  2D7E               	goto	u4225
  1219  057A  0021               	movlb	1	; select bank1
  1220  057B  0840               	movf	_config^(0+128),w
  1221  057C  0020               	movlb	0	; select bank0
  1222  057D  0659               	xorwf	??_handle_serial,w
  1223  057E                     u4225:	
  1224  057E  1903               	skipnz
  1225  057F  0008               	return
  1226  0580  3080               	movlw	128
  1227  0581  0021               	movlb	1	; select bank1
  1228  0582  0640               	xorwf	_config^(0+128),w
  1229  0583  0441               	iorwf	(_config+1)^(0+128),w
  1230  0584  1903               	skipnz
  1231  0585  0008               	return
  1232                           
  1233                           ;protocol.c: 146: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1234  0586  0020               	movlb	0	; select bank0
  1235  0587  085B               	movf	handle_serial@b,w
  1236  0588  066C               	xorwf	handle_serial@rx_id,w
  1237  0589  1903               	btfsc	3,2
  1238  058A  1891               	btfsc	17,1	;volatile
  1239  058B  01EB               	clrf	handle_serial@rx_counter
  1240                           
  1241                           ;protocol.c: 147: TMR2 = 0;
  1242  058C  019A               	clrf	26	;volatile
  1243                           
  1244                           ;protocol.c: 148: PIR1bits.TMR2IF = 0;
  1245  058D  1091               	bcf	17,1	;volatile
  1246                           
  1247                           ;protocol.c: 149: rx_id = b;
  1248  058E  085B               	movf	handle_serial@b,w
  1249  058F  00D9               	movwf	??_handle_serial
  1250  0590  0859               	movf	??_handle_serial,w
  1251  0591  00EC               	movwf	handle_serial@rx_id
  1252                           
  1253                           ;protocol.c: 150: rx_counter++;
  1254  0592  3001               	movlw	1
  1255  0593  00D9               	movwf	??_handle_serial
  1256  0594  0859               	movf	??_handle_serial,w
  1257  0595  07EB               	addwf	handle_serial@rx_counter,f
  1258                           
  1259                           ;protocol.c: 151: if(rx_counter > config.shield) {
  1260  0596  086B               	movf	handle_serial@rx_counter,w
  1261  0597  00D9               	movwf	??_handle_serial
  1262  0598  01DA               	clrf	??_handle_serial+1
  1263  0599  085A               	movf	??_handle_serial+1,w
  1264  059A  0021               	movlb	1	; select bank1
  1265  059B  0247               	subwf	((_config+1)^(0+128)+6),w
  1266  059C  1D03               	skipz
  1267  059D  2DA2               	goto	u4265
  1268  059E  0020               	movlb	0	; select bank0
  1269  059F  0859               	movf	??_handle_serial,w
  1270  05A0  0021               	movlb	1	; select bank1
  1271  05A1  0246               	subwf	(_config^(0+128)+6),w
  1272  05A2                     u4265:	
  1273  05A2  1803               	skipnc
  1274  05A3  0008               	return
  1275                           
  1276                           ;protocol.c: 152: RCSTAbits.CREN = 0;
  1277  05A4  0023               	movlb	3	; select bank3
  1278  05A5  121D               	bcf	29,4	;volatile
  1279                           
  1280                           ;protocol.c: 153: hit_by(b);
  1281  05A6  0020               	movlb	0	; select bank0
  1282  05A7  085B               	movf	handle_serial@b,w
  1283  05A8  23DA               	fcall	_hit_by
  1284                           
  1285                           ;protocol.c: 154: rx_id = 0;
  1286  05A9  0020               	movlb	0	; select bank0
  1287  05AA  01EC               	clrf	handle_serial@rx_id
  1288                           
  1289                           ;protocol.c: 155: (RCREG^0b10101010);
  1290  05AB  0023               	movlb	3	; select bank3
  1291  05AC  0819               	movf	25,w	;volatile
  1292                           
  1293                           ;protocol.c: 156: RCSTAbits.CREN = 1;
  1294  05AD  161D               	bsf	29,4	;volatile
  1295  05AE  0008               	return
  1296  05AF                     __end_of_handle_serial:	
  1297                           ;protocol.c: 157: }
  1298                           ;protocol.c: 158: }
  1299                           ;protocol.c: 159: return 1;
  1300                           ;	Return value of _handle_serial is never used
  1301                           
  1302                           
  1303                           	psect	text2
  1304  03DA                     __ptext2:	
  1305 ;; *************** function _hit_by *****************
  1306 ;; Defined at:
  1307 ;;		line 349 in file "user.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  who             1    wreg     unsigned char 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  who             1   52[BANK0 ] unsigned char 
  1312 ;;  i               1   56[BANK0 ] unsigned char 
  1313 ;;  i               1   55[BANK0 ] unsigned char 
  1314 ;;  respawn_time    2   53[BANK0 ] unsigned int 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;		None               void
  1317 ;; Registers used:
  1318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1324 ;;      Params:         0       0       0       0
  1325 ;;      Locals:         0       5       0       0
  1326 ;;      Temps:          0       2       0       0
  1327 ;;      Totals:         0       7       0       0
  1328 ;;Total ram usage:        7 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    8
  1331 ;; This function calls:
  1332 ;;		_Save
  1333 ;;		_add_to_hitlist
  1334 ;;		_delay_1_ms
  1335 ;;		_handle_music
  1336 ;;		_play_song
  1337 ;;		_red_led_on
  1338 ;;		_super_dead_mode
  1339 ;; This function is called by:
  1340 ;;		_handle_serial
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _hit_by
  1346  03DA                     _hit_by:	
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1350                           ;hit_by@who stored from wreg
  1351  03DA  0020               	movlb	0	; select bank0
  1352  03DB  00D4               	movwf	hit_by@who
  1353                           
  1354                           ;user.c: 351: uint16_t respawn_timer;
  1355                           ;user.c: 353: add_to_hitlist(who);
  1356  03DC  0854               	movf	hit_by@who,w
  1357  03DD  2508               	fcall	_add_to_hitlist
  1358                           
  1359                           ;user.c: 354: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1360  03DE  30E0               	movlw	224
  1361  03DF  00F1               	movwf	Save@address
  1362  03E0  3007               	movlw	7
  1363  03E1  00F2               	movwf	Save@address+1
  1364  03E2  30A0               	movlw	_hitlist& (0+255)
  1365  03E3  0020               	movlb	0	; select bank0
  1366  03E4  00D2               	movwf	??_hit_by
  1367  03E5  0852               	movf	??_hit_by,w
  1368  03E6  00F3               	movwf	Save@ptr
  1369  03E7  3010               	movlw	16
  1370  03E8  00D3               	movwf	??_hit_by+1
  1371  03E9  0853               	movf	??_hit_by+1,w
  1372  03EA  00F4               	movwf	Save@data_length
  1373  03EB  2648               	fcall	_Save
  1374                           
  1375                           ;user.c: 356: config.health --;
  1376  03EC  3001               	movlw	1
  1377  03ED  0021               	movlb	1	; select bank1
  1378  03EE  02C4               	subwf	(_config^(0+128)+4),f
  1379  03EF  3000               	movlw	0
  1380  03F0  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1381                           
  1382                           ;user.c: 357: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1383  03F1  30F0               	movlw	240
  1384  03F2  00F1               	movwf	Save@address
  1385  03F3  3007               	movlw	7
  1386  03F4  00F2               	movwf	Save@address+1
  1387  03F5  30C0               	movlw	_config& (0+255)
  1388  03F6  0020               	movlb	0	; select bank0
  1389  03F7  00D2               	movwf	??_hit_by
  1390  03F8  0852               	movf	??_hit_by,w
  1391  03F9  00F3               	movwf	Save@ptr
  1392  03FA  3009               	movlw	9
  1393  03FB  00D3               	movwf	??_hit_by+1
  1394  03FC  0853               	movf	??_hit_by+1,w
  1395  03FD  00F4               	movwf	Save@data_length
  1396  03FE  2648               	fcall	_Save
  1397                           
  1398                           ;user.c: 359: play_song((uint16_t*)death_song,sizeof(death_song)/sizeof(uint16_t),60000,
      +                          0);
  1399  03FF  3000               	movlw	low (_death_song| (0+32768))
  1400  0400  00F1               	movwf	play_song@song
  1401  0401  3086               	movlw	high (_death_song| (0+32768))
  1402  0402  00F2               	movwf	play_song@song+1
  1403  0403  3013               	movlw	19
  1404  0404  0020               	movlb	0	; select bank0
  1405  0405  00D2               	movwf	??_hit_by
  1406  0406  0852               	movf	??_hit_by,w
  1407  0407  00F3               	movwf	play_song@length
  1408  0408  3060               	movlw	96
  1409  0409  00F4               	movwf	play_song@note_duration
  1410  040A  30EA               	movlw	234
  1411  040B  00F5               	movwf	play_song@note_duration+1
  1412  040C  01F6               	clrf	play_song@repeat
  1413  040D  2749               	fcall	_play_song
  1414                           
  1415                           ;user.c: 361: if(!config.health)
  1416  040E  0021               	movlb	1	; select bank1
  1417  040F  0845               	movf	((_config+1)^(0+128)+4),w
  1418  0410  0444               	iorwf	(_config^(0+128)+4),w
  1419  0411  1D03               	skipz
  1420  0412  2C16               	goto	l3083
  1421                           
  1422                           ;user.c: 362: {
  1423                           ;user.c: 363: red_led_on();
  1424  0413  25FB               	fcall	_red_led_on
  1425                           
  1426                           ;user.c: 364: super_dead_mode();
  1427  0414  24B1               	fcall	_super_dead_mode
  1428                           
  1429                           ;user.c: 365: return;
  1430  0415  0008               	return
  1431  0416                     l3083:	
  1432                           
  1433                           ;user.c: 366: }
  1434                           ;user.c: 368: respawn_timer = config.respawn_delay;
  1435  0416  0021               	movlb	1	; select bank1
  1436  0417  0849               	movf	((_config+1)^(0+128)+8),w
  1437  0418  0020               	movlb	0	; select bank0
  1438  0419  01D6               	clrf	hit_by@respawn_timer+1
  1439  041A  07D6               	addwf	hit_by@respawn_timer+1,f
  1440  041B  0021               	movlb	1	; select bank1
  1441  041C  0848               	movf	(_config^(0+128)+8),w
  1442  041D  0020               	movlb	0	; select bank0
  1443  041E  01D5               	clrf	hit_by@respawn_timer
  1444  041F  07D5               	addwf	hit_by@respawn_timer,f
  1445  0420                     l3121:	
  1446                           ;user.c: 369: while(respawn_timer)
  1447                           
  1448  0420  0856               	movf	hit_by@respawn_timer+1,w
  1449  0421  0455               	iorwf	hit_by@respawn_timer,w
  1450  0422  1903               	btfsc	3,2
  1451  0423  0008               	return
  1452                           
  1453                           ;user.c: 370: {
  1454                           ;user.c: 371: respawn_timer--;
  1455  0424  3001               	movlw	1
  1456  0425  02D5               	subwf	hit_by@respawn_timer,f
  1457  0426  3000               	movlw	0
  1458  0427  3BD6               	subwfb	hit_by@respawn_timer+1,f
  1459                           
  1460                           ;user.c: 372: red_led_on();
  1461  0428  25FB               	fcall	_red_led_on
  1462                           
  1463                           ;user.c: 373: for(uint8_t i=0;i<50;i++)
  1464  0429  0020               	movlb	0	; select bank0
  1465  042A  01D7               	clrf	hit_by@i
  1466  042B  3032               	movlw	50
  1467  042C  0257               	subwf	hit_by@i,w
  1468  042D  1803               	btfsc	3,0
  1469  042E  2C3A               	goto	l3103
  1470  042F                     l3095:	
  1471                           
  1472                           ;user.c: 374: {
  1473                           ;user.c: 375: handle_music();
  1474  042F  26C9               	fcall	_handle_music
  1475                           
  1476                           ;user.c: 376: delay_1_ms();
  1477  0430  25C1               	fcall	_delay_1_ms
  1478  0431  3001               	movlw	1
  1479  0432  0020               	movlb	0	; select bank0
  1480  0433  00D2               	movwf	??_hit_by
  1481  0434  0852               	movf	??_hit_by,w
  1482  0435  07D7               	addwf	hit_by@i,f
  1483  0436  3032               	movlw	50
  1484  0437  0257               	subwf	hit_by@i,w
  1485  0438  1C03               	skipc
  1486  0439  2C2F               	goto	l3095
  1487  043A                     l3103:	
  1488                           
  1489                           ;user.c: 377: }
  1490                           ;user.c: 379: if(respawn_timer < 30)
  1491  043A  3000               	movlw	0
  1492  043B  0256               	subwf	hit_by@respawn_timer+1,w
  1493  043C  301E               	movlw	30
  1494  043D  1903               	skipnz
  1495  043E  0255               	subwf	hit_by@respawn_timer,w
  1496  043F  1803               	skipnc
  1497  0440  2C43               	goto	l3107
  1498                           
  1499                           ;user.c: 380: {
  1500                           ;user.c: 381: {TRISAbits.TRISA5 = 1;};
  1501  0441  0021               	movlb	1	; select bank1
  1502  0442  168C               	bsf	12,5	;volatile
  1503  0443                     l3107:	
  1504                           
  1505                           ;user.c: 382: }
  1506                           ;user.c: 383: for(uint8_t i=0;i<50;i++)
  1507  0443  0020               	movlb	0	; select bank0
  1508  0444  01D8               	clrf	hit_by@i_747
  1509  0445                     L1:	
  1510  0445  3032               	movlw	50
  1511  0446  0258               	subwf	hit_by@i_747,w
  1512  0447  1803               	btfsc	3,0
  1513  0448  2C20               	goto	l3121
  1514                           
  1515                           ;user.c: 384: {
  1516                           ;user.c: 385: handle_music();
  1517  0449  26C9               	fcall	_handle_music
  1518                           
  1519                           ;user.c: 386: delay_1_ms();
  1520  044A  25C1               	fcall	_delay_1_ms
  1521  044B  3001               	movlw	1
  1522  044C  0020               	movlb	0	; select bank0
  1523  044D  00D2               	movwf	??_hit_by
  1524  044E  0852               	movf	??_hit_by,w
  1525  044F  07D8               	addwf	hit_by@i_747,f
  1526  0450  2C45               	goto	L1
  1527  0451                     __end_of_hit_by:	
  1528                           
  1529                           	psect	text3
  1530  04B1                     __ptext3:	
  1531 ;; *************** function _super_dead_mode *****************
  1532 ;; Defined at:
  1533 ;;		line 323 in file "user.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  b               1   47[BANK0 ] unsigned char 
  1538 ;;  counter         2   48[BANK0 ] unsigned int 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;		None               void
  1541 ;; Registers used:
  1542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1548 ;;      Params:         0       0       0       0
  1549 ;;      Locals:         0       3       0       0
  1550 ;;      Temps:          0       2       0       0
  1551 ;;      Totals:         0       5       0       0
  1552 ;;Total ram usage:        5 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    7
  1555 ;; This function calls:
  1556 ;;		_Send_Byte
  1557 ;;		_control_transfer
  1558 ;;		_delay_1_ms
  1559 ;;		_handle_music
  1560 ;;		_play_song
  1561 ;;		_red_led_on
  1562 ;; This function is called by:
  1563 ;;		_main
  1564 ;;		_hit_by
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function _super_dead_mode
  1570  04B1                     _super_dead_mode:	
  1571                           
  1572                           ;user.c: 324: uint16_t counter = 0;
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1576  04B1  0020               	movlb	0	; select bank0
  1577  04B2  01D0               	clrf	super_dead_mode@counter
  1578  04B3  01D1               	clrf	super_dead_mode@counter+1
  1579  04B4                     l3065:	
  1580                           ;user.c: 325: while(!config.health){
  1581                           
  1582  04B4  3004               	movlw	4
  1583  04B5  3EC0               	addlw	_config& (0+255)
  1584  04B6  0086               	movwf	6
  1585  04B7  0187               	clrf	7
  1586  04B8  0016               	moviw fsr1++
  1587  04B9  0401               	iorwf	1,w
  1588  04BA  1D03               	btfss	3,2
  1589  04BB  0008               	return
  1590                           
  1591                           ;user.c: 326: handle_music();
  1592  04BC  26C9               	fcall	_handle_music
  1593                           
  1594                           ;user.c: 328: uint8_t b;
  1595                           ;user.c: 329: if((PIR1bits.RCIF)){
  1596  04BD  0020               	movlb	0	; select bank0
  1597  04BE  1E91               	btfss	17,5	;volatile
  1598  04BF  2CCC               	goto	l3047
  1599                           
  1600                           ;user.c: 330: b=(RCREG^0b10101010);
  1601  04C0  0023               	movlb	3	; select bank3
  1602  04C1  0819               	movf	25,w	;volatile
  1603  04C2  3AAA               	xorlw	170
  1604  04C3  0020               	movlb	0	; select bank0
  1605  04C4  00CD               	movwf	??_super_dead_mode
  1606  04C5  084D               	movf	??_super_dead_mode,w
  1607  04C6  00CF               	movwf	super_dead_mode@b
  1608                           
  1609                           ;user.c: 331: if(b == 0x10) {
  1610  04C7  084F               	movf	super_dead_mode@b,w
  1611  04C8  3A10               	xorlw	16
  1612  04C9  1D03               	skipz
  1613  04CA  2CCC               	goto	l3047
  1614                           
  1615                           ;user.c: 332: control_transfer();
  1616  04CB  2026               	fcall	_control_transfer
  1617  04CC                     l3047:	
  1618                           
  1619                           ;user.c: 333: }
  1620                           ;user.c: 334: }
  1621                           ;user.c: 335: counter++;
  1622  04CC  3001               	movlw	1
  1623  04CD  0020               	movlb	0	; select bank0
  1624  04CE  07D0               	addwf	super_dead_mode@counter,f
  1625  04CF  3000               	movlw	0
  1626  04D0  3DD1               	addwfc	super_dead_mode@counter+1,f
  1627                           
  1628                           ;user.c: 336: delay_1_ms();
  1629  04D1  25C1               	fcall	_delay_1_ms
  1630                           
  1631                           ;user.c: 337: if(counter > config.death_period){
  1632  04D2  0020               	movlb	0	; select bank0
  1633  04D3  0851               	movf	super_dead_mode@counter+1,w
  1634  04D4  0021               	movlb	1	; select bank1
  1635  04D5  0251               	subwf	((_config+1)^(0+128)+16),w
  1636  04D6  1D03               	skipz
  1637  04D7  2CDC               	goto	u4095
  1638  04D8  0020               	movlb	0	; select bank0
  1639  04D9  0850               	movf	super_dead_mode@counter,w
  1640  04DA  0021               	movlb	1	; select bank1
  1641  04DB  0250               	subwf	(_config^(0+128)+16),w
  1642  04DC                     u4095:	
  1643  04DC  1803               	skipnc
  1644  04DD  2CF4               	goto	l3061
  1645                           
  1646                           ;user.c: 338: counter = 0;
  1647  04DE  0020               	movlb	0	; select bank0
  1648  04DF  01D0               	clrf	super_dead_mode@counter
  1649  04E0  01D1               	clrf	super_dead_mode@counter+1
  1650                           
  1651                           ;user.c: 339: {TRISAbits.TRISA5 = 1;};
  1652  04E1  0021               	movlb	1	; select bank1
  1653  04E2  168C               	bsf	12,5	;volatile
  1654                           
  1655                           ;user.c: 340: Send_Byte(config.id);
  1656  04E3  0840               	movf	_config^(0+128),w
  1657  04E4  268F               	fcall	_Send_Byte
  1658                           
  1659                           ;user.c: 341: play_song((uint16_t*)dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0)
      +                          ;
  1660  04E5  3042               	movlw	low (_dead_song| (0+32768))
  1661  04E6  00F1               	movwf	play_song@song
  1662  04E7  3086               	movlw	high (_dead_song| (0+32768))
  1663  04E8  00F2               	movwf	play_song@song+1
  1664  04E9  3003               	movlw	3
  1665  04EA  0020               	movlb	0	; select bank0
  1666  04EB  00CD               	movwf	??_super_dead_mode
  1667  04EC  084D               	movf	??_super_dead_mode,w
  1668  04ED  00F3               	movwf	play_song@length
  1669  04EE  3010               	movlw	16
  1670  04EF  00F4               	movwf	play_song@note_duration
  1671  04F0  3027               	movlw	39
  1672  04F1  00F5               	movwf	play_song@note_duration+1
  1673  04F2  01F6               	clrf	play_song@repeat
  1674  04F3  2749               	fcall	_play_song
  1675  04F4                     l3061:	
  1676                           
  1677                           ;user.c: 342: }
  1678                           ;user.c: 343: if(counter == config.death_period-50){
  1679  04F4  0021               	movlb	1	; select bank1
  1680  04F5  0850               	movf	(_config^(0+128)+16),w
  1681  04F6  3ECE               	addlw	206
  1682  04F7  0020               	movlb	0	; select bank0
  1683  04F8  00CD               	movwf	??_super_dead_mode
  1684  04F9  30FF               	movlw	255
  1685  04FA  0021               	movlb	1	; select bank1
  1686  04FB  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1687  04FC  0020               	movlb	0	; select bank0
  1688  04FD  00CE               	movwf	??_super_dead_mode+1
  1689  04FE  0851               	movf	super_dead_mode@counter+1,w
  1690  04FF  064E               	xorwf	??_super_dead_mode+1,w
  1691  0500  1D03               	skipz
  1692  0501  2D04               	goto	u4105
  1693  0502  0850               	movf	super_dead_mode@counter,w
  1694  0503  064D               	xorwf	??_super_dead_mode,w
  1695  0504                     u4105:	
  1696  0504  1D03               	skipz
  1697  0505  2CB4               	goto	l3065
  1698                           
  1699                           ;user.c: 344: red_led_on();
  1700  0506  25FB               	fcall	_red_led_on
  1701  0507  2CB4               	goto	l3065
  1702  0508                     __end_of_super_dead_mode:	
  1703                           
  1704                           	psect	text4
  1705  06C9                     __ptext4:	
  1706 ;; *************** function _handle_music *****************
  1707 ;; Defined at:
  1708 ;;		line 112 in file "user.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;		None               void
  1715 ;; Registers used:
  1716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1722 ;;      Params:         0       0       0       0
  1723 ;;      Locals:         0       0       0       0
  1724 ;;      Temps:          2       0       0       0
  1725 ;;      Totals:         2       0       0       0
  1726 ;;Total ram usage:        2 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		_stop_song
  1731 ;;		_tone
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;;		_super_dead_mode
  1735 ;;		_hit_by
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           
  1740                           ;psect for function _handle_music
  1741  06C9                     _handle_music:	
  1742                           
  1743                           ;user.c: 114: if(!PIR1bits.TMR1IF) return;
  1744                           
  1745                           ;incstack = 0
  1746                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1747  06C9  0020               	movlb	0	; select bank0
  1748  06CA  1C11               	btfss	17,0	;volatile
  1749  06CB  0008               	return
  1750                           
  1751                           ;user.c: 115: if(cur_song_ptr >= cur_song_length)
  1752  06CC  0867               	movf	_cur_song_length,w
  1753  06CD  0268               	subwf	_cur_song_ptr,w
  1754  06CE  1C03               	skipc
  1755  06CF  2ED7               	goto	l2683
  1756                           
  1757                           ;user.c: 116: {
  1758                           ;user.c: 117: if(cur_song_repeat)
  1759  06D0  0869               	movf	_cur_song_repeat,w
  1760  06D1  1903               	btfsc	3,2
  1761  06D2  2ED5               	goto	l2679
  1762                           
  1763                           ;user.c: 118: {
  1764                           ;user.c: 119: cur_song_ptr=0;
  1765  06D3  01E8               	clrf	_cur_song_ptr
  1766                           
  1767                           ;user.c: 120: }
  1768  06D4  2ED7               	goto	l2683
  1769  06D5                     l2679:	
  1770                           
  1771                           ;user.c: 121: else
  1772                           ;user.c: 122: {
  1773                           ;user.c: 123: stop_song();
  1774  06D5  25F0               	fcall	_stop_song
  1775                           
  1776                           ;user.c: 124: return;
  1777  06D6  0008               	return
  1778  06D7                     l2683:	
  1779                           
  1780                           ;user.c: 125: }
  1781                           ;user.c: 126: }
  1782                           ;user.c: 127: tone(cur_song[cur_song_ptr]);
  1783  06D7  0020               	movlb	0	; select bank0
  1784  06D8  0868               	movf	_cur_song_ptr,w
  1785  06D9  00F5               	movwf	??_handle_music
  1786  06DA  01F6               	clrf	??_handle_music+1
  1787  06DB  35F5               	lslf	??_handle_music,f
  1788  06DC  0DF6               	rlf	??_handle_music+1,f
  1789  06DD  085E               	movf	_cur_song,w
  1790  06DE  0775               	addwf	??_handle_music,w
  1791  06DF  0084               	movwf	4
  1792  06E0  085F               	movf	_cur_song+1,w
  1793  06E1  3D76               	addwfc	??_handle_music+1,w
  1794  06E2  0085               	movwf	5
  1795  06E3  3F00               	moviw [0]fsr0
  1796  06E4  00F1               	movwf	tone@period
  1797  06E5  3F01               	moviw [1]fsr0
  1798  06E6  00F2               	movwf	tone@period+1
  1799  06E7  27C6               	fcall	_tone
  1800                           
  1801                           ;user.c: 128: TMR1 = -cur_song_duration;
  1802  06E8  0020               	movlb	0	; select bank0
  1803  06E9  0960               	comf	_cur_song_duration,w
  1804  06EA  00F5               	movwf	??_handle_music
  1805  06EB  0961               	comf	_cur_song_duration+1,w
  1806  06EC  00F6               	movwf	??_handle_music+1
  1807  06ED  0AF5               	incf	??_handle_music,f
  1808  06EE  1903               	skipnz
  1809  06EF  0AF6               	incf	??_handle_music+1,f
  1810  06F0  0875               	movf	??_handle_music,w
  1811  06F1  0096               	movwf	22	;volatile
  1812  06F2  0876               	movf	??_handle_music+1,w
  1813  06F3  0097               	movwf	23	;volatile
  1814                           
  1815                           ;user.c: 129: cur_song_ptr++;
  1816  06F4  3001               	movlw	1
  1817  06F5  00F5               	movwf	??_handle_music
  1818  06F6  0875               	movf	??_handle_music,w
  1819  06F7  07E8               	addwf	_cur_song_ptr,f
  1820                           
  1821                           ;user.c: 130: PIR1bits.TMR1IF=0;
  1822  06F8  1011               	bcf	17,0	;volatile
  1823  06F9  0008               	return
  1824  06FA                     __end_of_handle_music:	
  1825                           
  1826                           	psect	text5
  1827  0026                     __ptext5:	
  1828 ;; *************** function _control_transfer *****************
  1829 ;; Defined at:
  1830 ;;		line 42 in file "protocol.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  data           32    5[BANK0 ] unsigned int [16]
  1835 ;;  page            2   42[BANK0 ] unsigned int 
  1836 ;;  x               1   44[BANK0 ] unsigned char 
  1837 ;;  i               1   41[BANK0 ] unsigned char 
  1838 ;;  dptr            1   40[BANK0 ] PTR unsigned char 
  1839 ;;		 -> control_transfer@data(32), 
  1840 ;;  id              1   39[BANK0 ] unsigned char 
  1841 ;;  random_numbe    1   38[BANK0 ] unsigned char 
  1842 ;;  cmd             1   37[BANK0 ] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;		None               void
  1845 ;; Registers used:
  1846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1852 ;;      Params:         0       0       0       0
  1853 ;;      Locals:         0      40       0       0
  1854 ;;      Temps:          0       2       0       0
  1855 ;;      Totals:         0      42       0       0
  1856 ;;Total ram usage:       42 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    6
  1859 ;; This function calls:
  1860 ;;		_GET_CHAR_HELPER
  1861 ;;		_Load
  1862 ;;		_SEND_DATA_BYTE
  1863 ;;		_SEND_EOF
  1864 ;;		_SEND_SOF
  1865 ;;		_Save
  1866 ;;		_play_song
  1867 ;; This function is called by:
  1868 ;;		_super_dead_mode
  1869 ;;		_handle_serial
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _control_transfer
  1875  0026                     _control_transfer:	
  1876                           
  1877                           ;protocol.c: 44: uint8_t i;
  1878                           ;protocol.c: 45: uint8_t cmd;
  1879                           ;protocol.c: 46: uint8_t random_number,id;
  1880                           ;protocol.c: 48: uint16_t page;
  1881                           ;protocol.c: 49: uint16_t data[16];
  1882                           ;protocol.c: 50: uint8_t* dptr;
  1883                           ;protocol.c: 51: uint8_t x;
  1884                           ;protocol.c: 53: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1888  0026  0020               	movlb	0	; select bank0
  1889  0027  01E6               	clrf	__checksum
  1890  0028  307C               	movlw	__x& (0+255)
  1891  0029  278E               	fcall	_GET_CHAR_HELPER
  1892  002A  3A00               	xorlw	0
  1893  002B  1D03               	btfss	3,2
  1894  002C  0008               	return
  1895  002D  306D               	movlw	__y& (0+255)
  1896  002E  278E               	fcall	_GET_CHAR_HELPER
  1897  002F  3A00               	xorlw	0
  1898  0030  1D03               	btfss	3,2
  1899  0031  0008               	return
  1900  0032  087C               	movf	__x,w
  1901  0033  39F0               	andlw	240
  1902  0034  1D03               	btfss	3,2
  1903  0035  0008               	return
  1904  0036  0020               	movlb	0	; select bank0
  1905  0037  086D               	movf	__y,w
  1906  0038  39F0               	andlw	240
  1907  0039  1D03               	btfss	3,2
  1908  003A  0008               	return
  1909  003B  086D               	movf	__y,w
  1910  003C  00A3               	movwf	??_control_transfer
  1911  003D  3003               	movlw	3
  1912  003E                     u3205:	
  1913  003E  35A3               	lslf	??_control_transfer,f
  1914  003F  3EFF               	addlw	-1
  1915  0040  1D03               	skipz
  1916  0041  283E               	goto	u3205
  1917  0042  3523               	lslf	??_control_transfer,w
  1918  0043  047C               	iorwf	__x,w
  1919  0044  00A4               	movwf	??_control_transfer+1
  1920  0045  0824               	movf	??_control_transfer+1,w
  1921  0046  00FC               	movwf	__x
  1922  0047  087C               	movf	__x,w
  1923  0048  00A3               	movwf	??_control_transfer
  1924  0049  0823               	movf	??_control_transfer,w
  1925  004A  07E6               	addwf	__checksum,f
  1926  004B  0021               	movlb	1	; select bank1
  1927  004C  0840               	movf	_config^(0+128),w
  1928  004D  067C               	xorwf	__x,w
  1929  004E  1D03               	btfss	3,2
  1930  004F  0008               	return
  1931                           
  1932                           ;protocol.c: 54: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1933  0050  307C               	movlw	__x& (0+255)
  1934  0051  278E               	fcall	_GET_CHAR_HELPER
  1935  0052  3A00               	xorlw	0
  1936  0053  1D03               	btfss	3,2
  1937  0054  0008               	return
  1938  0055  306D               	movlw	__y& (0+255)
  1939  0056  278E               	fcall	_GET_CHAR_HELPER
  1940  0057  3A00               	xorlw	0
  1941  0058  1D03               	btfss	3,2
  1942  0059  0008               	return
  1943  005A  087C               	movf	__x,w
  1944  005B  39F0               	andlw	240
  1945  005C  1D03               	btfss	3,2
  1946  005D  0008               	return
  1947  005E  0020               	movlb	0	; select bank0
  1948  005F  086D               	movf	__y,w
  1949  0060  39F0               	andlw	240
  1950  0061  1D03               	btfss	3,2
  1951  0062  0008               	return
  1952  0063  086D               	movf	__y,w
  1953  0064  00A3               	movwf	??_control_transfer
  1954  0065  3003               	movlw	3
  1955  0066                     u3265:	
  1956  0066  35A3               	lslf	??_control_transfer,f
  1957  0067  3EFF               	addlw	-1
  1958  0068  1D03               	skipz
  1959  0069  2866               	goto	u3265
  1960  006A  3523               	lslf	??_control_transfer,w
  1961  006B  047C               	iorwf	__x,w
  1962  006C  00A4               	movwf	??_control_transfer+1
  1963  006D  0824               	movf	??_control_transfer+1,w
  1964  006E  00C5               	movwf	control_transfer@cmd
  1965  006F  0845               	movf	control_transfer@cmd,w
  1966  0070  00A3               	movwf	??_control_transfer
  1967  0071  0823               	movf	??_control_transfer,w
  1968  0072  07E6               	addwf	__checksum,f
  1969                           
  1970                           ;protocol.c: 56: switch(cmd)
  1971  0073  2B32               	goto	l3029
  1972  0074                     l2725:	
  1973                           ;protocol.c: 57: {
  1974                           ;protocol.c: 58: case 0x01:
  1975                           
  1976                           
  1977                           ;protocol.c: 59: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1978  0074  307C               	movlw	__x& (0+255)
  1979  0075  278E               	fcall	_GET_CHAR_HELPER
  1980  0076  3A00               	xorlw	0
  1981  0077  1D03               	btfss	3,2
  1982  0078  0008               	return
  1983  0079  306D               	movlw	__y& (0+255)
  1984  007A  278E               	fcall	_GET_CHAR_HELPER
  1985  007B  3A00               	xorlw	0
  1986  007C  1D03               	btfss	3,2
  1987  007D  0008               	return
  1988  007E  087C               	movf	__x,w
  1989  007F  39F0               	andlw	240
  1990  0080  1D03               	btfss	3,2
  1991  0081  0008               	return
  1992  0082  0020               	movlb	0	; select bank0
  1993  0083  086D               	movf	__y,w
  1994  0084  39F0               	andlw	240
  1995  0085  1D03               	btfss	3,2
  1996  0086  0008               	return
  1997  0087  086D               	movf	__y,w
  1998  0088  00A3               	movwf	??_control_transfer
  1999  0089  3003               	movlw	3
  2000  008A                     u3315:	
  2001  008A  35A3               	lslf	??_control_transfer,f
  2002  008B  3EFF               	addlw	-1
  2003  008C  1D03               	skipz
  2004  008D  288A               	goto	u3315
  2005  008E  3523               	lslf	??_control_transfer,w
  2006  008F  047C               	iorwf	__x,w
  2007  0090  00A4               	movwf	??_control_transfer+1
  2008  0091  0824               	movf	??_control_transfer+1,w
  2009  0092  00FC               	movwf	__x
  2010  0093  087C               	movf	__x,w
  2011  0094  00A3               	movwf	??_control_transfer
  2012  0095  0823               	movf	??_control_transfer,w
  2013  0096  07E6               	addwf	__checksum,f
  2014  0097  0866               	movf	__checksum,w
  2015  0098  1D03               	skipz
  2016  0099  0008               	return
  2017  009A  307C               	movlw	__x& (0+255)
  2018  009B  278E               	fcall	_GET_CHAR_HELPER
  2019  009C  3A00               	xorlw	0
  2020  009D  1D03               	btfss	3,2
  2021  009E  0008               	return
  2022  009F  087C               	movf	__x,w
  2023  00A0  3A11               	xorlw	17
  2024  00A1  1D03               	btfss	3,2
  2025  00A2  0008               	return
  2026                           
  2027                           ;protocol.c: 60: SEND_SOF();
  2028  00A3  25DC               	fcall	_SEND_SOF
  2029                           
  2030                           ;protocol.c: 61: SEND_DATA_BYTE(0x02);
  2031  00A4  3002               	movlw	2
  2032  00A5  27AC               	fcall	_SEND_DATA_BYTE
  2033                           
  2034                           ;protocol.c: 62: SEND_DATA_BYTE(my_random_number);
  2035  00A6  0020               	movlb	0	; select bank0
  2036  00A7  086A               	movf	_my_random_number,w
  2037  00A8  27AC               	fcall	_SEND_DATA_BYTE
  2038                           
  2039                           ;protocol.c: 63: SEND_EOF();
  2040  00A9  25EA               	fcall	_SEND_EOF
  2041                           
  2042                           ;protocol.c: 64: break;
  2043  00AA  0008               	return
  2044  00AB                     l2753:	
  2045                           ;protocol.c: 65: case 0x03:
  2046                           
  2047                           
  2048                           ;protocol.c: 66: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2049  00AB  307C               	movlw	__x& (0+255)
  2050  00AC  278E               	fcall	_GET_CHAR_HELPER
  2051  00AD  3A00               	xorlw	0
  2052  00AE  1D03               	btfss	3,2
  2053  00AF  0008               	return
  2054  00B0  306D               	movlw	__y& (0+255)
  2055  00B1  278E               	fcall	_GET_CHAR_HELPER
  2056  00B2  3A00               	xorlw	0
  2057  00B3  1D03               	btfss	3,2
  2058  00B4  0008               	return
  2059  00B5  087C               	movf	__x,w
  2060  00B6  39F0               	andlw	240
  2061  00B7  1D03               	btfss	3,2
  2062  00B8  0008               	return
  2063  00B9  0020               	movlb	0	; select bank0
  2064  00BA  086D               	movf	__y,w
  2065  00BB  39F0               	andlw	240
  2066  00BC  1D03               	btfss	3,2
  2067  00BD  0008               	return
  2068  00BE  086D               	movf	__y,w
  2069  00BF  00A3               	movwf	??_control_transfer
  2070  00C0  3003               	movlw	3
  2071  00C1                     u3395:	
  2072  00C1  35A3               	lslf	??_control_transfer,f
  2073  00C2  3EFF               	addlw	-1
  2074  00C3  1D03               	skipz
  2075  00C4  28C1               	goto	u3395
  2076  00C5  3523               	lslf	??_control_transfer,w
  2077  00C6  047C               	iorwf	__x,w
  2078  00C7  00A4               	movwf	??_control_transfer+1
  2079  00C8  0824               	movf	??_control_transfer+1,w
  2080  00C9  00C6               	movwf	control_transfer@random_number
  2081  00CA  0846               	movf	control_transfer@random_number,w
  2082  00CB  00A3               	movwf	??_control_transfer
  2083  00CC  0823               	movf	??_control_transfer,w
  2084  00CD  07E6               	addwf	__checksum,f
  2085                           
  2086                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2087  00CE  307C               	movlw	__x& (0+255)
  2088  00CF  278E               	fcall	_GET_CHAR_HELPER
  2089  00D0  3A00               	xorlw	0
  2090  00D1  1D03               	btfss	3,2
  2091  00D2  0008               	return
  2092  00D3  306D               	movlw	__y& (0+255)
  2093  00D4  278E               	fcall	_GET_CHAR_HELPER
  2094  00D5  3A00               	xorlw	0
  2095  00D6  1D03               	btfss	3,2
  2096  00D7  0008               	return
  2097  00D8  087C               	movf	__x,w
  2098  00D9  39F0               	andlw	240
  2099  00DA  1D03               	btfss	3,2
  2100  00DB  0008               	return
  2101  00DC  0020               	movlb	0	; select bank0
  2102  00DD  086D               	movf	__y,w
  2103  00DE  39F0               	andlw	240
  2104  00DF  1D03               	btfss	3,2
  2105  00E0  0008               	return
  2106  00E1  086D               	movf	__y,w
  2107  00E2  00A3               	movwf	??_control_transfer
  2108  00E3  3003               	movlw	3
  2109  00E4                     u3445:	
  2110  00E4  35A3               	lslf	??_control_transfer,f
  2111  00E5  3EFF               	addlw	-1
  2112  00E6  1D03               	skipz
  2113  00E7  28E4               	goto	u3445
  2114  00E8  3523               	lslf	??_control_transfer,w
  2115  00E9  047C               	iorwf	__x,w
  2116  00EA  00A4               	movwf	??_control_transfer+1
  2117  00EB  0824               	movf	??_control_transfer+1,w
  2118  00EC  00C7               	movwf	control_transfer@id
  2119  00ED  0847               	movf	control_transfer@id,w
  2120  00EE  00A3               	movwf	??_control_transfer
  2121  00EF  0823               	movf	??_control_transfer,w
  2122  00F0  07E6               	addwf	__checksum,f
  2123                           
  2124                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2125  00F1  307C               	movlw	__x& (0+255)
  2126  00F2  278E               	fcall	_GET_CHAR_HELPER
  2127  00F3  3A00               	xorlw	0
  2128  00F4  1D03               	btfss	3,2
  2129  00F5  0008               	return
  2130  00F6  306D               	movlw	__y& (0+255)
  2131  00F7  278E               	fcall	_GET_CHAR_HELPER
  2132  00F8  3A00               	xorlw	0
  2133  00F9  1D03               	btfss	3,2
  2134  00FA  0008               	return
  2135  00FB  087C               	movf	__x,w
  2136  00FC  39F0               	andlw	240
  2137  00FD  1D03               	btfss	3,2
  2138  00FE  0008               	return
  2139  00FF  0020               	movlb	0	; select bank0
  2140  0100  086D               	movf	__y,w
  2141  0101  39F0               	andlw	240
  2142  0102  1D03               	btfss	3,2
  2143  0103  0008               	return
  2144  0104  086D               	movf	__y,w
  2145  0105  00A3               	movwf	??_control_transfer
  2146  0106  3003               	movlw	3
  2147  0107                     u3495:	
  2148  0107  35A3               	lslf	??_control_transfer,f
  2149  0108  3EFF               	addlw	-1
  2150  0109  1D03               	skipz
  2151  010A  2907               	goto	u3495
  2152  010B  3523               	lslf	??_control_transfer,w
  2153  010C  047C               	iorwf	__x,w
  2154  010D  00A4               	movwf	??_control_transfer+1
  2155  010E  0824               	movf	??_control_transfer+1,w
  2156  010F  00FC               	movwf	__x
  2157  0110  087C               	movf	__x,w
  2158  0111  00A3               	movwf	??_control_transfer
  2159  0112  0823               	movf	??_control_transfer,w
  2160  0113  07E6               	addwf	__checksum,f
  2161  0114  0866               	movf	__checksum,w
  2162  0115  1D03               	skipz
  2163  0116  0008               	return
  2164  0117  307C               	movlw	__x& (0+255)
  2165  0118  278E               	fcall	_GET_CHAR_HELPER
  2166  0119  3A00               	xorlw	0
  2167  011A  1D03               	btfss	3,2
  2168  011B  0008               	return
  2169  011C  087C               	movf	__x,w
  2170  011D  3A11               	xorlw	17
  2171  011E  1D03               	btfss	3,2
  2172  011F  0008               	return
  2173                           
  2174                           ;protocol.c: 69: if(random_number != my_random_number) goto err;
  2175  0120  0020               	movlb	0	; select bank0
  2176  0121  0846               	movf	control_transfer@random_number,w
  2177  0122  066A               	xorwf	_my_random_number,w
  2178  0123  1D03               	btfss	3,2
  2179  0124  0008               	return
  2180                           
  2181                           ;protocol.c: 70: SEND_SOF();
  2182  0125  25DC               	fcall	_SEND_SOF
  2183                           
  2184                           ;protocol.c: 71: SEND_DATA_BYTE(0x00);
  2185  0126  3000               	movlw	0
  2186  0127  27AC               	fcall	_SEND_DATA_BYTE
  2187                           
  2188                           ;protocol.c: 72: SEND_EOF();
  2189  0128  25EA               	fcall	_SEND_EOF
  2190                           
  2191                           ;protocol.c: 73: config.id=id;
  2192  0129  0020               	movlb	0	; select bank0
  2193  012A  0847               	movf	control_transfer@id,w
  2194  012B  00A3               	movwf	??_control_transfer
  2195  012C  01A4               	clrf	??_control_transfer+1
  2196  012D  0823               	movf	??_control_transfer,w
  2197  012E  0021               	movlb	1	; select bank1
  2198  012F  00C0               	movwf	_config^(0+128)
  2199  0130  0020               	movlb	0	; select bank0
  2200  0131  0824               	movf	??_control_transfer+1,w
  2201  0132  0021               	movlb	1	; select bank1
  2202  0133  00C1               	movwf	(_config+1)^(0+128)
  2203                           
  2204                           ;protocol.c: 74: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2205  0134  30F0               	movlw	240
  2206  0135  00F1               	movwf	Save@address
  2207  0136  3007               	movlw	7
  2208  0137  00F2               	movwf	Save@address+1
  2209  0138  30C0               	movlw	_config& (0+255)
  2210  0139  0020               	movlb	0	; select bank0
  2211  013A  00A3               	movwf	??_control_transfer
  2212  013B  0823               	movf	??_control_transfer,w
  2213  013C  00F3               	movwf	Save@ptr
  2214  013D  3009               	movlw	9
  2215  013E  00A4               	movwf	??_control_transfer+1
  2216  013F  0824               	movf	??_control_transfer+1,w
  2217  0140  00F4               	movwf	Save@data_length
  2218  0141  2648               	fcall	_Save
  2219                           
  2220                           ;protocol.c: 75: break;
  2221  0142  0008               	return
  2222  0143                     l2817:	
  2223                           ;protocol.c: 76: case 0x04:
  2224                           
  2225                           
  2226                           ;protocol.c: 77: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2227  0143  307C               	movlw	__x& (0+255)
  2228  0144  278E               	fcall	_GET_CHAR_HELPER
  2229  0145  3A00               	xorlw	0
  2230  0146  1D03               	btfss	3,2
  2231  0147  0008               	return
  2232  0148  306D               	movlw	__y& (0+255)
  2233  0149  278E               	fcall	_GET_CHAR_HELPER
  2234  014A  3A00               	xorlw	0
  2235  014B  1D03               	btfss	3,2
  2236  014C  0008               	return
  2237  014D  087C               	movf	__x,w
  2238  014E  39F0               	andlw	240
  2239  014F  1D03               	btfss	3,2
  2240  0150  0008               	return
  2241  0151  0020               	movlb	0	; select bank0
  2242  0152  086D               	movf	__y,w
  2243  0153  39F0               	andlw	240
  2244  0154  1D03               	btfss	3,2
  2245  0155  0008               	return
  2246  0156  086D               	movf	__y,w
  2247  0157  00A3               	movwf	??_control_transfer
  2248  0158  3003               	movlw	3
  2249  0159                     u3585:	
  2250  0159  35A3               	lslf	??_control_transfer,f
  2251  015A  3EFF               	addlw	-1
  2252  015B  1D03               	skipz
  2253  015C  2959               	goto	u3585
  2254  015D  3523               	lslf	??_control_transfer,w
  2255  015E  047C               	iorwf	__x,w
  2256  015F  00A4               	movwf	??_control_transfer+1
  2257  0160  0824               	movf	??_control_transfer+1,w
  2258  0161  00CC               	movwf	control_transfer@x
  2259  0162  084C               	movf	control_transfer@x,w
  2260  0163  00A3               	movwf	??_control_transfer
  2261  0164  0823               	movf	??_control_transfer,w
  2262  0165  07E6               	addwf	__checksum,f
  2263                           
  2264                           ;protocol.c: 78: *((uint8_t*)(&page))=x;
  2265  0166  084C               	movf	control_transfer@x,w
  2266  0167  00A3               	movwf	??_control_transfer
  2267  0168  0823               	movf	??_control_transfer,w
  2268  0169  00CA               	movwf	control_transfer@page
  2269                           
  2270                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2271  016A  307C               	movlw	__x& (0+255)
  2272  016B  278E               	fcall	_GET_CHAR_HELPER
  2273  016C  3A00               	xorlw	0
  2274  016D  1D03               	btfss	3,2
  2275  016E  0008               	return
  2276  016F  306D               	movlw	__y& (0+255)
  2277  0170  278E               	fcall	_GET_CHAR_HELPER
  2278  0171  3A00               	xorlw	0
  2279  0172  1D03               	btfss	3,2
  2280  0173  0008               	return
  2281  0174  087C               	movf	__x,w
  2282  0175  39F0               	andlw	240
  2283  0176  1D03               	btfss	3,2
  2284  0177  0008               	return
  2285  0178  0020               	movlb	0	; select bank0
  2286  0179  086D               	movf	__y,w
  2287  017A  39F0               	andlw	240
  2288  017B  1D03               	btfss	3,2
  2289  017C  0008               	return
  2290  017D  086D               	movf	__y,w
  2291  017E  00A3               	movwf	??_control_transfer
  2292  017F  3003               	movlw	3
  2293  0180                     u3635:	
  2294  0180  35A3               	lslf	??_control_transfer,f
  2295  0181  3EFF               	addlw	-1
  2296  0182  1D03               	skipz
  2297  0183  2980               	goto	u3635
  2298  0184  3523               	lslf	??_control_transfer,w
  2299  0185  047C               	iorwf	__x,w
  2300  0186  00A4               	movwf	??_control_transfer+1
  2301  0187  0824               	movf	??_control_transfer+1,w
  2302  0188  00CC               	movwf	control_transfer@x
  2303  0189  084C               	movf	control_transfer@x,w
  2304  018A  00A3               	movwf	??_control_transfer
  2305  018B  0823               	movf	??_control_transfer,w
  2306  018C  07E6               	addwf	__checksum,f
  2307                           
  2308                           ;protocol.c: 80: *(((uint8_t*)(&page))+1)=x;
  2309  018D  084C               	movf	control_transfer@x,w
  2310  018E  00A3               	movwf	??_control_transfer
  2311  018F  0823               	movf	??_control_transfer,w
  2312  0190  00CB               	movwf	control_transfer@page+1
  2313                           
  2314                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2315  0191  307C               	movlw	__x& (0+255)
  2316  0192  278E               	fcall	_GET_CHAR_HELPER
  2317  0193  3A00               	xorlw	0
  2318  0194  1D03               	btfss	3,2
  2319  0195  0008               	return
  2320  0196  306D               	movlw	__y& (0+255)
  2321  0197  278E               	fcall	_GET_CHAR_HELPER
  2322  0198  3A00               	xorlw	0
  2323  0199  1D03               	btfss	3,2
  2324  019A  0008               	return
  2325  019B  087C               	movf	__x,w
  2326  019C  39F0               	andlw	240
  2327  019D  1D03               	btfss	3,2
  2328  019E  0008               	return
  2329  019F  0020               	movlb	0	; select bank0
  2330  01A0  086D               	movf	__y,w
  2331  01A1  39F0               	andlw	240
  2332  01A2  1D03               	btfss	3,2
  2333  01A3  0008               	return
  2334  01A4  086D               	movf	__y,w
  2335  01A5  00A3               	movwf	??_control_transfer
  2336  01A6  3003               	movlw	3
  2337  01A7                     u3685:	
  2338  01A7  35A3               	lslf	??_control_transfer,f
  2339  01A8  3EFF               	addlw	-1
  2340  01A9  1D03               	skipz
  2341  01AA  29A7               	goto	u3685
  2342  01AB  3523               	lslf	??_control_transfer,w
  2343  01AC  047C               	iorwf	__x,w
  2344  01AD  00A4               	movwf	??_control_transfer+1
  2345  01AE  0824               	movf	??_control_transfer+1,w
  2346  01AF  00FC               	movwf	__x
  2347  01B0  087C               	movf	__x,w
  2348  01B1  00A3               	movwf	??_control_transfer
  2349  01B2  0823               	movf	??_control_transfer,w
  2350  01B3  07E6               	addwf	__checksum,f
  2351  01B4  0866               	movf	__checksum,w
  2352  01B5  1D03               	skipz
  2353  01B6  0008               	return
  2354  01B7  307C               	movlw	__x& (0+255)
  2355  01B8  278E               	fcall	_GET_CHAR_HELPER
  2356  01B9  3A00               	xorlw	0
  2357  01BA  1D03               	btfss	3,2
  2358  01BB  0008               	return
  2359  01BC  087C               	movf	__x,w
  2360  01BD  3A11               	xorlw	17
  2361  01BE  1D03               	btfss	3,2
  2362  01BF  0008               	return
  2363                           
  2364                           ;protocol.c: 82: Load(page,data,16);
  2365  01C0  0020               	movlb	0	; select bank0
  2366  01C1  084B               	movf	control_transfer@page+1,w
  2367  01C2  01F2               	clrf	Load@address+1
  2368  01C3  07F2               	addwf	Load@address+1,f
  2369  01C4  084A               	movf	control_transfer@page,w
  2370  01C5  01F1               	clrf	Load@address
  2371  01C6  07F1               	addwf	Load@address,f
  2372  01C7  3025               	movlw	control_transfer@data& (0+255)
  2373  01C8  00A3               	movwf	??_control_transfer
  2374  01C9  0823               	movf	??_control_transfer,w
  2375  01CA  00F3               	movwf	Load@ptr
  2376  01CB  3010               	movlw	16
  2377  01CC  00A4               	movwf	??_control_transfer+1
  2378  01CD  0824               	movf	??_control_transfer+1,w
  2379  01CE  00F4               	movwf	Load@data_length
  2380  01CF  2724               	fcall	_Load
  2381                           
  2382                           ;protocol.c: 83: SEND_SOF();
  2383  01D0  25DC               	fcall	_SEND_SOF
  2384                           
  2385                           ;protocol.c: 84: SEND_DATA_BYTE(0x05);
  2386  01D1  3005               	movlw	5
  2387  01D2  27AC               	fcall	_SEND_DATA_BYTE
  2388                           
  2389                           ;protocol.c: 85: dptr=(uint8_t*)data;
  2390  01D3  3025               	movlw	control_transfer@data& (0+255)
  2391  01D4  0020               	movlb	0	; select bank0
  2392  01D5  00A3               	movwf	??_control_transfer
  2393  01D6  0823               	movf	??_control_transfer,w
  2394  01D7  00C8               	movwf	control_transfer@dptr
  2395                           
  2396                           ;protocol.c: 86: for(i=0;i<32;i++)
  2397  01D8  01C9               	clrf	control_transfer@i
  2398  01D9  3020               	movlw	32
  2399  01DA  0249               	subwf	control_transfer@i,w
  2400  01DB  1803               	btfsc	3,0
  2401  01DC  29EF               	goto	l2897
  2402  01DD                     l2889:	
  2403                           
  2404                           ;protocol.c: 87: {
  2405                           ;protocol.c: 88: SEND_DATA_BYTE(*dptr++);
  2406  01DD  0848               	movf	control_transfer@dptr,w
  2407  01DE  0086               	movwf	6
  2408  01DF  0187               	clrf	7
  2409  01E0  0801               	movf	1,w
  2410  01E1  27AC               	fcall	_SEND_DATA_BYTE
  2411  01E2  3001               	movlw	1
  2412  01E3  0020               	movlb	0	; select bank0
  2413  01E4  00A3               	movwf	??_control_transfer
  2414  01E5  0823               	movf	??_control_transfer,w
  2415  01E6  07C8               	addwf	control_transfer@dptr,f
  2416  01E7  3001               	movlw	1
  2417  01E8  00A3               	movwf	??_control_transfer
  2418  01E9  0823               	movf	??_control_transfer,w
  2419  01EA  07C9               	addwf	control_transfer@i,f
  2420  01EB  3020               	movlw	32
  2421  01EC  0249               	subwf	control_transfer@i,w
  2422  01ED  1C03               	skipc
  2423  01EE  29DD               	goto	l2889
  2424  01EF                     l2897:	
  2425                           
  2426                           ;protocol.c: 89: }
  2427                           ;protocol.c: 90: SEND_EOF();
  2428  01EF  25EA               	fcall	_SEND_EOF
  2429                           
  2430                           ;protocol.c: 91: break;
  2431  01F0  0008               	return
  2432  01F1                     l2899:	
  2433                           ;protocol.c: 92: case 0x06:
  2434                           
  2435                           
  2436                           ;protocol.c: 93: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2437  01F1  307C               	movlw	__x& (0+255)
  2438  01F2  278E               	fcall	_GET_CHAR_HELPER
  2439  01F3  3A00               	xorlw	0
  2440  01F4  1D03               	btfss	3,2
  2441  01F5  0008               	return
  2442  01F6  306D               	movlw	__y& (0+255)
  2443  01F7  278E               	fcall	_GET_CHAR_HELPER
  2444  01F8  3A00               	xorlw	0
  2445  01F9  1D03               	btfss	3,2
  2446  01FA  0008               	return
  2447  01FB  087C               	movf	__x,w
  2448  01FC  39F0               	andlw	240
  2449  01FD  1D03               	btfss	3,2
  2450  01FE  0008               	return
  2451  01FF  0020               	movlb	0	; select bank0
  2452  0200  086D               	movf	__y,w
  2453  0201  39F0               	andlw	240
  2454  0202  1D03               	btfss	3,2
  2455  0203  0008               	return
  2456  0204  086D               	movf	__y,w
  2457  0205  00A3               	movwf	??_control_transfer
  2458  0206  3003               	movlw	3
  2459  0207                     u3785:	
  2460  0207  35A3               	lslf	??_control_transfer,f
  2461  0208  3EFF               	addlw	-1
  2462  0209  1D03               	skipz
  2463  020A  2A07               	goto	u3785
  2464  020B  3523               	lslf	??_control_transfer,w
  2465  020C  047C               	iorwf	__x,w
  2466  020D  00A4               	movwf	??_control_transfer+1
  2467  020E  0824               	movf	??_control_transfer+1,w
  2468  020F  00CC               	movwf	control_transfer@x
  2469  0210  084C               	movf	control_transfer@x,w
  2470  0211  00A3               	movwf	??_control_transfer
  2471  0212  0823               	movf	??_control_transfer,w
  2472  0213  07E6               	addwf	__checksum,f
  2473                           
  2474                           ;protocol.c: 94: *((uint8_t*)(&page))=x;
  2475  0214  084C               	movf	control_transfer@x,w
  2476  0215  00A3               	movwf	??_control_transfer
  2477  0216  0823               	movf	??_control_transfer,w
  2478  0217  00CA               	movwf	control_transfer@page
  2479                           
  2480                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2481  0218  307C               	movlw	__x& (0+255)
  2482  0219  278E               	fcall	_GET_CHAR_HELPER
  2483  021A  3A00               	xorlw	0
  2484  021B  1D03               	btfss	3,2
  2485  021C  0008               	return
  2486  021D  306D               	movlw	__y& (0+255)
  2487  021E  278E               	fcall	_GET_CHAR_HELPER
  2488  021F  3A00               	xorlw	0
  2489  0220  1D03               	btfss	3,2
  2490  0221  0008               	return
  2491  0222  087C               	movf	__x,w
  2492  0223  39F0               	andlw	240
  2493  0224  1D03               	btfss	3,2
  2494  0225  0008               	return
  2495  0226  0020               	movlb	0	; select bank0
  2496  0227  086D               	movf	__y,w
  2497  0228  39F0               	andlw	240
  2498  0229  1D03               	btfss	3,2
  2499  022A  0008               	return
  2500  022B  086D               	movf	__y,w
  2501  022C  00A3               	movwf	??_control_transfer
  2502  022D  3003               	movlw	3
  2503  022E                     u3835:	
  2504  022E  35A3               	lslf	??_control_transfer,f
  2505  022F  3EFF               	addlw	-1
  2506  0230  1D03               	skipz
  2507  0231  2A2E               	goto	u3835
  2508  0232  3523               	lslf	??_control_transfer,w
  2509  0233  047C               	iorwf	__x,w
  2510  0234  00A4               	movwf	??_control_transfer+1
  2511  0235  0824               	movf	??_control_transfer+1,w
  2512  0236  00CC               	movwf	control_transfer@x
  2513  0237  084C               	movf	control_transfer@x,w
  2514  0238  00A3               	movwf	??_control_transfer
  2515  0239  0823               	movf	??_control_transfer,w
  2516  023A  07E6               	addwf	__checksum,f
  2517                           
  2518                           ;protocol.c: 96: *(((uint8_t*)(&page))+1)=x;
  2519  023B  084C               	movf	control_transfer@x,w
  2520  023C  00A3               	movwf	??_control_transfer
  2521  023D  0823               	movf	??_control_transfer,w
  2522  023E  00CB               	movwf	control_transfer@page+1
  2523                           
  2524                           ;protocol.c: 97: dptr=(uint8_t*)data;
  2525  023F  3025               	movlw	control_transfer@data& (0+255)
  2526  0240  00A3               	movwf	??_control_transfer
  2527  0241  0823               	movf	??_control_transfer,w
  2528  0242  00C8               	movwf	control_transfer@dptr
  2529                           
  2530                           ;protocol.c: 98: for(i=0;i<32;i++)
  2531  0243  01C9               	clrf	control_transfer@i
  2532  0244  3020               	movlw	32
  2533  0245  0249               	subwf	control_transfer@i,w
  2534  0246  1803               	btfsc	3,0
  2535  0247  2A7E               	goto	l2961
  2536  0248                     l2939:	
  2537                           
  2538                           ;protocol.c: 99: {
  2539                           ;protocol.c: 100: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2540  0248  307C               	movlw	__x& (0+255)
  2541  0249  278E               	fcall	_GET_CHAR_HELPER
  2542  024A  3A00               	xorlw	0
  2543  024B  1D03               	btfss	3,2
  2544  024C  0008               	return
  2545  024D  306D               	movlw	__y& (0+255)
  2546  024E  278E               	fcall	_GET_CHAR_HELPER
  2547  024F  3A00               	xorlw	0
  2548  0250  1D03               	btfss	3,2
  2549  0251  0008               	return
  2550  0252  087C               	movf	__x,w
  2551  0253  39F0               	andlw	240
  2552  0254  1D03               	btfss	3,2
  2553  0255  0008               	return
  2554  0256  0020               	movlb	0	; select bank0
  2555  0257  086D               	movf	__y,w
  2556  0258  39F0               	andlw	240
  2557  0259  1D03               	btfss	3,2
  2558  025A  0008               	return
  2559  025B  086D               	movf	__y,w
  2560  025C  00A3               	movwf	??_control_transfer
  2561  025D  3003               	movlw	3
  2562  025E                     u3895:	
  2563  025E  35A3               	lslf	??_control_transfer,f
  2564  025F  3EFF               	addlw	-1
  2565  0260  1D03               	skipz
  2566  0261  2A5E               	goto	u3895
  2567  0262  3523               	lslf	??_control_transfer,w
  2568  0263  047C               	iorwf	__x,w
  2569  0264  00A4               	movwf	??_control_transfer+1
  2570  0265  0824               	movf	??_control_transfer+1,w
  2571  0266  00CC               	movwf	control_transfer@x
  2572  0267  084C               	movf	control_transfer@x,w
  2573  0268  00A3               	movwf	??_control_transfer
  2574  0269  0823               	movf	??_control_transfer,w
  2575  026A  07E6               	addwf	__checksum,f
  2576                           
  2577                           ;protocol.c: 101: *dptr++=x;
  2578  026B  084C               	movf	control_transfer@x,w
  2579  026C  00A3               	movwf	??_control_transfer
  2580  026D  0848               	movf	control_transfer@dptr,w
  2581  026E  0086               	movwf	6
  2582  026F  0187               	clrf	7
  2583  0270  0823               	movf	??_control_transfer,w
  2584  0271  0081               	movwf	1
  2585  0272  3001               	movlw	1
  2586  0273  00A3               	movwf	??_control_transfer
  2587  0274  0823               	movf	??_control_transfer,w
  2588  0275  07C8               	addwf	control_transfer@dptr,f
  2589  0276  3001               	movlw	1
  2590  0277  00A3               	movwf	??_control_transfer
  2591  0278  0823               	movf	??_control_transfer,w
  2592  0279  07C9               	addwf	control_transfer@i,f
  2593  027A  3020               	movlw	32
  2594  027B  0249               	subwf	control_transfer@i,w
  2595  027C  1C03               	skipc
  2596  027D  2A48               	goto	l2939
  2597  027E                     l2961:	
  2598                           
  2599                           ;protocol.c: 102: }
  2600                           ;protocol.c: 103: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2601  027E  307C               	movlw	__x& (0+255)
  2602  027F  278E               	fcall	_GET_CHAR_HELPER
  2603  0280  3A00               	xorlw	0
  2604  0281  1D03               	btfss	3,2
  2605  0282  0008               	return
  2606  0283  306D               	movlw	__y& (0+255)
  2607  0284  278E               	fcall	_GET_CHAR_HELPER
  2608  0285  3A00               	xorlw	0
  2609  0286  1D03               	btfss	3,2
  2610  0287  0008               	return
  2611  0288  087C               	movf	__x,w
  2612  0289  39F0               	andlw	240
  2613  028A  1D03               	btfss	3,2
  2614  028B  0008               	return
  2615  028C  0020               	movlb	0	; select bank0
  2616  028D  086D               	movf	__y,w
  2617  028E  39F0               	andlw	240
  2618  028F  1D03               	btfss	3,2
  2619  0290  0008               	return
  2620  0291  086D               	movf	__y,w
  2621  0292  00A3               	movwf	??_control_transfer
  2622  0293  3003               	movlw	3
  2623  0294                     u3955:	
  2624  0294  35A3               	lslf	??_control_transfer,f
  2625  0295  3EFF               	addlw	-1
  2626  0296  1D03               	skipz
  2627  0297  2A94               	goto	u3955
  2628  0298  3523               	lslf	??_control_transfer,w
  2629  0299  047C               	iorwf	__x,w
  2630  029A  00A4               	movwf	??_control_transfer+1
  2631  029B  0824               	movf	??_control_transfer+1,w
  2632  029C  00FC               	movwf	__x
  2633  029D  087C               	movf	__x,w
  2634  029E  00A3               	movwf	??_control_transfer
  2635  029F  0823               	movf	??_control_transfer,w
  2636  02A0  07E6               	addwf	__checksum,f
  2637  02A1  0866               	movf	__checksum,w
  2638  02A2  1D03               	skipz
  2639  02A3  0008               	return
  2640  02A4  307C               	movlw	__x& (0+255)
  2641  02A5  278E               	fcall	_GET_CHAR_HELPER
  2642  02A6  3A00               	xorlw	0
  2643  02A7  1D03               	btfss	3,2
  2644  02A8  0008               	return
  2645  02A9  087C               	movf	__x,w
  2646  02AA  3A11               	xorlw	17
  2647  02AB  1D03               	btfss	3,2
  2648  02AC  0008               	return
  2649                           
  2650                           ;protocol.c: 104: Save(page,data,16);
  2651  02AD  0020               	movlb	0	; select bank0
  2652  02AE  084B               	movf	control_transfer@page+1,w
  2653  02AF  01F2               	clrf	Save@address+1
  2654  02B0  07F2               	addwf	Save@address+1,f
  2655  02B1  084A               	movf	control_transfer@page,w
  2656  02B2  01F1               	clrf	Save@address
  2657  02B3  07F1               	addwf	Save@address,f
  2658  02B4  3025               	movlw	control_transfer@data& (0+255)
  2659  02B5  00A3               	movwf	??_control_transfer
  2660  02B6  0823               	movf	??_control_transfer,w
  2661  02B7  00F3               	movwf	Save@ptr
  2662  02B8  3010               	movlw	16
  2663  02B9  00A4               	movwf	??_control_transfer+1
  2664  02BA  0824               	movf	??_control_transfer+1,w
  2665  02BB  00F4               	movwf	Save@data_length
  2666  02BC  2648               	fcall	_Save
  2667                           
  2668                           ;protocol.c: 105: switch(page)
  2669  02BD  2ADC               	goto	l2995
  2670  02BE                     l2989:	
  2671                           ;protocol.c: 106: {
  2672                           ;protocol.c: 107: case 0x7F0:
  2673                           
  2674                           
  2675                           ;protocol.c: 108: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2676  02BE  30F0               	movlw	240
  2677  02BF  00F1               	movwf	Load@address
  2678  02C0  3007               	movlw	7
  2679  02C1  00F2               	movwf	Load@address+1
  2680  02C2  30C0               	movlw	_config& (0+255)
  2681  02C3  0020               	movlb	0	; select bank0
  2682  02C4  00A3               	movwf	??_control_transfer
  2683  02C5  0823               	movf	??_control_transfer,w
  2684  02C6  00F3               	movwf	Load@ptr
  2685  02C7  3009               	movlw	9
  2686  02C8  00A4               	movwf	??_control_transfer+1
  2687  02C9  0824               	movf	??_control_transfer+1,w
  2688  02CA  00F4               	movwf	Load@data_length
  2689  02CB  2724               	fcall	_Load
  2690                           
  2691                           ;protocol.c: 109: break;
  2692  02CC  2AEA               	goto	l2997
  2693  02CD                     l2991:	
  2694                           ;protocol.c: 110: case 0x7E0:
  2695                           
  2696                           
  2697                           ;protocol.c: 111: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2698  02CD  30E0               	movlw	224
  2699  02CE  00F1               	movwf	Load@address
  2700  02CF  3007               	movlw	7
  2701  02D0  00F2               	movwf	Load@address+1
  2702  02D1  30A0               	movlw	_hitlist& (0+255)
  2703  02D2  0020               	movlb	0	; select bank0
  2704  02D3  00A3               	movwf	??_control_transfer
  2705  02D4  0823               	movf	??_control_transfer,w
  2706  02D5  00F3               	movwf	Load@ptr
  2707  02D6  3010               	movlw	16
  2708  02D7  00A4               	movwf	??_control_transfer+1
  2709  02D8  0824               	movf	??_control_transfer+1,w
  2710  02D9  00F4               	movwf	Load@data_length
  2711  02DA  2724               	fcall	_Load
  2712                           
  2713                           ;protocol.c: 113: }
  2714                           
  2715                           ;protocol.c: 112: break;
  2716  02DB  2AEA               	goto	l2997
  2717  02DC                     l2995:	
  2718                           
  2719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2720                           ; Switch size 1, requested type "space"
  2721                           ; Number of cases is 1, Range of values is 7 to 7
  2722                           ; switch strategies available:
  2723                           ; Name         Instructions Cycles
  2724                           ; simple_byte            4     3 (average)
  2725                           ; direct_byte           11     9 (fixed)
  2726                           ; jumptable            263     9 (fixed)
  2727                           ;	Chosen strategy is simple_byte
  2728  02DC  0020               	movlb	0	; select bank0
  2729  02DD  084B               	movf	control_transfer@page+1,w
  2730  02DE  3A07               	xorlw	7	; case 7
  2731  02DF  1903               	skipnz
  2732  02E0  2AE2               	goto	l3283
  2733  02E1  2AEA               	goto	l2997
  2734  02E2                     l3283:	
  2735                           
  2736                           ; Switch size 1, requested type "space"
  2737                           ; Number of cases is 2, Range of values is 224 to 240
  2738                           ; switch strategies available:
  2739                           ; Name         Instructions Cycles
  2740                           ; simple_byte            7     4 (average)
  2741                           ; direct_byte           43     9 (fixed)
  2742                           ; jumptable            263     9 (fixed)
  2743                           ;	Chosen strategy is simple_byte
  2744  02E2  084A               	movf	control_transfer@page,w
  2745  02E3  3AE0               	xorlw	224	; case 224
  2746  02E4  1903               	skipnz
  2747  02E5  2ACD               	goto	l2991
  2748  02E6  3A10               	xorlw	16	; case 240
  2749  02E7  1903               	skipnz
  2750  02E8  2ABE               	goto	l2989
  2751  02E9  2AEA               	goto	l2997
  2752  02EA                     l2997:	
  2753                           
  2754                           ;protocol.c: 114: SEND_SOF();
  2755  02EA  25DC               	fcall	_SEND_SOF
  2756                           
  2757                           ;protocol.c: 115: SEND_DATA_BYTE(0x00);
  2758  02EB  3000               	movlw	0
  2759  02EC  27AC               	fcall	_SEND_DATA_BYTE
  2760                           
  2761                           ;protocol.c: 116: SEND_EOF();
  2762  02ED  25EA               	fcall	_SEND_EOF
  2763                           
  2764                           ;protocol.c: 117: break;
  2765  02EE  0008               	return
  2766  02EF                     l2999:	
  2767                           ;protocol.c: 118: case 0x7:
  2768                           
  2769                           
  2770                           ;protocol.c: 119: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2771  02EF  307C               	movlw	__x& (0+255)
  2772  02F0  278E               	fcall	_GET_CHAR_HELPER
  2773  02F1  3A00               	xorlw	0
  2774  02F2  1D03               	btfss	3,2
  2775  02F3  0008               	return
  2776  02F4  306D               	movlw	__y& (0+255)
  2777  02F5  278E               	fcall	_GET_CHAR_HELPER
  2778  02F6  3A00               	xorlw	0
  2779  02F7  1D03               	btfss	3,2
  2780  02F8  0008               	return
  2781  02F9  087C               	movf	__x,w
  2782  02FA  39F0               	andlw	240
  2783  02FB  1D03               	btfss	3,2
  2784  02FC  0008               	return
  2785  02FD  0020               	movlb	0	; select bank0
  2786  02FE  086D               	movf	__y,w
  2787  02FF  39F0               	andlw	240
  2788  0300  1D03               	btfss	3,2
  2789  0301  0008               	return
  2790  0302  086D               	movf	__y,w
  2791  0303  00A3               	movwf	??_control_transfer
  2792  0304  3003               	movlw	3
  2793  0305                     u4035:	
  2794  0305  35A3               	lslf	??_control_transfer,f
  2795  0306  3EFF               	addlw	-1
  2796  0307  1D03               	skipz
  2797  0308  2B05               	goto	u4035
  2798  0309  3523               	lslf	??_control_transfer,w
  2799  030A  047C               	iorwf	__x,w
  2800  030B  00A4               	movwf	??_control_transfer+1
  2801  030C  0824               	movf	??_control_transfer+1,w
  2802  030D  00FC               	movwf	__x
  2803  030E  087C               	movf	__x,w
  2804  030F  00A3               	movwf	??_control_transfer
  2805  0310  0823               	movf	??_control_transfer,w
  2806  0311  07E6               	addwf	__checksum,f
  2807  0312  0866               	movf	__checksum,w
  2808  0313  1D03               	skipz
  2809  0314  0008               	return
  2810  0315  307C               	movlw	__x& (0+255)
  2811  0316  278E               	fcall	_GET_CHAR_HELPER
  2812  0317  3A00               	xorlw	0
  2813  0318  1D03               	btfss	3,2
  2814  0319  0008               	return
  2815  031A  087C               	movf	__x,w
  2816  031B  3A11               	xorlw	17
  2817  031C  1D03               	btfss	3,2
  2818  031D  0008               	return
  2819                           
  2820                           ;protocol.c: 120: play_song((uint16_t*)one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2821  031E  3036               	movlw	low (_one_up| (0+32768))
  2822  031F  00F1               	movwf	play_song@song
  2823  0320  3086               	movlw	high (_one_up| (0+32768))
  2824  0321  00F2               	movwf	play_song@song+1
  2825  0322  3006               	movlw	6
  2826  0323  0020               	movlb	0	; select bank0
  2827  0324  00A3               	movwf	??_control_transfer
  2828  0325  0823               	movf	??_control_transfer,w
  2829  0326  00F3               	movwf	play_song@length
  2830  0327  30E8               	movlw	232
  2831  0328  00F4               	movwf	play_song@note_duration
  2832  0329  30FD               	movlw	253
  2833  032A  00F5               	movwf	play_song@note_duration+1
  2834  032B  01F6               	clrf	play_song@repeat
  2835  032C  2749               	fcall	_play_song
  2836                           
  2837                           ;protocol.c: 121: SEND_SOF();
  2838  032D  25DC               	fcall	_SEND_SOF
  2839                           
  2840                           ;protocol.c: 122: SEND_DATA_BYTE(0x00);
  2841  032E  3000               	movlw	0
  2842  032F  27AC               	fcall	_SEND_DATA_BYTE
  2843                           
  2844                           ;protocol.c: 123: SEND_EOF();
  2845  0330  25EA               	fcall	_SEND_EOF
  2846                           
  2847                           ;protocol.c: 128: }
  2848                           
  2849                           ;protocol.c: 127: goto err;
  2850                           
  2851                           ;protocol.c: 126: default:
  2852                           
  2853                           ;protocol.c: 124: break;
  2854  0331  0008               	return
  2855  0332                     l3029:	
  2856  0332  0020               	movlb	0	; select bank0
  2857  0333  0845               	movf	control_transfer@cmd,w
  2858                           
  2859                           ; Switch size 1, requested type "space"
  2860                           ; Number of cases is 5, Range of values is 1 to 7
  2861                           ; switch strategies available:
  2862                           ; Name         Instructions Cycles
  2863                           ; simple_byte           16     9 (average)
  2864                           ; direct_byte           23     9 (fixed)
  2865                           ; jumptable            263     9 (fixed)
  2866                           ;	Chosen strategy is simple_byte
  2867  0334  3A01               	xorlw	1	; case 1
  2868  0335  1903               	skipnz
  2869  0336  2874               	goto	l2725
  2870  0337  3A02               	xorlw	2	; case 3
  2871  0338  1903               	skipnz
  2872  0339  28AB               	goto	l2753
  2873  033A  3A07               	xorlw	7	; case 4
  2874  033B  1903               	skipnz
  2875  033C  2943               	goto	l2817
  2876  033D  3A02               	xorlw	2	; case 6
  2877  033E  1903               	skipnz
  2878  033F  29F1               	goto	l2899
  2879  0340  3A01               	xorlw	1	; case 7
  2880  0341  1903               	skipnz
  2881  0342  2AEF               	goto	l2999
  2882  0343  2B45               	goto	l407
  2883  0344  0008               	return
  2884  0345                     l407:	
  2885                           ;protocol.c: 130: return;
  2886                           
  2887                           ;protocol.c: 129: err:
  2888                           
  2889  0345  0008               	return
  2890  0346                     __end_of_control_transfer:	
  2891                           
  2892                           	psect	text6
  2893  05DC                     __ptext6:	
  2894 ;; *************** function _SEND_SOF *****************
  2895 ;; Defined at:
  2896 ;;		line 36 in file "protocol.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;		None               void
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2910 ;;      Params:         0       0       0       0
  2911 ;;      Locals:         0       0       0       0
  2912 ;;      Temps:          0       0       0       0
  2913 ;;      Totals:         0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    5
  2917 ;; This function calls:
  2918 ;;		_SEND_DATA_BYTE
  2919 ;;		_Send_Byte
  2920 ;; This function is called by:
  2921 ;;		_control_transfer
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function _SEND_SOF
  2927  05DC                     _SEND_SOF:	
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2931  05DC  3010               	movlw	16
  2932  05DD  268F               	fcall	_Send_Byte
  2933  05DE  0020               	movlb	0	; select bank0
  2934  05DF  01E6               	clrf	__checksum
  2935  05E0  0021               	movlb	1	; select bank1
  2936  05E1  0840               	movf	_config^(0+128),w
  2937  05E2  27AC               	fcall	_SEND_DATA_BYTE
  2938  05E3  0008               	return
  2939  05E4                     __end_of_SEND_SOF:	
  2940                           
  2941                           	psect	text7
  2942  05EA                     __ptext7:	
  2943 ;; *************** function _SEND_EOF *****************
  2944 ;; Defined at:
  2945 ;;		line 37 in file "protocol.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;		None
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;		None               void
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0, pclath, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2959 ;;      Params:         0       0       0       0
  2960 ;;      Locals:         0       0       0       0
  2961 ;;      Temps:          0       0       0       0
  2962 ;;      Totals:         0       0       0       0
  2963 ;;Total ram usage:        0 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    5
  2966 ;; This function calls:
  2967 ;;		_SEND_DATA_BYTE
  2968 ;;		_Send_Byte
  2969 ;; This function is called by:
  2970 ;;		_control_transfer
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _SEND_EOF
  2976  05EA                     _SEND_EOF:	
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2980  05EA  0020               	movlb	0	; select bank0
  2981  05EB  0866               	movf	__checksum,w
  2982  05EC  27AC               	fcall	_SEND_DATA_BYTE
  2983  05ED  3011               	movlw	17
  2984  05EE  268F               	fcall	_Send_Byte
  2985  05EF  0008               	return
  2986  05F0                     __end_of_SEND_EOF:	
  2987                           
  2988                           	psect	text8
  2989  07AC                     __ptext8:	
  2990 ;; *************** function _SEND_DATA_BYTE *****************
  2991 ;; Defined at:
  2992 ;;		line 35 in file "protocol.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  b               1    wreg     unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  b               1    2[BANK0 ] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;		None               void
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0, pclath, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3006 ;;      Params:         0       0       0       0
  3007 ;;      Locals:         0       1       0       0
  3008 ;;      Temps:          0       2       0       0
  3009 ;;      Totals:         0       3       0       0
  3010 ;;Total ram usage:        3 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    4
  3013 ;; This function calls:
  3014 ;;		_Send_Byte
  3015 ;; This function is called by:
  3016 ;;		_SEND_SOF
  3017 ;;		_SEND_EOF
  3018 ;;		_control_transfer
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _SEND_DATA_BYTE
  3024  07AC                     _SEND_DATA_BYTE:	
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3028                           ;SEND_DATA_BYTE@b stored from wreg
  3029  07AC  0020               	movlb	0	; select bank0
  3030  07AD  00A2               	movwf	SEND_DATA_BYTE@b
  3031  07AE  0822               	movf	SEND_DATA_BYTE@b,w
  3032  07AF  390F               	andlw	15
  3033  07B0  00A0               	movwf	??_SEND_DATA_BYTE
  3034  07B1  0820               	movf	??_SEND_DATA_BYTE,w
  3035  07B2  00FC               	movwf	__x
  3036  07B3  0822               	movf	SEND_DATA_BYTE@b,w
  3037  07B4  00A0               	movwf	??_SEND_DATA_BYTE
  3038  07B5  3004               	movlw	4
  3039  07B6                     u3125:	
  3040  07B6  36A0               	lsrf	??_SEND_DATA_BYTE,f
  3041  07B7  0B89               	decfsz	9,f
  3042  07B8  2FB6               	goto	u3125
  3043  07B9  0820               	movf	??_SEND_DATA_BYTE,w
  3044  07BA  00A1               	movwf	??_SEND_DATA_BYTE+1
  3045  07BB  0821               	movf	??_SEND_DATA_BYTE+1,w
  3046  07BC  00ED               	movwf	__y
  3047  07BD  087C               	movf	__x,w
  3048  07BE  268F               	fcall	_Send_Byte
  3049  07BF  0020               	movlb	0	; select bank0
  3050  07C0  086D               	movf	__y,w
  3051  07C1  268F               	fcall	_Send_Byte
  3052  07C2  0020               	movlb	0	; select bank0
  3053  07C3  0822               	movf	SEND_DATA_BYTE@b,w
  3054  07C4  02E6               	subwf	__checksum,f
  3055  07C5  0008               	return
  3056  07C6                     __end_of_SEND_DATA_BYTE:	
  3057                           
  3058                           	psect	text9
  3059  078E                     __ptext9:	
  3060 ;; *************** function _GET_CHAR_HELPER *****************
  3061 ;; Defined at:
  3062 ;;		line 29 in file "protocol.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  val             1    wreg     PTR unsigned char 
  3065 ;;		 -> _y(1), _x(1), 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  val             1    2[COMMON] PTR unsigned char 
  3068 ;;		 -> _y(1), _x(1), 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr1l, fsr1h, status,2
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3078 ;;      Params:         0       0       0       0
  3079 ;;      Locals:         1       0       0       0
  3080 ;;      Temps:          1       0       0       0
  3081 ;;      Totals:         2       0       0       0
  3082 ;;Total ram usage:        2 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    1
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_control_transfer
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           
  3093                           ;psect for function _GET_CHAR_HELPER
  3094  078E                     _GET_CHAR_HELPER:	
  3095                           
  3096                           ;incstack = 0
  3097                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3098                           ;GET_CHAR_HELPER@val stored from wreg
  3099  078E  00F2               	movwf	GET_CHAR_HELPER@val
  3100  078F  0020               	movlb	0	; select bank0
  3101  0790  01DC               	clrf	__i
  3102  0791  01DD               	clrf	__i+1
  3103  0792                     l287:	
  3104  0792  1A91               	btfsc	17,5	;volatile
  3105  0793  2FA1               	goto	l1881
  3106  0794  3001               	movlw	1
  3107  0795  07DC               	addwf	__i,f
  3108  0796  3000               	movlw	0
  3109  0797  3DDD               	addwfc	__i+1,f
  3110  0798  3075               	movlw	117
  3111  0799  025D               	subwf	__i+1,w
  3112  079A  3030               	movlw	48
  3113  079B  1903               	skipnz
  3114  079C  025C               	subwf	__i,w
  3115  079D  1C03               	skipc
  3116  079E  2F92               	goto	l287
  3117  079F  3001               	movlw	1
  3118  07A0  0008               	return
  3119  07A1                     l1881:	
  3120  07A1  0023               	movlb	3	; select bank3
  3121  07A2  0819               	movf	25,w	;volatile
  3122  07A3  3AAA               	xorlw	170
  3123  07A4  00F1               	movwf	??_GET_CHAR_HELPER
  3124  07A5  0872               	movf	GET_CHAR_HELPER@val,w
  3125  07A6  0086               	movwf	6
  3126  07A7  0187               	clrf	7
  3127  07A8  0871               	movf	??_GET_CHAR_HELPER,w
  3128  07A9  0081               	movwf	1
  3129  07AA  3000               	movlw	0
  3130  07AB  0008               	return
  3131  07AC                     __end_of_GET_CHAR_HELPER:	
  3132                           
  3133                           	psect	text10
  3134  0508                     __ptext10:	
  3135 ;; *************** function _add_to_hitlist *****************
  3136 ;; Defined at:
  3137 ;;		line 305 in file "user.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  gun             1    wreg     unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  gun             1    5[COMMON] unsigned char 
  3142 ;;  i               1    8[COMMON] unsigned char 
  3143 ;;  gun16           2    6[COMMON] unsigned int 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3153 ;;      Params:         0       0       0       0
  3154 ;;      Locals:         4       0       0       0
  3155 ;;      Temps:          4       0       0       0
  3156 ;;      Totals:         8       0       0       0
  3157 ;;Total ram usage:        8 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    1
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_hit_by
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _add_to_hitlist
  3169  0508                     _add_to_hitlist:	
  3170                           
  3171                           ;incstack = 0
  3172                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3173                           ;add_to_hitlist@gun stored from wreg
  3174  0508  00F5               	movwf	add_to_hitlist@gun
  3175                           
  3176                           ;user.c: 307: uint16_t gun16 = gun & 0x7F;
  3177  0509  0875               	movf	add_to_hitlist@gun,w
  3178  050A  397F               	andlw	127
  3179  050B  00F1               	movwf	??_add_to_hitlist
  3180  050C  01F2               	clrf	??_add_to_hitlist+1
  3181  050D  0871               	movf	??_add_to_hitlist,w
  3182  050E  00F6               	movwf	add_to_hitlist@gun16
  3183  050F  0872               	movf	??_add_to_hitlist+1,w
  3184  0510  00F7               	movwf	add_to_hitlist@gun16+1
  3185                           
  3186                           ;user.c: 308: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3187  0511  01F8               	clrf	add_to_hitlist@i
  3188  0512                     L2:	
  3189  0512  3010               	movlw	16
  3190  0513  0278               	subwf	add_to_hitlist@i,w
  3191  0514  1803               	btfsc	3,0
  3192  0515  0008               	return
  3193                           
  3194                           ;user.c: 309: {
  3195                           ;user.c: 310: if(!(hitlist[i] & 0x007F))
  3196  0516  3578               	lslf	add_to_hitlist@i,w
  3197  0517  3EA0               	addlw	_hitlist& (0+255)
  3198  0518  0086               	movwf	6
  3199  0519  0187               	clrf	7
  3200  051A  3F40               	moviw [0]fsr1
  3201  051B  00F1               	movwf	??_add_to_hitlist
  3202  051C  3F41               	moviw [1]fsr1
  3203  051D  00F2               	movwf	??_add_to_hitlist+1
  3204  051E  307F               	movlw	127
  3205  051F  0571               	andwf	??_add_to_hitlist,w
  3206  0520  00F3               	movwf	??_add_to_hitlist+2
  3207  0521  3000               	movlw	0
  3208  0522  0572               	andwf	??_add_to_hitlist+1,w
  3209  0523  00F4               	movwf	??_add_to_hitlist+3
  3210  0524  0874               	movf	??_add_to_hitlist+3,w
  3211  0525  0473               	iorwf	??_add_to_hitlist+2,w
  3212  0526  1D03               	skipz
  3213  0527  2D32               	goto	l2305
  3214                           
  3215                           ;user.c: 311: {
  3216                           ;user.c: 312: hitlist[i] |= gun16;
  3217  0528  3578               	lslf	add_to_hitlist@i,w
  3218  0529  3EA0               	addlw	_hitlist& (0+255)
  3219  052A  0086               	movwf	6
  3220  052B  0187               	clrf	7
  3221  052C  0876               	movf	add_to_hitlist@gun16,w
  3222  052D  0481               	iorwf	1,f
  3223  052E  3141               	addfsr 1,1
  3224  052F  0877               	movf	add_to_hitlist@gun16+1,w
  3225  0530  0481               	iorwf	1,f
  3226                           
  3227                           ;user.c: 313: return;
  3228  0531  0008               	return
  3229  0532                     l2305:	
  3230                           
  3231                           ;user.c: 314: }
  3232                           ;user.c: 315: if(!(hitlist[i] & 0x3F80))
  3233  0532  3578               	lslf	add_to_hitlist@i,w
  3234  0533  3EA0               	addlw	_hitlist& (0+255)
  3235  0534  0086               	movwf	6
  3236  0535  0187               	clrf	7
  3237  0536  3F40               	moviw [0]fsr1
  3238  0537  00F1               	movwf	??_add_to_hitlist
  3239  0538  3F41               	moviw [1]fsr1
  3240  0539  00F2               	movwf	??_add_to_hitlist+1
  3241  053A  3080               	movlw	128
  3242  053B  0571               	andwf	??_add_to_hitlist,w
  3243  053C  00F3               	movwf	??_add_to_hitlist+2
  3244  053D  303F               	movlw	63
  3245  053E  0572               	andwf	??_add_to_hitlist+1,w
  3246  053F  00F4               	movwf	??_add_to_hitlist+3
  3247  0540  0874               	movf	??_add_to_hitlist+3,w
  3248  0541  0473               	iorwf	??_add_to_hitlist+2,w
  3249  0542  1D03               	skipz
  3250  0543  2D57               	goto	l2311
  3251                           
  3252                           ;user.c: 316: {
  3253                           ;user.c: 317: hitlist[i] |= gun16 << 7;
  3254  0544  0877               	movf	add_to_hitlist@gun16+1,w
  3255  0545  00F2               	movwf	??_add_to_hitlist+1
  3256  0546  0876               	movf	add_to_hitlist@gun16,w
  3257  0547  00F1               	movwf	??_add_to_hitlist
  3258  0548  3007               	movlw	7
  3259  0549                     u2705:	
  3260  0549  35F1               	lslf	??_add_to_hitlist,f
  3261  054A  0DF2               	rlf	??_add_to_hitlist+1,f
  3262  054B  0B89               	decfsz	9,f
  3263  054C  2D49               	goto	u2705
  3264  054D  3578               	lslf	add_to_hitlist@i,w
  3265  054E  3EA0               	addlw	_hitlist& (0+255)
  3266  054F  0086               	movwf	6
  3267  0550  0187               	clrf	7
  3268  0551  0871               	movf	??_add_to_hitlist,w
  3269  0552  0481               	iorwf	1,f
  3270  0553  3141               	addfsr 1,1
  3271  0554  0872               	movf	??_add_to_hitlist+1,w
  3272  0555  0481               	iorwf	1,f
  3273                           
  3274                           ;user.c: 318: return;
  3275  0556  0008               	return
  3276  0557                     l2311:	
  3277  0557  3001               	movlw	1
  3278  0558  00F1               	movwf	??_add_to_hitlist
  3279  0559  0871               	movf	??_add_to_hitlist,w
  3280  055A  07F8               	addwf	add_to_hitlist@i,f
  3281  055B  2D12               	goto	L2
  3282  055C                     __end_of_add_to_hitlist:	
  3283                           
  3284                           	psect	text11
  3285  0346                     __ptext11:	
  3286 ;; *************** function _handle_fire *****************
  3287 ;; Defined at:
  3288 ;;		line 246 in file "user.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  a               2    2[BANK0 ] unsigned int 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      unsigned char 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3302 ;;      Params:         0       0       0       0
  3303 ;;      Locals:         0       2       0       0
  3304 ;;      Temps:          0       2       0       0
  3305 ;;      Totals:         0       4       0       0
  3306 ;;Total ram usage:        4 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    4
  3309 ;; This function calls:
  3310 ;;		_ADC_read
  3311 ;;		_Send_Byte
  3312 ;;		_cheat
  3313 ;;		_green_led_on
  3314 ;;		_play_song
  3315 ;;		_stop_song
  3316 ;; This function is called by:
  3317 ;;		_main
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _handle_fire
  3323  0346                     _handle_fire:	
  3324                           
  3325                           ;user.c: 247: static uint16_t timer = 0;
  3326                           ;user.c: 248: static uint16_t counter = 0;
  3327                           ;user.c: 249: uint16_t a;
  3328                           ;user.c: 251: a=ADC_read();
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3332  0346  25AF               	fcall	_ADC_read
  3333  0347  0872               	movf	?_ADC_read+1,w
  3334  0348  0020               	movlb	0	; select bank0
  3335  0349  01A3               	clrf	handle_fire@a+1
  3336  034A  07A3               	addwf	handle_fire@a+1,f
  3337  034B  0871               	movf	?_ADC_read,w
  3338  034C  01A2               	clrf	handle_fire@a
  3339  034D  07A2               	addwf	handle_fire@a,f
  3340                           
  3341                           ;user.c: 252: if (a > config.fire_cheating){
  3342  034E  0823               	movf	handle_fire@a+1,w
  3343  034F  0021               	movlb	1	; select bank1
  3344  0350  024D               	subwf	((_config+1)^(0+128)+12),w
  3345  0351  1D03               	skipz
  3346  0352  2B57               	goto	u4275
  3347  0353  0020               	movlb	0	; select bank0
  3348  0354  0822               	movf	handle_fire@a,w
  3349  0355  0021               	movlb	1	; select bank1
  3350  0356  024C               	subwf	(_config^(0+128)+12),w
  3351  0357                     u4275:	
  3352  0357  1803               	skipnc
  3353  0358  2B5A               	goto	l3213
  3354                           
  3355                           ;user.c: 253: cheat();
  3356  0359  276D               	fcall	_cheat
  3357  035A                     l3213:	
  3358                           
  3359                           ;user.c: 254: }
  3360                           ;user.c: 255: if (a > config.fire_threshold && a < config.fire_cheating)
  3361  035A  0020               	movlb	0	; select bank0
  3362  035B  0823               	movf	handle_fire@a+1,w
  3363  035C  0021               	movlb	1	; select bank1
  3364  035D  024B               	subwf	((_config+1)^(0+128)+10),w
  3365  035E  1D03               	skipz
  3366  035F  2B64               	goto	u4285
  3367  0360  0020               	movlb	0	; select bank0
  3368  0361  0822               	movf	handle_fire@a,w
  3369  0362  0021               	movlb	1	; select bank1
  3370  0363  024A               	subwf	(_config^(0+128)+10),w
  3371  0364                     u4285:	
  3372  0364  1803               	skipnc
  3373  0365  2BC8               	goto	l200
  3374  0366  084D               	movf	((_config+1)^(0+128)+12),w
  3375  0367  0020               	movlb	0	; select bank0
  3376  0368  0223               	subwf	handle_fire@a+1,w
  3377  0369  1D03               	skipz
  3378  036A  2B6F               	goto	u4295
  3379  036B  0021               	movlb	1	; select bank1
  3380  036C  084C               	movf	(_config^(0+128)+12),w
  3381  036D  0020               	movlb	0	; select bank0
  3382  036E  0222               	subwf	handle_fire@a,w
  3383  036F                     u4295:	
  3384  036F  1803               	skipnc
  3385  0370  2BC8               	goto	l200
  3386  0371                     l201:	
  3387                           ;user.c: 256: {
  3388                           ;user.c: 257: while(!my_random_number){
  3389                           
  3390  0371  086A               	movf	_my_random_number,w
  3391  0372  1D03               	skipz
  3392  0373  2B79               	goto	l3221
  3393                           
  3394                           ;user.c: 258: my_random_number = TMR0;
  3395  0374  0815               	movf	21,w	;volatile
  3396  0375  00A0               	movwf	??_handle_fire
  3397  0376  0820               	movf	??_handle_fire,w
  3398  0377  00EA               	movwf	_my_random_number
  3399  0378  2B71               	goto	l201
  3400  0379                     l3221:	
  3401                           
  3402                           ;user.c: 259: }
  3403                           ;user.c: 260: if(timer < config.fire_holdoff)
  3404  0379  0021               	movlb	1	; select bank1
  3405  037A  084F               	movf	((_config+1)^(0+128)+14),w
  3406  037B  0020               	movlb	0	; select bank0
  3407  037C  0265               	subwf	handle_fire@timer+1,w
  3408  037D  1D03               	skipz
  3409  037E  2B83               	goto	u4315
  3410  037F  0021               	movlb	1	; select bank1
  3411  0380  084E               	movf	(_config^(0+128)+14),w
  3412  0381  0020               	movlb	0	; select bank0
  3413  0382  0264               	subwf	handle_fire@timer,w
  3414  0383                     u4315:	
  3415  0383  1803               	skipnc
  3416  0384  2B8A               	goto	l3225
  3417                           
  3418                           ;user.c: 261: {
  3419                           ;user.c: 262: timer ++;
  3420  0385  3001               	movlw	1
  3421  0386  07E4               	addwf	handle_fire@timer,f
  3422  0387  3000               	movlw	0
  3423  0388  3DE5               	addwfc	handle_fire@timer+1,f
  3424                           
  3425                           ;user.c: 263: }
  3426  0389  0008               	return
  3427  038A                     l3225:	
  3428                           
  3429                           ;user.c: 264: else
  3430                           ;user.c: 265: {
  3431                           ;user.c: 266: if(!config.power || counter <= config.power)
  3432  038A  3002               	movlw	2
  3433  038B  3EC0               	addlw	_config& (0+255)
  3434  038C  0086               	movwf	6
  3435  038D  0187               	clrf	7
  3436  038E  0016               	moviw fsr1++
  3437  038F  0401               	iorwf	1,w
  3438  0390  1903               	skipnz
  3439  0391  2B9D               	goto	l3229
  3440  0392  0863               	movf	handle_fire@counter+1,w
  3441  0393  0021               	movlb	1	; select bank1
  3442  0394  0243               	subwf	((_config+1)^(0+128)+2),w
  3443  0395  1D03               	skipz
  3444  0396  2B9B               	goto	u4335
  3445  0397  0020               	movlb	0	; select bank0
  3446  0398  0862               	movf	handle_fire@counter,w
  3447  0399  0021               	movlb	1	; select bank1
  3448  039A  0242               	subwf	(_config^(0+128)+2),w
  3449  039B                     u4335:	
  3450  039B  1C03               	skipc
  3451  039C  2BC6               	goto	l206
  3452  039D                     l3229:	
  3453                           
  3454                           ;user.c: 267: {
  3455                           ;user.c: 268: if(!counter)
  3456  039D  0020               	movlb	0	; select bank0
  3457  039E  0863               	movf	handle_fire@counter+1,w
  3458  039F  0462               	iorwf	handle_fire@counter,w
  3459  03A0  1D03               	skipz
  3460  03A1  2BBD               	goto	l3235
  3461                           
  3462                           ;user.c: 269: {
  3463                           ;user.c: 270: green_led_on();
  3464  03A2  25F6               	fcall	_green_led_on
  3465                           
  3466                           ;user.c: 271: play_song((uint16_t*)fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(c
      +                          onfig.power));
  3467  03A3  3026               	movlw	low (_fire_song| (0+32768))
  3468  03A4  00F1               	movwf	play_song@song
  3469  03A5  3086               	movlw	high (_fire_song| (0+32768))
  3470  03A6  00F2               	movwf	play_song@song+1
  3471  03A7  3008               	movlw	8
  3472  03A8  0020               	movlb	0	; select bank0
  3473  03A9  00A0               	movwf	??_handle_fire
  3474  03AA  0820               	movf	??_handle_fire,w
  3475  03AB  00F3               	movwf	play_song@length
  3476  03AC  30B8               	movlw	184
  3477  03AD  00F4               	movwf	play_song@note_duration
  3478  03AE  300B               	movlw	11
  3479  03AF  00F5               	movwf	play_song@note_duration+1
  3480  03B0  3002               	movlw	2
  3481  03B1  3EC0               	addlw	_config& (0+255)
  3482  03B2  0086               	movwf	6
  3483  03B3  0187               	clrf	7
  3484  03B4  0016               	moviw fsr1++
  3485  03B5  0401               	iorwf	1,w
  3486  03B6  3000               	movlw	0
  3487  03B7  1903               	skipnz
  3488  03B8  3001               	movlw	1
  3489  03B9  00A1               	movwf	??_handle_fire+1
  3490  03BA  0821               	movf	??_handle_fire+1,w
  3491  03BB  00F6               	movwf	play_song@repeat
  3492  03BC  2749               	fcall	_play_song
  3493  03BD                     l3235:	
  3494                           
  3495                           ;user.c: 272: }
  3496                           ;user.c: 273: Send_Byte(config.id);
  3497  03BD  0021               	movlb	1	; select bank1
  3498  03BE  0840               	movf	_config^(0+128),w
  3499  03BF  268F               	fcall	_Send_Byte
  3500                           
  3501                           ;user.c: 274: counter++;
  3502  03C0  3001               	movlw	1
  3503  03C1  0020               	movlb	0	; select bank0
  3504  03C2  07E2               	addwf	handle_fire@counter,f
  3505  03C3  3000               	movlw	0
  3506  03C4  3DE3               	addwfc	handle_fire@counter+1,f
  3507                           
  3508                           ;user.c: 275: }
  3509  03C5  0008               	return
  3510  03C6                     l206:	
  3511                           
  3512                           ;user.c: 276: else
  3513                           ;user.c: 277: {
  3514                           ;user.c: 278: {TRISAbits.TRISA5 = 1;};
  3515  03C6  168C               	bsf	12,5	;volatile
  3516                           
  3517                           ;user.c: 279: }
  3518                           ;user.c: 280: }
  3519                           ;user.c: 281: }
  3520  03C7  0008               	return
  3521  03C8                     l200:	
  3522                           
  3523                           ;user.c: 282: else
  3524                           ;user.c: 283: {
  3525                           ;user.c: 284: {TRISAbits.TRISA5 = 1;};
  3526  03C8  0021               	movlb	1	; select bank1
  3527  03C9  168C               	bsf	12,5	;volatile
  3528                           
  3529                           ;user.c: 285: if(!config.power && counter) stop_song();
  3530  03CA  0843               	movf	((_config+1)^(0+128)+2),w
  3531  03CB  0442               	iorwf	(_config^(0+128)+2),w
  3532  03CC  1D03               	skipz
  3533  03CD  2BD4               	goto	l3245
  3534  03CE  0020               	movlb	0	; select bank0
  3535  03CF  0863               	movf	handle_fire@counter+1,w
  3536  03D0  0462               	iorwf	handle_fire@counter,w
  3537  03D1  1903               	skipnz
  3538  03D2  2BD4               	goto	l3245
  3539  03D3  25F0               	fcall	_stop_song
  3540  03D4                     l3245:	
  3541                           
  3542                           ;user.c: 286: timer = 0;
  3543  03D4  0020               	movlb	0	; select bank0
  3544  03D5  01E4               	clrf	handle_fire@timer
  3545  03D6  01E5               	clrf	handle_fire@timer+1
  3546                           
  3547                           ;user.c: 287: counter = 0;
  3548  03D7  01E2               	clrf	handle_fire@counter
  3549  03D8  01E3               	clrf	handle_fire@counter+1
  3550                           
  3551                           ;user.c: 288: return 0;
  3552                           ;	Return value of _handle_fire is never used
  3553  03D9  0008               	return
  3554  03DA                     __end_of_handle_fire:	
  3555                           ;user.c: 289: }
  3556                           ;user.c: 290: return 1;
  3557                           ;	Return value of _handle_fire is never used
  3558                           
  3559                           
  3560                           	psect	text12
  3561  05F0                     __ptext12:	
  3562 ;; *************** function _stop_song *****************
  3563 ;; Defined at:
  3564 ;;		line 105 in file "user.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;		None               void
  3571 ;; Registers used:
  3572 ;;		None
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3578 ;;      Params:         0       0       0       0
  3579 ;;      Locals:         0       0       0       0
  3580 ;;      Temps:          0       0       0       0
  3581 ;;      Totals:         0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    1
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_handle_music
  3589 ;;		_handle_fire
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           
  3594                           ;psect for function _stop_song
  3595  05F0                     _stop_song:	
  3596                           
  3597                           ;user.c: 107: {PWM3CONbits.PWM3OE = 0;};
  3598                           
  3599                           ;incstack = 0
  3600                           ; Regs used in _stop_song: []
  3601  05F0  003B               	movlb	27	; select bank27
  3602  05F1  133B               	bcf	59,6	;volatile
  3603                           
  3604                           ;user.c: 108: T1CONbits.TMR1ON=0;
  3605  05F2  0020               	movlb	0	; select bank0
  3606  05F3  1018               	bcf	24,0	;volatile
  3607                           
  3608                           ;user.c: 109: PIR1bits.TMR1IF=0;
  3609  05F4  1011               	bcf	17,0	;volatile
  3610  05F5  0008               	return
  3611  05F6                     __end_of_stop_song:	
  3612                           
  3613                           	psect	text13
  3614  0749                     __ptext13:	
  3615 ;; *************** function _play_song *****************
  3616 ;; Defined at:
  3617 ;;		line 92 in file "user.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  song            2    1[COMMON] PTR unsigned int 
  3620 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(16), 
  3621 ;;  length          1    3[COMMON] unsigned char 
  3622 ;;  note_duratio    2    4[COMMON] unsigned int 
  3623 ;;  repeat          1    6[COMMON] unsigned char 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;		None               void
  3628 ;; Registers used:
  3629 ;;		wreg, status,2, status,0
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3635 ;;      Params:         6       0       0       0
  3636 ;;      Locals:         0       0       0       0
  3637 ;;      Temps:          2       0       0       0
  3638 ;;      Totals:         8       0       0       0
  3639 ;;Total ram usage:        8 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    1
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_handle_fire
  3646 ;;		_super_dead_mode
  3647 ;;		_hit_by
  3648 ;;		_control_transfer
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _play_song
  3654  0749                     _play_song:	
  3655                           
  3656                           ;user.c: 94: cur_song=song;
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3660  0749  0872               	movf	play_song@song+1,w
  3661  074A  0020               	movlb	0	; select bank0
  3662  074B  01DF               	clrf	_cur_song+1
  3663  074C  07DF               	addwf	_cur_song+1,f
  3664  074D  0871               	movf	play_song@song,w
  3665  074E  01DE               	clrf	_cur_song
  3666  074F  07DE               	addwf	_cur_song,f
  3667                           
  3668                           ;user.c: 95: cur_song_length=length;
  3669  0750  0873               	movf	play_song@length,w
  3670  0751  00F7               	movwf	??_play_song
  3671  0752  0877               	movf	??_play_song,w
  3672  0753  00E7               	movwf	_cur_song_length
  3673                           
  3674                           ;user.c: 96: cur_song_ptr=0;
  3675  0754  01E8               	clrf	_cur_song_ptr
  3676                           
  3677                           ;user.c: 97: cur_song_repeat=repeat;
  3678  0755  0876               	movf	play_song@repeat,w
  3679  0756  00F7               	movwf	??_play_song
  3680  0757  0877               	movf	??_play_song,w
  3681  0758  00E9               	movwf	_cur_song_repeat
  3682                           
  3683                           ;user.c: 98: cur_song_duration=note_duration;
  3684  0759  0875               	movf	play_song@note_duration+1,w
  3685  075A  01E1               	clrf	_cur_song_duration+1
  3686  075B  07E1               	addwf	_cur_song_duration+1,f
  3687  075C  0874               	movf	play_song@note_duration,w
  3688  075D  01E0               	clrf	_cur_song_duration
  3689  075E  07E0               	addwf	_cur_song_duration,f
  3690                           
  3691                           ;user.c: 100: TMR1 = -cur_song_duration;
  3692  075F  0960               	comf	_cur_song_duration,w
  3693  0760  00F7               	movwf	??_play_song
  3694  0761  0961               	comf	_cur_song_duration+1,w
  3695  0762  00F8               	movwf	??_play_song+1
  3696  0763  0AF7               	incf	??_play_song,f
  3697  0764  1903               	skipnz
  3698  0765  0AF8               	incf	??_play_song+1,f
  3699  0766  0877               	movf	??_play_song,w
  3700  0767  0096               	movwf	22	;volatile
  3701  0768  0878               	movf	??_play_song+1,w
  3702  0769  0097               	movwf	23	;volatile
  3703                           
  3704                           ;user.c: 101: PIR1bits.TMR1IF = 1;
  3705  076A  1411               	bsf	17,0	;volatile
  3706                           
  3707                           ;user.c: 102: T1CONbits.TMR1ON = 1;
  3708  076B  1418               	bsf	24,0	;volatile
  3709  076C  0008               	return
  3710  076D                     __end_of_play_song:	
  3711                           
  3712                           	psect	text14
  3713  05F6                     __ptext14:	
  3714 ;; *************** function _green_led_on *****************
  3715 ;; Defined at:
  3716 ;;		line 86 in file "user.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;		None
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;		None
  3721 ;; Return value:  Size  Location     Type
  3722 ;;		None               void
  3723 ;; Registers used:
  3724 ;;		None
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3730 ;;      Params:         0       0       0       0
  3731 ;;      Locals:         0       0       0       0
  3732 ;;      Temps:          0       0       0       0
  3733 ;;      Totals:         0       0       0       0
  3734 ;;Total ram usage:        0 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    1
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_handle_fire
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _green_led_on
  3746  05F6                     _green_led_on:	
  3747                           
  3748                           ;user.c: 88: TRISAbits.TRISA5 = 0;
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in _green_led_on: []
  3752  05F6  0021               	movlb	1	; select bank1
  3753  05F7  128C               	bcf	12,5	;volatile
  3754                           
  3755                           ;user.c: 89: PORTAbits.RA5 = 1;
  3756  05F8  0020               	movlb	0	; select bank0
  3757  05F9  168C               	bsf	12,5	;volatile
  3758  05FA  0008               	return
  3759  05FB                     __end_of_green_led_on:	
  3760                           
  3761                           	psect	text15
  3762  068F                     __ptext15:	
  3763 ;; *************** function _Send_Byte *****************
  3764 ;; Defined at:
  3765 ;;		line 155 in file "user.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  data            1    wreg     unsigned char 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  data            1    9[COMMON] unsigned char 
  3770 ;;  i               2   10[COMMON] unsigned int 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3780 ;;      Params:         0       0       0       0
  3781 ;;      Locals:         3       0       0       0
  3782 ;;      Temps:          1       0       0       0
  3783 ;;      Totals:         4       0       0       0
  3784 ;;Total ram usage:        4 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    3
  3787 ;; This function calls:
  3788 ;;		_cheat
  3789 ;;		_delay_1_ms
  3790 ;; This function is called by:
  3791 ;;		_handle_fire
  3792 ;;		_super_dead_mode
  3793 ;;		_SEND_DATA_BYTE
  3794 ;;		_SEND_SOF
  3795 ;;		_SEND_EOF
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _Send_Byte
  3801  068F                     _Send_Byte:	
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3805                           ;Send_Byte@data stored from wreg
  3806  068F  00F9               	movwf	Send_Byte@data
  3807                           
  3808                           ;user.c: 157: data ^= 0b10101010;
  3809  0690  30AA               	movlw	170
  3810  0691  00F8               	movwf	??_Send_Byte
  3811  0692  0878               	movf	??_Send_Byte,w
  3812  0693  06F9               	xorwf	Send_Byte@data,f
  3813                           
  3814                           ;user.c: 158: delay_1_ms();
  3815  0694  25C1               	fcall	_delay_1_ms
  3816                           
  3817                           ;user.c: 159: RCSTAbits.CREN = 0;
  3818  0695  0023               	movlb	3	; select bank3
  3819  0696  121D               	bcf	29,4	;volatile
  3820                           
  3821                           ;user.c: 161: for(uint16_t i=0; i<100; i++){
  3822  0697  01FA               	clrf	Send_Byte@i
  3823  0698  01FB               	clrf	Send_Byte@i+1
  3824  0699  3000               	movlw	0
  3825  069A  027B               	subwf	Send_Byte@i+1,w
  3826  069B  3064               	movlw	100
  3827  069C  1903               	skipnz
  3828  069D  027A               	subwf	Send_Byte@i,w
  3829  069E  1803               	btfsc	3,0
  3830  069F  2EB5               	goto	l160
  3831  06A0                     l159:	
  3832                           
  3833                           ;user.c: 162: if(PORTAbits.RA1){break;}
  3834  06A0  0020               	movlb	0	; select bank0
  3835  06A1  188C               	btfsc	12,1	;volatile
  3836  06A2  2EB5               	goto	l160
  3837                           
  3838                           ;user.c: 163: delay_1_ms();
  3839  06A3  25C1               	fcall	_delay_1_ms
  3840                           
  3841                           ;user.c: 164: if(i==99){cheat();}
  3842  06A4  3063               	movlw	99
  3843  06A5  067A               	xorwf	Send_Byte@i,w
  3844  06A6  047B               	iorwf	Send_Byte@i+1,w
  3845  06A7  1D03               	skipz
  3846  06A8  2EAA               	goto	l2633
  3847  06A9  276D               	fcall	_cheat
  3848  06AA                     l2633:	
  3849  06AA  3001               	movlw	1
  3850  06AB  07FA               	addwf	Send_Byte@i,f
  3851  06AC  3000               	movlw	0
  3852  06AD  3DFB               	addwfc	Send_Byte@i+1,f
  3853  06AE  3000               	movlw	0
  3854  06AF  027B               	subwf	Send_Byte@i+1,w
  3855  06B0  3064               	movlw	100
  3856  06B1  1903               	skipnz
  3857  06B2  027A               	subwf	Send_Byte@i,w
  3858  06B3  1C03               	skipc
  3859  06B4  2EA0               	goto	l159
  3860  06B5                     l160:	
  3861                           
  3862                           ;user.c: 165: }
  3863                           ;user.c: 167: { DACCON0bits.DACEN = 1; TMR0=0; INTCONbits.TMR0IF=1; INTCONbits.TMR0IE=1;
      +                          };
  3864  06B5  0022               	movlb	2	; select bank2
  3865  06B6  1798               	bsf	24,7	;volatile
  3866  06B7  0020               	movlb	0	; select bank0
  3867  06B8  0195               	clrf	21	;volatile
  3868  06B9  150B               	bsf	11,2	;volatile
  3869  06BA  168B               	bsf	11,5	;volatile
  3870                           
  3871                           ;user.c: 168: TXREG = data;
  3872  06BB  0879               	movf	Send_Byte@data,w
  3873  06BC  0023               	movlb	3	; select bank3
  3874  06BD  009A               	movwf	26	;volatile
  3875  06BE                     l163:	
  3876                           ;user.c: 169: while(!TXSTAbits.TRMT);
  3877                           
  3878  06BE  1C9E               	btfss	30,1	;volatile
  3879  06BF  2EBE               	goto	l163
  3880                           
  3881                           ;user.c: 170: { INTCONbits.TMR0IE=0; DACCON0bits.DACEN=0;};
  3882  06C0  128B               	bcf	11,5	;volatile
  3883  06C1  0022               	movlb	2	; select bank2
  3884  06C2  1398               	bcf	24,7	;volatile
  3885                           
  3886                           ;user.c: 171: RCSTAbits.CREN = 1;
  3887  06C3  0023               	movlb	3	; select bank3
  3888  06C4  161D               	bsf	29,4	;volatile
  3889                           
  3890                           ;user.c: 172: RCREG;
  3891  06C5  0819               	movf	25,w	;volatile
  3892                           
  3893                           ;user.c: 173: delay_1_ms();
  3894  06C6  25C1               	fcall	_delay_1_ms
  3895                           
  3896                           ;user.c: 174: delay_1_ms();
  3897  06C7  25C1               	fcall	_delay_1_ms
  3898  06C8  0008               	return
  3899  06C9                     __end_of_Send_Byte:	
  3900                           
  3901                           	psect	text16
  3902  076D                     __ptext16:	
  3903 ;; *************** function _cheat *****************
  3904 ;; Defined at:
  3905 ;;		line 232 in file "user.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;  i               1    7[COMMON] unsigned char 
  3910 ;;  i               1    6[COMMON] unsigned char 
  3911 ;; Return value:  Size  Location     Type
  3912 ;;		None               void
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3920 ;;      Params:         0       0       0       0
  3921 ;;      Locals:         2       0       0       0
  3922 ;;      Temps:          1       0       0       0
  3923 ;;      Totals:         3       0       0       0
  3924 ;;Total ram usage:        3 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    2
  3927 ;; This function calls:
  3928 ;;		_delay_1_ms
  3929 ;;		_red_led_on
  3930 ;;		_tone
  3931 ;; This function is called by:
  3932 ;;		_Send_Byte
  3933 ;;		_handle_fire
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _cheat
  3939  076D                     _cheat:	
  3940  076D                     l185:	
  3941                           ;incstack = 0
  3942                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  3943                           ;user.c: 233: while(1){
  3944                           
  3945                           
  3946                           ;user.c: 234: red_led_on();
  3947  076D  25FB               	fcall	_red_led_on
  3948                           
  3949                           ;user.c: 235: tone(7813);
  3950  076E  3085               	movlw	133
  3951  076F  00F1               	movwf	tone@period
  3952  0770  301E               	movlw	30
  3953  0771  00F2               	movwf	tone@period+1
  3954  0772  27C6               	fcall	_tone
  3955                           
  3956                           ;user.c: 236: for(uint8_t i=0; i<200; i++){
  3957  0773  01F6               	clrf	cheat@i
  3958  0774  30C8               	movlw	200
  3959  0775  0276               	subwf	cheat@i,w
  3960  0776  1803               	btfsc	3,0
  3961  0777  2F81               	goto	l187
  3962  0778                     l2595:	
  3963                           
  3964                           ;user.c: 237: delay_1_ms();
  3965  0778  25C1               	fcall	_delay_1_ms
  3966  0779  3001               	movlw	1
  3967  077A  00F5               	movwf	??_cheat
  3968  077B  0875               	movf	??_cheat,w
  3969  077C  07F6               	addwf	cheat@i,f
  3970  077D  30C8               	movlw	200
  3971  077E  0276               	subwf	cheat@i,w
  3972  077F  1C03               	skipc
  3973  0780  2F78               	goto	l2595
  3974  0781                     l187:	
  3975                           
  3976                           ;user.c: 238: }
  3977                           ;user.c: 239: {TRISAbits.TRISA5 = 1;};
  3978  0781  0021               	movlb	1	; select bank1
  3979  0782  168C               	bsf	12,5	;volatile
  3980                           
  3981                           ;user.c: 240: for(uint8_t i=0; i<200; i++){
  3982  0783  01F7               	clrf	cheat@i_724
  3983  0784                     L3:	
  3984  0784  30C8               	movlw	200
  3985  0785  0277               	subwf	cheat@i_724,w
  3986  0786  1803               	btfsc	3,0
  3987  0787  2F6D               	goto	l185
  3988                           
  3989                           ;user.c: 241: delay_1_ms();
  3990  0788  25C1               	fcall	_delay_1_ms
  3991  0789  3001               	movlw	1
  3992  078A  00F5               	movwf	??_cheat
  3993  078B  0875               	movf	??_cheat,w
  3994  078C  07F7               	addwf	cheat@i_724,f
  3995  078D  2F84               	goto	L3
  3996  078E                     __end_of_cheat:	
  3997                           
  3998                           	psect	text17
  3999  07C6                     __ptext17:	
  4000 ;; *************** function _tone *****************
  4001 ;; Defined at:
  4002 ;;		line 133 in file "user.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  period          2    1[COMMON] unsigned int 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;		None
  4007 ;; Return value:  Size  Location     Type
  4008 ;;		None               void
  4009 ;; Registers used:
  4010 ;;		wreg, status,2, status,0
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4016 ;;      Params:         2       0       0       0
  4017 ;;      Locals:         0       0       0       0
  4018 ;;      Temps:          2       0       0       0
  4019 ;;      Totals:         4       0       0       0
  4020 ;;Total ram usage:        4 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    1
  4023 ;; This function calls:
  4024 ;;		Nothing
  4025 ;; This function is called by:
  4026 ;;		_handle_music
  4027 ;;		_cheat
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _tone
  4033  07C6                     _tone:	
  4034                           
  4035                           ;user.c: 135: PWM3CONbits.PWM3EN = 1;
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _tone: [wreg+status,2+status,0]
  4039  07C6  003B               	movlb	27	; select bank27
  4040  07C7  17BB               	bsf	59,7	;volatile
  4041                           
  4042                           ;user.c: 136: PWM3CONbits.PWM3OE = 1;
  4043  07C8  173B               	bsf	59,6	;volatile
  4044                           
  4045                           ;user.c: 137: PWM3PR = period;
  4046  07C9  0872               	movf	tone@period+1,w
  4047  07CA  01B6               	clrf	54	;volatile
  4048  07CB  07B6               	addwf	54,f	;volatile
  4049  07CC  0871               	movf	tone@period,w
  4050  07CD  01B5               	clrf	53	;volatile
  4051  07CE  07B5               	addwf	53,f	;volatile
  4052                           
  4053                           ;user.c: 138: PWM3DC = period >> 1;
  4054  07CF  0872               	movf	tone@period+1,w
  4055  07D0  00F4               	movwf	??_tone+1
  4056  07D1  0871               	movf	tone@period,w
  4057  07D2  00F3               	movwf	??_tone
  4058  07D3  36F4               	lsrf	??_tone+1,f
  4059  07D4  0CF3               	rrf	??_tone,f
  4060  07D5  0873               	movf	??_tone,w
  4061  07D6  00B3               	movwf	51	;volatile
  4062  07D7  0874               	movf	??_tone+1,w
  4063  07D8  00B4               	movwf	52	;volatile
  4064                           
  4065                           ;user.c: 139: PWM3PH = 0x0000;
  4066  07D9  01B1               	clrf	49	;volatile
  4067  07DA  01B2               	clrf	50	;volatile
  4068                           
  4069                           ;user.c: 140: PWM3LDCONbits.PWM3LD = 1;
  4070  07DB  17BF               	bsf	63,7	;volatile
  4071  07DC  0008               	return
  4072  07DD                     __end_of_tone:	
  4073                           
  4074                           	psect	text18
  4075  05FB                     __ptext18:	
  4076 ;; *************** function _red_led_on *****************
  4077 ;; Defined at:
  4078 ;;		line 80 in file "user.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		None
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4092 ;;      Params:         0       0       0       0
  4093 ;;      Locals:         0       0       0       0
  4094 ;;      Temps:          0       0       0       0
  4095 ;;      Totals:         0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    1
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_cheat
  4103 ;;		_super_dead_mode
  4104 ;;		_hit_by
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _red_led_on
  4110  05FB                     _red_led_on:	
  4111                           
  4112                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _red_led_on: []
  4116  05FB  0021               	movlb	1	; select bank1
  4117  05FC  128C               	bcf	12,5	;volatile
  4118                           
  4119                           ;user.c: 83: PORTAbits.RA5 = 0;
  4120  05FD  0020               	movlb	0	; select bank0
  4121  05FE  128C               	bcf	12,5	;volatile
  4122  05FF  0008               	return
  4123  0600                     __end_of_red_led_on:	
  4124                           
  4125                           	psect	text19
  4126  05AF                     __ptext19:	
  4127 ;; *************** function _ADC_read *****************
  4128 ;; Defined at:
  4129 ;;		line 73 in file "user.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;		None
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  2    1[COMMON] unsigned int 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4143 ;;      Params:         2       0       0       0
  4144 ;;      Locals:         0       0       0       0
  4145 ;;      Temps:          2       0       0       0
  4146 ;;      Totals:         4       0       0       0
  4147 ;;Total ram usage:        4 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_handle_fire
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _ADC_read
  4159  05AF                     _ADC_read:	
  4160                           
  4161                           ;user.c: 75: ADCON0bits.GO = 1;
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4165  05AF  0021               	movlb	1	; select bank1
  4166  05B0  149D               	bsf	29,1	;volatile
  4167  05B1                     l131:	
  4168                           ;user.c: 76: while(ADCON0bits.GO){};
  4169                           
  4170  05B1  189D               	btfsc	29,1	;volatile
  4171  05B2  2DB1               	goto	l131
  4172                           
  4173                           ;user.c: 77: return ADRES >> 6;
  4174  05B3  081C               	movf	28,w	;volatile
  4175  05B4  00F4               	movwf	??_ADC_read+1
  4176  05B5  081B               	movf	27,w	;volatile
  4177  05B6  00F3               	movwf	??_ADC_read
  4178  05B7  3006               	movlw	6
  4179  05B8                     u2735:	
  4180  05B8  36F4               	lsrf	??_ADC_read+1,f
  4181  05B9  0CF3               	rrf	??_ADC_read,f
  4182  05BA  0B89               	decfsz	9,f
  4183  05BB  2DB8               	goto	u2735
  4184  05BC  0873               	movf	??_ADC_read,w
  4185  05BD  00F1               	movwf	?_ADC_read
  4186  05BE  0874               	movf	??_ADC_read+1,w
  4187  05BF  00F2               	movwf	?_ADC_read+1
  4188  05C0  0008               	return
  4189  05C1                     __end_of_ADC_read:	
  4190                           
  4191                           	psect	text20
  4192  06FA                     __ptext20:	
  4193 ;; *************** function _Setup *****************
  4194 ;; Defined at:
  4195 ;;		line 32 in file "user.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;		None               void
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, status,0, pclath, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4209 ;;      Params:         0       0       0       0
  4210 ;;      Locals:         0       0       0       0
  4211 ;;      Temps:          1       0       0       0
  4212 ;;      Totals:         1       0       0       0
  4213 ;;Total ram usage:        1 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    2
  4216 ;; This function calls:
  4217 ;;		_delay_1_ms
  4218 ;; This function is called by:
  4219 ;;		_main
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           
  4224                           ;psect for function _Setup
  4225  06FA                     _Setup:	
  4226                           
  4227                           ;user.c: 34: OSCCON = 0b01111010;
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  4231  06FA  307A               	movlw	122
  4232  06FB  0021               	movlb	1	; select bank1
  4233  06FC  0099               	movwf	25	;volatile
  4234                           
  4235                           ;user.c: 36: ANSELA = 0x00;
  4236  06FD  0023               	movlb	3	; select bank3
  4237  06FE  018C               	clrf	12	;volatile
  4238                           
  4239                           ;user.c: 37: TRISAbits.TRISA2 = 0;
  4240  06FF  0021               	movlb	1	; select bank1
  4241  0700  110C               	bcf	12,2	;volatile
  4242                           
  4243                           ;user.c: 38: TRISAbits.TRISA0 = 0;
  4244  0701  100C               	bcf	12,0	;volatile
  4245                           
  4246                           ;user.c: 41: ANSELAbits.ANSA4 = 1;
  4247  0702  0023               	movlb	3	; select bank3
  4248  0703  160C               	bsf	12,4	;volatile
  4249                           
  4250                           ;user.c: 42: ADCON1 |= 0b00110000;
  4251  0704  3030               	movlw	48
  4252  0705  00F3               	movwf	??_Setup
  4253  0706  0873               	movf	??_Setup,w
  4254  0707  0021               	movlb	1	; select bank1
  4255  0708  049E               	iorwf	30,f	;volatile
  4256                           
  4257                           ;user.c: 45: SPBRGL = 103;
  4258  0709  3067               	movlw	103
  4259  070A  0023               	movlb	3	; select bank3
  4260  070B  009B               	movwf	27	;volatile
  4261                           
  4262                           ;user.c: 46: TXSTAbits.SYNC = 0;
  4263  070C  121E               	bcf	30,4	;volatile
  4264                           
  4265                           ;user.c: 47: RCSTAbits.SPEN = 1;
  4266  070D  179D               	bsf	29,7	;volatile
  4267                           
  4268                           ;user.c: 48: BAUDCONbits.SCKP = 1;
  4269  070E  161F               	bsf	31,4	;volatile
  4270                           
  4271                           ;user.c: 49: TXSTAbits.TXEN = 1;
  4272  070F  169E               	bsf	30,5	;volatile
  4273                           
  4274                           ;user.c: 52: RCSTAbits.CREN = 1;
  4275  0710  161D               	bsf	29,4	;volatile
  4276                           
  4277                           ;user.c: 55: INTCONbits.GIE = 1;
  4278  0711  178B               	bsf	11,7	;volatile
  4279                           
  4280                           ;user.c: 58: OPTION_REGbits.TMR0CS = 0;
  4281  0712  0021               	movlb	1	; select bank1
  4282  0713  1295               	bcf	21,5	;volatile
  4283                           
  4284                           ;user.c: 61: T1CONbits.T1CKPS=3;
  4285  0714  3030               	movlw	48
  4286  0715  0020               	movlb	0	; select bank0
  4287  0716  0498               	iorwf	24,f	;volatile
  4288                           
  4289                           ;user.c: 64: T2CONbits.T2CKPS = 3;
  4290  0717  3003               	movlw	3
  4291  0718  049C               	iorwf	28,f	;volatile
  4292                           
  4293                           ;user.c: 65: T2CONbits.T2OUTPS = 15;
  4294  0719  3078               	movlw	120
  4295  071A  049C               	iorwf	28,f	;volatile
  4296                           
  4297                           ;user.c: 66: T2CONbits.TMR2ON = 1;
  4298  071B  151C               	bsf	28,2	;volatile
  4299                           
  4300                           ;user.c: 68: ADCON0bits.CHS = 3;
  4301  071C  0021               	movlb	1	; select bank1
  4302  071D  081D               	movf	29,w	;volatile
  4303  071E  3983               	andlw	-125
  4304  071F  380C               	iorlw	12
  4305  0720  009D               	movwf	29	;volatile
  4306                           
  4307                           ;user.c: 69: ADCON0bits.ADON = 1;
  4308  0721  141D               	bsf	29,0	;volatile
  4309                           
  4310                           ;user.c: 70: delay_1_ms();
  4311  0722  25C1               	fcall	_delay_1_ms
  4312  0723  0008               	return
  4313  0724                     __end_of_Setup:	
  4314                           
  4315                           	psect	text21
  4316  05C1                     __ptext21:	
  4317 ;; *************** function _delay_1_ms *****************
  4318 ;; Defined at:
  4319 ;;		line 391 in file "user.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  i               2    1[COMMON] unsigned int 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;		None               void
  4326 ;; Registers used:
  4327 ;;		wreg, status,2
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4333 ;;      Params:         0       0       0       0
  4334 ;;      Locals:         2       0       0       0
  4335 ;;      Temps:          0       0       0       0
  4336 ;;      Totals:         2       0       0       0
  4337 ;;Total ram usage:        2 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    1
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_Setup
  4344 ;;		_Send_Byte
  4345 ;;		_cheat
  4346 ;;		_super_dead_mode
  4347 ;;		_hit_by
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _delay_1_ms
  4353  05C1                     _delay_1_ms:	
  4354                           
  4355                           ;user.c: 392: for (uint16_t i=0; i<4000/14; i++){
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _delay_1_ms: [wreg+status,2]
  4359  05C1  01F1               	clrf	delay_1_ms@i
  4360  05C2  01F2               	clrf	delay_1_ms@i+1
  4361  05C3                     L4:	
  4362  05C3  3001               	movlw	1
  4363  05C4  0272               	subwf	delay_1_ms@i+1,w
  4364  05C5  301D               	movlw	29
  4365  05C6  1903               	skipnz
  4366  05C7  0271               	subwf	delay_1_ms@i,w
  4367  05C8  1803               	btfsc	3,0
  4368  05C9  0008               	return
  4369                           
  4370                           ;user.c: 393: __nop();
  4371  05CA  0000               	nop
  4372  05CB  3001               	movlw	1
  4373  05CC  07F1               	addwf	delay_1_ms@i,f
  4374  05CD  3000               	movlw	0
  4375  05CE  3DF2               	addwfc	delay_1_ms@i+1,f
  4376  05CF  2DC3               	goto	L4
  4377  05D0                     __end_of_delay_1_ms:	
  4378                           
  4379                           	psect	text22
  4380  0451                     __ptext22:	
  4381 ;; *************** function _LoadFromFlash *****************
  4382 ;; Defined at:
  4383 ;;		line 28 in file "main.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4397 ;;      Params:         0       0       0       0
  4398 ;;      Locals:         0       0       0       0
  4399 ;;      Temps:          2       0       0       0
  4400 ;;      Totals:         2       0       0       0
  4401 ;;Total ram usage:        2 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    2
  4404 ;; This function calls:
  4405 ;;		_Load
  4406 ;;		_Save
  4407 ;; This function is called by:
  4408 ;;		_main
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _LoadFromFlash
  4414  0451                     _LoadFromFlash:	
  4415                           
  4416                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4420  0451  30F0               	movlw	240
  4421  0452  00F1               	movwf	Load@address
  4422  0453  3007               	movlw	7
  4423  0454  00F2               	movwf	Load@address+1
  4424  0455  30C0               	movlw	_config& (0+255)
  4425  0456  00F7               	movwf	??_LoadFromFlash
  4426  0457  0877               	movf	??_LoadFromFlash,w
  4427  0458  00F3               	movwf	Load@ptr
  4428  0459  3009               	movlw	9
  4429  045A  00F8               	movwf	??_LoadFromFlash+1
  4430  045B  0878               	movf	??_LoadFromFlash+1,w
  4431  045C  00F4               	movwf	Load@data_length
  4432  045D  2724               	fcall	_Load
  4433                           
  4434                           ;main.c: 31: if(config.id == 0x3FFF)
  4435  045E  303F               	movlw	63
  4436  045F  0021               	movlb	1	; select bank1
  4437  0460  0641               	xorwf	(_config+1)^(0+128),w
  4438  0461  1D03               	skipz
  4439  0462  2C65               	goto	u2815
  4440  0463  30FF               	movlw	255
  4441  0464  0640               	xorwf	_config^(0+128),w
  4442  0465                     u2815:	
  4443  0465  1D03               	skipz
  4444  0466  2CA3               	goto	l2405
  4445                           
  4446                           ;main.c: 32: {
  4447                           ;main.c: 33: config.id = 0x80;
  4448  0467  3080               	movlw	128
  4449  0468  00C0               	movwf	_config^(0+128)
  4450  0469  3000               	movlw	0
  4451  046A  00C1               	movwf	(_config^(0+128)+1)
  4452                           
  4453                           ;main.c: 34: config.power = 0;
  4454  046B  01C2               	clrf	(_config^(0+128)+2)
  4455  046C  01C3               	clrf	((_config+1)^(0+128)+2)
  4456                           
  4457                           ;main.c: 35: config.health = 1;
  4458  046D  3001               	movlw	1
  4459  046E  00C4               	movwf	(_config^(0+128)+4)
  4460  046F  3000               	movlw	0
  4461  0470  00C5               	movwf	(_config^(0+128)+5)
  4462                           
  4463                           ;main.c: 36: config.shield = 2;
  4464  0471  3002               	movlw	2
  4465  0472  00C6               	movwf	(_config^(0+128)+6)
  4466  0473  3000               	movlw	0
  4467  0474  00C7               	movwf	(_config^(0+128)+7)
  4468                           
  4469                           ;main.c: 37: config.respawn_delay = 100;
  4470  0475  3064               	movlw	100
  4471  0476  00C8               	movwf	(_config^(0+128)+8)
  4472  0477  3000               	movlw	0
  4473  0478  00C9               	movwf	(_config^(0+128)+9)
  4474                           
  4475                           ;main.c: 38: config.fire_threshold = 500;
  4476  0479  30F4               	movlw	244
  4477  047A  00CA               	movwf	(_config^(0+128)+10)
  4478  047B  3001               	movlw	1
  4479  047C  00CB               	movwf	(_config^(0+128)+11)
  4480                           
  4481                           ;main.c: 39: config.fire_cheating = 1000;
  4482  047D  30E8               	movlw	232
  4483  047E  00CC               	movwf	(_config^(0+128)+12)
  4484  047F  3003               	movlw	3
  4485  0480  00CD               	movwf	(_config^(0+128)+13)
  4486                           
  4487                           ;main.c: 40: config.fire_holdoff = 4000;
  4488  0481  30A0               	movlw	160
  4489  0482  00CE               	movwf	(_config^(0+128)+14)
  4490  0483  300F               	movlw	15
  4491  0484  00CF               	movwf	(_config^(0+128)+15)
  4492                           
  4493                           ;main.c: 41: config.death_period = 3000;
  4494  0485  30B8               	movlw	184
  4495  0486  00D0               	movwf	(_config^(0+128)+16)
  4496  0487  300B               	movlw	11
  4497  0488  00D1               	movwf	(_config^(0+128)+17)
  4498                           
  4499                           ;main.c: 42: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4500  0489  30F0               	movlw	240
  4501  048A  00F1               	movwf	Save@address
  4502  048B  3007               	movlw	7
  4503  048C  00F2               	movwf	Save@address+1
  4504  048D  30C0               	movlw	_config& (0+255)
  4505  048E  00F7               	movwf	??_LoadFromFlash
  4506  048F  0877               	movf	??_LoadFromFlash,w
  4507  0490  00F3               	movwf	Save@ptr
  4508  0491  3009               	movlw	9
  4509  0492  00F8               	movwf	??_LoadFromFlash+1
  4510  0493  0878               	movf	??_LoadFromFlash+1,w
  4511  0494  00F4               	movwf	Save@data_length
  4512  0495  2648               	fcall	_Save
  4513                           
  4514                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4515  0496  30E0               	movlw	224
  4516  0497  00F1               	movwf	Save@address
  4517  0498  3007               	movlw	7
  4518  0499  00F2               	movwf	Save@address+1
  4519  049A  30A0               	movlw	_hitlist& (0+255)
  4520  049B  00F7               	movwf	??_LoadFromFlash
  4521  049C  0877               	movf	??_LoadFromFlash,w
  4522  049D  00F3               	movwf	Save@ptr
  4523  049E  3010               	movlw	16
  4524  049F  00F8               	movwf	??_LoadFromFlash+1
  4525  04A0  0878               	movf	??_LoadFromFlash+1,w
  4526  04A1  00F4               	movwf	Save@data_length
  4527  04A2  2648               	fcall	_Save
  4528  04A3                     l2405:	
  4529                           
  4530                           ;main.c: 44: }
  4531                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4532  04A3  30E0               	movlw	224
  4533  04A4  00F1               	movwf	Load@address
  4534  04A5  3007               	movlw	7
  4535  04A6  00F2               	movwf	Load@address+1
  4536  04A7  30A0               	movlw	_hitlist& (0+255)
  4537  04A8  00F7               	movwf	??_LoadFromFlash
  4538  04A9  0877               	movf	??_LoadFromFlash,w
  4539  04AA  00F3               	movwf	Load@ptr
  4540  04AB  3010               	movlw	16
  4541  04AC  00F8               	movwf	??_LoadFromFlash+1
  4542  04AD  0878               	movf	??_LoadFromFlash+1,w
  4543  04AE  00F4               	movwf	Load@data_length
  4544  04AF  2724               	fcall	_Load
  4545  04B0  0008               	return
  4546  04B1                     __end_of_LoadFromFlash:	
  4547                           
  4548                           	psect	text23
  4549  0648                     __ptext23:	
  4550 ;; *************** function _Save *****************
  4551 ;; Defined at:
  4552 ;;		line 198 in file "user.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  address         2    1[COMMON] unsigned int 
  4555 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4556 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4557 ;;  data_length     1    4[COMMON] unsigned char 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  i               1    6[COMMON] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;		None               void
  4562 ;; Registers used:
  4563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4569 ;;      Params:         4       0       0       0
  4570 ;;      Locals:         1       0       0       0
  4571 ;;      Temps:          1       0       0       0
  4572 ;;      Totals:         6       0       0       0
  4573 ;;Total ram usage:        6 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    1
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_LoadFromFlash
  4580 ;;		_hit_by
  4581 ;;		_control_transfer
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _Save
  4587  0648                     _Save:	
  4588                           
  4589                           ;user.c: 200: INTCONbits.GIE = 0;
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4593  0648  138B               	bcf	11,7	;volatile
  4594                           
  4595                           ;user.c: 201: PMADR = address;
  4596  0649  0872               	movf	Save@address+1,w
  4597  064A  0023               	movlb	3	; select bank3
  4598  064B  0192               	clrf	18	;volatile
  4599  064C  0792               	addwf	18,f	;volatile
  4600  064D  0871               	movf	Save@address,w
  4601  064E  0191               	clrf	17	;volatile
  4602  064F  0791               	addwf	17,f	;volatile
  4603                           
  4604                           ;user.c: 202: PMCON1bits.CFGS = 0;
  4605  0650  1315               	bcf	21,6	;volatile
  4606                           
  4607                           ;user.c: 203: PMCON1bits.FREE = 1;
  4608  0651  1615               	bsf	21,4	;volatile
  4609                           
  4610                           ;user.c: 204: PMCON1bits.WREN = 1;
  4611  0652  1515               	bsf	21,2	;volatile
  4612                           
  4613                           ;user.c: 205: PMCON2 = 0x55;
  4614  0653  3055               	movlw	85
  4615  0654  0096               	movwf	22	;volatile
  4616                           
  4617                           ;user.c: 206: PMCON2 = 0xAA;
  4618  0655  30AA               	movlw	170
  4619  0656  0096               	movwf	22	;volatile
  4620                           
  4621                           ;user.c: 207: PMCON1bits.WR = 1;
  4622  0657  1495               	bsf	21,1	;volatile
  4623                           
  4624                           ;user.c: 208: __nop();
  4625  0658  0000               	nop
  4626                           
  4627                           ;user.c: 209: __nop();
  4628  0659  0000               	nop
  4629                           
  4630                           ;user.c: 210: PMCON1bits.WREN = 0;
  4631  065A  0023               	movlb	3	; select bank3
  4632  065B  1115               	bcf	21,2	;volatile
  4633                           
  4634                           ;user.c: 212: PMADR = address;
  4635  065C  0872               	movf	Save@address+1,w
  4636  065D  0192               	clrf	18	;volatile
  4637  065E  0792               	addwf	18,f	;volatile
  4638  065F  0871               	movf	Save@address,w
  4639  0660  0191               	clrf	17	;volatile
  4640  0661  0791               	addwf	17,f	;volatile
  4641                           
  4642                           ;user.c: 213: PMCON1bits.CFGS = 0;
  4643  0662  1315               	bcf	21,6	;volatile
  4644                           
  4645                           ;user.c: 214: PMCON1bits.FREE = 0;
  4646  0663  1215               	bcf	21,4	;volatile
  4647                           
  4648                           ;user.c: 215: PMCON1bits.WREN = 1;
  4649  0664  1515               	bsf	21,2	;volatile
  4650                           
  4651                           ;user.c: 216: PMCON1bits.LWLO = 1;
  4652  0665  1695               	bsf	21,5	;volatile
  4653                           
  4654                           ;user.c: 218: for (uint8_t i=1; i<=data_length; i++){
  4655  0666  01F6               	clrf	Save@i
  4656  0667  0AF6               	incf	Save@i,f
  4657  0668                     l178:	
  4658  0668  0876               	movf	Save@i,w
  4659  0669  0274               	subwf	Save@data_length,w
  4660  066A  1C03               	btfss	3,0
  4661  066B  2E8C               	goto	l181
  4662                           
  4663                           ;user.c: 219: PMDAT = *ptr++;
  4664  066C  0873               	movf	Save@ptr,w
  4665  066D  0086               	movwf	6
  4666  066E  0187               	clrf	7
  4667  066F  3F40               	moviw [0]fsr1
  4668  0670  0093               	movwf	19	;volatile
  4669  0671  3F41               	moviw [1]fsr1
  4670  0672  0094               	movwf	20	;volatile
  4671  0673  3002               	movlw	2
  4672  0674  00F5               	movwf	??_Save
  4673  0675  0875               	movf	??_Save,w
  4674  0676  07F3               	addwf	Save@ptr,f
  4675                           
  4676                           ;user.c: 220: if(i == data_length) PMCON1bits.LWLO = 0;
  4677  0677  0876               	movf	Save@i,w
  4678  0678  0674               	xorwf	Save@data_length,w
  4679  0679  1903               	btfsc	3,2
  4680  067A  1295               	bcf	21,5	;volatile
  4681                           
  4682                           ;user.c: 221: PMCON2 = 0x55;
  4683  067B  3055               	movlw	85
  4684  067C  0096               	movwf	22	;volatile
  4685                           
  4686                           ;user.c: 222: PMCON2 = 0xAA;
  4687  067D  30AA               	movlw	170
  4688  067E  0096               	movwf	22	;volatile
  4689                           
  4690                           ;user.c: 223: PMCON1bits.WR = 1;
  4691  067F  1495               	bsf	21,1	;volatile
  4692                           
  4693                           ;user.c: 224: __nop();
  4694  0680  0000               	nop
  4695                           
  4696                           ;user.c: 225: __nop();
  4697  0681  0000               	nop
  4698                           
  4699                           ;user.c: 226: PMADRL++;
  4700  0682  3001               	movlw	1
  4701  0683  00F5               	movwf	??_Save
  4702  0684  0875               	movf	??_Save,w
  4703  0685  0023               	movlb	3	; select bank3
  4704  0686  0791               	addwf	17,f	;volatile
  4705  0687  3001               	movlw	1
  4706  0688  00F5               	movwf	??_Save
  4707  0689  0875               	movf	??_Save,w
  4708  068A  07F6               	addwf	Save@i,f
  4709  068B  2E68               	goto	l178
  4710  068C                     l181:	
  4711                           
  4712                           ;user.c: 227: }
  4713                           ;user.c: 228: PMCON1bits.WREN = 0;
  4714  068C  1115               	bcf	21,2	;volatile
  4715                           
  4716                           ;user.c: 229: INTCONbits.GIE = 1;
  4717  068D  178B               	bsf	11,7	;volatile
  4718  068E  0008               	return
  4719  068F                     __end_of_Save:	
  4720                           
  4721                           	psect	text24
  4722  0724                     __ptext24:	
  4723 ;; *************** function _Load *****************
  4724 ;; Defined at:
  4725 ;;		line 186 in file "user.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  address         2    1[COMMON] unsigned int 
  4728 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4729 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4730 ;;  data_length     1    4[COMMON] unsigned char 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  i               1    6[COMMON] unsigned char 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;		None               void
  4735 ;; Registers used:
  4736 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4742 ;;      Params:         4       0       0       0
  4743 ;;      Locals:         1       0       0       0
  4744 ;;      Temps:          1       0       0       0
  4745 ;;      Totals:         6       0       0       0
  4746 ;;Total ram usage:        6 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_LoadFromFlash
  4753 ;;		_control_transfer
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _Load
  4759  0724                     _Load:	
  4760                           
  4761                           ;user.c: 187: PMCON1bits.CFGS = 0;
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4765  0724  0023               	movlb	3	; select bank3
  4766  0725  1315               	bcf	21,6	;volatile
  4767                           
  4768                           ;user.c: 188: PMADR = address;
  4769  0726  0872               	movf	Load@address+1,w
  4770  0727  0192               	clrf	18	;volatile
  4771  0728  0792               	addwf	18,f	;volatile
  4772  0729  0871               	movf	Load@address,w
  4773  072A  0191               	clrf	17	;volatile
  4774  072B  0791               	addwf	17,f	;volatile
  4775                           
  4776                           ;user.c: 189: for (uint8_t i=0; i<data_length; i++){
  4777  072C  01F6               	clrf	Load@i
  4778  072D                     l1801:	
  4779  072D  0874               	movf	Load@data_length,w
  4780  072E  0276               	subwf	Load@i,w
  4781  072F  1803               	btfsc	3,0
  4782  0730  0008               	return
  4783                           
  4784                           ;user.c: 190: PMCON1bits.RD = 1;
  4785  0731  1415               	bsf	21,0	;volatile
  4786                           
  4787                           ;user.c: 191: __nop();
  4788  0732  0000               	nop
  4789                           
  4790                           ;user.c: 192: __nop();
  4791  0733  0000               	nop
  4792                           
  4793                           ;user.c: 193: *ptr++ = PMDAT;
  4794  0734  0873               	movf	Load@ptr,w
  4795  0735  0086               	movwf	6
  4796  0736  0187               	clrf	7
  4797  0737  0023               	movlb	3	; select bank3
  4798  0738  0813               	movf	19,w	;volatile
  4799  0739  3FC0               	movwi [0]fsr1
  4800  073A  0814               	movf	20,w	;volatile
  4801  073B  3FC1               	movwi [1]fsr1
  4802  073C  3002               	movlw	2
  4803  073D  00F5               	movwf	??_Load
  4804  073E  0875               	movf	??_Load,w
  4805  073F  07F3               	addwf	Load@ptr,f
  4806                           
  4807                           ;user.c: 194: PMADR ++;
  4808  0740  3001               	movlw	1
  4809  0741  0791               	addwf	17,f	;volatile
  4810  0742  3000               	movlw	0
  4811  0743  3D92               	addwfc	18,f	;volatile
  4812  0744  3001               	movlw	1
  4813  0745  00F5               	movwf	??_Load
  4814  0746  0875               	movf	??_Load,w
  4815  0747  07F6               	addwf	Load@i,f
  4816  0748  2F2D               	goto	l1801
  4817  0749                     __end_of_Load:	
  4818                           
  4819                           	psect	intentry
  4820  0004                     __pintentry:	
  4821 ;; *************** function _High_Priority_Interrupt *****************
  4822 ;; Defined at:
  4823 ;;		line 295 in file "user.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;		None               void
  4830 ;; Registers used:
  4831 ;;		wreg, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4837 ;;      Params:         0       0       0       0
  4838 ;;      Locals:         0       0       0       0
  4839 ;;      Temps:          1       0       0       0
  4840 ;;      Totals:         1       0       0       0
  4841 ;;Total ram usage:        1 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		Interrupt level 1
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850  0004                     _High_Priority_Interrupt:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4854  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4855  0005  3180               	pagesel	$
  4856  0006  0020               	movlb	0	; select bank0
  4857  0007  087F               	movf	127,w
  4858  0008  00F0               	movwf	??_High_Priority_Interrupt
  4859  0009  0022               	banksel	280	;# 
  4860  000A  0818               	movf	24,w	;# 
  4861  000B  3A20               	xorlw	32	;# 
  4862  000C  0098               	movwf	24	;# 
  4863                           
  4864                           ;user.c: 301: TMR0 -= 50;
  4865  000D  3032               	movlw	50
  4866  000E  0020               	movlb	0	; select bank0
  4867  000F  0295               	subwf	21,f	;volatile
  4868                           
  4869                           ;user.c: 302: INTCONbits.TMR0IF = 0;
  4870  0010  110B               	bcf	11,2	;volatile
  4871  0011  0870               	movf	??_High_Priority_Interrupt,w
  4872  0012  00FF               	movwf	127
  4873  0013  107E               	bcf	126,0	;clear compiler interrupt flag
  4874  0014  0009               	retfie
  4875  0015                     __end_of_High_Priority_Interrupt:	
  4876  007E                     btemp	set	126	;btemp
  4877  007E                     pic14e$flags	set	126
  4878  007E                     wtemp	set	126
  4879  007E                     wtemp0	set	126
  4880  0080                     wtemp1	set	128
  4881  0082                     wtemp2	set	130
  4882  0084                     wtemp3	set	132
  4883  0086                     wtemp4	set	134
  4884  0088                     wtemp5	set	136
  4885  007F                     wtemp6	set	127
  4886  007E                     ttemp	set	126
  4887  007E                     ttemp0	set	126
  4888  0081                     ttemp1	set	129
  4889  0084                     ttemp2	set	132
  4890  0087                     ttemp3	set	135
  4891  007F                     ttemp4	set	127
  4892  007E                     ltemp	set	126
  4893  007E                     ltemp0	set	126
  4894  0082                     ltemp1	set	130
  4895  0086                     ltemp2	set	134
  4896  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    72
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      78
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[16]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[16]), 


Critical Paths under _main in COMMON

    _super_dead_mode->_Send_Byte
    _handle_music->_tone
    _SEND_SOF->_Send_Byte
    _SEND_EOF->_Send_Byte
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _Setup->_delay_1_ms
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35475
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   21140
                                             57 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   12796
                                             50 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0   10053
                                             45 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    8155
                                              3 BANK0     42    42      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             0     0      0    1287
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     690
                                              0 BANK0      3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     913
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    2025
                                              0 BANK0      4     4      0
                           _ADC_read
                          _Send_Byte
                              _cheat
                       _green_led_on
                          _play_song
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     936
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            4     4      0     597
                                              8 COMMON     4     4      0
                              _cheat
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (5) _cheat                                                3     3      0     396
                                              5 COMMON     3     3      0
                         _delay_1_ms
                         _red_led_on
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      68
                                              3 COMMON     1     1      0
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (2) _delay_1_ms                                           2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1997
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1111
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
     _delay_1_ms
   _handle_fire
     _ADC_read
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _cheat
       _delay_1_ms
       _red_led_on
       _tone
     _green_led_on
     _play_song
     _stop_song
   _handle_music
     _stop_song
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _delay_1_ms
       _handle_music
         _stop_song
         _tone
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _Save
           _play_song
         _delay_1_ms
         _handle_music
           _stop_song
           _tone
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _delay_1_ms
     _handle_music
       _stop_song
       _tone
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8D      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Aug 25 08:41:03 2014

                     __CFG_CP$OFF 0000                                l26 05D8                                __i 005C  
                              __x 007C                                __y 006D                     _LoadFromFlash 0451  
                             l200 03C8                               l201 0371                               l131 05B1  
                             l206 03C6                               l160 06B5                               l163 06BE  
                             l181 068C                               l159 06A0                               l407 0345  
                             l185 076D                               l178 0668                               l187 0781  
                             l287 0792                      __CFG_BORV$LO 0000                               wreg 0009  
                 _super_dead_mode 04B1                      __CFG_LVP$OFF 0000                              l2311 0557  
                            l3103 043A                       Load@address 0071                              l2305 0532  
                            l3121 0420                              l3107 0443                              l2405 04A3  
                            l3221 0379                              l3213 035A                              l3029 0332  
                            l3061 04F4                              l3047 04CC                              l1801 072D  
                            l3225 038A                              l3065 04B4                              l3235 03BD  
                            l3083 0416                              l3245 03D4                              l3229 039D  
                            l3095 042F                              l3175 056C                              l2633 06AA  
                            l3283 02E2                              l2725 0074                              l1881 07A1  
                            l2817 0143                              l2753 00AB                              l2595 0778  
                            l2683 06D7                              l2679 06D5                              l2961 027E  
                            l2939 0248                              l2991 02CD                              l2897 01EF  
                            l2889 01DD                              l2995 02DC                              l2899 01F1  
                            l2997 02EA                              l2989 02BE                              l2999 02EF  
                            u3125 07B6                              u3205 003E                              u4105 0504  
                            u4035 0305                              u3315 008A                              u2705 0549  
                            u3265 0066                              u4225 057E                              u4315 0383  
                            u3445 00E4                              u2815 0465                              u2735 05B8  
                            u4335 039B                              u4095 04DC                              u4265 05A2  
                            u4275 0357                              u3635 0180                              u3395 00C1  
                            u4285 0364                              u4295 036F                              u3495 0107  
                            u3585 0159                              u3835 022E                              u3685 01A7  
                            u3785 0207                              u3955 0294                              u3895 025E  
            control_transfer@data 0025                              _TMR0 0015                              _TMR1 0016  
                            _TMR2 001A              control_transfer@page 004A              control_transfer@dptr 0048  
                            _Load 0724                      __CFG_WRT$OFF 0000                              _Save 0648  
                            _main 05D0                     Send_Byte@data 0079                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 07C6                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0015                              ttemp 007E                              wtemp 007E  
                __end_of_ADC_read 05C1                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0055                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0071  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 05F0                  __end_of_SEND_SOF 05E4                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_747 0058  
                           _Setup 06FA                             _cheat 076D                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0346                        Send_Byte@i 007A                   __initialization 0016  
                    __end_of_Load 0749                      __end_of_Save 068F                      __end_of_main 05DC  
                    __end_of_tone 07DD                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 0508                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 06FA                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071                            ?_cheat 0070  
            __size_of_handle_fire 0094                            _ADCON1 009E                            _ANSELA 018C  
                          _PMADRL 0191                            _PMCON2 0196                            _OSCCON 0099  
                          _PWM3DC 0DB3                            _PWM3PH 0DB1                            _SPBRGL 019B  
                          _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077  
              __size_of_Send_Byte 003A                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0020  
                          _config 00C0                            _hit_by 03DA                            cheat@i 0076  
                 play_song@length 0073                            _one_up 0636                   play_song@repeat 0076  
                     Save@address 0071                  _my_random_number 006A                         ?_ADC_read 0071  
         __end_of__initialization 0023           handle_serial@rx_counter 006B                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 0724  
                   __end_of_cheat 078E           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004F                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0073                           ??_cheat 0075                   _GET_CHAR_HELPER 078E  
               __end_of_Send_Byte 06C9           __size_of_add_to_hitlist 0054                        __pbssBANK0 005C  
                      __pbssBANK1 00A0             __end_of_handle_serial 05AF                        _death_song 0600  
                      _delay_1_ms 05C1                        ??_SEND_EOF 007C                        ??_SEND_SOF 007C  
                      __pmaintext 05D0              __end_of_green_led_on 05FB                 _cur_song_duration 0060  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0648                           Load@ptr 0073  
              __size_of_stop_song 0006                           Save@ptr 0073                        cheat@i_724 0077  
                    _handle_music 06C9                 ?_control_transfer 0070                ??_control_transfer 0023  
                 SEND_DATA_BYTE@b 0022         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0636  
                 __size_of_hit_by 0077                           __ptext1 055C                           __ptext2 03DA  
                         __ptext3 04B1                           __ptext4 06C9                           __ptext5 0026  
                         __ptext6 05DC                           __ptext7 05EA                           __ptext8 07AC  
                         __ptext9 078E                        _red_led_on 05FB                         _T1CONbits 0018  
         __end_of_GET_CHAR_HELPER 07AC                           _hitlist 00A0                         _T2CONbits 001C  
                         clrloop0 05E5                 add_to_hitlist@gun 0075              end_of_initialization 0023  
                         hit_by@i 0057                 __end_of_play_song 076D                       ?_delay_1_ms 0070  
                       _RCSTAbits 019D                      __pstringtext 0600                         _PORTAbits 000C  
               __end_of_stop_song 05F6                     ??_handle_fire 0020                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 0508  
               __size_of_ADC_read 0012                         _TXSTAbits 019E               control_transfer@cmd 0045  
           __size_of_green_led_on 0005                handle_fire@counter 0062                 __size_of_SEND_EOF 0006  
               __size_of_SEND_SOF 0008             __end_of_LoadFromFlash 04B1                       _BAUDCONbits 019F  
                  __end_of_hit_by 0451                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0642                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             __size_of_delay_1_ms 000F               start_initialization 0016            __end_of_add_to_hitlist 055C  
                    _green_led_on 05F6               __end_of_handle_fire 03DA                         _Send_Byte 068F  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0068  
                        ??_hit_by 0052                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 001A  
                       __checksum 0066                  handle_fire@timer 0064          __size_of_super_dead_mode 0057  
                 Save@data_length 0074                         _dead_song 0642                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 005B                         _fire_song 0626  
          __size_of_handle_serial 0053         __size_of_control_transfer 0320                       _handle_fire 0346  
                        _ADC_read 05AF                    __size_of_Setup 002A                    __size_of_cheat 0021  
                    ??_delay_1_ms 0071                         clear_ram0 05E4                   Load@data_length 0074  
                       _play_song 0749                          _PIR1bits 0011                          _SEND_EOF 05EA  
                        _SEND_SOF 05DC                        _ADCON0bits 009D                __end_of_death_song 0626  
              control_transfer@id 0047                __end_of_delay_1_ms 05D0                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 05F0                         hit_by@who 0054  
          super_dead_mode@counter 0050                       ??_Send_Byte 0078                     _handle_serial 055C  
               ??_super_dead_mode 004D          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
                    ??_red_led_on 0071                        _ANSELAbits 018C                    _SEND_DATA_BYTE 07AC  
                      ?_stop_song 0070                   _cur_song_length 0067     control_transfer@random_number 0046  
                        __ptext10 0508                          __ptext11 0346                          __ptext20 06FA  
                        __ptext12 05F0                          __ptext21 05C1                          __ptext13 0749  
                        __ptext22 0451                          __ptext14 05F6                          __ptext23 0648  
                        __ptext15 068F                          __ptext24 0724                          __ptext16 076D  
                        __ptext17 07C6                          __ptext18 05FB                          __ptext19 05AF  
                 _cur_song_repeat 0069                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 005E                     __size_of_Save 0047                     __size_of_main 000C  
                     delay_1_ms@i 0071                     __size_of_tone 0017                __end_of_red_led_on 0600  
               control_transfer@i 0049                 control_transfer@x 004C            play_song@note_duration 0074  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 07C6                  _control_transfer 0026  
                      _INTCONbits 000B                       _PWM3CONbits 0DBB                       pic14e$flags 007E  
                        intlevel1 0000          __size_of_GET_CHAR_HELPER 001E   __end_of_High_Priority_Interrupt 0015  
                    handle_fire@a 0022            __size_of_LoadFromFlash 0060                        _PMCON1bits 0195  
               __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070                       ??_play_song 0077  
                 ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070                       ??_stop_song 0071  
                 ??_handle_serial 0059                handle_serial@rx_id 006C                    ??_handle_music 0075  
