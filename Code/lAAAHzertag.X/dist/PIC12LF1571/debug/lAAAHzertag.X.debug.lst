

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Aug 23 01:56:51 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  0091                     	;# 
    66  0092                     	;# 
    67  0093                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009B                     	;# 
    76  009C                     	;# 
    77  009D                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011D                     	;# 
    89  011D                     	;# 
    90  018C                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0197                     	;# 
   100  0199                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019C                     	;# 
   105  019D                     	;# 
   106  019E                     	;# 
   107  019F                     	;# 
   108  020C                     	;# 
   109  028C                     	;# 
   110  030C                     	;# 
   111  038C                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0691                     	;# 
   116  0692                     	;# 
   117  0693                     	;# 
   118  0694                     	;# 
   119  0695                     	;# 
   120  0D8E                     	;# 
   121  0D8F                     	;# 
   122  0D90                     	;# 
   123  0D91                     	;# 
   124  0D91                     	;# 
   125  0D92                     	;# 
   126  0D93                     	;# 
   127  0D93                     	;# 
   128  0D94                     	;# 
   129  0D95                     	;# 
   130  0D95                     	;# 
   131  0D96                     	;# 
   132  0D97                     	;# 
   133  0D97                     	;# 
   134  0D98                     	;# 
   135  0D99                     	;# 
   136  0D99                     	;# 
   137  0D9A                     	;# 
   138  0D9B                     	;# 
   139  0D9C                     	;# 
   140  0D9C                     	;# 
   141  0D9D                     	;# 
   142  0D9D                     	;# 
   143  0D9E                     	;# 
   144  0D9F                     	;# 
   145  0DA0                     	;# 
   146  0DA1                     	;# 
   147  0DA1                     	;# 
   148  0DA2                     	;# 
   149  0DA3                     	;# 
   150  0DA3                     	;# 
   151  0DA4                     	;# 
   152  0DA5                     	;# 
   153  0DA5                     	;# 
   154  0DA6                     	;# 
   155  0DA7                     	;# 
   156  0DA7                     	;# 
   157  0DA8                     	;# 
   158  0DA9                     	;# 
   159  0DA9                     	;# 
   160  0DAA                     	;# 
   161  0DAB                     	;# 
   162  0DAC                     	;# 
   163  0DAC                     	;# 
   164  0DAD                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBC                     	;# 
   187  0DBD                     	;# 
   188  0DBD                     	;# 
   189  0DBE                     	;# 
   190  0DBF                     	;# 
   191  0DC0                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0197                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  028C                     	;# 
   277  030C                     	;# 
   278  038C                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0691                     	;# 
   283  0692                     	;# 
   284  0693                     	;# 
   285  0694                     	;# 
   286  0695                     	;# 
   287  0D8E                     	;# 
   288  0D8F                     	;# 
   289  0D90                     	;# 
   290  0D91                     	;# 
   291  0D91                     	;# 
   292  0D92                     	;# 
   293  0D93                     	;# 
   294  0D93                     	;# 
   295  0D94                     	;# 
   296  0D95                     	;# 
   297  0D95                     	;# 
   298  0D96                     	;# 
   299  0D97                     	;# 
   300  0D97                     	;# 
   301  0D98                     	;# 
   302  0D99                     	;# 
   303  0D99                     	;# 
   304  0D9A                     	;# 
   305  0D9B                     	;# 
   306  0D9C                     	;# 
   307  0D9C                     	;# 
   308  0D9D                     	;# 
   309  0D9D                     	;# 
   310  0D9E                     	;# 
   311  0D9F                     	;# 
   312  0DA0                     	;# 
   313  0DA1                     	;# 
   314  0DA1                     	;# 
   315  0DA2                     	;# 
   316  0DA3                     	;# 
   317  0DA3                     	;# 
   318  0DA4                     	;# 
   319  0DA5                     	;# 
   320  0DA5                     	;# 
   321  0DA6                     	;# 
   322  0DA7                     	;# 
   323  0DA7                     	;# 
   324  0DA8                     	;# 
   325  0DA9                     	;# 
   326  0DA9                     	;# 
   327  0DAA                     	;# 
   328  0DAB                     	;# 
   329  0DAC                     	;# 
   330  0DAC                     	;# 
   331  0DAD                     	;# 
   332  0DAD                     	;# 
   333  0DAE                     	;# 
   334  0DAF                     	;# 
   335  0DB0                     	;# 
   336  0DB1                     	;# 
   337  0DB1                     	;# 
   338  0DB2                     	;# 
   339  0DB3                     	;# 
   340  0DB3                     	;# 
   341  0DB4                     	;# 
   342  0DB5                     	;# 
   343  0DB5                     	;# 
   344  0DB6                     	;# 
   345  0DB7                     	;# 
   346  0DB7                     	;# 
   347  0DB8                     	;# 
   348  0DB9                     	;# 
   349  0DB9                     	;# 
   350  0DBA                     	;# 
   351  0DBB                     	;# 
   352  0DBC                     	;# 
   353  0DBC                     	;# 
   354  0DBD                     	;# 
   355  0DBD                     	;# 
   356  0DBE                     	;# 
   357  0DBF                     	;# 
   358  0DC0                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE8                     	;# 
   365  0FE9                     	;# 
   366  0FEA                     	;# 
   367  0FEA                     	;# 
   368  0FEB                     	;# 
   369  0FED                     	;# 
   370  0FEE                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  008C                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0097                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  0111                     	;# 
   416  0112                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011D                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  028C                     	;# 
   444  030C                     	;# 
   445  038C                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  0695                     	;# 
   454  0D8E                     	;# 
   455  0D8F                     	;# 
   456  0D90                     	;# 
   457  0D91                     	;# 
   458  0D91                     	;# 
   459  0D92                     	;# 
   460  0D93                     	;# 
   461  0D93                     	;# 
   462  0D94                     	;# 
   463  0D95                     	;# 
   464  0D95                     	;# 
   465  0D96                     	;# 
   466  0D97                     	;# 
   467  0D97                     	;# 
   468  0D98                     	;# 
   469  0D99                     	;# 
   470  0D99                     	;# 
   471  0D9A                     	;# 
   472  0D9B                     	;# 
   473  0D9C                     	;# 
   474  0D9C                     	;# 
   475  0D9D                     	;# 
   476  0D9D                     	;# 
   477  0D9E                     	;# 
   478  0D9F                     	;# 
   479  0DA0                     	;# 
   480  0DA1                     	;# 
   481  0DA1                     	;# 
   482  0DA2                     	;# 
   483  0DA3                     	;# 
   484  0DA3                     	;# 
   485  0DA4                     	;# 
   486  0DA5                     	;# 
   487  0DA5                     	;# 
   488  0DA6                     	;# 
   489  0DA7                     	;# 
   490  0DA7                     	;# 
   491  0DA8                     	;# 
   492  0DA9                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAC                     	;# 
   498  0DAD                     	;# 
   499  0DAD                     	;# 
   500  0DAE                     	;# 
   501  0DAF                     	;# 
   502  0DB0                     	;# 
   503  0DB1                     	;# 
   504  0DB1                     	;# 
   505  0DB2                     	;# 
   506  0DB3                     	;# 
   507  0DB3                     	;# 
   508  0DB4                     	;# 
   509  0DB5                     	;# 
   510  0DB5                     	;# 
   511  0DB6                     	;# 
   512  0DB7                     	;# 
   513  0DB7                     	;# 
   514  0DB8                     	;# 
   515  0DB9                     	;# 
   516  0DB9                     	;# 
   517  0DBA                     	;# 
   518  0DBB                     	;# 
   519  0DBC                     	;# 
   520  0DBC                     	;# 
   521  0DBD                     	;# 
   522  0DBD                     	;# 
   523  0DBE                     	;# 
   524  0DBF                     	;# 
   525  0DC0                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540                           
   541                           	psect	stringtext
   542  0500                     __pstringtext:	
   543  0500                     _death_song:	
   544  0500  3462               	retlw	98
   545  0501  34F0               	retlw	240
   546  0502  3400               	retlw	0
   547  0503  34FA               	retlw	250
   548  0504  3400               	retlw	0
   549  0505  3400               	retlw	0
   550  0506  3400               	retlw	0
   551  0507  3400               	retlw	0
   552  0508  3400               	retlw	0
   553  0509  3400               	retlw	0
   554  050A  3400               	retlw	0
   555  050B  3400               	retlw	0
   556  050C  346F               	retlw	111
   557  050D  3477               	retlw	119
   558  050E  347A               	retlw	122
   559  050F  3459               	retlw	89
   560  0510  3400               	retlw	0
   561  0511  3400               	retlw	0
   562  0512  34CC               	retlw	204
   563  0513  345E               	retlw	94
   564  0514  347A               	retlw	122
   565  0515  3459               	retlw	89
   566  0516  34CC               	retlw	204
   567  0517  345E               	retlw	94
   568  0518  346B               	retlw	107
   569  0519  346A               	retlw	106
   570  051A  3400               	retlw	0
   571  051B  3400               	retlw	0
   572  051C  346F               	retlw	111
   573  051D  3477               	retlw	119
   574  051E  3470               	retlw	112
   575  051F  349F               	retlw	159
   576  0520  3400               	retlw	0
   577  0521  3400               	retlw	0
   578  0522  3470               	retlw	112
   579  0523  349F               	retlw	159
   580  0524  34EA               	retlw	234
   581  0525  34EE               	retlw	238
   582  0526                     __end_of_death_song:	
   583  0526                     _fire_song:	
   584  0526  34A0               	retlw	160
   585  0527  340F               	retlw	15
   586  0528  34DB               	retlw	219
   587  0529  3411               	retlw	17
   588  052A  34D5               	retlw	213
   589  052B  3414               	retlw	20
   590  052C  3400               	retlw	0
   591  052D  3419               	retlw	25
   592  052E  3440               	retlw	64
   593  052F  341F               	retlw	31
   594  0530  34AA               	retlw	170
   595  0531  3429               	retlw	41
   596  0532  3480               	retlw	128
   597  0533  343E               	retlw	62
   598  0534  3400               	retlw	0
   599  0535  347D               	retlw	125
   600  0536  34E3               	retlw	227
   601  0537  348A               	retlw	138
   602  0538  3440               	retlw	64
   603  0539  349C               	retlw	156
   604  053A  3492               	retlw	146
   605  053B  34B2               	retlw	178
   606  053C  3455               	retlw	85
   607  053D  34D0               	retlw	208
   608  053E  3400               	retlw	0
   609  053F  34FA               	retlw	250
   610  0540  3400               	retlw	0
   611  0541  3400               	retlw	0
   612  0542  3400               	retlw	0
   613  0543  3400               	retlw	0
   614  0544  3400               	retlw	0
   615  0545  3400               	retlw	0
   616  0546                     __end_of_fire_song:	
   617  0546                     _one_up:	
   618  0546  34CC               	retlw	204
   619  0547  345E               	retlw	94
   620  0548  34B8               	retlw	184
   621  0549  344F               	retlw	79
   622  054A  3467               	retlw	103
   623  054B  342F               	retlw	47
   624  054C  34B9               	retlw	185
   625  054D  343B               	retlw	59
   626  054E  3434               	retlw	52
   627  054F  3435               	retlw	53
   628  0550  34DC               	retlw	220
   629  0551  3427               	retlw	39
   630  0552                     __end_of_one_up:	
   631  0552                     _dead_song:	
   632  0552  346F               	retlw	111
   633  0553  3477               	retlw	119
   634  0554  3470               	retlw	112
   635  0555  349F               	retlw	159
   636  0556  34EA               	retlw	234
   637  0557  34EE               	retlw	238
   638  0558                     __end_of_dead_song:	
   639  0016                     _TMR1	set	22
   640  000B                     _INTCONbits	set	11
   641  0011                     _PIR1bits	set	17
   642  000C                     _PORTAbits	set	12
   643  0018                     _T1CONbits	set	24
   644  001C                     _T2CONbits	set	28
   645  0015                     _TMR0	set	21
   646  001A                     _TMR2	set	26
   647  009B                     _ADRES	set	155
   648  009D                     _ADCON0bits	set	157
   649  009E                     _ADCON1	set	158
   650  0095                     _OPTION_REGbits	set	149
   651  0099                     _OSCCON	set	153
   652  008C                     _TRISAbits	set	140
   653  0118                     _DACCON0bits	set	280
   654  0191                     _PMADR	set	401
   655  0193                     _PMDAT	set	403
   656  018C                     _ANSELA	set	396
   657  018C                     _ANSELAbits	set	396
   658  019F                     _BAUDCONbits	set	415
   659  0191                     _PMADRL	set	401
   660  0195                     _PMCON1bits	set	405
   661  0196                     _PMCON2	set	406
   662  0199                     _RCREG	set	409
   663  019D                     _RCSTAbits	set	413
   664  019B                     _SPBRGL	set	411
   665  019A                     _TXREG	set	410
   666  019E                     _TXSTAbits	set	414
   667  0DB3                     _PWM3DC	set	3507
   668  0DB1                     _PWM3PH	set	3505
   669  0DB5                     _PWM3PR	set	3509
   670  0DBB                     _PWM3CONbits	set	3515
   671  0DBF                     _PWM3LDCONbits	set	3519
   672                           
   673                           ; #config settings
   674  0000                     
   675                           	psect	cinit
   676  0016                     start_initialization:	
   677  0016                     __initialization:	
   678                           
   679                           ; Clear objects allocated to COMMON
   680  0016  01FC               	clrf	__pbssCOMMON& (0+127)
   681                           
   682                           ; Clear objects allocated to BANK0
   683  0017  305B               	movlw	low __pbssBANK0
   684  0018  0084               	movwf	4
   685  0019  3000               	movlw	high __pbssBANK0
   686  001A  0085               	movwf	5
   687  001B  3012               	movlw	18
   688  001C  24DA               	fcall	clear_ram0
   689                           
   690                           ; Clear objects allocated to BANK1
   691  001D  30A0               	movlw	low __pbssBANK1
   692  001E  0084               	movwf	4
   693  001F  3000               	movlw	high __pbssBANK1
   694  0020  0085               	movwf	5
   695  0021  3032               	movlw	50
   696  0022  24DA               	fcall	clear_ram0
   697  0023                     end_of_initialization:	
   698                           ;End of C runtime variable initialization code
   699                           
   700  0023                     __end_of__initialization:	
   701  0023  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   702  0024  0020               	movlb	0
   703  0025  2CC6               	ljmp	_main	;jump to C main() function
   704                           
   705                           	psect	bssCOMMON
   706  007C                     __pbssCOMMON:	
   707  007C                     __x:	
   708  007C                     	ds	1
   709                           
   710                           	psect	bssBANK0
   711  005B                     __pbssBANK0:	
   712  005B                     __i:	
   713  005B                     	ds	2
   714  005D                     _cur_song:	
   715  005D                     	ds	2
   716  005F                     _cur_song_duration:	
   717  005F                     	ds	2
   718  0061                     handle_fire@counter:	
   719  0061                     	ds	2
   720  0063                     handle_fire@timer:	
   721  0063                     	ds	2
   722  0065                     __checksum:	
   723  0065                     	ds	1
   724  0066                     _cur_song_length:	
   725  0066                     	ds	1
   726  0067                     _cur_song_ptr:	
   727  0067                     	ds	1
   728  0068                     _cur_song_repeat:	
   729  0068                     	ds	1
   730  0069                     _my_random_number:	
   731  0069                     	ds	1
   732  006A                     handle_serial@rx_counter:	
   733  006A                     	ds	1
   734  006B                     handle_serial@rx_id:	
   735  006B                     	ds	1
   736  006C                     __y:	
   737  006C                     	ds	1
   738                           
   739                           	psect	bssBANK1
   740  00A0                     __pbssBANK1:	
   741  00A0                     _hitlist:	
   742  00A0                     	ds	32
   743  00C0                     _config:	
   744  00C0                     	ds	18
   745                           
   746                           	psect	clrtext
   747  04DA                     clear_ram0:	
   748                           ;	Called with FSR0 containing the base address, and
   749                           ;	WREG with the size to clear
   750                           
   751  04DA  0064               	clrwdt	;clear the watchdog before getting into this loop
   752  04DB                     clrloop0:	
   753  04DB  0180               	clrf	0	;clear RAM location pointed to by FSR
   754  04DC  3101               	addfsr 0,1
   755  04DD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   756  04DE  2CDB               	goto	clrloop0	;have we reached the end yet?
   757  04DF  3400               	retlw	0	;all done for this memory range, return
   758                           
   759                           	psect	cstackCOMMON
   760  0070                     __pcstackCOMMON:	
   761  0070                     ?_Setup:	
   762  0070                     ?_super_dead_mode:	
   763                           ; 0 bytes @ 0x0
   764                           
   765  0070                     ?_handle_music:	
   766                           ; 0 bytes @ 0x0
   767                           
   768  0070                     ?_delay_1_ms:	
   769                           ; 0 bytes @ 0x0
   770                           
   771  0070                     ?_cheat:	
   772                           ; 0 bytes @ 0x0
   773                           
   774  0070                     ?_control_transfer:	
   775                           ; 0 bytes @ 0x0
   776                           
   777  0070                     ?_LoadFromFlash:	
   778                           ; 0 bytes @ 0x0
   779                           
   780  0070                     ?_main:	
   781                           ; 0 bytes @ 0x0
   782                           
   783  0070                     ?_red_led_on:	
   784                           ; 0 bytes @ 0x0
   785                           
   786  0070                     ?_green_led_on:	
   787                           ; 0 bytes @ 0x0
   788                           
   789  0070                     ?_stop_song:	
   790                           ; 0 bytes @ 0x0
   791                           
   792  0070                     ?_Send_Byte:	
   793                           ; 0 bytes @ 0x0
   794                           
   795  0070                     ?_High_Priority_Interrupt:	
   796                           ; 0 bytes @ 0x0
   797                           
   798  0070                     ??_High_Priority_Interrupt:	
   799                           ; 0 bytes @ 0x0
   800                           
   801  0070                     ?_add_to_hitlist:	
   802                           ; 0 bytes @ 0x0
   803                           
   804  0070                     ?_hit_by:	
   805                           ; 0 bytes @ 0x0
   806                           
   807  0070                     ?_SEND_DATA_BYTE:	
   808                           ; 0 bytes @ 0x0
   809                           
   810  0070                     ?_SEND_SOF:	
   811                           ; 0 bytes @ 0x0
   812                           
   813  0070                     ?_SEND_EOF:	
   814                           ; 0 bytes @ 0x0
   815                           
   816  0070                     ?_handle_serial:	
   817                           ; 0 bytes @ 0x0
   818                           
   819  0070                     ?_handle_fire:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0070                     ?_GET_CHAR_HELPER:	
   823                           ; 1 bytes @ 0x0
   824                           
   825                           
   826                           ; 1 bytes @ 0x0
   827  0070                     	ds	1
   828  0071                     ?_Load:	
   829  0071                     ?_Save:	
   830                           ; 0 bytes @ 0x1
   831                           
   832  0071                     ??_delay_1_ms:	
   833                           ; 0 bytes @ 0x1
   834                           
   835  0071                     ?_tone:	
   836                           ; 0 bytes @ 0x1
   837                           
   838  0071                     ??_red_led_on:	
   839                           ; 0 bytes @ 0x1
   840                           
   841  0071                     ??_green_led_on:	
   842                           ; 0 bytes @ 0x1
   843                           
   844  0071                     ?_play_song:	
   845                           ; 0 bytes @ 0x1
   846                           
   847  0071                     ??_stop_song:	
   848                           ; 0 bytes @ 0x1
   849                           
   850  0071                     ??_add_to_hitlist:	
   851                           ; 0 bytes @ 0x1
   852                           
   853  0071                     ??_GET_CHAR_HELPER:	
   854                           ; 0 bytes @ 0x1
   855                           
   856  0071                     ?_ADC_read:	
   857                           ; 0 bytes @ 0x1
   858                           
   859  0071                     play_song@song:	
   860                           ; 2 bytes @ 0x1
   861                           
   862  0071                     tone@period:	
   863                           ; 2 bytes @ 0x1
   864                           
   865  0071                     Load@address:	
   866                           ; 2 bytes @ 0x1
   867                           
   868  0071                     Save@address:	
   869                           ; 2 bytes @ 0x1
   870                           
   871  0071                     delay_1_ms@i:	
   872                           ; 2 bytes @ 0x1
   873                           
   874                           
   875                           ; 2 bytes @ 0x1
   876  0071                     	ds	1
   877  0072                     GET_CHAR_HELPER@val:	
   878                           
   879                           ; 1 bytes @ 0x2
   880  0072                     	ds	1
   881  0073                     ??_Setup:	
   882  0073                     ??_tone:	
   883                           ; 0 bytes @ 0x3
   884                           
   885  0073                     ??_ADC_read:	
   886                           ; 0 bytes @ 0x3
   887                           
   888  0073                     play_song@length:	
   889                           ; 0 bytes @ 0x3
   890                           
   891  0073                     Load@ptr:	
   892                           ; 1 bytes @ 0x3
   893                           
   894  0073                     Save@ptr:	
   895                           ; 1 bytes @ 0x3
   896                           
   897                           
   898                           ; 1 bytes @ 0x3
   899  0073                     	ds	1
   900  0074                     Load@data_length:	
   901  0074                     Save@data_length:	
   902                           ; 1 bytes @ 0x4
   903                           
   904  0074                     play_song@note_duration:	
   905                           ; 1 bytes @ 0x4
   906                           
   907                           
   908                           ; 2 bytes @ 0x4
   909  0074                     	ds	1
   910  0075                     ??_Load:	
   911  0075                     ??_Save:	
   912                           ; 0 bytes @ 0x5
   913                           
   914  0075                     ??_handle_music:	
   915                           ; 0 bytes @ 0x5
   916                           
   917  0075                     ??_cheat:	
   918                           ; 0 bytes @ 0x5
   919                           
   920  0075                     add_to_hitlist@gun:	
   921                           ; 0 bytes @ 0x5
   922                           
   923                           
   924                           ; 1 bytes @ 0x5
   925  0075                     	ds	1
   926  0076                     play_song@repeat:	
   927  0076                     Load@i:	
   928                           ; 1 bytes @ 0x6
   929                           
   930  0076                     Save@i:	
   931                           ; 1 bytes @ 0x6
   932                           
   933  0076                     cheat@i:	
   934                           ; 1 bytes @ 0x6
   935                           
   936  0076                     add_to_hitlist@gun16:	
   937                           ; 1 bytes @ 0x6
   938                           
   939                           
   940                           ; 2 bytes @ 0x6
   941  0076                     	ds	1
   942  0077                     ??_LoadFromFlash:	
   943  0077                     ??_play_song:	
   944                           ; 0 bytes @ 0x7
   945                           
   946  0077                     cheat@i_724:	
   947                           ; 0 bytes @ 0x7
   948                           
   949                           
   950                           ; 1 bytes @ 0x7
   951  0077                     	ds	1
   952  0078                     ??_Send_Byte:	
   953  0078                     Send_Byte@data:	
   954                           ; 0 bytes @ 0x8
   955                           
   956  0078                     add_to_hitlist@i:	
   957                           ; 1 bytes @ 0x8
   958                           
   959                           
   960                           ; 1 bytes @ 0x8
   961  0078                     	ds	1
   962  0079                     Send_Byte@i:	
   963                           
   964                           ; 2 bytes @ 0x9
   965  0079                     	ds	2
   966  007B                     SEND_DATA_BYTE@b:	
   967                           
   968                           ; 1 bytes @ 0xB
   969  007B                     	ds	1
   970  007C                     ??_main:	
   971  007C                     ??_SEND_SOF:	
   972                           ; 0 bytes @ 0xC
   973                           
   974  007C                     ??_SEND_EOF:	
   975                           ; 0 bytes @ 0xC
   976                           
   977                           
   978                           	psect	cstackBANK0
   979  0020                     __pcstackBANK0:	
   980                           ; 0 bytes @ 0xC
   981                           
   982  0020                     ??_handle_fire:	
   983  0020                     ??_SEND_DATA_BYTE:	
   984                           ; 0 bytes @ 0x0
   985                           
   986                           
   987                           ; 0 bytes @ 0x0
   988  0020                     	ds	2
   989  0022                     ??_control_transfer:	
   990  0022                     handle_fire@a:	
   991                           ; 0 bytes @ 0x2
   992                           
   993                           
   994                           ; 2 bytes @ 0x2
   995  0022                     	ds	2
   996  0024                     control_transfer@data:	
   997                           
   998                           ; 32 bytes @ 0x4
   999  0024                     	ds	32
  1000  0044                     control_transfer@cmd:	
  1001                           
  1002                           ; 1 bytes @ 0x24
  1003  0044                     	ds	1
  1004  0045                     control_transfer@random_number:	
  1005                           
  1006                           ; 1 bytes @ 0x25
  1007  0045                     	ds	1
  1008  0046                     control_transfer@id:	
  1009                           
  1010                           ; 1 bytes @ 0x26
  1011  0046                     	ds	1
  1012  0047                     control_transfer@dptr:	
  1013                           
  1014                           ; 1 bytes @ 0x27
  1015  0047                     	ds	1
  1016  0048                     control_transfer@i:	
  1017                           
  1018                           ; 1 bytes @ 0x28
  1019  0048                     	ds	1
  1020  0049                     control_transfer@page:	
  1021                           
  1022                           ; 2 bytes @ 0x29
  1023  0049                     	ds	2
  1024  004B                     control_transfer@x:	
  1025                           
  1026                           ; 1 bytes @ 0x2B
  1027  004B                     	ds	1
  1028  004C                     ??_super_dead_mode:	
  1029                           
  1030                           ; 0 bytes @ 0x2C
  1031  004C                     	ds	2
  1032  004E                     super_dead_mode@b:	
  1033                           
  1034                           ; 1 bytes @ 0x2E
  1035  004E                     	ds	1
  1036  004F                     super_dead_mode@counter:	
  1037                           
  1038                           ; 2 bytes @ 0x2F
  1039  004F                     	ds	2
  1040  0051                     ??_hit_by:	
  1041                           
  1042                           ; 0 bytes @ 0x31
  1043  0051                     	ds	2
  1044  0053                     hit_by@who:	
  1045                           
  1046                           ; 1 bytes @ 0x33
  1047  0053                     	ds	1
  1048  0054                     hit_by@respawn_timer:	
  1049                           
  1050                           ; 2 bytes @ 0x34
  1051  0054                     	ds	2
  1052  0056                     hit_by@i:	
  1053                           
  1054                           ; 1 bytes @ 0x36
  1055  0056                     	ds	1
  1056  0057                     hit_by@i_747:	
  1057                           
  1058                           ; 1 bytes @ 0x37
  1059  0057                     	ds	1
  1060  0058                     ??_handle_serial:	
  1061                           
  1062                           ; 0 bytes @ 0x38
  1063  0058                     	ds	2
  1064  005A                     handle_serial@b:	
  1065                           
  1066                           ; 1 bytes @ 0x3A
  1067  005A                     	ds	1
  1068                           
  1069                           	psect	maintext
  1070  04C6                     __pmaintext:	
  1071 ;;
  1072 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1073 ;;
  1074 ;; *************** function _main *****************
  1075 ;; Defined at:
  1076 ;;		line 48 in file "main.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;		None
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;		None
  1081 ;; Return value:  Size  Location     Type
  1082 ;;		None               void
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : 17F/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1090 ;;      Params:         0       0       0       0
  1091 ;;      Locals:         0       0       0       0
  1092 ;;      Temps:          0       0       0       0
  1093 ;;      Totals:         0       0       0       0
  1094 ;;Total ram usage:        0 bytes
  1095 ;; Hardware stack levels required when called:   10
  1096 ;; This function calls:
  1097 ;;		_LoadFromFlash
  1098 ;;		_Setup
  1099 ;;		_handle_fire
  1100 ;;		_handle_music
  1101 ;;		_handle_serial
  1102 ;;		_super_dead_mode
  1103 ;; This function is called by:
  1104 ;;		Startup code after reset
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           
  1109                           ;psect for function _main
  1110  04C6                     _main:	
  1111                           
  1112                           ;main.c: 50: Setup();
  1113                           
  1114                           ;incstack = 0
  1115                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1116  04C6  2756               	fcall	_Setup
  1117                           
  1118                           ;main.c: 51: LoadFromFlash();
  1119  04C7  2656               	fcall	_LoadFromFlash
  1120                           
  1121                           ;main.c: 52: if(!config.health) {
  1122  04C8  0021               	movlb	1	; select bank1
  1123  04C9  0845               	movf	((_config+1)^(0+128)+4),w
  1124  04CA  0444               	iorwf	(_config^(0+128)+4),w
  1125  04CB  1D03               	skipz
  1126  04CC  2CCE               	goto	l26
  1127                           
  1128                           ;main.c: 53: super_dead_mode();
  1129  04CD  2558               	fcall	_super_dead_mode
  1130  04CE                     l26:	
  1131                           ;main.c: 54: }
  1132                           ;main.c: 56: while(1)
  1133                           
  1134                           
  1135                           ;main.c: 57: {
  1136                           ;main.c: 58: handle_serial();
  1137  04CE  25AE               	fcall	_handle_serial
  1138                           
  1139                           ;main.c: 59: handle_fire();
  1140  04CF  2342               	fcall	_handle_fire
  1141                           
  1142                           ;main.c: 60: handle_music();
  1143  04D0  2725               	fcall	_handle_music
  1144  04D1  2CCE               	goto	l26
  1145  04D2                     __end_of_main:	
  1146                           
  1147                           	psect	text1
  1148  05AE                     __ptext1:	
  1149 ;; *************** function _handle_serial *****************
  1150 ;; Defined at:
  1151 ;;		line 135 in file "protocol.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  b               1   58[BANK0 ] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      unsigned char 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1165 ;;      Params:         0       0       0       0
  1166 ;;      Locals:         0       1       0       0
  1167 ;;      Temps:          0       2       0       0
  1168 ;;      Totals:         0       3       0       0
  1169 ;;Total ram usage:        3 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    9
  1172 ;; This function calls:
  1173 ;;		_control_transfer
  1174 ;;		_hit_by
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _handle_serial
  1182  05AE                     _handle_serial:	
  1183                           
  1184                           ;protocol.c: 137: static uint8_t rx_id=0;
  1185                           ;protocol.c: 138: static uint8_t rx_counter=0;
  1186                           ;protocol.c: 139: uint8_t b;
  1187                           ;protocol.c: 141: if(!(PIR1bits.RCIF)) return 0;
  1188                           
  1189                           ;incstack = 0
  1190                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1191  05AE  0020               	movlb	0	; select bank0
  1192  05AF  1E91               	btfss	17,5	;volatile
  1193  05B0  0008               	return
  1194                           
  1195                           ;protocol.c: 142: b=(RCREG);
  1196                           
  1197                           ;	Return value of _handle_serial is never used
  1198  05B1  0023               	movlb	3	; select bank3
  1199  05B2  0819               	movf	25,w	;volatile
  1200  05B3  0020               	movlb	0	; select bank0
  1201  05B4  00D8               	movwf	??_handle_serial
  1202  05B5  0858               	movf	??_handle_serial,w
  1203  05B6  00DA               	movwf	handle_serial@b
  1204                           
  1205                           ;protocol.c: 143: if(b == 0x10) {
  1206  05B7  085A               	movf	handle_serial@b,w
  1207  05B8  3A10               	xorlw	16
  1208  05B9  1D03               	skipz
  1209  05BA  2DBD               	goto	l3133
  1210                           
  1211                           ;protocol.c: 144: control_transfer();
  1212  05BB  2026               	fcall	_control_transfer
  1213                           
  1214                           ;protocol.c: 145: }
  1215  05BC  0008               	return
  1216  05BD                     l3133:	
  1217                           
  1218                           ;protocol.c: 147: else if((b > 0x80) && (b != config.id) && (config.id != 0x80) && !(con
      +                          fig.id & (1<<9))) {
  1219  05BD  3081               	movlw	129
  1220  05BE  0020               	movlb	0	; select bank0
  1221  05BF  025A               	subwf	handle_serial@b,w
  1222  05C0  1C03               	skipc
  1223  05C1  0008               	return
  1224  05C2  085A               	movf	handle_serial@b,w
  1225  05C3  00D8               	movwf	??_handle_serial
  1226  05C4  01D9               	clrf	??_handle_serial+1
  1227  05C5  0021               	movlb	1	; select bank1
  1228  05C6  0841               	movf	(_config+1)^(0+128),w
  1229  05C7  0020               	movlb	0	; select bank0
  1230  05C8  0659               	xorwf	??_handle_serial+1,w
  1231  05C9  1D03               	skipz
  1232  05CA  2DCF               	goto	u4245
  1233  05CB  0021               	movlb	1	; select bank1
  1234  05CC  0840               	movf	_config^(0+128),w
  1235  05CD  0020               	movlb	0	; select bank0
  1236  05CE  0658               	xorwf	??_handle_serial,w
  1237  05CF                     u4245:	
  1238  05CF  1903               	skipnz
  1239  05D0  0008               	return
  1240  05D1  3080               	movlw	128
  1241  05D2  0021               	movlb	1	; select bank1
  1242  05D3  0640               	xorwf	_config^(0+128),w
  1243  05D4  0441               	iorwf	(_config+1)^(0+128),w
  1244  05D5  1903               	skipnz
  1245  05D6  0008               	return
  1246  05D7  18C1               	btfsc	(_config+1)^(0+128),1
  1247  05D8  0008               	return
  1248                           
  1249                           ;protocol.c: 148: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1250  05D9  0020               	movlb	0	; select bank0
  1251  05DA  085A               	movf	handle_serial@b,w
  1252  05DB  066B               	xorwf	handle_serial@rx_id,w
  1253  05DC  1903               	btfsc	3,2
  1254  05DD  1891               	btfsc	17,1	;volatile
  1255  05DE  01EA               	clrf	handle_serial@rx_counter
  1256                           
  1257                           ;protocol.c: 149: TMR2 = 0;
  1258  05DF  019A               	clrf	26	;volatile
  1259                           
  1260                           ;protocol.c: 150: PIR1bits.TMR2IF = 0;
  1261  05E0  1091               	bcf	17,1	;volatile
  1262                           
  1263                           ;protocol.c: 151: rx_id = b;
  1264  05E1  085A               	movf	handle_serial@b,w
  1265  05E2  00D8               	movwf	??_handle_serial
  1266  05E3  0858               	movf	??_handle_serial,w
  1267  05E4  00EB               	movwf	handle_serial@rx_id
  1268                           
  1269                           ;protocol.c: 152: rx_counter++;
  1270  05E5  3001               	movlw	1
  1271  05E6  00D8               	movwf	??_handle_serial
  1272  05E7  0858               	movf	??_handle_serial,w
  1273  05E8  07EA               	addwf	handle_serial@rx_counter,f
  1274                           
  1275                           ;protocol.c: 153: if(rx_counter > config.shield) {
  1276  05E9  086A               	movf	handle_serial@rx_counter,w
  1277  05EA  00D8               	movwf	??_handle_serial
  1278  05EB  01D9               	clrf	??_handle_serial+1
  1279  05EC  0859               	movf	??_handle_serial+1,w
  1280  05ED  0021               	movlb	1	; select bank1
  1281  05EE  0247               	subwf	((_config+1)^(0+128)+6),w
  1282  05EF  1D03               	skipz
  1283  05F0  2DF5               	goto	u4295
  1284  05F1  0020               	movlb	0	; select bank0
  1285  05F2  0858               	movf	??_handle_serial,w
  1286  05F3  0021               	movlb	1	; select bank1
  1287  05F4  0246               	subwf	(_config^(0+128)+6),w
  1288  05F5                     u4295:	
  1289  05F5  1803               	skipnc
  1290  05F6  0008               	return
  1291                           
  1292                           ;protocol.c: 154: RCSTAbits.CREN = 0;
  1293  05F7  0023               	movlb	3	; select bank3
  1294  05F8  121D               	bcf	29,4	;volatile
  1295                           
  1296                           ;protocol.c: 155: hit_by(b);
  1297  05F9  0020               	movlb	0	; select bank0
  1298  05FA  085A               	movf	handle_serial@b,w
  1299  05FB  23D6               	fcall	_hit_by
  1300                           
  1301                           ;protocol.c: 156: rx_id = 0;
  1302  05FC  0020               	movlb	0	; select bank0
  1303  05FD  01EB               	clrf	handle_serial@rx_id
  1304                           
  1305                           ;protocol.c: 157: (RCREG);
  1306  05FE  0023               	movlb	3	; select bank3
  1307  05FF  0819               	movf	25,w	;volatile
  1308                           
  1309                           ;protocol.c: 158: RCSTAbits.CREN = 1;
  1310  0600  161D               	bsf	29,4	;volatile
  1311  0601  0008               	return
  1312  0602                     __end_of_handle_serial:	
  1313                           ;protocol.c: 159: }
  1314                           ;protocol.c: 160: }
  1315                           ;protocol.c: 161: return 1;
  1316                           ;	Return value of _handle_serial is never used
  1317                           
  1318                           
  1319                           	psect	text2
  1320  03D6                     __ptext2:	
  1321 ;; *************** function _hit_by *****************
  1322 ;; Defined at:
  1323 ;;		line 346 in file "user.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  who             1    wreg     unsigned char 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  who             1   51[BANK0 ] unsigned char 
  1328 ;;  i               1   55[BANK0 ] unsigned char 
  1329 ;;  i               1   54[BANK0 ] unsigned char 
  1330 ;;  respawn_time    2   52[BANK0 ] unsigned int 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;		None               void
  1333 ;; Registers used:
  1334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1340 ;;      Params:         0       0       0       0
  1341 ;;      Locals:         0       5       0       0
  1342 ;;      Temps:          0       2       0       0
  1343 ;;      Totals:         0       7       0       0
  1344 ;;Total ram usage:        7 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    8
  1347 ;; This function calls:
  1348 ;;		_Save
  1349 ;;		_add_to_hitlist
  1350 ;;		_delay_1_ms
  1351 ;;		_handle_music
  1352 ;;		_play_song
  1353 ;;		_red_led_on
  1354 ;;		_super_dead_mode
  1355 ;; This function is called by:
  1356 ;;		_handle_serial
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           
  1361                           ;psect for function _hit_by
  1362  03D6                     _hit_by:	
  1363                           
  1364                           ;incstack = 0
  1365                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1366                           ;hit_by@who stored from wreg
  1367  03D6  0020               	movlb	0	; select bank0
  1368  03D7  00D3               	movwf	hit_by@who
  1369                           
  1370                           ;user.c: 348: uint16_t respawn_timer;
  1371                           ;user.c: 350: add_to_hitlist(who);
  1372  03D8  0853               	movf	hit_by@who,w
  1373  03D9  2602               	fcall	_add_to_hitlist
  1374                           
  1375                           ;user.c: 351: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1376  03DA  30E0               	movlw	224
  1377  03DB  00F1               	movwf	Save@address
  1378  03DC  3007               	movlw	7
  1379  03DD  00F2               	movwf	Save@address+1
  1380  03DE  30A0               	movlw	_hitlist& (0+255)
  1381  03DF  0020               	movlb	0	; select bank0
  1382  03E0  00D1               	movwf	??_hit_by
  1383  03E1  0851               	movf	??_hit_by,w
  1384  03E2  00F3               	movwf	Save@ptr
  1385  03E3  3010               	movlw	16
  1386  03E4  00D2               	movwf	??_hit_by+1
  1387  03E5  0852               	movf	??_hit_by+1,w
  1388  03E6  00F4               	movwf	Save@data_length
  1389  03E7  26AA               	fcall	_Save
  1390                           
  1391                           ;user.c: 353: config.health --;
  1392  03E8  3001               	movlw	1
  1393  03E9  0021               	movlb	1	; select bank1
  1394  03EA  02C4               	subwf	(_config^(0+128)+4),f
  1395  03EB  3000               	movlw	0
  1396  03EC  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1397                           
  1398                           ;user.c: 354: Save(0x7F0,(uint16_t*)&config, (sizeof(config_t)/2));
  1399  03ED  30F0               	movlw	240
  1400  03EE  00F1               	movwf	Save@address
  1401  03EF  3007               	movlw	7
  1402  03F0  00F2               	movwf	Save@address+1
  1403  03F1  30C0               	movlw	_config& (0+255)
  1404  03F2  0020               	movlb	0	; select bank0
  1405  03F3  00D1               	movwf	??_hit_by
  1406  03F4  0851               	movf	??_hit_by,w
  1407  03F5  00F3               	movwf	Save@ptr
  1408  03F6  3009               	movlw	9
  1409  03F7  00D2               	movwf	??_hit_by+1
  1410  03F8  0852               	movf	??_hit_by+1,w
  1411  03F9  00F4               	movwf	Save@data_length
  1412  03FA  26AA               	fcall	_Save
  1413                           
  1414                           ;user.c: 356: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  1415  03FB  3000               	movlw	low (_death_song| (0+32768))
  1416  03FC  00F1               	movwf	play_song@song
  1417  03FD  3085               	movlw	high (_death_song| (0+32768))
  1418  03FE  00F2               	movwf	play_song@song+1
  1419  03FF  3013               	movlw	19
  1420  0400  0020               	movlb	0	; select bank0
  1421  0401  00D1               	movwf	??_hit_by
  1422  0402  0851               	movf	??_hit_by,w
  1423  0403  00F3               	movwf	play_song@length
  1424  0404  3060               	movlw	96
  1425  0405  00F4               	movwf	play_song@note_duration
  1426  0406  30EA               	movlw	234
  1427  0407  00F5               	movwf	play_song@note_duration+1
  1428  0408  01F6               	clrf	play_song@repeat
  1429  0409  27A5               	fcall	_play_song
  1430                           
  1431                           ;user.c: 358: if(!config.health)
  1432  040A  0021               	movlb	1	; select bank1
  1433  040B  0845               	movf	((_config+1)^(0+128)+4),w
  1434  040C  0444               	iorwf	(_config^(0+128)+4),w
  1435  040D  1D03               	skipz
  1436  040E  2C12               	goto	l3043
  1437                           
  1438                           ;user.c: 359: {
  1439                           ;user.c: 360: red_led_on();
  1440  040F  24F1               	fcall	_red_led_on
  1441                           
  1442                           ;user.c: 361: super_dead_mode();
  1443  0410  2558               	fcall	_super_dead_mode
  1444                           
  1445                           ;user.c: 362: return;
  1446  0411  0008               	return
  1447  0412                     l3043:	
  1448                           
  1449                           ;user.c: 363: }
  1450                           ;user.c: 365: respawn_timer = config.respawn_delay;
  1451  0412  0021               	movlb	1	; select bank1
  1452  0413  0849               	movf	((_config+1)^(0+128)+8),w
  1453  0414  0020               	movlb	0	; select bank0
  1454  0415  01D5               	clrf	hit_by@respawn_timer+1
  1455  0416  07D5               	addwf	hit_by@respawn_timer+1,f
  1456  0417  0021               	movlb	1	; select bank1
  1457  0418  0848               	movf	(_config^(0+128)+8),w
  1458  0419  0020               	movlb	0	; select bank0
  1459  041A  01D4               	clrf	hit_by@respawn_timer
  1460  041B  07D4               	addwf	hit_by@respawn_timer,f
  1461  041C                     l3081:	
  1462                           ;user.c: 366: while(respawn_timer)
  1463                           
  1464  041C  0855               	movf	hit_by@respawn_timer+1,w
  1465  041D  0454               	iorwf	hit_by@respawn_timer,w
  1466  041E  1903               	btfsc	3,2
  1467  041F  0008               	return
  1468                           
  1469                           ;user.c: 367: {
  1470                           ;user.c: 368: respawn_timer--;
  1471  0420  3001               	movlw	1
  1472  0421  02D4               	subwf	hit_by@respawn_timer,f
  1473  0422  3000               	movlw	0
  1474  0423  3BD5               	subwfb	hit_by@respawn_timer+1,f
  1475                           
  1476                           ;user.c: 369: red_led_on();
  1477  0424  24F1               	fcall	_red_led_on
  1478                           
  1479                           ;user.c: 370: for(uint8_t i=0;i<50;i++)
  1480  0425  0020               	movlb	0	; select bank0
  1481  0426  01D6               	clrf	hit_by@i
  1482  0427  3032               	movlw	50
  1483  0428  0256               	subwf	hit_by@i,w
  1484  0429  1803               	btfsc	3,0
  1485  042A  2C36               	goto	l3063
  1486  042B                     l3055:	
  1487                           
  1488                           ;user.c: 371: {
  1489                           ;user.c: 372: handle_music();
  1490  042B  2725               	fcall	_handle_music
  1491                           
  1492                           ;user.c: 373: delay_1_ms();
  1493  042C  24B7               	fcall	_delay_1_ms
  1494  042D  3001               	movlw	1
  1495  042E  0020               	movlb	0	; select bank0
  1496  042F  00D1               	movwf	??_hit_by
  1497  0430  0851               	movf	??_hit_by,w
  1498  0431  07D6               	addwf	hit_by@i,f
  1499  0432  3032               	movlw	50
  1500  0433  0256               	subwf	hit_by@i,w
  1501  0434  1C03               	skipc
  1502  0435  2C2B               	goto	l3055
  1503  0436                     l3063:	
  1504                           
  1505                           ;user.c: 374: }
  1506                           ;user.c: 376: if(respawn_timer < 30)
  1507  0436  3000               	movlw	0
  1508  0437  0255               	subwf	hit_by@respawn_timer+1,w
  1509  0438  301E               	movlw	30
  1510  0439  1903               	skipnz
  1511  043A  0254               	subwf	hit_by@respawn_timer,w
  1512  043B  1803               	skipnc
  1513  043C  2C3F               	goto	l3067
  1514                           
  1515                           ;user.c: 377: {
  1516                           ;user.c: 378: {TRISAbits.TRISA5 = 1;};
  1517  043D  0021               	movlb	1	; select bank1
  1518  043E  168C               	bsf	12,5	;volatile
  1519  043F                     l3067:	
  1520                           
  1521                           ;user.c: 379: }
  1522                           ;user.c: 380: for(uint8_t i=0;i<50;i++)
  1523  043F  0020               	movlb	0	; select bank0
  1524  0440  01D7               	clrf	hit_by@i_747
  1525  0441                     L1:	
  1526  0441  3032               	movlw	50
  1527  0442  0257               	subwf	hit_by@i_747,w
  1528  0443  1803               	btfsc	3,0
  1529  0444  2C1C               	goto	l3081
  1530                           
  1531                           ;user.c: 381: {
  1532                           ;user.c: 382: handle_music();
  1533  0445  2725               	fcall	_handle_music
  1534                           
  1535                           ;user.c: 383: delay_1_ms();
  1536  0446  24B7               	fcall	_delay_1_ms
  1537  0447  3001               	movlw	1
  1538  0448  0020               	movlb	0	; select bank0
  1539  0449  00D1               	movwf	??_hit_by
  1540  044A  0851               	movf	??_hit_by,w
  1541  044B  07D7               	addwf	hit_by@i_747,f
  1542  044C  2C41               	goto	L1
  1543  044D                     __end_of_hit_by:	
  1544                           
  1545                           	psect	text3
  1546  0558                     __ptext3:	
  1547 ;; *************** function _super_dead_mode *****************
  1548 ;; Defined at:
  1549 ;;		line 320 in file "user.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;		None
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  b               1   46[BANK0 ] unsigned char 
  1554 ;;  counter         2   47[BANK0 ] unsigned int 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;		None               void
  1557 ;; Registers used:
  1558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1564 ;;      Params:         0       0       0       0
  1565 ;;      Locals:         0       3       0       0
  1566 ;;      Temps:          0       2       0       0
  1567 ;;      Totals:         0       5       0       0
  1568 ;;Total ram usage:        5 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    7
  1571 ;; This function calls:
  1572 ;;		_Send_Byte
  1573 ;;		_control_transfer
  1574 ;;		_delay_1_ms
  1575 ;;		_handle_music
  1576 ;;		_play_song
  1577 ;;		_red_led_on
  1578 ;; This function is called by:
  1579 ;;		_main
  1580 ;;		_hit_by
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           
  1585                           ;psect for function _super_dead_mode
  1586  0558                     _super_dead_mode:	
  1587                           
  1588                           ;user.c: 321: uint16_t counter = 0;
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1592  0558  0020               	movlb	0	; select bank0
  1593  0559  01CF               	clrf	super_dead_mode@counter
  1594  055A  01D0               	clrf	super_dead_mode@counter+1
  1595  055B                     l3025:	
  1596                           ;user.c: 322: while(!config.health){
  1597                           
  1598  055B  3004               	movlw	4
  1599  055C  3EC0               	addlw	_config& (0+255)
  1600  055D  0086               	movwf	6
  1601  055E  0187               	clrf	7
  1602  055F  0016               	moviw fsr1++
  1603  0560  0401               	iorwf	1,w
  1604  0561  1D03               	btfss	3,2
  1605  0562  0008               	return
  1606                           
  1607                           ;user.c: 323: handle_music();
  1608  0563  2725               	fcall	_handle_music
  1609                           
  1610                           ;user.c: 325: uint8_t b;
  1611                           ;user.c: 326: if((PIR1bits.RCIF)){
  1612  0564  0020               	movlb	0	; select bank0
  1613  0565  1E91               	btfss	17,5	;volatile
  1614  0566  2D72               	goto	l3007
  1615                           
  1616                           ;user.c: 327: b=(RCREG);
  1617  0567  0023               	movlb	3	; select bank3
  1618  0568  0819               	movf	25,w	;volatile
  1619  0569  0020               	movlb	0	; select bank0
  1620  056A  00CC               	movwf	??_super_dead_mode
  1621  056B  084C               	movf	??_super_dead_mode,w
  1622  056C  00CE               	movwf	super_dead_mode@b
  1623                           
  1624                           ;user.c: 328: if(b == 0x10) {
  1625  056D  084E               	movf	super_dead_mode@b,w
  1626  056E  3A10               	xorlw	16
  1627  056F  1D03               	skipz
  1628  0570  2D72               	goto	l3007
  1629                           
  1630                           ;user.c: 329: control_transfer();
  1631  0571  2026               	fcall	_control_transfer
  1632  0572                     l3007:	
  1633                           
  1634                           ;user.c: 330: }
  1635                           ;user.c: 331: }
  1636                           ;user.c: 332: counter++;
  1637  0572  3001               	movlw	1
  1638  0573  0020               	movlb	0	; select bank0
  1639  0574  07CF               	addwf	super_dead_mode@counter,f
  1640  0575  3000               	movlw	0
  1641  0576  3DD0               	addwfc	super_dead_mode@counter+1,f
  1642                           
  1643                           ;user.c: 333: delay_1_ms();
  1644  0577  24B7               	fcall	_delay_1_ms
  1645                           
  1646                           ;user.c: 334: if(counter > config.death_period){
  1647  0578  0020               	movlb	0	; select bank0
  1648  0579  0850               	movf	super_dead_mode@counter+1,w
  1649  057A  0021               	movlb	1	; select bank1
  1650  057B  0251               	subwf	((_config+1)^(0+128)+16),w
  1651  057C  1D03               	skipz
  1652  057D  2D82               	goto	u4115
  1653  057E  0020               	movlb	0	; select bank0
  1654  057F  084F               	movf	super_dead_mode@counter,w
  1655  0580  0021               	movlb	1	; select bank1
  1656  0581  0250               	subwf	(_config^(0+128)+16),w
  1657  0582                     u4115:	
  1658  0582  1803               	skipnc
  1659  0583  2D9A               	goto	l3021
  1660                           
  1661                           ;user.c: 335: counter = 0;
  1662  0584  0020               	movlb	0	; select bank0
  1663  0585  01CF               	clrf	super_dead_mode@counter
  1664  0586  01D0               	clrf	super_dead_mode@counter+1
  1665                           
  1666                           ;user.c: 336: {TRISAbits.TRISA5 = 1;};
  1667  0587  0021               	movlb	1	; select bank1
  1668  0588  168C               	bsf	12,5	;volatile
  1669                           
  1670                           ;user.c: 337: Send_Byte(config.id);
  1671  0589  0840               	movf	_config^(0+128),w
  1672  058A  26F1               	fcall	_Send_Byte
  1673                           
  1674                           ;user.c: 338: play_song(dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  1675  058B  3052               	movlw	low (_dead_song| (0+32768))
  1676  058C  00F1               	movwf	play_song@song
  1677  058D  3085               	movlw	high (_dead_song| (0+32768))
  1678  058E  00F2               	movwf	play_song@song+1
  1679  058F  3003               	movlw	3
  1680  0590  0020               	movlb	0	; select bank0
  1681  0591  00CC               	movwf	??_super_dead_mode
  1682  0592  084C               	movf	??_super_dead_mode,w
  1683  0593  00F3               	movwf	play_song@length
  1684  0594  3010               	movlw	16
  1685  0595  00F4               	movwf	play_song@note_duration
  1686  0596  3027               	movlw	39
  1687  0597  00F5               	movwf	play_song@note_duration+1
  1688  0598  01F6               	clrf	play_song@repeat
  1689  0599  27A5               	fcall	_play_song
  1690  059A                     l3021:	
  1691                           
  1692                           ;user.c: 339: }
  1693                           ;user.c: 340: if(counter == config.death_period-50){
  1694  059A  0021               	movlb	1	; select bank1
  1695  059B  0850               	movf	(_config^(0+128)+16),w
  1696  059C  3ECE               	addlw	206
  1697  059D  0020               	movlb	0	; select bank0
  1698  059E  00CC               	movwf	??_super_dead_mode
  1699  059F  30FF               	movlw	255
  1700  05A0  0021               	movlb	1	; select bank1
  1701  05A1  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1702  05A2  0020               	movlb	0	; select bank0
  1703  05A3  00CD               	movwf	??_super_dead_mode+1
  1704  05A4  0850               	movf	super_dead_mode@counter+1,w
  1705  05A5  064D               	xorwf	??_super_dead_mode+1,w
  1706  05A6  1D03               	skipz
  1707  05A7  2DAA               	goto	u4125
  1708  05A8  084F               	movf	super_dead_mode@counter,w
  1709  05A9  064C               	xorwf	??_super_dead_mode,w
  1710  05AA                     u4125:	
  1711  05AA  1D03               	skipz
  1712  05AB  2D5B               	goto	l3025
  1713                           
  1714                           ;user.c: 341: red_led_on();
  1715  05AC  24F1               	fcall	_red_led_on
  1716  05AD  2D5B               	goto	l3025
  1717  05AE                     __end_of_super_dead_mode:	
  1718                           
  1719                           	psect	text4
  1720  0725                     __ptext4:	
  1721 ;; *************** function _handle_music *****************
  1722 ;; Defined at:
  1723 ;;		line 112 in file "user.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;		None               void
  1730 ;; Registers used:
  1731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1737 ;;      Params:         0       0       0       0
  1738 ;;      Locals:         0       0       0       0
  1739 ;;      Temps:          2       0       0       0
  1740 ;;      Totals:         2       0       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    2
  1744 ;; This function calls:
  1745 ;;		_stop_song
  1746 ;;		_tone
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;;		_super_dead_mode
  1750 ;;		_hit_by
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           
  1755                           ;psect for function _handle_music
  1756  0725                     _handle_music:	
  1757                           
  1758                           ;user.c: 114: if(!PIR1bits.TMR1IF) return;
  1759                           
  1760                           ;incstack = 0
  1761                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1762  0725  0020               	movlb	0	; select bank0
  1763  0726  1C11               	btfss	17,0	;volatile
  1764  0727  0008               	return
  1765                           
  1766                           ;user.c: 115: if(cur_song_ptr >= cur_song_length)
  1767  0728  0866               	movf	_cur_song_length,w
  1768  0729  0267               	subwf	_cur_song_ptr,w
  1769  072A  1C03               	skipc
  1770  072B  2F33               	goto	l2645
  1771                           
  1772                           ;user.c: 116: {
  1773                           ;user.c: 117: if(cur_song_repeat)
  1774  072C  0868               	movf	_cur_song_repeat,w
  1775  072D  1903               	btfsc	3,2
  1776  072E  2F31               	goto	l2641
  1777                           
  1778                           ;user.c: 118: {
  1779                           ;user.c: 119: cur_song_ptr=0;
  1780  072F  01E7               	clrf	_cur_song_ptr
  1781                           
  1782                           ;user.c: 120: }
  1783  0730  2F33               	goto	l2645
  1784  0731                     l2641:	
  1785                           
  1786                           ;user.c: 121: else
  1787                           ;user.c: 122: {
  1788                           ;user.c: 123: stop_song();
  1789  0731  24E6               	fcall	_stop_song
  1790                           
  1791                           ;user.c: 124: return;
  1792  0732  0008               	return
  1793  0733                     l2645:	
  1794                           
  1795                           ;user.c: 125: }
  1796                           ;user.c: 126: }
  1797                           ;user.c: 127: tone(cur_song[cur_song_ptr]);
  1798  0733  0020               	movlb	0	; select bank0
  1799  0734  0867               	movf	_cur_song_ptr,w
  1800  0735  00F5               	movwf	??_handle_music
  1801  0736  01F6               	clrf	??_handle_music+1
  1802  0737  35F5               	lslf	??_handle_music,f
  1803  0738  0DF6               	rlf	??_handle_music+1,f
  1804  0739  085D               	movf	_cur_song,w
  1805  073A  0775               	addwf	??_handle_music,w
  1806  073B  0084               	movwf	4
  1807  073C  085E               	movf	_cur_song+1,w
  1808  073D  3D76               	addwfc	??_handle_music+1,w
  1809  073E  0085               	movwf	5
  1810  073F  3F00               	moviw [0]fsr0
  1811  0740  00F1               	movwf	tone@period
  1812  0741  3F01               	moviw [1]fsr0
  1813  0742  00F2               	movwf	tone@period+1
  1814  0743  27C9               	fcall	_tone
  1815                           
  1816                           ;user.c: 128: TMR1 = -cur_song_duration;
  1817  0744  0020               	movlb	0	; select bank0
  1818  0745  095F               	comf	_cur_song_duration,w
  1819  0746  00F5               	movwf	??_handle_music
  1820  0747  0960               	comf	_cur_song_duration+1,w
  1821  0748  00F6               	movwf	??_handle_music+1
  1822  0749  0AF5               	incf	??_handle_music,f
  1823  074A  1903               	skipnz
  1824  074B  0AF6               	incf	??_handle_music+1,f
  1825  074C  0875               	movf	??_handle_music,w
  1826  074D  0096               	movwf	22	;volatile
  1827  074E  0876               	movf	??_handle_music+1,w
  1828  074F  0097               	movwf	23	;volatile
  1829                           
  1830                           ;user.c: 129: cur_song_ptr++;
  1831  0750  3001               	movlw	1
  1832  0751  00F5               	movwf	??_handle_music
  1833  0752  0875               	movf	??_handle_music,w
  1834  0753  07E7               	addwf	_cur_song_ptr,f
  1835                           
  1836                           ;user.c: 130: PIR1bits.TMR1IF=0;
  1837  0754  1011               	bcf	17,0	;volatile
  1838  0755  0008               	return
  1839  0756                     __end_of_handle_music:	
  1840                           
  1841                           	psect	text5
  1842  0026                     __ptext5:	
  1843 ;; *************** function _control_transfer *****************
  1844 ;; Defined at:
  1845 ;;		line 44 in file "protocol.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  data           32    4[BANK0 ] unsigned int [16]
  1850 ;;  page            2   41[BANK0 ] unsigned int 
  1851 ;;  x               1   43[BANK0 ] unsigned char 
  1852 ;;  i               1   40[BANK0 ] unsigned char 
  1853 ;;  dptr            1   39[BANK0 ] PTR unsigned char 
  1854 ;;		 -> control_transfer@data(32), 
  1855 ;;  id              1   38[BANK0 ] unsigned char 
  1856 ;;  random_numbe    1   37[BANK0 ] unsigned char 
  1857 ;;  cmd             1   36[BANK0 ] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;		None               void
  1860 ;; Registers used:
  1861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1867 ;;      Params:         0       0       0       0
  1868 ;;      Locals:         0      40       0       0
  1869 ;;      Temps:          0       2       0       0
  1870 ;;      Totals:         0      42       0       0
  1871 ;;Total ram usage:       42 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    6
  1874 ;; This function calls:
  1875 ;;		_GET_CHAR_HELPER
  1876 ;;		_Load
  1877 ;;		_SEND_DATA_BYTE
  1878 ;;		_SEND_EOF
  1879 ;;		_SEND_SOF
  1880 ;;		_Save
  1881 ;;		_play_song
  1882 ;; This function is called by:
  1883 ;;		_super_dead_mode
  1884 ;;		_handle_serial
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           
  1889                           ;psect for function _control_transfer
  1890  0026                     _control_transfer:	
  1891                           
  1892                           ;protocol.c: 46: uint8_t i;
  1893                           ;protocol.c: 47: uint8_t cmd;
  1894                           ;protocol.c: 48: uint8_t random_number,id;
  1895                           ;protocol.c: 50: uint16_t page;
  1896                           ;protocol.c: 51: uint16_t data[16];
  1897                           ;protocol.c: 52: uint8_t* dptr;
  1898                           ;protocol.c: 53: uint8_t x;
  1899                           ;protocol.c: 55: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1900                           
  1901                           ;incstack = 0
  1902                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1903  0026  0020               	movlb	0	; select bank0
  1904  0027  01E5               	clrf	__checksum
  1905  0028  307C               	movlw	__x& (0+255)
  1906  0029  246E               	fcall	_GET_CHAR_HELPER
  1907  002A  3A00               	xorlw	0
  1908  002B  1D03               	btfss	3,2
  1909  002C  0008               	return
  1910  002D  306C               	movlw	__y& (0+255)
  1911  002E  246E               	fcall	_GET_CHAR_HELPER
  1912  002F  3A00               	xorlw	0
  1913  0030  1D03               	btfss	3,2
  1914  0031  0008               	return
  1915  0032  087C               	movf	__x,w
  1916  0033  39F0               	andlw	240
  1917  0034  1D03               	btfss	3,2
  1918  0035  0008               	return
  1919  0036  0020               	movlb	0	; select bank0
  1920  0037  086C               	movf	__y,w
  1921  0038  39F0               	andlw	240
  1922  0039  1D03               	btfss	3,2
  1923  003A  0008               	return
  1924  003B  086C               	movf	__y,w
  1925  003C  00A2               	movwf	??_control_transfer
  1926  003D  3003               	movlw	3
  1927  003E                     u3225:	
  1928  003E  35A2               	lslf	??_control_transfer,f
  1929  003F  3EFF               	addlw	-1
  1930  0040  1D03               	skipz
  1931  0041  283E               	goto	u3225
  1932  0042  3522               	lslf	??_control_transfer,w
  1933  0043  047C               	iorwf	__x,w
  1934  0044  00A3               	movwf	??_control_transfer+1
  1935  0045  0823               	movf	??_control_transfer+1,w
  1936  0046  00FC               	movwf	__x
  1937  0047  087C               	movf	__x,w
  1938  0048  00A2               	movwf	??_control_transfer
  1939  0049  0822               	movf	??_control_transfer,w
  1940  004A  07E5               	addwf	__checksum,f
  1941  004B  0021               	movlb	1	; select bank1
  1942  004C  0840               	movf	_config^(0+128),w
  1943  004D  067C               	xorwf	__x,w
  1944  004E  1D03               	btfss	3,2
  1945  004F  0008               	return
  1946                           
  1947                           ;protocol.c: 56: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  1948  0050  307C               	movlw	__x& (0+255)
  1949  0051  246E               	fcall	_GET_CHAR_HELPER
  1950  0052  3A00               	xorlw	0
  1951  0053  1D03               	btfss	3,2
  1952  0054  0008               	return
  1953  0055  306C               	movlw	__y& (0+255)
  1954  0056  246E               	fcall	_GET_CHAR_HELPER
  1955  0057  3A00               	xorlw	0
  1956  0058  1D03               	btfss	3,2
  1957  0059  0008               	return
  1958  005A  087C               	movf	__x,w
  1959  005B  39F0               	andlw	240
  1960  005C  1D03               	btfss	3,2
  1961  005D  0008               	return
  1962  005E  0020               	movlb	0	; select bank0
  1963  005F  086C               	movf	__y,w
  1964  0060  39F0               	andlw	240
  1965  0061  1D03               	btfss	3,2
  1966  0062  0008               	return
  1967  0063  086C               	movf	__y,w
  1968  0064  00A2               	movwf	??_control_transfer
  1969  0065  3003               	movlw	3
  1970  0066                     u3285:	
  1971  0066  35A2               	lslf	??_control_transfer,f
  1972  0067  3EFF               	addlw	-1
  1973  0068  1D03               	skipz
  1974  0069  2866               	goto	u3285
  1975  006A  3522               	lslf	??_control_transfer,w
  1976  006B  047C               	iorwf	__x,w
  1977  006C  00A3               	movwf	??_control_transfer+1
  1978  006D  0823               	movf	??_control_transfer+1,w
  1979  006E  00C4               	movwf	control_transfer@cmd
  1980  006F  0844               	movf	control_transfer@cmd,w
  1981  0070  00A2               	movwf	??_control_transfer
  1982  0071  0822               	movf	??_control_transfer,w
  1983  0072  07E5               	addwf	__checksum,f
  1984                           
  1985                           ;protocol.c: 58: switch(cmd)
  1986  0073  2B2E               	goto	l2991
  1987  0074                     l2687:	
  1988                           ;protocol.c: 59: {
  1989                           ;protocol.c: 60: case 0x01:
  1990                           
  1991                           
  1992                           ;protocol.c: 61: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  1993  0074  307C               	movlw	__x& (0+255)
  1994  0075  246E               	fcall	_GET_CHAR_HELPER
  1995  0076  3A00               	xorlw	0
  1996  0077  1D03               	btfss	3,2
  1997  0078  0008               	return
  1998  0079  306C               	movlw	__y& (0+255)
  1999  007A  246E               	fcall	_GET_CHAR_HELPER
  2000  007B  3A00               	xorlw	0
  2001  007C  1D03               	btfss	3,2
  2002  007D  0008               	return
  2003  007E  087C               	movf	__x,w
  2004  007F  39F0               	andlw	240
  2005  0080  1D03               	btfss	3,2
  2006  0081  0008               	return
  2007  0082  0020               	movlb	0	; select bank0
  2008  0083  086C               	movf	__y,w
  2009  0084  39F0               	andlw	240
  2010  0085  1D03               	btfss	3,2
  2011  0086  0008               	return
  2012  0087  086C               	movf	__y,w
  2013  0088  00A2               	movwf	??_control_transfer
  2014  0089  3003               	movlw	3
  2015  008A                     u3335:	
  2016  008A  35A2               	lslf	??_control_transfer,f
  2017  008B  3EFF               	addlw	-1
  2018  008C  1D03               	skipz
  2019  008D  288A               	goto	u3335
  2020  008E  3522               	lslf	??_control_transfer,w
  2021  008F  047C               	iorwf	__x,w
  2022  0090  00A3               	movwf	??_control_transfer+1
  2023  0091  0823               	movf	??_control_transfer+1,w
  2024  0092  00FC               	movwf	__x
  2025  0093  087C               	movf	__x,w
  2026  0094  00A2               	movwf	??_control_transfer
  2027  0095  0822               	movf	??_control_transfer,w
  2028  0096  07E5               	addwf	__checksum,f
  2029  0097  0865               	movf	__checksum,w
  2030  0098  1D03               	skipz
  2031  0099  0008               	return
  2032  009A  307C               	movlw	__x& (0+255)
  2033  009B  246E               	fcall	_GET_CHAR_HELPER
  2034  009C  3A00               	xorlw	0
  2035  009D  1D03               	btfss	3,2
  2036  009E  0008               	return
  2037  009F  087C               	movf	__x,w
  2038  00A0  3A11               	xorlw	17
  2039  00A1  1D03               	btfss	3,2
  2040  00A2  0008               	return
  2041                           
  2042                           ;protocol.c: 62: SEND_SOF();
  2043  00A3  24D2               	fcall	_SEND_SOF
  2044                           
  2045                           ;protocol.c: 63: SEND_DATA_BYTE(0x02);
  2046  00A4  3002               	movlw	2
  2047  00A5  248B               	fcall	_SEND_DATA_BYTE
  2048                           
  2049                           ;protocol.c: 64: SEND_DATA_BYTE(my_random_number);
  2050  00A6  0020               	movlb	0	; select bank0
  2051  00A7  0869               	movf	_my_random_number,w
  2052  00A8  248B               	fcall	_SEND_DATA_BYTE
  2053                           
  2054                           ;protocol.c: 65: SEND_EOF();
  2055  00A9  24E0               	fcall	_SEND_EOF
  2056                           
  2057                           ;protocol.c: 66: break;
  2058  00AA  0008               	return
  2059  00AB                     l2715:	
  2060                           ;protocol.c: 67: case 0x03:
  2061                           
  2062                           
  2063                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2064  00AB  307C               	movlw	__x& (0+255)
  2065  00AC  246E               	fcall	_GET_CHAR_HELPER
  2066  00AD  3A00               	xorlw	0
  2067  00AE  1D03               	btfss	3,2
  2068  00AF  0008               	return
  2069  00B0  306C               	movlw	__y& (0+255)
  2070  00B1  246E               	fcall	_GET_CHAR_HELPER
  2071  00B2  3A00               	xorlw	0
  2072  00B3  1D03               	btfss	3,2
  2073  00B4  0008               	return
  2074  00B5  087C               	movf	__x,w
  2075  00B6  39F0               	andlw	240
  2076  00B7  1D03               	btfss	3,2
  2077  00B8  0008               	return
  2078  00B9  0020               	movlb	0	; select bank0
  2079  00BA  086C               	movf	__y,w
  2080  00BB  39F0               	andlw	240
  2081  00BC  1D03               	btfss	3,2
  2082  00BD  0008               	return
  2083  00BE  086C               	movf	__y,w
  2084  00BF  00A2               	movwf	??_control_transfer
  2085  00C0  3003               	movlw	3
  2086  00C1                     u3415:	
  2087  00C1  35A2               	lslf	??_control_transfer,f
  2088  00C2  3EFF               	addlw	-1
  2089  00C3  1D03               	skipz
  2090  00C4  28C1               	goto	u3415
  2091  00C5  3522               	lslf	??_control_transfer,w
  2092  00C6  047C               	iorwf	__x,w
  2093  00C7  00A3               	movwf	??_control_transfer+1
  2094  00C8  0823               	movf	??_control_transfer+1,w
  2095  00C9  00C5               	movwf	control_transfer@random_number
  2096  00CA  0845               	movf	control_transfer@random_number,w
  2097  00CB  00A2               	movwf	??_control_transfer
  2098  00CC  0822               	movf	??_control_transfer,w
  2099  00CD  07E5               	addwf	__checksum,f
  2100                           
  2101                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2102  00CE  307C               	movlw	__x& (0+255)
  2103  00CF  246E               	fcall	_GET_CHAR_HELPER
  2104  00D0  3A00               	xorlw	0
  2105  00D1  1D03               	btfss	3,2
  2106  00D2  0008               	return
  2107  00D3  306C               	movlw	__y& (0+255)
  2108  00D4  246E               	fcall	_GET_CHAR_HELPER
  2109  00D5  3A00               	xorlw	0
  2110  00D6  1D03               	btfss	3,2
  2111  00D7  0008               	return
  2112  00D8  087C               	movf	__x,w
  2113  00D9  39F0               	andlw	240
  2114  00DA  1D03               	btfss	3,2
  2115  00DB  0008               	return
  2116  00DC  0020               	movlb	0	; select bank0
  2117  00DD  086C               	movf	__y,w
  2118  00DE  39F0               	andlw	240
  2119  00DF  1D03               	btfss	3,2
  2120  00E0  0008               	return
  2121  00E1  086C               	movf	__y,w
  2122  00E2  00A2               	movwf	??_control_transfer
  2123  00E3  3003               	movlw	3
  2124  00E4                     u3465:	
  2125  00E4  35A2               	lslf	??_control_transfer,f
  2126  00E5  3EFF               	addlw	-1
  2127  00E6  1D03               	skipz
  2128  00E7  28E4               	goto	u3465
  2129  00E8  3522               	lslf	??_control_transfer,w
  2130  00E9  047C               	iorwf	__x,w
  2131  00EA  00A3               	movwf	??_control_transfer+1
  2132  00EB  0823               	movf	??_control_transfer+1,w
  2133  00EC  00C6               	movwf	control_transfer@id
  2134  00ED  0846               	movf	control_transfer@id,w
  2135  00EE  00A2               	movwf	??_control_transfer
  2136  00EF  0822               	movf	??_control_transfer,w
  2137  00F0  07E5               	addwf	__checksum,f
  2138                           
  2139                           ;protocol.c: 70: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2140  00F1  307C               	movlw	__x& (0+255)
  2141  00F2  246E               	fcall	_GET_CHAR_HELPER
  2142  00F3  3A00               	xorlw	0
  2143  00F4  1D03               	btfss	3,2
  2144  00F5  0008               	return
  2145  00F6  306C               	movlw	__y& (0+255)
  2146  00F7  246E               	fcall	_GET_CHAR_HELPER
  2147  00F8  3A00               	xorlw	0
  2148  00F9  1D03               	btfss	3,2
  2149  00FA  0008               	return
  2150  00FB  087C               	movf	__x,w
  2151  00FC  39F0               	andlw	240
  2152  00FD  1D03               	btfss	3,2
  2153  00FE  0008               	return
  2154  00FF  0020               	movlb	0	; select bank0
  2155  0100  086C               	movf	__y,w
  2156  0101  39F0               	andlw	240
  2157  0102  1D03               	btfss	3,2
  2158  0103  0008               	return
  2159  0104  086C               	movf	__y,w
  2160  0105  00A2               	movwf	??_control_transfer
  2161  0106  3003               	movlw	3
  2162  0107                     u3515:	
  2163  0107  35A2               	lslf	??_control_transfer,f
  2164  0108  3EFF               	addlw	-1
  2165  0109  1D03               	skipz
  2166  010A  2907               	goto	u3515
  2167  010B  3522               	lslf	??_control_transfer,w
  2168  010C  047C               	iorwf	__x,w
  2169  010D  00A3               	movwf	??_control_transfer+1
  2170  010E  0823               	movf	??_control_transfer+1,w
  2171  010F  00FC               	movwf	__x
  2172  0110  087C               	movf	__x,w
  2173  0111  00A2               	movwf	??_control_transfer
  2174  0112  0822               	movf	??_control_transfer,w
  2175  0113  07E5               	addwf	__checksum,f
  2176  0114  0865               	movf	__checksum,w
  2177  0115  1D03               	skipz
  2178  0116  0008               	return
  2179  0117  307C               	movlw	__x& (0+255)
  2180  0118  246E               	fcall	_GET_CHAR_HELPER
  2181  0119  3A00               	xorlw	0
  2182  011A  1D03               	btfss	3,2
  2183  011B  0008               	return
  2184  011C  087C               	movf	__x,w
  2185  011D  3A11               	xorlw	17
  2186  011E  1D03               	btfss	3,2
  2187  011F  0008               	return
  2188                           
  2189                           ;protocol.c: 71: if(random_number != my_random_number) goto err;
  2190  0120  0020               	movlb	0	; select bank0
  2191  0121  0845               	movf	control_transfer@random_number,w
  2192  0122  0669               	xorwf	_my_random_number,w
  2193  0123  1D03               	btfss	3,2
  2194  0124  0008               	return
  2195                           
  2196                           ;protocol.c: 72: SEND_SOF();
  2197  0125  24D2               	fcall	_SEND_SOF
  2198                           
  2199                           ;protocol.c: 73: SEND_DATA_BYTE(0x00);
  2200  0126  3000               	movlw	0
  2201  0127  248B               	fcall	_SEND_DATA_BYTE
  2202                           
  2203                           ;protocol.c: 74: SEND_EOF();
  2204  0128  24E0               	fcall	_SEND_EOF
  2205                           
  2206                           ;protocol.c: 75: config.id=id | (1<<9);
  2207  0129  3000               	movlw	0
  2208  012A  0020               	movlb	0	; select bank0
  2209  012B  0446               	iorwf	control_transfer@id,w
  2210  012C  0021               	movlb	1	; select bank1
  2211  012D  00C0               	movwf	_config^(0+128)
  2212  012E  3002               	movlw	2
  2213  012F  00C1               	movwf	(_config+1)^(0+128)
  2214                           
  2215                           ;protocol.c: 76: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2216  0130  30F0               	movlw	240
  2217  0131  00F1               	movwf	Save@address
  2218  0132  3007               	movlw	7
  2219  0133  00F2               	movwf	Save@address+1
  2220  0134  30C0               	movlw	_config& (0+255)
  2221  0135  0020               	movlb	0	; select bank0
  2222  0136  00A2               	movwf	??_control_transfer
  2223  0137  0822               	movf	??_control_transfer,w
  2224  0138  00F3               	movwf	Save@ptr
  2225  0139  3009               	movlw	9
  2226  013A  00A3               	movwf	??_control_transfer+1
  2227  013B  0823               	movf	??_control_transfer+1,w
  2228  013C  00F4               	movwf	Save@data_length
  2229  013D  26AA               	fcall	_Save
  2230                           
  2231                           ;protocol.c: 77: break;
  2232  013E  0008               	return
  2233  013F                     l2779:	
  2234                           ;protocol.c: 78: case 0x04:
  2235                           
  2236                           
  2237                           ;protocol.c: 79: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2238  013F  307C               	movlw	__x& (0+255)
  2239  0140  246E               	fcall	_GET_CHAR_HELPER
  2240  0141  3A00               	xorlw	0
  2241  0142  1D03               	btfss	3,2
  2242  0143  0008               	return
  2243  0144  306C               	movlw	__y& (0+255)
  2244  0145  246E               	fcall	_GET_CHAR_HELPER
  2245  0146  3A00               	xorlw	0
  2246  0147  1D03               	btfss	3,2
  2247  0148  0008               	return
  2248  0149  087C               	movf	__x,w
  2249  014A  39F0               	andlw	240
  2250  014B  1D03               	btfss	3,2
  2251  014C  0008               	return
  2252  014D  0020               	movlb	0	; select bank0
  2253  014E  086C               	movf	__y,w
  2254  014F  39F0               	andlw	240
  2255  0150  1D03               	btfss	3,2
  2256  0151  0008               	return
  2257  0152  086C               	movf	__y,w
  2258  0153  00A2               	movwf	??_control_transfer
  2259  0154  3003               	movlw	3
  2260  0155                     u3605:	
  2261  0155  35A2               	lslf	??_control_transfer,f
  2262  0156  3EFF               	addlw	-1
  2263  0157  1D03               	skipz
  2264  0158  2955               	goto	u3605
  2265  0159  3522               	lslf	??_control_transfer,w
  2266  015A  047C               	iorwf	__x,w
  2267  015B  00A3               	movwf	??_control_transfer+1
  2268  015C  0823               	movf	??_control_transfer+1,w
  2269  015D  00CB               	movwf	control_transfer@x
  2270  015E  084B               	movf	control_transfer@x,w
  2271  015F  00A2               	movwf	??_control_transfer
  2272  0160  0822               	movf	??_control_transfer,w
  2273  0161  07E5               	addwf	__checksum,f
  2274                           
  2275                           ;protocol.c: 80: *((uint8_t*)(&page))=x;
  2276  0162  084B               	movf	control_transfer@x,w
  2277  0163  00A2               	movwf	??_control_transfer
  2278  0164  0822               	movf	??_control_transfer,w
  2279  0165  00C9               	movwf	control_transfer@page
  2280                           
  2281                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2282  0166  307C               	movlw	__x& (0+255)
  2283  0167  246E               	fcall	_GET_CHAR_HELPER
  2284  0168  3A00               	xorlw	0
  2285  0169  1D03               	btfss	3,2
  2286  016A  0008               	return
  2287  016B  306C               	movlw	__y& (0+255)
  2288  016C  246E               	fcall	_GET_CHAR_HELPER
  2289  016D  3A00               	xorlw	0
  2290  016E  1D03               	btfss	3,2
  2291  016F  0008               	return
  2292  0170  087C               	movf	__x,w
  2293  0171  39F0               	andlw	240
  2294  0172  1D03               	btfss	3,2
  2295  0173  0008               	return
  2296  0174  0020               	movlb	0	; select bank0
  2297  0175  086C               	movf	__y,w
  2298  0176  39F0               	andlw	240
  2299  0177  1D03               	btfss	3,2
  2300  0178  0008               	return
  2301  0179  086C               	movf	__y,w
  2302  017A  00A2               	movwf	??_control_transfer
  2303  017B  3003               	movlw	3
  2304  017C                     u3655:	
  2305  017C  35A2               	lslf	??_control_transfer,f
  2306  017D  3EFF               	addlw	-1
  2307  017E  1D03               	skipz
  2308  017F  297C               	goto	u3655
  2309  0180  3522               	lslf	??_control_transfer,w
  2310  0181  047C               	iorwf	__x,w
  2311  0182  00A3               	movwf	??_control_transfer+1
  2312  0183  0823               	movf	??_control_transfer+1,w
  2313  0184  00CB               	movwf	control_transfer@x
  2314  0185  084B               	movf	control_transfer@x,w
  2315  0186  00A2               	movwf	??_control_transfer
  2316  0187  0822               	movf	??_control_transfer,w
  2317  0188  07E5               	addwf	__checksum,f
  2318                           
  2319                           ;protocol.c: 82: *(((uint8_t*)(&page))+1)=x;
  2320  0189  084B               	movf	control_transfer@x,w
  2321  018A  00A2               	movwf	??_control_transfer
  2322  018B  0822               	movf	??_control_transfer,w
  2323  018C  00CA               	movwf	control_transfer@page+1
  2324                           
  2325                           ;protocol.c: 83: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2326  018D  307C               	movlw	__x& (0+255)
  2327  018E  246E               	fcall	_GET_CHAR_HELPER
  2328  018F  3A00               	xorlw	0
  2329  0190  1D03               	btfss	3,2
  2330  0191  0008               	return
  2331  0192  306C               	movlw	__y& (0+255)
  2332  0193  246E               	fcall	_GET_CHAR_HELPER
  2333  0194  3A00               	xorlw	0
  2334  0195  1D03               	btfss	3,2
  2335  0196  0008               	return
  2336  0197  087C               	movf	__x,w
  2337  0198  39F0               	andlw	240
  2338  0199  1D03               	btfss	3,2
  2339  019A  0008               	return
  2340  019B  0020               	movlb	0	; select bank0
  2341  019C  086C               	movf	__y,w
  2342  019D  39F0               	andlw	240
  2343  019E  1D03               	btfss	3,2
  2344  019F  0008               	return
  2345  01A0  086C               	movf	__y,w
  2346  01A1  00A2               	movwf	??_control_transfer
  2347  01A2  3003               	movlw	3
  2348  01A3                     u3705:	
  2349  01A3  35A2               	lslf	??_control_transfer,f
  2350  01A4  3EFF               	addlw	-1
  2351  01A5  1D03               	skipz
  2352  01A6  29A3               	goto	u3705
  2353  01A7  3522               	lslf	??_control_transfer,w
  2354  01A8  047C               	iorwf	__x,w
  2355  01A9  00A3               	movwf	??_control_transfer+1
  2356  01AA  0823               	movf	??_control_transfer+1,w
  2357  01AB  00FC               	movwf	__x
  2358  01AC  087C               	movf	__x,w
  2359  01AD  00A2               	movwf	??_control_transfer
  2360  01AE  0822               	movf	??_control_transfer,w
  2361  01AF  07E5               	addwf	__checksum,f
  2362  01B0  0865               	movf	__checksum,w
  2363  01B1  1D03               	skipz
  2364  01B2  0008               	return
  2365  01B3  307C               	movlw	__x& (0+255)
  2366  01B4  246E               	fcall	_GET_CHAR_HELPER
  2367  01B5  3A00               	xorlw	0
  2368  01B6  1D03               	btfss	3,2
  2369  01B7  0008               	return
  2370  01B8  087C               	movf	__x,w
  2371  01B9  3A11               	xorlw	17
  2372  01BA  1D03               	btfss	3,2
  2373  01BB  0008               	return
  2374                           
  2375                           ;protocol.c: 84: Load(page,data,16);
  2376  01BC  0020               	movlb	0	; select bank0
  2377  01BD  084A               	movf	control_transfer@page+1,w
  2378  01BE  01F2               	clrf	Load@address+1
  2379  01BF  07F2               	addwf	Load@address+1,f
  2380  01C0  0849               	movf	control_transfer@page,w
  2381  01C1  01F1               	clrf	Load@address
  2382  01C2  07F1               	addwf	Load@address,f
  2383  01C3  3024               	movlw	control_transfer@data& (0+255)
  2384  01C4  00A2               	movwf	??_control_transfer
  2385  01C5  0822               	movf	??_control_transfer,w
  2386  01C6  00F3               	movwf	Load@ptr
  2387  01C7  3010               	movlw	16
  2388  01C8  00A3               	movwf	??_control_transfer+1
  2389  01C9  0823               	movf	??_control_transfer+1,w
  2390  01CA  00F4               	movwf	Load@data_length
  2391  01CB  2780               	fcall	_Load
  2392                           
  2393                           ;protocol.c: 85: SEND_SOF();
  2394  01CC  24D2               	fcall	_SEND_SOF
  2395                           
  2396                           ;protocol.c: 86: SEND_DATA_BYTE(0x05);
  2397  01CD  3005               	movlw	5
  2398  01CE  248B               	fcall	_SEND_DATA_BYTE
  2399                           
  2400                           ;protocol.c: 87: dptr=(uint8_t*)data;
  2401  01CF  3024               	movlw	control_transfer@data& (0+255)
  2402  01D0  0020               	movlb	0	; select bank0
  2403  01D1  00A2               	movwf	??_control_transfer
  2404  01D2  0822               	movf	??_control_transfer,w
  2405  01D3  00C7               	movwf	control_transfer@dptr
  2406                           
  2407                           ;protocol.c: 88: for(i=0;i<32;i++)
  2408  01D4  01C8               	clrf	control_transfer@i
  2409  01D5  3020               	movlw	32
  2410  01D6  0248               	subwf	control_transfer@i,w
  2411  01D7  1803               	btfsc	3,0
  2412  01D8  29EB               	goto	l2859
  2413  01D9                     l2851:	
  2414                           
  2415                           ;protocol.c: 89: {
  2416                           ;protocol.c: 90: SEND_DATA_BYTE(*dptr++);
  2417  01D9  0847               	movf	control_transfer@dptr,w
  2418  01DA  0086               	movwf	6
  2419  01DB  0187               	clrf	7
  2420  01DC  0801               	movf	1,w
  2421  01DD  248B               	fcall	_SEND_DATA_BYTE
  2422  01DE  3001               	movlw	1
  2423  01DF  0020               	movlb	0	; select bank0
  2424  01E0  00A2               	movwf	??_control_transfer
  2425  01E1  0822               	movf	??_control_transfer,w
  2426  01E2  07C7               	addwf	control_transfer@dptr,f
  2427  01E3  3001               	movlw	1
  2428  01E4  00A2               	movwf	??_control_transfer
  2429  01E5  0822               	movf	??_control_transfer,w
  2430  01E6  07C8               	addwf	control_transfer@i,f
  2431  01E7  3020               	movlw	32
  2432  01E8  0248               	subwf	control_transfer@i,w
  2433  01E9  1C03               	skipc
  2434  01EA  29D9               	goto	l2851
  2435  01EB                     l2859:	
  2436                           
  2437                           ;protocol.c: 91: }
  2438                           ;protocol.c: 92: SEND_EOF();
  2439  01EB  24E0               	fcall	_SEND_EOF
  2440                           
  2441                           ;protocol.c: 93: break;
  2442  01EC  0008               	return
  2443  01ED                     l2861:	
  2444                           ;protocol.c: 94: case 0x06:
  2445                           
  2446                           
  2447                           ;protocol.c: 95: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2448  01ED  307C               	movlw	__x& (0+255)
  2449  01EE  246E               	fcall	_GET_CHAR_HELPER
  2450  01EF  3A00               	xorlw	0
  2451  01F0  1D03               	btfss	3,2
  2452  01F1  0008               	return
  2453  01F2  306C               	movlw	__y& (0+255)
  2454  01F3  246E               	fcall	_GET_CHAR_HELPER
  2455  01F4  3A00               	xorlw	0
  2456  01F5  1D03               	btfss	3,2
  2457  01F6  0008               	return
  2458  01F7  087C               	movf	__x,w
  2459  01F8  39F0               	andlw	240
  2460  01F9  1D03               	btfss	3,2
  2461  01FA  0008               	return
  2462  01FB  0020               	movlb	0	; select bank0
  2463  01FC  086C               	movf	__y,w
  2464  01FD  39F0               	andlw	240
  2465  01FE  1D03               	btfss	3,2
  2466  01FF  0008               	return
  2467  0200  086C               	movf	__y,w
  2468  0201  00A2               	movwf	??_control_transfer
  2469  0202  3003               	movlw	3
  2470  0203                     u3805:	
  2471  0203  35A2               	lslf	??_control_transfer,f
  2472  0204  3EFF               	addlw	-1
  2473  0205  1D03               	skipz
  2474  0206  2A03               	goto	u3805
  2475  0207  3522               	lslf	??_control_transfer,w
  2476  0208  047C               	iorwf	__x,w
  2477  0209  00A3               	movwf	??_control_transfer+1
  2478  020A  0823               	movf	??_control_transfer+1,w
  2479  020B  00CB               	movwf	control_transfer@x
  2480  020C  084B               	movf	control_transfer@x,w
  2481  020D  00A2               	movwf	??_control_transfer
  2482  020E  0822               	movf	??_control_transfer,w
  2483  020F  07E5               	addwf	__checksum,f
  2484                           
  2485                           ;protocol.c: 96: *((uint8_t*)(&page))=x;
  2486  0210  084B               	movf	control_transfer@x,w
  2487  0211  00A2               	movwf	??_control_transfer
  2488  0212  0822               	movf	??_control_transfer,w
  2489  0213  00C9               	movwf	control_transfer@page
  2490                           
  2491                           ;protocol.c: 97: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2492  0214  307C               	movlw	__x& (0+255)
  2493  0215  246E               	fcall	_GET_CHAR_HELPER
  2494  0216  3A00               	xorlw	0
  2495  0217  1D03               	btfss	3,2
  2496  0218  0008               	return
  2497  0219  306C               	movlw	__y& (0+255)
  2498  021A  246E               	fcall	_GET_CHAR_HELPER
  2499  021B  3A00               	xorlw	0
  2500  021C  1D03               	btfss	3,2
  2501  021D  0008               	return
  2502  021E  087C               	movf	__x,w
  2503  021F  39F0               	andlw	240
  2504  0220  1D03               	btfss	3,2
  2505  0221  0008               	return
  2506  0222  0020               	movlb	0	; select bank0
  2507  0223  086C               	movf	__y,w
  2508  0224  39F0               	andlw	240
  2509  0225  1D03               	btfss	3,2
  2510  0226  0008               	return
  2511  0227  086C               	movf	__y,w
  2512  0228  00A2               	movwf	??_control_transfer
  2513  0229  3003               	movlw	3
  2514  022A                     u3855:	
  2515  022A  35A2               	lslf	??_control_transfer,f
  2516  022B  3EFF               	addlw	-1
  2517  022C  1D03               	skipz
  2518  022D  2A2A               	goto	u3855
  2519  022E  3522               	lslf	??_control_transfer,w
  2520  022F  047C               	iorwf	__x,w
  2521  0230  00A3               	movwf	??_control_transfer+1
  2522  0231  0823               	movf	??_control_transfer+1,w
  2523  0232  00CB               	movwf	control_transfer@x
  2524  0233  084B               	movf	control_transfer@x,w
  2525  0234  00A2               	movwf	??_control_transfer
  2526  0235  0822               	movf	??_control_transfer,w
  2527  0236  07E5               	addwf	__checksum,f
  2528                           
  2529                           ;protocol.c: 98: *(((uint8_t*)(&page))+1)=x;
  2530  0237  084B               	movf	control_transfer@x,w
  2531  0238  00A2               	movwf	??_control_transfer
  2532  0239  0822               	movf	??_control_transfer,w
  2533  023A  00CA               	movwf	control_transfer@page+1
  2534                           
  2535                           ;protocol.c: 99: dptr=(uint8_t*)data;
  2536  023B  3024               	movlw	control_transfer@data& (0+255)
  2537  023C  00A2               	movwf	??_control_transfer
  2538  023D  0822               	movf	??_control_transfer,w
  2539  023E  00C7               	movwf	control_transfer@dptr
  2540                           
  2541                           ;protocol.c: 100: for(i=0;i<32;i++)
  2542  023F  01C8               	clrf	control_transfer@i
  2543  0240  3020               	movlw	32
  2544  0241  0248               	subwf	control_transfer@i,w
  2545  0242  1803               	btfsc	3,0
  2546  0243  2A7A               	goto	l2923
  2547  0244                     l2901:	
  2548                           
  2549                           ;protocol.c: 101: {
  2550                           ;protocol.c: 102: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2551  0244  307C               	movlw	__x& (0+255)
  2552  0245  246E               	fcall	_GET_CHAR_HELPER
  2553  0246  3A00               	xorlw	0
  2554  0247  1D03               	btfss	3,2
  2555  0248  0008               	return
  2556  0249  306C               	movlw	__y& (0+255)
  2557  024A  246E               	fcall	_GET_CHAR_HELPER
  2558  024B  3A00               	xorlw	0
  2559  024C  1D03               	btfss	3,2
  2560  024D  0008               	return
  2561  024E  087C               	movf	__x,w
  2562  024F  39F0               	andlw	240
  2563  0250  1D03               	btfss	3,2
  2564  0251  0008               	return
  2565  0252  0020               	movlb	0	; select bank0
  2566  0253  086C               	movf	__y,w
  2567  0254  39F0               	andlw	240
  2568  0255  1D03               	btfss	3,2
  2569  0256  0008               	return
  2570  0257  086C               	movf	__y,w
  2571  0258  00A2               	movwf	??_control_transfer
  2572  0259  3003               	movlw	3
  2573  025A                     u3915:	
  2574  025A  35A2               	lslf	??_control_transfer,f
  2575  025B  3EFF               	addlw	-1
  2576  025C  1D03               	skipz
  2577  025D  2A5A               	goto	u3915
  2578  025E  3522               	lslf	??_control_transfer,w
  2579  025F  047C               	iorwf	__x,w
  2580  0260  00A3               	movwf	??_control_transfer+1
  2581  0261  0823               	movf	??_control_transfer+1,w
  2582  0262  00CB               	movwf	control_transfer@x
  2583  0263  084B               	movf	control_transfer@x,w
  2584  0264  00A2               	movwf	??_control_transfer
  2585  0265  0822               	movf	??_control_transfer,w
  2586  0266  07E5               	addwf	__checksum,f
  2587                           
  2588                           ;protocol.c: 103: *dptr++=x;
  2589  0267  084B               	movf	control_transfer@x,w
  2590  0268  00A2               	movwf	??_control_transfer
  2591  0269  0847               	movf	control_transfer@dptr,w
  2592  026A  0086               	movwf	6
  2593  026B  0187               	clrf	7
  2594  026C  0822               	movf	??_control_transfer,w
  2595  026D  0081               	movwf	1
  2596  026E  3001               	movlw	1
  2597  026F  00A2               	movwf	??_control_transfer
  2598  0270  0822               	movf	??_control_transfer,w
  2599  0271  07C7               	addwf	control_transfer@dptr,f
  2600  0272  3001               	movlw	1
  2601  0273  00A2               	movwf	??_control_transfer
  2602  0274  0822               	movf	??_control_transfer,w
  2603  0275  07C8               	addwf	control_transfer@i,f
  2604  0276  3020               	movlw	32
  2605  0277  0248               	subwf	control_transfer@i,w
  2606  0278  1C03               	skipc
  2607  0279  2A44               	goto	l2901
  2608  027A                     l2923:	
  2609                           
  2610                           ;protocol.c: 104: }
  2611                           ;protocol.c: 105: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2612  027A  307C               	movlw	__x& (0+255)
  2613  027B  246E               	fcall	_GET_CHAR_HELPER
  2614  027C  3A00               	xorlw	0
  2615  027D  1D03               	btfss	3,2
  2616  027E  0008               	return
  2617  027F  306C               	movlw	__y& (0+255)
  2618  0280  246E               	fcall	_GET_CHAR_HELPER
  2619  0281  3A00               	xorlw	0
  2620  0282  1D03               	btfss	3,2
  2621  0283  0008               	return
  2622  0284  087C               	movf	__x,w
  2623  0285  39F0               	andlw	240
  2624  0286  1D03               	btfss	3,2
  2625  0287  0008               	return
  2626  0288  0020               	movlb	0	; select bank0
  2627  0289  086C               	movf	__y,w
  2628  028A  39F0               	andlw	240
  2629  028B  1D03               	btfss	3,2
  2630  028C  0008               	return
  2631  028D  086C               	movf	__y,w
  2632  028E  00A2               	movwf	??_control_transfer
  2633  028F  3003               	movlw	3
  2634  0290                     u3975:	
  2635  0290  35A2               	lslf	??_control_transfer,f
  2636  0291  3EFF               	addlw	-1
  2637  0292  1D03               	skipz
  2638  0293  2A90               	goto	u3975
  2639  0294  3522               	lslf	??_control_transfer,w
  2640  0295  047C               	iorwf	__x,w
  2641  0296  00A3               	movwf	??_control_transfer+1
  2642  0297  0823               	movf	??_control_transfer+1,w
  2643  0298  00FC               	movwf	__x
  2644  0299  087C               	movf	__x,w
  2645  029A  00A2               	movwf	??_control_transfer
  2646  029B  0822               	movf	??_control_transfer,w
  2647  029C  07E5               	addwf	__checksum,f
  2648  029D  0865               	movf	__checksum,w
  2649  029E  1D03               	skipz
  2650  029F  0008               	return
  2651  02A0  307C               	movlw	__x& (0+255)
  2652  02A1  246E               	fcall	_GET_CHAR_HELPER
  2653  02A2  3A00               	xorlw	0
  2654  02A3  1D03               	btfss	3,2
  2655  02A4  0008               	return
  2656  02A5  087C               	movf	__x,w
  2657  02A6  3A11               	xorlw	17
  2658  02A7  1D03               	btfss	3,2
  2659  02A8  0008               	return
  2660                           
  2661                           ;protocol.c: 106: Save(page,data,16);
  2662  02A9  0020               	movlb	0	; select bank0
  2663  02AA  084A               	movf	control_transfer@page+1,w
  2664  02AB  01F2               	clrf	Save@address+1
  2665  02AC  07F2               	addwf	Save@address+1,f
  2666  02AD  0849               	movf	control_transfer@page,w
  2667  02AE  01F1               	clrf	Save@address
  2668  02AF  07F1               	addwf	Save@address,f
  2669  02B0  3024               	movlw	control_transfer@data& (0+255)
  2670  02B1  00A2               	movwf	??_control_transfer
  2671  02B2  0822               	movf	??_control_transfer,w
  2672  02B3  00F3               	movwf	Save@ptr
  2673  02B4  3010               	movlw	16
  2674  02B5  00A3               	movwf	??_control_transfer+1
  2675  02B6  0823               	movf	??_control_transfer+1,w
  2676  02B7  00F4               	movwf	Save@data_length
  2677  02B8  26AA               	fcall	_Save
  2678                           
  2679                           ;protocol.c: 107: switch(page)
  2680  02B9  2AD8               	goto	l2957
  2681  02BA                     l2951:	
  2682                           ;protocol.c: 108: {
  2683                           ;protocol.c: 109: case 0x7F0:
  2684                           
  2685                           
  2686                           ;protocol.c: 110: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  2687  02BA  30F0               	movlw	240
  2688  02BB  00F1               	movwf	Load@address
  2689  02BC  3007               	movlw	7
  2690  02BD  00F2               	movwf	Load@address+1
  2691  02BE  30C0               	movlw	_config& (0+255)
  2692  02BF  0020               	movlb	0	; select bank0
  2693  02C0  00A2               	movwf	??_control_transfer
  2694  02C1  0822               	movf	??_control_transfer,w
  2695  02C2  00F3               	movwf	Load@ptr
  2696  02C3  3009               	movlw	9
  2697  02C4  00A3               	movwf	??_control_transfer+1
  2698  02C5  0823               	movf	??_control_transfer+1,w
  2699  02C6  00F4               	movwf	Load@data_length
  2700  02C7  2780               	fcall	_Load
  2701                           
  2702                           ;protocol.c: 111: break;
  2703  02C8  2AE6               	goto	l2959
  2704  02C9                     l2953:	
  2705                           ;protocol.c: 112: case 0x7E0:
  2706                           
  2707                           
  2708                           ;protocol.c: 113: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2709  02C9  30E0               	movlw	224
  2710  02CA  00F1               	movwf	Load@address
  2711  02CB  3007               	movlw	7
  2712  02CC  00F2               	movwf	Load@address+1
  2713  02CD  30A0               	movlw	_hitlist& (0+255)
  2714  02CE  0020               	movlb	0	; select bank0
  2715  02CF  00A2               	movwf	??_control_transfer
  2716  02D0  0822               	movf	??_control_transfer,w
  2717  02D1  00F3               	movwf	Load@ptr
  2718  02D2  3010               	movlw	16
  2719  02D3  00A3               	movwf	??_control_transfer+1
  2720  02D4  0823               	movf	??_control_transfer+1,w
  2721  02D5  00F4               	movwf	Load@data_length
  2722  02D6  2780               	fcall	_Load
  2723                           
  2724                           ;protocol.c: 115: }
  2725                           
  2726                           ;protocol.c: 114: break;
  2727  02D7  2AE6               	goto	l2959
  2728  02D8                     l2957:	
  2729                           
  2730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2731                           ; Switch size 1, requested type "space"
  2732                           ; Number of cases is 1, Range of values is 7 to 7
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte            4     3 (average)
  2736                           ; direct_byte           11     9 (fixed)
  2737                           ; jumptable            263     9 (fixed)
  2738                           ;	Chosen strategy is simple_byte
  2739  02D8  0020               	movlb	0	; select bank0
  2740  02D9  084A               	movf	control_transfer@page+1,w
  2741  02DA  3A07               	xorlw	7	; case 7
  2742  02DB  1903               	skipnz
  2743  02DC  2ADE               	goto	l3243
  2744  02DD  2AE6               	goto	l2959
  2745  02DE                     l3243:	
  2746                           
  2747                           ; Switch size 1, requested type "space"
  2748                           ; Number of cases is 2, Range of values is 224 to 240
  2749                           ; switch strategies available:
  2750                           ; Name         Instructions Cycles
  2751                           ; simple_byte            7     4 (average)
  2752                           ; direct_byte           43     9 (fixed)
  2753                           ; jumptable            263     9 (fixed)
  2754                           ;	Chosen strategy is simple_byte
  2755  02DE  0849               	movf	control_transfer@page,w
  2756  02DF  3AE0               	xorlw	224	; case 224
  2757  02E0  1903               	skipnz
  2758  02E1  2AC9               	goto	l2953
  2759  02E2  3A10               	xorlw	16	; case 240
  2760  02E3  1903               	skipnz
  2761  02E4  2ABA               	goto	l2951
  2762  02E5  2AE6               	goto	l2959
  2763  02E6                     l2959:	
  2764                           
  2765                           ;protocol.c: 116: SEND_SOF();
  2766  02E6  24D2               	fcall	_SEND_SOF
  2767                           
  2768                           ;protocol.c: 117: SEND_DATA_BYTE(0x00);
  2769  02E7  3000               	movlw	0
  2770  02E8  248B               	fcall	_SEND_DATA_BYTE
  2771                           
  2772                           ;protocol.c: 118: SEND_EOF();
  2773  02E9  24E0               	fcall	_SEND_EOF
  2774                           
  2775                           ;protocol.c: 119: break;
  2776  02EA  0008               	return
  2777  02EB                     l2961:	
  2778                           ;protocol.c: 120: case 0x7:
  2779                           
  2780                           
  2781                           ;protocol.c: 121: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2782  02EB  307C               	movlw	__x& (0+255)
  2783  02EC  246E               	fcall	_GET_CHAR_HELPER
  2784  02ED  3A00               	xorlw	0
  2785  02EE  1D03               	btfss	3,2
  2786  02EF  0008               	return
  2787  02F0  306C               	movlw	__y& (0+255)
  2788  02F1  246E               	fcall	_GET_CHAR_HELPER
  2789  02F2  3A00               	xorlw	0
  2790  02F3  1D03               	btfss	3,2
  2791  02F4  0008               	return
  2792  02F5  087C               	movf	__x,w
  2793  02F6  39F0               	andlw	240
  2794  02F7  1D03               	btfss	3,2
  2795  02F8  0008               	return
  2796  02F9  0020               	movlb	0	; select bank0
  2797  02FA  086C               	movf	__y,w
  2798  02FB  39F0               	andlw	240
  2799  02FC  1D03               	btfss	3,2
  2800  02FD  0008               	return
  2801  02FE  086C               	movf	__y,w
  2802  02FF  00A2               	movwf	??_control_transfer
  2803  0300  3003               	movlw	3
  2804  0301                     u4055:	
  2805  0301  35A2               	lslf	??_control_transfer,f
  2806  0302  3EFF               	addlw	-1
  2807  0303  1D03               	skipz
  2808  0304  2B01               	goto	u4055
  2809  0305  3522               	lslf	??_control_transfer,w
  2810  0306  047C               	iorwf	__x,w
  2811  0307  00A3               	movwf	??_control_transfer+1
  2812  0308  0823               	movf	??_control_transfer+1,w
  2813  0309  00FC               	movwf	__x
  2814  030A  087C               	movf	__x,w
  2815  030B  00A2               	movwf	??_control_transfer
  2816  030C  0822               	movf	??_control_transfer,w
  2817  030D  07E5               	addwf	__checksum,f
  2818  030E  0865               	movf	__checksum,w
  2819  030F  1D03               	skipz
  2820  0310  0008               	return
  2821  0311  307C               	movlw	__x& (0+255)
  2822  0312  246E               	fcall	_GET_CHAR_HELPER
  2823  0313  3A00               	xorlw	0
  2824  0314  1D03               	btfss	3,2
  2825  0315  0008               	return
  2826  0316  087C               	movf	__x,w
  2827  0317  3A11               	xorlw	17
  2828  0318  1D03               	btfss	3,2
  2829  0319  0008               	return
  2830                           
  2831                           ;protocol.c: 122: play_song(one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2832  031A  3046               	movlw	low (_one_up| (0+32768))
  2833  031B  00F1               	movwf	play_song@song
  2834  031C  3085               	movlw	high (_one_up| (0+32768))
  2835  031D  00F2               	movwf	play_song@song+1
  2836  031E  3006               	movlw	6
  2837  031F  0020               	movlb	0	; select bank0
  2838  0320  00A2               	movwf	??_control_transfer
  2839  0321  0822               	movf	??_control_transfer,w
  2840  0322  00F3               	movwf	play_song@length
  2841  0323  30E8               	movlw	232
  2842  0324  00F4               	movwf	play_song@note_duration
  2843  0325  30FD               	movlw	253
  2844  0326  00F5               	movwf	play_song@note_duration+1
  2845  0327  01F6               	clrf	play_song@repeat
  2846  0328  27A5               	fcall	_play_song
  2847                           
  2848                           ;protocol.c: 123: SEND_SOF();
  2849  0329  24D2               	fcall	_SEND_SOF
  2850                           
  2851                           ;protocol.c: 124: SEND_DATA_BYTE(0x00);
  2852  032A  3000               	movlw	0
  2853  032B  248B               	fcall	_SEND_DATA_BYTE
  2854                           
  2855                           ;protocol.c: 125: SEND_EOF();
  2856  032C  24E0               	fcall	_SEND_EOF
  2857                           
  2858                           ;protocol.c: 130: }
  2859                           
  2860                           ;protocol.c: 129: goto err;
  2861                           
  2862                           ;protocol.c: 128: default:
  2863                           
  2864                           ;protocol.c: 126: break;
  2865  032D  0008               	return
  2866  032E                     l2991:	
  2867  032E  0020               	movlb	0	; select bank0
  2868  032F  0844               	movf	control_transfer@cmd,w
  2869                           
  2870                           ; Switch size 1, requested type "space"
  2871                           ; Number of cases is 5, Range of values is 1 to 7
  2872                           ; switch strategies available:
  2873                           ; Name         Instructions Cycles
  2874                           ; simple_byte           16     9 (average)
  2875                           ; direct_byte           23     9 (fixed)
  2876                           ; jumptable            263     9 (fixed)
  2877                           ;	Chosen strategy is simple_byte
  2878  0330  3A01               	xorlw	1	; case 1
  2879  0331  1903               	skipnz
  2880  0332  2874               	goto	l2687
  2881  0333  3A02               	xorlw	2	; case 3
  2882  0334  1903               	skipnz
  2883  0335  28AB               	goto	l2715
  2884  0336  3A07               	xorlw	7	; case 4
  2885  0337  1903               	skipnz
  2886  0338  293F               	goto	l2779
  2887  0339  3A02               	xorlw	2	; case 6
  2888  033A  1903               	skipnz
  2889  033B  29ED               	goto	l2861
  2890  033C  3A01               	xorlw	1	; case 7
  2891  033D  1903               	skipnz
  2892  033E  2AEB               	goto	l2961
  2893  033F  2B41               	goto	l407
  2894  0340  0008               	return
  2895  0341                     l407:	
  2896                           ;protocol.c: 132: return;
  2897                           
  2898                           ;protocol.c: 131: err:
  2899                           
  2900  0341  0008               	return
  2901  0342                     __end_of_control_transfer:	
  2902                           
  2903                           	psect	text6
  2904  04D2                     __ptext6:	
  2905 ;; *************** function _SEND_SOF *****************
  2906 ;; Defined at:
  2907 ;;		line 38 in file "protocol.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, status,2, status,0, pclath, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2921 ;;      Params:         0       0       0       0
  2922 ;;      Locals:         0       0       0       0
  2923 ;;      Temps:          0       0       0       0
  2924 ;;      Totals:         0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    5
  2928 ;; This function calls:
  2929 ;;		_SEND_DATA_BYTE
  2930 ;;		_Send_Byte
  2931 ;; This function is called by:
  2932 ;;		_control_transfer
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           
  2937                           ;psect for function _SEND_SOF
  2938  04D2                     _SEND_SOF:	
  2939                           
  2940                           ;incstack = 0
  2941                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2942  04D2  3010               	movlw	16
  2943  04D3  26F1               	fcall	_Send_Byte
  2944  04D4  0020               	movlb	0	; select bank0
  2945  04D5  01E5               	clrf	__checksum
  2946  04D6  0021               	movlb	1	; select bank1
  2947  04D7  0840               	movf	_config^(0+128),w
  2948  04D8  248B               	fcall	_SEND_DATA_BYTE
  2949  04D9  0008               	return
  2950  04DA                     __end_of_SEND_SOF:	
  2951                           
  2952                           	psect	text7
  2953  04E0                     __ptext7:	
  2954 ;; *************** function _SEND_EOF *****************
  2955 ;; Defined at:
  2956 ;;		line 39 in file "protocol.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, pclath, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2970 ;;      Params:         0       0       0       0
  2971 ;;      Locals:         0       0       0       0
  2972 ;;      Temps:          0       0       0       0
  2973 ;;      Totals:         0       0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    5
  2977 ;; This function calls:
  2978 ;;		_SEND_DATA_BYTE
  2979 ;;		_Send_Byte
  2980 ;; This function is called by:
  2981 ;;		_control_transfer
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _SEND_EOF
  2987  04E0                     _SEND_EOF:	
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2991  04E0  0020               	movlb	0	; select bank0
  2992  04E1  0865               	movf	__checksum,w
  2993  04E2  248B               	fcall	_SEND_DATA_BYTE
  2994  04E3  3011               	movlw	17
  2995  04E4  26F1               	fcall	_Send_Byte
  2996  04E5  0008               	return
  2997  04E6                     __end_of_SEND_EOF:	
  2998                           
  2999                           	psect	text8
  3000  048B                     __ptext8:	
  3001 ;; *************** function _SEND_DATA_BYTE *****************
  3002 ;; Defined at:
  3003 ;;		line 37 in file "protocol.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  b               1    wreg     unsigned char 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  b               1   11[COMMON] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;		None               void
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0, pclath, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3017 ;;      Params:         0       0       0       0
  3018 ;;      Locals:         1       0       0       0
  3019 ;;      Temps:          0       2       0       0
  3020 ;;      Totals:         1       2       0       0
  3021 ;;Total ram usage:        3 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    4
  3024 ;; This function calls:
  3025 ;;		_Send_Byte
  3026 ;; This function is called by:
  3027 ;;		_SEND_SOF
  3028 ;;		_SEND_EOF
  3029 ;;		_control_transfer
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _SEND_DATA_BYTE
  3035  048B                     _SEND_DATA_BYTE:	
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3039                           ;SEND_DATA_BYTE@b stored from wreg
  3040  048B  00FB               	movwf	SEND_DATA_BYTE@b
  3041  048C  087B               	movf	SEND_DATA_BYTE@b,w
  3042  048D  390F               	andlw	15
  3043  048E  0020               	movlb	0	; select bank0
  3044  048F  00A0               	movwf	??_SEND_DATA_BYTE
  3045  0490  0820               	movf	??_SEND_DATA_BYTE,w
  3046  0491  00FC               	movwf	__x
  3047  0492  087B               	movf	SEND_DATA_BYTE@b,w
  3048  0493  00A0               	movwf	??_SEND_DATA_BYTE
  3049  0494  3004               	movlw	4
  3050  0495                     u3145:	
  3051  0495  36A0               	lsrf	??_SEND_DATA_BYTE,f
  3052  0496  0B89               	decfsz	9,f
  3053  0497  2C95               	goto	u3145
  3054  0498  0820               	movf	??_SEND_DATA_BYTE,w
  3055  0499  00A1               	movwf	??_SEND_DATA_BYTE+1
  3056  049A  0821               	movf	??_SEND_DATA_BYTE+1,w
  3057  049B  00EC               	movwf	__y
  3058  049C  087C               	movf	__x,w
  3059  049D  26F1               	fcall	_Send_Byte
  3060  049E  0020               	movlb	0	; select bank0
  3061  049F  086C               	movf	__y,w
  3062  04A0  26F1               	fcall	_Send_Byte
  3063  04A1  087B               	movf	SEND_DATA_BYTE@b,w
  3064  04A2  0020               	movlb	0	; select bank0
  3065  04A3  02E5               	subwf	__checksum,f
  3066  04A4  0008               	return
  3067  04A5                     __end_of_SEND_DATA_BYTE:	
  3068                           
  3069                           	psect	text9
  3070  046E                     __ptext9:	
  3071 ;; *************** function _GET_CHAR_HELPER *****************
  3072 ;; Defined at:
  3073 ;;		line 31 in file "protocol.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  val             1    wreg     PTR unsigned char 
  3076 ;;		 -> _y(1), _x(1), 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  val             1    2[COMMON] PTR unsigned char 
  3079 ;;		 -> _y(1), _x(1), 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      unsigned char 
  3082 ;; Registers used:
  3083 ;;		wreg, fsr1l, fsr1h, status,2
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3089 ;;      Params:         0       0       0       0
  3090 ;;      Locals:         1       0       0       0
  3091 ;;      Temps:          1       0       0       0
  3092 ;;      Totals:         2       0       0       0
  3093 ;;Total ram usage:        2 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_control_transfer
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           
  3104                           ;psect for function _GET_CHAR_HELPER
  3105  046E                     _GET_CHAR_HELPER:	
  3106                           
  3107                           ;incstack = 0
  3108                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3109                           ;GET_CHAR_HELPER@val stored from wreg
  3110  046E  00F2               	movwf	GET_CHAR_HELPER@val
  3111  046F  0020               	movlb	0	; select bank0
  3112  0470  01DB               	clrf	__i
  3113  0471  01DC               	clrf	__i+1
  3114  0472                     l287:	
  3115  0472  1A91               	btfsc	17,5	;volatile
  3116  0473  2C81               	goto	l1859
  3117  0474  3001               	movlw	1
  3118  0475  07DB               	addwf	__i,f
  3119  0476  3000               	movlw	0
  3120  0477  3DDC               	addwfc	__i+1,f
  3121  0478  3075               	movlw	117
  3122  0479  025C               	subwf	__i+1,w
  3123  047A  3030               	movlw	48
  3124  047B  1903               	skipnz
  3125  047C  025B               	subwf	__i,w
  3126  047D  1C03               	skipc
  3127  047E  2C72               	goto	l287
  3128  047F  3001               	movlw	1
  3129  0480  0008               	return
  3130  0481                     l1859:	
  3131  0481  0023               	movlb	3	; select bank3
  3132  0482  0819               	movf	25,w	;volatile
  3133  0483  00F1               	movwf	??_GET_CHAR_HELPER
  3134  0484  0872               	movf	GET_CHAR_HELPER@val,w
  3135  0485  0086               	movwf	6
  3136  0486  0187               	clrf	7
  3137  0487  0871               	movf	??_GET_CHAR_HELPER,w
  3138  0488  0081               	movwf	1
  3139  0489  3000               	movlw	0
  3140  048A  0008               	return
  3141  048B                     __end_of_GET_CHAR_HELPER:	
  3142                           
  3143                           	psect	text10
  3144  0602                     __ptext10:	
  3145 ;; *************** function _add_to_hitlist *****************
  3146 ;; Defined at:
  3147 ;;		line 302 in file "user.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  gun             1    wreg     unsigned char 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  gun             1    5[COMMON] unsigned char 
  3152 ;;  i               1    8[COMMON] unsigned char 
  3153 ;;  gun16           2    6[COMMON] unsigned int 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3163 ;;      Params:         0       0       0       0
  3164 ;;      Locals:         4       0       0       0
  3165 ;;      Temps:          4       0       0       0
  3166 ;;      Totals:         8       0       0       0
  3167 ;;Total ram usage:        8 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    1
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_hit_by
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function _add_to_hitlist
  3179  0602                     _add_to_hitlist:	
  3180                           
  3181                           ;incstack = 0
  3182                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3183                           ;add_to_hitlist@gun stored from wreg
  3184  0602  00F5               	movwf	add_to_hitlist@gun
  3185                           
  3186                           ;user.c: 304: uint16_t gun16 = gun & 0x7F;
  3187  0603  0875               	movf	add_to_hitlist@gun,w
  3188  0604  397F               	andlw	127
  3189  0605  00F1               	movwf	??_add_to_hitlist
  3190  0606  01F2               	clrf	??_add_to_hitlist+1
  3191  0607  0871               	movf	??_add_to_hitlist,w
  3192  0608  00F6               	movwf	add_to_hitlist@gun16
  3193  0609  0872               	movf	??_add_to_hitlist+1,w
  3194  060A  00F7               	movwf	add_to_hitlist@gun16+1
  3195                           
  3196                           ;user.c: 305: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3197  060B  01F8               	clrf	add_to_hitlist@i
  3198  060C                     L2:	
  3199  060C  3010               	movlw	16
  3200  060D  0278               	subwf	add_to_hitlist@i,w
  3201  060E  1803               	btfsc	3,0
  3202  060F  0008               	return
  3203                           
  3204                           ;user.c: 306: {
  3205                           ;user.c: 307: if(!(hitlist[i] & 0x007F))
  3206  0610  3578               	lslf	add_to_hitlist@i,w
  3207  0611  3EA0               	addlw	_hitlist& (0+255)
  3208  0612  0086               	movwf	6
  3209  0613  0187               	clrf	7
  3210  0614  3F40               	moviw [0]fsr1
  3211  0615  00F1               	movwf	??_add_to_hitlist
  3212  0616  3F41               	moviw [1]fsr1
  3213  0617  00F2               	movwf	??_add_to_hitlist+1
  3214  0618  307F               	movlw	127
  3215  0619  0571               	andwf	??_add_to_hitlist,w
  3216  061A  00F3               	movwf	??_add_to_hitlist+2
  3217  061B  3000               	movlw	0
  3218  061C  0572               	andwf	??_add_to_hitlist+1,w
  3219  061D  00F4               	movwf	??_add_to_hitlist+3
  3220  061E  0874               	movf	??_add_to_hitlist+3,w
  3221  061F  0473               	iorwf	??_add_to_hitlist+2,w
  3222  0620  1D03               	skipz
  3223  0621  2E2C               	goto	l2281
  3224                           
  3225                           ;user.c: 308: {
  3226                           ;user.c: 309: hitlist[i] |= gun16;
  3227  0622  3578               	lslf	add_to_hitlist@i,w
  3228  0623  3EA0               	addlw	_hitlist& (0+255)
  3229  0624  0086               	movwf	6
  3230  0625  0187               	clrf	7
  3231  0626  0876               	movf	add_to_hitlist@gun16,w
  3232  0627  0481               	iorwf	1,f
  3233  0628  3141               	addfsr 1,1
  3234  0629  0877               	movf	add_to_hitlist@gun16+1,w
  3235  062A  0481               	iorwf	1,f
  3236                           
  3237                           ;user.c: 310: return;
  3238  062B  0008               	return
  3239  062C                     l2281:	
  3240                           
  3241                           ;user.c: 311: }
  3242                           ;user.c: 312: if(!(hitlist[i] & 0x3F80))
  3243  062C  3578               	lslf	add_to_hitlist@i,w
  3244  062D  3EA0               	addlw	_hitlist& (0+255)
  3245  062E  0086               	movwf	6
  3246  062F  0187               	clrf	7
  3247  0630  3F40               	moviw [0]fsr1
  3248  0631  00F1               	movwf	??_add_to_hitlist
  3249  0632  3F41               	moviw [1]fsr1
  3250  0633  00F2               	movwf	??_add_to_hitlist+1
  3251  0634  3080               	movlw	128
  3252  0635  0571               	andwf	??_add_to_hitlist,w
  3253  0636  00F3               	movwf	??_add_to_hitlist+2
  3254  0637  303F               	movlw	63
  3255  0638  0572               	andwf	??_add_to_hitlist+1,w
  3256  0639  00F4               	movwf	??_add_to_hitlist+3
  3257  063A  0874               	movf	??_add_to_hitlist+3,w
  3258  063B  0473               	iorwf	??_add_to_hitlist+2,w
  3259  063C  1D03               	skipz
  3260  063D  2E51               	goto	l2287
  3261                           
  3262                           ;user.c: 313: {
  3263                           ;user.c: 314: hitlist[i] |= gun16 << 7;
  3264  063E  0877               	movf	add_to_hitlist@gun16+1,w
  3265  063F  00F2               	movwf	??_add_to_hitlist+1
  3266  0640  0876               	movf	add_to_hitlist@gun16,w
  3267  0641  00F1               	movwf	??_add_to_hitlist
  3268  0642  3007               	movlw	7
  3269  0643                     u2715:	
  3270  0643  35F1               	lslf	??_add_to_hitlist,f
  3271  0644  0DF2               	rlf	??_add_to_hitlist+1,f
  3272  0645  0B89               	decfsz	9,f
  3273  0646  2E43               	goto	u2715
  3274  0647  3578               	lslf	add_to_hitlist@i,w
  3275  0648  3EA0               	addlw	_hitlist& (0+255)
  3276  0649  0086               	movwf	6
  3277  064A  0187               	clrf	7
  3278  064B  0871               	movf	??_add_to_hitlist,w
  3279  064C  0481               	iorwf	1,f
  3280  064D  3141               	addfsr 1,1
  3281  064E  0872               	movf	??_add_to_hitlist+1,w
  3282  064F  0481               	iorwf	1,f
  3283                           
  3284                           ;user.c: 315: return;
  3285  0650  0008               	return
  3286  0651                     l2287:	
  3287  0651  3001               	movlw	1
  3288  0652  00F1               	movwf	??_add_to_hitlist
  3289  0653  0871               	movf	??_add_to_hitlist,w
  3290  0654  07F8               	addwf	add_to_hitlist@i,f
  3291  0655  2E0C               	goto	L2
  3292  0656                     __end_of_add_to_hitlist:	
  3293                           
  3294                           	psect	text11
  3295  0342                     __ptext11:	
  3296 ;; *************** function _handle_fire *****************
  3297 ;; Defined at:
  3298 ;;		line 243 in file "user.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  a               2    2[BANK0 ] unsigned int 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      unsigned char 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3312 ;;      Params:         0       0       0       0
  3313 ;;      Locals:         0       2       0       0
  3314 ;;      Temps:          0       2       0       0
  3315 ;;      Totals:         0       4       0       0
  3316 ;;Total ram usage:        4 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    4
  3319 ;; This function calls:
  3320 ;;		_ADC_read
  3321 ;;		_Send_Byte
  3322 ;;		_cheat
  3323 ;;		_green_led_on
  3324 ;;		_play_song
  3325 ;;		_stop_song
  3326 ;; This function is called by:
  3327 ;;		_main
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _handle_fire
  3333  0342                     _handle_fire:	
  3334                           
  3335                           ;user.c: 244: static uint16_t timer = 0;
  3336                           ;user.c: 245: static uint16_t counter = 0;
  3337                           ;user.c: 246: uint16_t a;
  3338                           ;user.c: 248: a=ADC_read();
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3342  0342  24A5               	fcall	_ADC_read
  3343  0343  0872               	movf	?_ADC_read+1,w
  3344  0344  0020               	movlb	0	; select bank0
  3345  0345  01A3               	clrf	handle_fire@a+1
  3346  0346  07A3               	addwf	handle_fire@a+1,f
  3347  0347  0871               	movf	?_ADC_read,w
  3348  0348  01A2               	clrf	handle_fire@a
  3349  0349  07A2               	addwf	handle_fire@a,f
  3350                           
  3351                           ;user.c: 249: if (a > config.fire_cheating){
  3352  034A  0823               	movf	handle_fire@a+1,w
  3353  034B  0021               	movlb	1	; select bank1
  3354  034C  024D               	subwf	((_config+1)^(0+128)+12),w
  3355  034D  1D03               	skipz
  3356  034E  2B53               	goto	u4305
  3357  034F  0020               	movlb	0	; select bank0
  3358  0350  0822               	movf	handle_fire@a,w
  3359  0351  0021               	movlb	1	; select bank1
  3360  0352  024C               	subwf	(_config^(0+128)+12),w
  3361  0353                     u4305:	
  3362  0353  1803               	skipnc
  3363  0354  2B56               	goto	l3173
  3364                           
  3365                           ;user.c: 250: cheat();
  3366  0355  244D               	fcall	_cheat
  3367  0356                     l3173:	
  3368                           
  3369                           ;user.c: 251: }
  3370                           ;user.c: 252: if (a > config.fire_threshold && a < config.fire_cheating)
  3371  0356  0020               	movlb	0	; select bank0
  3372  0357  0823               	movf	handle_fire@a+1,w
  3373  0358  0021               	movlb	1	; select bank1
  3374  0359  024B               	subwf	((_config+1)^(0+128)+10),w
  3375  035A  1D03               	skipz
  3376  035B  2B60               	goto	u4315
  3377  035C  0020               	movlb	0	; select bank0
  3378  035D  0822               	movf	handle_fire@a,w
  3379  035E  0021               	movlb	1	; select bank1
  3380  035F  024A               	subwf	(_config^(0+128)+10),w
  3381  0360                     u4315:	
  3382  0360  1803               	skipnc
  3383  0361  2BC4               	goto	l200
  3384  0362  084D               	movf	((_config+1)^(0+128)+12),w
  3385  0363  0020               	movlb	0	; select bank0
  3386  0364  0223               	subwf	handle_fire@a+1,w
  3387  0365  1D03               	skipz
  3388  0366  2B6B               	goto	u4325
  3389  0367  0021               	movlb	1	; select bank1
  3390  0368  084C               	movf	(_config^(0+128)+12),w
  3391  0369  0020               	movlb	0	; select bank0
  3392  036A  0222               	subwf	handle_fire@a,w
  3393  036B                     u4325:	
  3394  036B  1803               	skipnc
  3395  036C  2BC4               	goto	l200
  3396  036D                     l201:	
  3397                           ;user.c: 253: {
  3398                           ;user.c: 254: while(!my_random_number){
  3399                           
  3400  036D  0869               	movf	_my_random_number,w
  3401  036E  1D03               	skipz
  3402  036F  2B75               	goto	l3181
  3403                           
  3404                           ;user.c: 255: my_random_number = TMR0;
  3405  0370  0815               	movf	21,w	;volatile
  3406  0371  00A0               	movwf	??_handle_fire
  3407  0372  0820               	movf	??_handle_fire,w
  3408  0373  00E9               	movwf	_my_random_number
  3409  0374  2B6D               	goto	l201
  3410  0375                     l3181:	
  3411                           
  3412                           ;user.c: 256: }
  3413                           ;user.c: 257: if(timer < config.fire_holdoff)
  3414  0375  0021               	movlb	1	; select bank1
  3415  0376  084F               	movf	((_config+1)^(0+128)+14),w
  3416  0377  0020               	movlb	0	; select bank0
  3417  0378  0264               	subwf	handle_fire@timer+1,w
  3418  0379  1D03               	skipz
  3419  037A  2B7F               	goto	u4345
  3420  037B  0021               	movlb	1	; select bank1
  3421  037C  084E               	movf	(_config^(0+128)+14),w
  3422  037D  0020               	movlb	0	; select bank0
  3423  037E  0263               	subwf	handle_fire@timer,w
  3424  037F                     u4345:	
  3425  037F  1803               	skipnc
  3426  0380  2B86               	goto	l3185
  3427                           
  3428                           ;user.c: 258: {
  3429                           ;user.c: 259: timer ++;
  3430  0381  3001               	movlw	1
  3431  0382  07E3               	addwf	handle_fire@timer,f
  3432  0383  3000               	movlw	0
  3433  0384  3DE4               	addwfc	handle_fire@timer+1,f
  3434                           
  3435                           ;user.c: 260: }
  3436  0385  0008               	return
  3437  0386                     l3185:	
  3438                           
  3439                           ;user.c: 261: else
  3440                           ;user.c: 262: {
  3441                           ;user.c: 263: if(!config.power || counter <= config.power)
  3442  0386  3002               	movlw	2
  3443  0387  3EC0               	addlw	_config& (0+255)
  3444  0388  0086               	movwf	6
  3445  0389  0187               	clrf	7
  3446  038A  0016               	moviw fsr1++
  3447  038B  0401               	iorwf	1,w
  3448  038C  1903               	skipnz
  3449  038D  2B99               	goto	l3189
  3450  038E  0862               	movf	handle_fire@counter+1,w
  3451  038F  0021               	movlb	1	; select bank1
  3452  0390  0243               	subwf	((_config+1)^(0+128)+2),w
  3453  0391  1D03               	skipz
  3454  0392  2B97               	goto	u4365
  3455  0393  0020               	movlb	0	; select bank0
  3456  0394  0861               	movf	handle_fire@counter,w
  3457  0395  0021               	movlb	1	; select bank1
  3458  0396  0242               	subwf	(_config^(0+128)+2),w
  3459  0397                     u4365:	
  3460  0397  1C03               	skipc
  3461  0398  2BC2               	goto	l206
  3462  0399                     l3189:	
  3463                           
  3464                           ;user.c: 264: {
  3465                           ;user.c: 265: if(!counter)
  3466  0399  0020               	movlb	0	; select bank0
  3467  039A  0862               	movf	handle_fire@counter+1,w
  3468  039B  0461               	iorwf	handle_fire@counter,w
  3469  039C  1D03               	skipz
  3470  039D  2BB9               	goto	l3195
  3471                           
  3472                           ;user.c: 266: {
  3473                           ;user.c: 267: green_led_on();
  3474  039E  24EC               	fcall	_green_led_on
  3475                           
  3476                           ;user.c: 268: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  3477  039F  3026               	movlw	low (_fire_song| (0+32768))
  3478  03A0  00F1               	movwf	play_song@song
  3479  03A1  3085               	movlw	high (_fire_song| (0+32768))
  3480  03A2  00F2               	movwf	play_song@song+1
  3481  03A3  3010               	movlw	16
  3482  03A4  0020               	movlb	0	; select bank0
  3483  03A5  00A0               	movwf	??_handle_fire
  3484  03A6  0820               	movf	??_handle_fire,w
  3485  03A7  00F3               	movwf	play_song@length
  3486  03A8  30B8               	movlw	184
  3487  03A9  00F4               	movwf	play_song@note_duration
  3488  03AA  300B               	movlw	11
  3489  03AB  00F5               	movwf	play_song@note_duration+1
  3490  03AC  3002               	movlw	2
  3491  03AD  3EC0               	addlw	_config& (0+255)
  3492  03AE  0086               	movwf	6
  3493  03AF  0187               	clrf	7
  3494  03B0  0016               	moviw fsr1++
  3495  03B1  0401               	iorwf	1,w
  3496  03B2  3000               	movlw	0
  3497  03B3  1903               	skipnz
  3498  03B4  3001               	movlw	1
  3499  03B5  00A1               	movwf	??_handle_fire+1
  3500  03B6  0821               	movf	??_handle_fire+1,w
  3501  03B7  00F6               	movwf	play_song@repeat
  3502  03B8  27A5               	fcall	_play_song
  3503  03B9                     l3195:	
  3504                           
  3505                           ;user.c: 269: }
  3506                           ;user.c: 270: Send_Byte(config.id);
  3507  03B9  0021               	movlb	1	; select bank1
  3508  03BA  0840               	movf	_config^(0+128),w
  3509  03BB  26F1               	fcall	_Send_Byte
  3510                           
  3511                           ;user.c: 271: counter++;
  3512  03BC  3001               	movlw	1
  3513  03BD  0020               	movlb	0	; select bank0
  3514  03BE  07E1               	addwf	handle_fire@counter,f
  3515  03BF  3000               	movlw	0
  3516  03C0  3DE2               	addwfc	handle_fire@counter+1,f
  3517                           
  3518                           ;user.c: 272: }
  3519  03C1  0008               	return
  3520  03C2                     l206:	
  3521                           
  3522                           ;user.c: 273: else
  3523                           ;user.c: 274: {
  3524                           ;user.c: 275: {TRISAbits.TRISA5 = 1;};
  3525  03C2  168C               	bsf	12,5	;volatile
  3526                           
  3527                           ;user.c: 276: }
  3528                           ;user.c: 277: }
  3529                           ;user.c: 278: }
  3530  03C3  0008               	return
  3531  03C4                     l200:	
  3532                           
  3533                           ;user.c: 279: else
  3534                           ;user.c: 280: {
  3535                           ;user.c: 281: {TRISAbits.TRISA5 = 1;};
  3536  03C4  0021               	movlb	1	; select bank1
  3537  03C5  168C               	bsf	12,5	;volatile
  3538                           
  3539                           ;user.c: 282: if(!config.power && counter) stop_song();
  3540  03C6  0843               	movf	((_config+1)^(0+128)+2),w
  3541  03C7  0442               	iorwf	(_config^(0+128)+2),w
  3542  03C8  1D03               	skipz
  3543  03C9  2BD0               	goto	l3205
  3544  03CA  0020               	movlb	0	; select bank0
  3545  03CB  0862               	movf	handle_fire@counter+1,w
  3546  03CC  0461               	iorwf	handle_fire@counter,w
  3547  03CD  1903               	skipnz
  3548  03CE  2BD0               	goto	l3205
  3549  03CF  24E6               	fcall	_stop_song
  3550  03D0                     l3205:	
  3551                           
  3552                           ;user.c: 283: timer = 0;
  3553  03D0  0020               	movlb	0	; select bank0
  3554  03D1  01E3               	clrf	handle_fire@timer
  3555  03D2  01E4               	clrf	handle_fire@timer+1
  3556                           
  3557                           ;user.c: 284: counter = 0;
  3558  03D3  01E1               	clrf	handle_fire@counter
  3559  03D4  01E2               	clrf	handle_fire@counter+1
  3560                           
  3561                           ;user.c: 285: return 0;
  3562                           ;	Return value of _handle_fire is never used
  3563  03D5  0008               	return
  3564  03D6                     __end_of_handle_fire:	
  3565                           ;user.c: 286: }
  3566                           ;user.c: 287: return 1;
  3567                           ;	Return value of _handle_fire is never used
  3568                           
  3569                           
  3570                           	psect	text12
  3571  04E6                     __ptext12:	
  3572 ;; *************** function _stop_song *****************
  3573 ;; Defined at:
  3574 ;;		line 105 in file "user.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;		None               void
  3581 ;; Registers used:
  3582 ;;		None
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3588 ;;      Params:         0       0       0       0
  3589 ;;      Locals:         0       0       0       0
  3590 ;;      Temps:          0       0       0       0
  3591 ;;      Totals:         0       0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    1
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_handle_music
  3599 ;;		_handle_fire
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _stop_song
  3605  04E6                     _stop_song:	
  3606                           
  3607                           ;user.c: 107: {PWM3CONbits.PWM3OE = 0;};
  3608                           
  3609                           ;incstack = 0
  3610                           ; Regs used in _stop_song: []
  3611  04E6  003B               	movlb	27	; select bank27
  3612  04E7  133B               	bcf	59,6	;volatile
  3613                           
  3614                           ;user.c: 108: T1CONbits.TMR1ON=0;
  3615  04E8  0020               	movlb	0	; select bank0
  3616  04E9  1018               	bcf	24,0	;volatile
  3617                           
  3618                           ;user.c: 109: PIR1bits.TMR1IF=0;
  3619  04EA  1011               	bcf	17,0	;volatile
  3620  04EB  0008               	return
  3621  04EC                     __end_of_stop_song:	
  3622                           
  3623                           	psect	text13
  3624  07A5                     __ptext13:	
  3625 ;; *************** function _play_song *****************
  3626 ;; Defined at:
  3627 ;;		line 92 in file "user.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  song            2    1[COMMON] PTR unsigned int 
  3630 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3631 ;;  length          1    3[COMMON] unsigned char 
  3632 ;;  note_duratio    2    4[COMMON] unsigned int 
  3633 ;;  repeat          1    6[COMMON] unsigned char 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;		None               void
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3645 ;;      Params:         6       0       0       0
  3646 ;;      Locals:         0       0       0       0
  3647 ;;      Temps:          2       0       0       0
  3648 ;;      Totals:         8       0       0       0
  3649 ;;Total ram usage:        8 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    1
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_handle_fire
  3656 ;;		_super_dead_mode
  3657 ;;		_hit_by
  3658 ;;		_control_transfer
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function _play_song
  3664  07A5                     _play_song:	
  3665                           
  3666                           ;user.c: 94: cur_song=song;
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3670  07A5  0872               	movf	play_song@song+1,w
  3671  07A6  0020               	movlb	0	; select bank0
  3672  07A7  01DE               	clrf	_cur_song+1
  3673  07A8  07DE               	addwf	_cur_song+1,f
  3674  07A9  0871               	movf	play_song@song,w
  3675  07AA  01DD               	clrf	_cur_song
  3676  07AB  07DD               	addwf	_cur_song,f
  3677                           
  3678                           ;user.c: 95: cur_song_length=length;
  3679  07AC  0873               	movf	play_song@length,w
  3680  07AD  00F7               	movwf	??_play_song
  3681  07AE  0877               	movf	??_play_song,w
  3682  07AF  00E6               	movwf	_cur_song_length
  3683                           
  3684                           ;user.c: 96: cur_song_ptr=0;
  3685  07B0  01E7               	clrf	_cur_song_ptr
  3686                           
  3687                           ;user.c: 97: cur_song_repeat=repeat;
  3688  07B1  0876               	movf	play_song@repeat,w
  3689  07B2  00F7               	movwf	??_play_song
  3690  07B3  0877               	movf	??_play_song,w
  3691  07B4  00E8               	movwf	_cur_song_repeat
  3692                           
  3693                           ;user.c: 98: cur_song_duration=note_duration;
  3694  07B5  0875               	movf	play_song@note_duration+1,w
  3695  07B6  01E0               	clrf	_cur_song_duration+1
  3696  07B7  07E0               	addwf	_cur_song_duration+1,f
  3697  07B8  0874               	movf	play_song@note_duration,w
  3698  07B9  01DF               	clrf	_cur_song_duration
  3699  07BA  07DF               	addwf	_cur_song_duration,f
  3700                           
  3701                           ;user.c: 100: TMR1 = -cur_song_duration;
  3702  07BB  095F               	comf	_cur_song_duration,w
  3703  07BC  00F7               	movwf	??_play_song
  3704  07BD  0960               	comf	_cur_song_duration+1,w
  3705  07BE  00F8               	movwf	??_play_song+1
  3706  07BF  0AF7               	incf	??_play_song,f
  3707  07C0  1903               	skipnz
  3708  07C1  0AF8               	incf	??_play_song+1,f
  3709  07C2  0877               	movf	??_play_song,w
  3710  07C3  0096               	movwf	22	;volatile
  3711  07C4  0878               	movf	??_play_song+1,w
  3712  07C5  0097               	movwf	23	;volatile
  3713                           
  3714                           ;user.c: 101: PIR1bits.TMR1IF = 1;
  3715  07C6  1411               	bsf	17,0	;volatile
  3716                           
  3717                           ;user.c: 102: T1CONbits.TMR1ON = 1;
  3718  07C7  1418               	bsf	24,0	;volatile
  3719  07C8  0008               	return
  3720  07C9                     __end_of_play_song:	
  3721                           
  3722                           	psect	text14
  3723  04EC                     __ptext14:	
  3724 ;; *************** function _green_led_on *****************
  3725 ;; Defined at:
  3726 ;;		line 86 in file "user.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;		None
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		None
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3740 ;;      Params:         0       0       0       0
  3741 ;;      Locals:         0       0       0       0
  3742 ;;      Temps:          0       0       0       0
  3743 ;;      Totals:         0       0       0       0
  3744 ;;Total ram usage:        0 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    1
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_handle_fire
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function _green_led_on
  3756  04EC                     _green_led_on:	
  3757                           
  3758                           ;user.c: 88: TRISAbits.TRISA5 = 0;
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _green_led_on: []
  3762  04EC  0021               	movlb	1	; select bank1
  3763  04ED  128C               	bcf	12,5	;volatile
  3764                           
  3765                           ;user.c: 89: PORTAbits.RA5 = 1;
  3766  04EE  0020               	movlb	0	; select bank0
  3767  04EF  168C               	bsf	12,5	;volatile
  3768  04F0  0008               	return
  3769  04F1                     __end_of_green_led_on:	
  3770                           
  3771                           	psect	text15
  3772  06F1                     __ptext15:	
  3773 ;; *************** function _Send_Byte *****************
  3774 ;; Defined at:
  3775 ;;		line 155 in file "user.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  data            1    wreg     unsigned char 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  data            1    8[COMMON] unsigned char 
  3780 ;;  i               2    9[COMMON] unsigned int 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;		None               void
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3790 ;;      Params:         0       0       0       0
  3791 ;;      Locals:         3       0       0       0
  3792 ;;      Temps:          0       0       0       0
  3793 ;;      Totals:         3       0       0       0
  3794 ;;Total ram usage:        3 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    3
  3797 ;; This function calls:
  3798 ;;		_cheat
  3799 ;;		_delay_1_ms
  3800 ;; This function is called by:
  3801 ;;		_handle_fire
  3802 ;;		_super_dead_mode
  3803 ;;		_SEND_DATA_BYTE
  3804 ;;		_SEND_SOF
  3805 ;;		_SEND_EOF
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _Send_Byte
  3811  06F1                     _Send_Byte:	
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3815                           ;Send_Byte@data stored from wreg
  3816  06F1  00F8               	movwf	Send_Byte@data
  3817                           
  3818                           ;user.c: 157: RCSTAbits.CREN = 0;
  3819  06F2  0023               	movlb	3	; select bank3
  3820  06F3  121D               	bcf	29,4	;volatile
  3821                           
  3822                           ;user.c: 159: for(uint16_t i=0; i<100; i++){
  3823  06F4  01F9               	clrf	Send_Byte@i
  3824  06F5  01FA               	clrf	Send_Byte@i+1
  3825  06F6  3000               	movlw	0
  3826  06F7  027A               	subwf	Send_Byte@i+1,w
  3827  06F8  3064               	movlw	100
  3828  06F9  1903               	skipnz
  3829  06FA  0279               	subwf	Send_Byte@i,w
  3830  06FB  1803               	btfsc	3,0
  3831  06FC  2F12               	goto	l160
  3832  06FD                     l159:	
  3833                           
  3834                           ;user.c: 160: if(PORTAbits.RA1){break;}
  3835  06FD  0020               	movlb	0	; select bank0
  3836  06FE  188C               	btfsc	12,1	;volatile
  3837  06FF  2F12               	goto	l160
  3838                           
  3839                           ;user.c: 161: delay_1_ms();
  3840  0700  24B7               	fcall	_delay_1_ms
  3841                           
  3842                           ;user.c: 162: if(i==99){cheat();}
  3843  0701  3063               	movlw	99
  3844  0702  0679               	xorwf	Send_Byte@i,w
  3845  0703  047A               	iorwf	Send_Byte@i+1,w
  3846  0704  1D03               	skipz
  3847  0705  2F07               	goto	l2597
  3848  0706  244D               	fcall	_cheat
  3849  0707                     l2597:	
  3850  0707  3001               	movlw	1
  3851  0708  07F9               	addwf	Send_Byte@i,f
  3852  0709  3000               	movlw	0
  3853  070A  3DFA               	addwfc	Send_Byte@i+1,f
  3854  070B  3000               	movlw	0
  3855  070C  027A               	subwf	Send_Byte@i+1,w
  3856  070D  3064               	movlw	100
  3857  070E  1903               	skipnz
  3858  070F  0279               	subwf	Send_Byte@i,w
  3859  0710  1C03               	skipc
  3860  0711  2EFD               	goto	l159
  3861  0712                     l160:	
  3862                           
  3863                           ;user.c: 163: }
  3864                           ;user.c: 165: { DACCON0bits.DACEN = 1; TMR0=0; INTCONbits.TMR0IF=1; INTCONbits.TMR0IE=1;
      +                          };
  3865  0712  0022               	movlb	2	; select bank2
  3866  0713  1798               	bsf	24,7	;volatile
  3867  0714  0020               	movlb	0	; select bank0
  3868  0715  0195               	clrf	21	;volatile
  3869  0716  150B               	bsf	11,2	;volatile
  3870  0717  168B               	bsf	11,5	;volatile
  3871                           
  3872                           ;user.c: 166: TXREG = data;
  3873  0718  0878               	movf	Send_Byte@data,w
  3874  0719  0023               	movlb	3	; select bank3
  3875  071A  009A               	movwf	26	;volatile
  3876  071B                     l163:	
  3877                           ;user.c: 167: while(!TXSTAbits.TRMT);
  3878                           
  3879  071B  1C9E               	btfss	30,1	;volatile
  3880  071C  2F1B               	goto	l163
  3881                           
  3882                           ;user.c: 168: { INTCONbits.TMR0IE=0; DACCON0bits.DACEN=0;};
  3883  071D  128B               	bcf	11,5	;volatile
  3884  071E  0022               	movlb	2	; select bank2
  3885  071F  1398               	bcf	24,7	;volatile
  3886                           
  3887                           ;user.c: 169: RCSTAbits.CREN = 1;
  3888  0720  0023               	movlb	3	; select bank3
  3889  0721  161D               	bsf	29,4	;volatile
  3890                           
  3891                           ;user.c: 170: RCREG;
  3892  0722  0819               	movf	25,w	;volatile
  3893                           
  3894                           ;user.c: 171: delay_1_ms();
  3895  0723  24B7               	fcall	_delay_1_ms
  3896  0724  0008               	return
  3897  0725                     __end_of_Send_Byte:	
  3898                           
  3899                           	psect	text16
  3900  044D                     __ptext16:	
  3901 ;; *************** function _cheat *****************
  3902 ;; Defined at:
  3903 ;;		line 229 in file "user.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  i               1    7[COMMON] unsigned char 
  3908 ;;  i               1    6[COMMON] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;		None               void
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3918 ;;      Params:         0       0       0       0
  3919 ;;      Locals:         2       0       0       0
  3920 ;;      Temps:          1       0       0       0
  3921 ;;      Totals:         3       0       0       0
  3922 ;;Total ram usage:        3 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    2
  3925 ;; This function calls:
  3926 ;;		_delay_1_ms
  3927 ;;		_red_led_on
  3928 ;;		_tone
  3929 ;; This function is called by:
  3930 ;;		_Send_Byte
  3931 ;;		_handle_fire
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _cheat
  3937  044D                     _cheat:	
  3938  044D                     l185:	
  3939                           ;incstack = 0
  3940                           ; Regs used in _cheat: [wreg+status,2+status,0+pclath+cstack]
  3941                           ;user.c: 230: while(1){
  3942                           
  3943                           
  3944                           ;user.c: 231: red_led_on();
  3945  044D  24F1               	fcall	_red_led_on
  3946                           
  3947                           ;user.c: 232: tone(7813);
  3948  044E  3085               	movlw	133
  3949  044F  00F1               	movwf	tone@period
  3950  0450  301E               	movlw	30
  3951  0451  00F2               	movwf	tone@period+1
  3952  0452  27C9               	fcall	_tone
  3953                           
  3954                           ;user.c: 233: for(uint8_t i=0; i<200; i++){
  3955  0453  01F6               	clrf	cheat@i
  3956  0454  30C8               	movlw	200
  3957  0455  0276               	subwf	cheat@i,w
  3958  0456  1803               	btfsc	3,0
  3959  0457  2C61               	goto	l187
  3960  0458                     l2563:	
  3961                           
  3962                           ;user.c: 234: delay_1_ms();
  3963  0458  24B7               	fcall	_delay_1_ms
  3964  0459  3001               	movlw	1
  3965  045A  00F5               	movwf	??_cheat
  3966  045B  0875               	movf	??_cheat,w
  3967  045C  07F6               	addwf	cheat@i,f
  3968  045D  30C8               	movlw	200
  3969  045E  0276               	subwf	cheat@i,w
  3970  045F  1C03               	skipc
  3971  0460  2C58               	goto	l2563
  3972  0461                     l187:	
  3973                           
  3974                           ;user.c: 235: }
  3975                           ;user.c: 236: {TRISAbits.TRISA5 = 1;};
  3976  0461  0021               	movlb	1	; select bank1
  3977  0462  168C               	bsf	12,5	;volatile
  3978                           
  3979                           ;user.c: 237: for(uint8_t i=0; i<200; i++){
  3980  0463  01F7               	clrf	cheat@i_724
  3981  0464                     L3:	
  3982  0464  30C8               	movlw	200
  3983  0465  0277               	subwf	cheat@i_724,w
  3984  0466  1803               	btfsc	3,0
  3985  0467  2C4D               	goto	l185
  3986                           
  3987                           ;user.c: 238: delay_1_ms();
  3988  0468  24B7               	fcall	_delay_1_ms
  3989  0469  3001               	movlw	1
  3990  046A  00F5               	movwf	??_cheat
  3991  046B  0875               	movf	??_cheat,w
  3992  046C  07F7               	addwf	cheat@i_724,f
  3993  046D  2C64               	goto	L3
  3994  046E                     __end_of_cheat:	
  3995                           
  3996                           	psect	text17
  3997  07C9                     __ptext17:	
  3998 ;; *************** function _tone *****************
  3999 ;; Defined at:
  4000 ;;		line 133 in file "user.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  period          2    1[COMMON] unsigned int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4014 ;;      Params:         2       0       0       0
  4015 ;;      Locals:         0       0       0       0
  4016 ;;      Temps:          2       0       0       0
  4017 ;;      Totals:         4       0       0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    1
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_handle_music
  4025 ;;		_cheat
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           
  4030                           ;psect for function _tone
  4031  07C9                     _tone:	
  4032                           
  4033                           ;user.c: 135: PWM3CONbits.PWM3EN = 1;
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in _tone: [wreg+status,2+status,0]
  4037  07C9  003B               	movlb	27	; select bank27
  4038  07CA  17BB               	bsf	59,7	;volatile
  4039                           
  4040                           ;user.c: 136: PWM3CONbits.PWM3OE = 1;
  4041  07CB  173B               	bsf	59,6	;volatile
  4042                           
  4043                           ;user.c: 137: PWM3PR = period;
  4044  07CC  0872               	movf	tone@period+1,w
  4045  07CD  01B6               	clrf	54	;volatile
  4046  07CE  07B6               	addwf	54,f	;volatile
  4047  07CF  0871               	movf	tone@period,w
  4048  07D0  01B5               	clrf	53	;volatile
  4049  07D1  07B5               	addwf	53,f	;volatile
  4050                           
  4051                           ;user.c: 138: PWM3DC = period >> 1;
  4052  07D2  0872               	movf	tone@period+1,w
  4053  07D3  00F4               	movwf	??_tone+1
  4054  07D4  0871               	movf	tone@period,w
  4055  07D5  00F3               	movwf	??_tone
  4056  07D6  36F4               	lsrf	??_tone+1,f
  4057  07D7  0CF3               	rrf	??_tone,f
  4058  07D8  0873               	movf	??_tone,w
  4059  07D9  00B3               	movwf	51	;volatile
  4060  07DA  0874               	movf	??_tone+1,w
  4061  07DB  00B4               	movwf	52	;volatile
  4062                           
  4063                           ;user.c: 139: PWM3PH = 0x0000;
  4064  07DC  01B1               	clrf	49	;volatile
  4065  07DD  01B2               	clrf	50	;volatile
  4066                           
  4067                           ;user.c: 140: PWM3LDCONbits.PWM3LD = 1;
  4068  07DE  17BF               	bsf	63,7	;volatile
  4069  07DF  0008               	return
  4070  07E0                     __end_of_tone:	
  4071                           
  4072                           	psect	text18
  4073  04F1                     __ptext18:	
  4074 ;; *************** function _red_led_on *****************
  4075 ;; Defined at:
  4076 ;;		line 80 in file "user.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;		None               void
  4083 ;; Registers used:
  4084 ;;		None
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4090 ;;      Params:         0       0       0       0
  4091 ;;      Locals:         0       0       0       0
  4092 ;;      Temps:          0       0       0       0
  4093 ;;      Totals:         0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_cheat
  4101 ;;		_super_dead_mode
  4102 ;;		_hit_by
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _red_led_on
  4108  04F1                     _red_led_on:	
  4109                           
  4110                           ;user.c: 82: TRISAbits.TRISA5 = 0;
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _red_led_on: []
  4114  04F1  0021               	movlb	1	; select bank1
  4115  04F2  128C               	bcf	12,5	;volatile
  4116                           
  4117                           ;user.c: 83: PORTAbits.RA5 = 0;
  4118  04F3  0020               	movlb	0	; select bank0
  4119  04F4  128C               	bcf	12,5	;volatile
  4120  04F5  0008               	return
  4121  04F6                     __end_of_red_led_on:	
  4122                           
  4123                           	psect	text19
  4124  04A5                     __ptext19:	
  4125 ;; *************** function _ADC_read *****************
  4126 ;; Defined at:
  4127 ;;		line 73 in file "user.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  2    1[COMMON] unsigned int 
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4141 ;;      Params:         2       0       0       0
  4142 ;;      Locals:         0       0       0       0
  4143 ;;      Temps:          2       0       0       0
  4144 ;;      Totals:         4       0       0       0
  4145 ;;Total ram usage:        4 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    1
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_handle_fire
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _ADC_read
  4157  04A5                     _ADC_read:	
  4158                           
  4159                           ;user.c: 75: ADCON0bits.GO = 1;
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4163  04A5  0021               	movlb	1	; select bank1
  4164  04A6  149D               	bsf	29,1	;volatile
  4165  04A7                     l131:	
  4166                           ;user.c: 76: while(ADCON0bits.GO){};
  4167                           
  4168  04A7  189D               	btfsc	29,1	;volatile
  4169  04A8  2CA7               	goto	l131
  4170                           
  4171                           ;user.c: 77: return ADRES >> 6;
  4172  04A9  081C               	movf	28,w	;volatile
  4173  04AA  00F4               	movwf	??_ADC_read+1
  4174  04AB  081B               	movf	27,w	;volatile
  4175  04AC  00F3               	movwf	??_ADC_read
  4176  04AD  3006               	movlw	6
  4177  04AE                     u2745:	
  4178  04AE  36F4               	lsrf	??_ADC_read+1,f
  4179  04AF  0CF3               	rrf	??_ADC_read,f
  4180  04B0  0B89               	decfsz	9,f
  4181  04B1  2CAE               	goto	u2745
  4182  04B2  0873               	movf	??_ADC_read,w
  4183  04B3  00F1               	movwf	?_ADC_read
  4184  04B4  0874               	movf	??_ADC_read+1,w
  4185  04B5  00F2               	movwf	?_ADC_read+1
  4186  04B6  0008               	return
  4187  04B7                     __end_of_ADC_read:	
  4188                           
  4189                           	psect	text20
  4190  0756                     __ptext20:	
  4191 ;; *************** function _Setup *****************
  4192 ;; Defined at:
  4193 ;;		line 32 in file "user.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4207 ;;      Params:         0       0       0       0
  4208 ;;      Locals:         0       0       0       0
  4209 ;;      Temps:          1       0       0       0
  4210 ;;      Totals:         1       0       0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    2
  4214 ;; This function calls:
  4215 ;;		_delay_1_ms
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _Setup
  4223  0756                     _Setup:	
  4224                           
  4225                           ;user.c: 34: OSCCON = 0b01111010;
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _Setup: [wreg+status,2+status,0+pclath+cstack]
  4229  0756  307A               	movlw	122
  4230  0757  0021               	movlb	1	; select bank1
  4231  0758  0099               	movwf	25	;volatile
  4232                           
  4233                           ;user.c: 36: ANSELA = 0x00;
  4234  0759  0023               	movlb	3	; select bank3
  4235  075A  018C               	clrf	12	;volatile
  4236                           
  4237                           ;user.c: 37: TRISAbits.TRISA2 = 0;
  4238  075B  0021               	movlb	1	; select bank1
  4239  075C  110C               	bcf	12,2	;volatile
  4240                           
  4241                           ;user.c: 38: TRISAbits.TRISA0 = 0;
  4242  075D  100C               	bcf	12,0	;volatile
  4243                           
  4244                           ;user.c: 41: ANSELAbits.ANSA4 = 1;
  4245  075E  0023               	movlb	3	; select bank3
  4246  075F  160C               	bsf	12,4	;volatile
  4247                           
  4248                           ;user.c: 42: ADCON1 |= 0b00110000;
  4249  0760  3030               	movlw	48
  4250  0761  00F3               	movwf	??_Setup
  4251  0762  0873               	movf	??_Setup,w
  4252  0763  0021               	movlb	1	; select bank1
  4253  0764  049E               	iorwf	30,f	;volatile
  4254                           
  4255                           ;user.c: 45: SPBRGL = 103;
  4256  0765  3067               	movlw	103
  4257  0766  0023               	movlb	3	; select bank3
  4258  0767  009B               	movwf	27	;volatile
  4259                           
  4260                           ;user.c: 46: TXSTAbits.SYNC = 0;
  4261  0768  121E               	bcf	30,4	;volatile
  4262                           
  4263                           ;user.c: 47: RCSTAbits.SPEN = 1;
  4264  0769  179D               	bsf	29,7	;volatile
  4265                           
  4266                           ;user.c: 48: BAUDCONbits.SCKP = 1;
  4267  076A  161F               	bsf	31,4	;volatile
  4268                           
  4269                           ;user.c: 49: TXSTAbits.TXEN = 1;
  4270  076B  169E               	bsf	30,5	;volatile
  4271                           
  4272                           ;user.c: 52: RCSTAbits.CREN = 1;
  4273  076C  161D               	bsf	29,4	;volatile
  4274                           
  4275                           ;user.c: 55: INTCONbits.GIE = 1;
  4276  076D  178B               	bsf	11,7	;volatile
  4277                           
  4278                           ;user.c: 58: OPTION_REGbits.TMR0CS = 0;
  4279  076E  0021               	movlb	1	; select bank1
  4280  076F  1295               	bcf	21,5	;volatile
  4281                           
  4282                           ;user.c: 61: T1CONbits.T1CKPS=3;
  4283  0770  3030               	movlw	48
  4284  0771  0020               	movlb	0	; select bank0
  4285  0772  0498               	iorwf	24,f	;volatile
  4286                           
  4287                           ;user.c: 64: T2CONbits.T2CKPS = 3;
  4288  0773  3003               	movlw	3
  4289  0774  049C               	iorwf	28,f	;volatile
  4290                           
  4291                           ;user.c: 65: T2CONbits.T2OUTPS = 15;
  4292  0775  3078               	movlw	120
  4293  0776  049C               	iorwf	28,f	;volatile
  4294                           
  4295                           ;user.c: 66: T2CONbits.TMR2ON = 1;
  4296  0777  151C               	bsf	28,2	;volatile
  4297                           
  4298                           ;user.c: 68: ADCON0bits.CHS = 3;
  4299  0778  0021               	movlb	1	; select bank1
  4300  0779  081D               	movf	29,w	;volatile
  4301  077A  3983               	andlw	-125
  4302  077B  380C               	iorlw	12
  4303  077C  009D               	movwf	29	;volatile
  4304                           
  4305                           ;user.c: 69: ADCON0bits.ADON = 1;
  4306  077D  141D               	bsf	29,0	;volatile
  4307                           
  4308                           ;user.c: 70: delay_1_ms();
  4309  077E  24B7               	fcall	_delay_1_ms
  4310  077F  0008               	return
  4311  0780                     __end_of_Setup:	
  4312                           
  4313                           	psect	text21
  4314  04B7                     __ptext21:	
  4315 ;; *************** function _delay_1_ms *****************
  4316 ;; Defined at:
  4317 ;;		line 388 in file "user.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  i               2    1[COMMON] unsigned int 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;		None               void
  4324 ;; Registers used:
  4325 ;;		wreg, status,2
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4331 ;;      Params:         0       0       0       0
  4332 ;;      Locals:         2       0       0       0
  4333 ;;      Temps:          0       0       0       0
  4334 ;;      Totals:         2       0       0       0
  4335 ;;Total ram usage:        2 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_Setup
  4342 ;;		_Send_Byte
  4343 ;;		_cheat
  4344 ;;		_super_dead_mode
  4345 ;;		_hit_by
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           
  4350                           ;psect for function _delay_1_ms
  4351  04B7                     _delay_1_ms:	
  4352                           
  4353                           ;user.c: 389: for (uint16_t i=0; i<4000/14; i++){
  4354                           
  4355                           ;incstack = 0
  4356                           ; Regs used in _delay_1_ms: [wreg+status,2]
  4357  04B7  01F1               	clrf	delay_1_ms@i
  4358  04B8  01F2               	clrf	delay_1_ms@i+1
  4359  04B9                     L4:	
  4360  04B9  3001               	movlw	1
  4361  04BA  0272               	subwf	delay_1_ms@i+1,w
  4362  04BB  301D               	movlw	29
  4363  04BC  1903               	skipnz
  4364  04BD  0271               	subwf	delay_1_ms@i,w
  4365  04BE  1803               	btfsc	3,0
  4366  04BF  0008               	return
  4367                           
  4368                           ;user.c: 390: __nop();
  4369  04C0  0000               	nop
  4370  04C1  3001               	movlw	1
  4371  04C2  07F1               	addwf	delay_1_ms@i,f
  4372  04C3  3000               	movlw	0
  4373  04C4  3DF2               	addwfc	delay_1_ms@i+1,f
  4374  04C5  2CB9               	goto	L4
  4375  04C6                     __end_of_delay_1_ms:	
  4376                           
  4377                           	psect	text22
  4378  0656                     __ptext22:	
  4379 ;; *************** function _LoadFromFlash *****************
  4380 ;; Defined at:
  4381 ;;		line 28 in file "main.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;		None               void
  4388 ;; Registers used:
  4389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4395 ;;      Params:         0       0       0       0
  4396 ;;      Locals:         0       0       0       0
  4397 ;;      Temps:          2       0       0       0
  4398 ;;      Totals:         2       0       0       0
  4399 ;;Total ram usage:        2 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    2
  4402 ;; This function calls:
  4403 ;;		_Load
  4404 ;;		_Save
  4405 ;; This function is called by:
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function _LoadFromFlash
  4412  0656                     _LoadFromFlash:	
  4413                           
  4414                           ;main.c: 30: Load(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4415                           
  4416                           ;incstack = 0
  4417                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4418  0656  30F0               	movlw	240
  4419  0657  00F1               	movwf	Load@address
  4420  0658  3007               	movlw	7
  4421  0659  00F2               	movwf	Load@address+1
  4422  065A  30C0               	movlw	_config& (0+255)
  4423  065B  00F7               	movwf	??_LoadFromFlash
  4424  065C  0877               	movf	??_LoadFromFlash,w
  4425  065D  00F3               	movwf	Load@ptr
  4426  065E  3009               	movlw	9
  4427  065F  00F8               	movwf	??_LoadFromFlash+1
  4428  0660  0878               	movf	??_LoadFromFlash+1,w
  4429  0661  00F4               	movwf	Load@data_length
  4430  0662  2780               	fcall	_Load
  4431                           
  4432                           ;main.c: 31: if(config.id == 0x3FFF)
  4433  0663  303F               	movlw	63
  4434  0664  0021               	movlb	1	; select bank1
  4435  0665  0641               	xorwf	(_config+1)^(0+128),w
  4436  0666  1D03               	skipz
  4437  0667  2E6A               	goto	u2825
  4438  0668  30FF               	movlw	255
  4439  0669  0640               	xorwf	_config^(0+128),w
  4440  066A                     u2825:	
  4441  066A  1D03               	skipz
  4442  066B  2E9C               	goto	l2373
  4443                           
  4444                           ;main.c: 32: {
  4445                           ;main.c: 33: config.health = 1;
  4446  066C  3001               	movlw	1
  4447  066D  00C4               	movwf	(_config^(0+128)+4)
  4448  066E  3000               	movlw	0
  4449  066F  00C5               	movwf	(_config^(0+128)+5)
  4450                           
  4451                           ;main.c: 34: config.id = 0x80;
  4452  0670  3080               	movlw	128
  4453  0671  00C0               	movwf	_config^(0+128)
  4454  0672  3000               	movlw	0
  4455  0673  00C1               	movwf	(_config^(0+128)+1)
  4456                           
  4457                           ;main.c: 35: config.power = 0;
  4458  0674  01C2               	clrf	(_config^(0+128)+2)
  4459  0675  01C3               	clrf	((_config+1)^(0+128)+2)
  4460                           
  4461                           ;main.c: 37: config.fire_threshold = 500;
  4462  0676  30F4               	movlw	244
  4463  0677  00CA               	movwf	(_config^(0+128)+10)
  4464  0678  3001               	movlw	1
  4465  0679  00CB               	movwf	(_config^(0+128)+11)
  4466                           
  4467                           ;main.c: 38: config.fire_holdoff = 4000;
  4468  067A  30A0               	movlw	160
  4469  067B  00CE               	movwf	(_config^(0+128)+14)
  4470  067C  300F               	movlw	15
  4471  067D  00CF               	movwf	(_config^(0+128)+15)
  4472                           
  4473                           ;main.c: 40: config.fire_cheating = 1000;
  4474  067E  30E8               	movlw	232
  4475  067F  00CC               	movwf	(_config^(0+128)+12)
  4476  0680  3003               	movlw	3
  4477  0681  00CD               	movwf	(_config^(0+128)+13)
  4478                           
  4479                           ;main.c: 42: Save(0x7F0,(uint16_t*)&config,(sizeof(config_t)/2));
  4480  0682  30F0               	movlw	240
  4481  0683  00F1               	movwf	Save@address
  4482  0684  3007               	movlw	7
  4483  0685  00F2               	movwf	Save@address+1
  4484  0686  30C0               	movlw	_config& (0+255)
  4485  0687  00F7               	movwf	??_LoadFromFlash
  4486  0688  0877               	movf	??_LoadFromFlash,w
  4487  0689  00F3               	movwf	Save@ptr
  4488  068A  3009               	movlw	9
  4489  068B  00F8               	movwf	??_LoadFromFlash+1
  4490  068C  0878               	movf	??_LoadFromFlash+1,w
  4491  068D  00F4               	movwf	Save@data_length
  4492  068E  26AA               	fcall	_Save
  4493                           
  4494                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4495  068F  30E0               	movlw	224
  4496  0690  00F1               	movwf	Save@address
  4497  0691  3007               	movlw	7
  4498  0692  00F2               	movwf	Save@address+1
  4499  0693  30A0               	movlw	_hitlist& (0+255)
  4500  0694  00F7               	movwf	??_LoadFromFlash
  4501  0695  0877               	movf	??_LoadFromFlash,w
  4502  0696  00F3               	movwf	Save@ptr
  4503  0697  3010               	movlw	16
  4504  0698  00F8               	movwf	??_LoadFromFlash+1
  4505  0699  0878               	movf	??_LoadFromFlash+1,w
  4506  069A  00F4               	movwf	Save@data_length
  4507  069B  26AA               	fcall	_Save
  4508  069C                     l2373:	
  4509                           
  4510                           ;main.c: 44: }
  4511                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4512  069C  30E0               	movlw	224
  4513  069D  00F1               	movwf	Load@address
  4514  069E  3007               	movlw	7
  4515  069F  00F2               	movwf	Load@address+1
  4516  06A0  30A0               	movlw	_hitlist& (0+255)
  4517  06A1  00F7               	movwf	??_LoadFromFlash
  4518  06A2  0877               	movf	??_LoadFromFlash,w
  4519  06A3  00F3               	movwf	Load@ptr
  4520  06A4  3010               	movlw	16
  4521  06A5  00F8               	movwf	??_LoadFromFlash+1
  4522  06A6  0878               	movf	??_LoadFromFlash+1,w
  4523  06A7  00F4               	movwf	Load@data_length
  4524  06A8  2780               	fcall	_Load
  4525  06A9  0008               	return
  4526  06AA                     __end_of_LoadFromFlash:	
  4527                           
  4528                           	psect	text23
  4529  06AA                     __ptext23:	
  4530 ;; *************** function _Save *****************
  4531 ;; Defined at:
  4532 ;;		line 195 in file "user.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  address         2    1[COMMON] unsigned int 
  4535 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4536 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4537 ;;  data_length     1    4[COMMON] unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               1    6[COMMON] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;		None               void
  4542 ;; Registers used:
  4543 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4549 ;;      Params:         4       0       0       0
  4550 ;;      Locals:         1       0       0       0
  4551 ;;      Temps:          1       0       0       0
  4552 ;;      Totals:         6       0       0       0
  4553 ;;Total ram usage:        6 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    1
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_LoadFromFlash
  4560 ;;		_hit_by
  4561 ;;		_control_transfer
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           
  4566                           ;psect for function _Save
  4567  06AA                     _Save:	
  4568                           
  4569                           ;user.c: 197: INTCONbits.GIE = 0;
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4573  06AA  138B               	bcf	11,7	;volatile
  4574                           
  4575                           ;user.c: 198: PMADR = address;
  4576  06AB  0872               	movf	Save@address+1,w
  4577  06AC  0023               	movlb	3	; select bank3
  4578  06AD  0192               	clrf	18	;volatile
  4579  06AE  0792               	addwf	18,f	;volatile
  4580  06AF  0871               	movf	Save@address,w
  4581  06B0  0191               	clrf	17	;volatile
  4582  06B1  0791               	addwf	17,f	;volatile
  4583                           
  4584                           ;user.c: 199: PMCON1bits.CFGS = 0;
  4585  06B2  1315               	bcf	21,6	;volatile
  4586                           
  4587                           ;user.c: 200: PMCON1bits.FREE = 1;
  4588  06B3  1615               	bsf	21,4	;volatile
  4589                           
  4590                           ;user.c: 201: PMCON1bits.WREN = 1;
  4591  06B4  1515               	bsf	21,2	;volatile
  4592                           
  4593                           ;user.c: 202: PMCON2 = 0x55;
  4594  06B5  3055               	movlw	85
  4595  06B6  0096               	movwf	22	;volatile
  4596                           
  4597                           ;user.c: 203: PMCON2 = 0xAA;
  4598  06B7  30AA               	movlw	170
  4599  06B8  0096               	movwf	22	;volatile
  4600                           
  4601                           ;user.c: 204: PMCON1bits.WR = 1;
  4602  06B9  1495               	bsf	21,1	;volatile
  4603                           
  4604                           ;user.c: 205: __nop();
  4605  06BA  0000               	nop
  4606                           
  4607                           ;user.c: 206: __nop();
  4608  06BB  0000               	nop
  4609                           
  4610                           ;user.c: 207: PMCON1bits.WREN = 0;
  4611  06BC  0023               	movlb	3	; select bank3
  4612  06BD  1115               	bcf	21,2	;volatile
  4613                           
  4614                           ;user.c: 209: PMADR = address;
  4615  06BE  0872               	movf	Save@address+1,w
  4616  06BF  0192               	clrf	18	;volatile
  4617  06C0  0792               	addwf	18,f	;volatile
  4618  06C1  0871               	movf	Save@address,w
  4619  06C2  0191               	clrf	17	;volatile
  4620  06C3  0791               	addwf	17,f	;volatile
  4621                           
  4622                           ;user.c: 210: PMCON1bits.CFGS = 0;
  4623  06C4  1315               	bcf	21,6	;volatile
  4624                           
  4625                           ;user.c: 211: PMCON1bits.FREE = 0;
  4626  06C5  1215               	bcf	21,4	;volatile
  4627                           
  4628                           ;user.c: 212: PMCON1bits.WREN = 1;
  4629  06C6  1515               	bsf	21,2	;volatile
  4630                           
  4631                           ;user.c: 213: PMCON1bits.LWLO = 1;
  4632  06C7  1695               	bsf	21,5	;volatile
  4633                           
  4634                           ;user.c: 215: for (uint8_t i=1; i<=data_length; i++){
  4635  06C8  01F6               	clrf	Save@i
  4636  06C9  0AF6               	incf	Save@i,f
  4637  06CA                     l178:	
  4638  06CA  0876               	movf	Save@i,w
  4639  06CB  0274               	subwf	Save@data_length,w
  4640  06CC  1C03               	btfss	3,0
  4641  06CD  2EEE               	goto	l181
  4642                           
  4643                           ;user.c: 216: PMDAT = *ptr++;
  4644  06CE  0873               	movf	Save@ptr,w
  4645  06CF  0086               	movwf	6
  4646  06D0  0187               	clrf	7
  4647  06D1  3F40               	moviw [0]fsr1
  4648  06D2  0093               	movwf	19	;volatile
  4649  06D3  3F41               	moviw [1]fsr1
  4650  06D4  0094               	movwf	20	;volatile
  4651  06D5  3002               	movlw	2
  4652  06D6  00F5               	movwf	??_Save
  4653  06D7  0875               	movf	??_Save,w
  4654  06D8  07F3               	addwf	Save@ptr,f
  4655                           
  4656                           ;user.c: 217: if(i == data_length) PMCON1bits.LWLO = 0;
  4657  06D9  0876               	movf	Save@i,w
  4658  06DA  0674               	xorwf	Save@data_length,w
  4659  06DB  1903               	btfsc	3,2
  4660  06DC  1295               	bcf	21,5	;volatile
  4661                           
  4662                           ;user.c: 218: PMCON2 = 0x55;
  4663  06DD  3055               	movlw	85
  4664  06DE  0096               	movwf	22	;volatile
  4665                           
  4666                           ;user.c: 219: PMCON2 = 0xAA;
  4667  06DF  30AA               	movlw	170
  4668  06E0  0096               	movwf	22	;volatile
  4669                           
  4670                           ;user.c: 220: PMCON1bits.WR = 1;
  4671  06E1  1495               	bsf	21,1	;volatile
  4672                           
  4673                           ;user.c: 221: __nop();
  4674  06E2  0000               	nop
  4675                           
  4676                           ;user.c: 222: __nop();
  4677  06E3  0000               	nop
  4678                           
  4679                           ;user.c: 223: PMADRL++;
  4680  06E4  3001               	movlw	1
  4681  06E5  00F5               	movwf	??_Save
  4682  06E6  0875               	movf	??_Save,w
  4683  06E7  0023               	movlb	3	; select bank3
  4684  06E8  0791               	addwf	17,f	;volatile
  4685  06E9  3001               	movlw	1
  4686  06EA  00F5               	movwf	??_Save
  4687  06EB  0875               	movf	??_Save,w
  4688  06EC  07F6               	addwf	Save@i,f
  4689  06ED  2ECA               	goto	l178
  4690  06EE                     l181:	
  4691                           
  4692                           ;user.c: 224: }
  4693                           ;user.c: 225: PMCON1bits.WREN = 0;
  4694  06EE  1115               	bcf	21,2	;volatile
  4695                           
  4696                           ;user.c: 226: INTCONbits.GIE = 1;
  4697  06EF  178B               	bsf	11,7	;volatile
  4698  06F0  0008               	return
  4699  06F1                     __end_of_Save:	
  4700                           
  4701                           	psect	text24
  4702  0780                     __ptext24:	
  4703 ;; *************** function _Load *****************
  4704 ;; Defined at:
  4705 ;;		line 183 in file "user.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  address         2    1[COMMON] unsigned int 
  4708 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4709 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4710 ;;  data_length     1    4[COMMON] unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  i               1    6[COMMON] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;		None               void
  4715 ;; Registers used:
  4716 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4722 ;;      Params:         4       0       0       0
  4723 ;;      Locals:         1       0       0       0
  4724 ;;      Temps:          1       0       0       0
  4725 ;;      Totals:         6       0       0       0
  4726 ;;Total ram usage:        6 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    1
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_LoadFromFlash
  4733 ;;		_control_transfer
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _Load
  4739  0780                     _Load:	
  4740                           
  4741                           ;user.c: 184: PMCON1bits.CFGS = 0;
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4745  0780  0023               	movlb	3	; select bank3
  4746  0781  1315               	bcf	21,6	;volatile
  4747                           
  4748                           ;user.c: 185: PMADR = address;
  4749  0782  0872               	movf	Load@address+1,w
  4750  0783  0192               	clrf	18	;volatile
  4751  0784  0792               	addwf	18,f	;volatile
  4752  0785  0871               	movf	Load@address,w
  4753  0786  0191               	clrf	17	;volatile
  4754  0787  0791               	addwf	17,f	;volatile
  4755                           
  4756                           ;user.c: 186: for (uint8_t i=0; i<data_length; i++){
  4757  0788  01F6               	clrf	Load@i
  4758  0789                     l1779:	
  4759  0789  0874               	movf	Load@data_length,w
  4760  078A  0276               	subwf	Load@i,w
  4761  078B  1803               	btfsc	3,0
  4762  078C  0008               	return
  4763                           
  4764                           ;user.c: 187: PMCON1bits.RD = 1;
  4765  078D  1415               	bsf	21,0	;volatile
  4766                           
  4767                           ;user.c: 188: __nop();
  4768  078E  0000               	nop
  4769                           
  4770                           ;user.c: 189: __nop();
  4771  078F  0000               	nop
  4772                           
  4773                           ;user.c: 190: *ptr++ = PMDAT;
  4774  0790  0873               	movf	Load@ptr,w
  4775  0791  0086               	movwf	6
  4776  0792  0187               	clrf	7
  4777  0793  0023               	movlb	3	; select bank3
  4778  0794  0813               	movf	19,w	;volatile
  4779  0795  3FC0               	movwi [0]fsr1
  4780  0796  0814               	movf	20,w	;volatile
  4781  0797  3FC1               	movwi [1]fsr1
  4782  0798  3002               	movlw	2
  4783  0799  00F5               	movwf	??_Load
  4784  079A  0875               	movf	??_Load,w
  4785  079B  07F3               	addwf	Load@ptr,f
  4786                           
  4787                           ;user.c: 191: PMADR ++;
  4788  079C  3001               	movlw	1
  4789  079D  0791               	addwf	17,f	;volatile
  4790  079E  3000               	movlw	0
  4791  079F  3D92               	addwfc	18,f	;volatile
  4792  07A0  3001               	movlw	1
  4793  07A1  00F5               	movwf	??_Load
  4794  07A2  0875               	movf	??_Load,w
  4795  07A3  07F6               	addwf	Load@i,f
  4796  07A4  2F89               	goto	l1779
  4797  07A5                     __end_of_Load:	
  4798                           
  4799                           	psect	intentry
  4800  0004                     __pintentry:	
  4801 ;; *************** function _High_Priority_Interrupt *****************
  4802 ;; Defined at:
  4803 ;;		line 292 in file "user.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4817 ;;      Params:         0       0       0       0
  4818 ;;      Locals:         0       0       0       0
  4819 ;;      Temps:          1       0       0       0
  4820 ;;      Totals:         1       0       0       0
  4821 ;;Total ram usage:        1 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		Interrupt level 1
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830  0004                     _High_Priority_Interrupt:	
  4831                           
  4832                           ;incstack = 0
  4833                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4834  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4835  0005  3180               	pagesel	$
  4836  0006  0020               	movlb	0	; select bank0
  4837  0007  087F               	movf	127,w
  4838  0008  00F0               	movwf	??_High_Priority_Interrupt
  4839  0009  0022               	banksel	280	;# 
  4840  000A  0818               	movf	24,w	;# 
  4841  000B  3A20               	xorlw	32	;# 
  4842  000C  0098               	movwf	24	;# 
  4843                           
  4844                           ;user.c: 298: TMR0 -= 50;
  4845  000D  3032               	movlw	50
  4846  000E  0020               	movlb	0	; select bank0
  4847  000F  0295               	subwf	21,f	;volatile
  4848                           
  4849                           ;user.c: 299: INTCONbits.TMR0IF = 0;
  4850  0010  110B               	bcf	11,2	;volatile
  4851  0011  0870               	movf	??_High_Priority_Interrupt,w
  4852  0012  00FF               	movwf	127
  4853  0013  107E               	bcf	126,0	;clear compiler interrupt flag
  4854  0014  0009               	retfie
  4855  0015                     __end_of_High_Priority_Interrupt:	
  4856  007E                     btemp	set	126	;btemp
  4857  007E                     pic14e$flags	set	126
  4858  007E                     wtemp	set	126
  4859  007E                     wtemp0	set	126
  4860  0080                     wtemp1	set	128
  4861  0082                     wtemp2	set	130
  4862  0084                     wtemp3	set	132
  4863  0086                     wtemp4	set	134
  4864  0088                     wtemp5	set	136
  4865  007F                     wtemp6	set	127
  4866  007E                     ttemp	set	126
  4867  007E                     ttemp0	set	126
  4868  0081                     ttemp1	set	129
  4869  0084                     ttemp2	set	132
  4870  0087                     ttemp3	set	135
  4871  007F                     ttemp4	set	127
  4872  007E                     ltemp	set	126
  4873  007E                     ltemp0	set	126
  4874  0082                     ltemp1	set	130
  4875  0086                     ltemp2	set	134
  4876  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     59      77
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(COMMON[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _handle_music->_tone
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_Send_Byte
    _Send_Byte->_cheat
    _cheat->_tone
    _Setup->_delay_1_ms
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer
    _control_transfer->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35421
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   21107
                                             56 BANK0      3     3      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   12778
                                             49 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0   10035
                                             44 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                         _delay_1_ms
                       _handle_music
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    8140
                                              2 BANK0     42    42      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             0     0      0    1281
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             0     0      0    1281
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     687
                                             11 COMMON     1     1      0
                                              0 BANK0      2     2      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0     913
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    2022
                                              0 BANK0      4     4      0
                           _ADC_read
                          _Send_Byte
                              _cheat
                       _green_led_on
                          _play_song
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6     936
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _green_led_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            3     3      0     594
                                              8 COMMON     3     3      0
                              _cheat
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (5) _cheat                                                3     3      0     396
                                              5 COMMON     3     3      0
                         _delay_1_ms
                         _red_led_on
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0      68
                                              3 COMMON     1     1      0
                         _delay_1_ms
 ---------------------------------------------------------------------------------
 (2) _delay_1_ms                                           2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    1997
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1111
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4     886
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _High_Priority_Interrupt                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
     _delay_1_ms
   _handle_fire
     _ADC_read
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _cheat
       _delay_1_ms
       _red_led_on
       _tone
     _green_led_on
     _play_song
     _stop_song
   _handle_music
     _stop_song
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _delay_1_ms
       _handle_music
         _stop_song
         _tone
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _cheat
                   _delay_1_ms
                   _red_led_on
                   _tone
                 _delay_1_ms
             _Send_Byte
               _cheat
                 _delay_1_ms
                 _red_led_on
                 _tone
               _delay_1_ms
           _Save
           _play_song
         _delay_1_ms
         _handle_music
           _stop_song
           _tone
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _cheat
         _delay_1_ms
         _red_led_on
         _tone
       _delay_1_ms
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _cheat
               _delay_1_ms
               _red_led_on
               _tone
             _delay_1_ms
         _Send_Byte
           _cheat
             _delay_1_ms
             _red_led_on
             _tone
           _delay_1_ms
       _Save
       _play_song
     _delay_1_ms
     _handle_music
       _stop_song
       _tone
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      8C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3B      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      8C      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Aug 23 01:56:51 2014

                     __CFG_CP$OFF 0000                                l26 04CE                                __i 005B  
                              __x 007C                                __y 006C                     _LoadFromFlash 0656  
                             l200 03C4                               l201 036D                               l131 04A7  
                             l206 03C2                               l160 0712                               l163 071B  
                             l181 06EE                               l159 06FD                               l407 0341  
                             l185 044D                               l178 06CA                               l187 0461  
                             l287 0472                      __CFG_BORV$LO 0000                               wreg 0009  
                 _super_dead_mode 0558                      __CFG_LVP$OFF 0000                              l3021 059A  
                            l3007 0572                       Load@address 0071                              l3025 055B  
                            l3043 0412                              l3205 03D0                              l3133 05BD  
                            l3063 0436                              l3055 042B                              l2281 062C  
                            l3081 041C                              l3243 02DE                              l3067 043F  
                            l2373 069C                              l3181 0375                              l3173 0356  
                            l2287 0651                              l3185 0386                              l2641 0731  
                            l2563 0458                              l3195 03B9                              l2715 00AB  
                            l3189 0399                              l2901 0244                              l2645 0733  
                            l1779 0789                              l1859 0481                              l2923 027A  
                            l2851 01D9                              l2597 0707                              l2861 01ED  
                            l2951 02BA                              l2687 0074                              l2961 02EB  
                            l2953 02C9                              l2859 01EB                              l2779 013F  
                            l2957 02D8                              l2959 02E6                              l2991 032E  
                            u3145 0495                              u3225 003E                              u4115 0582  
                            u4125 05AA                              u4055 0301                              u3415 00C1  
                            u3335 008A                              u4305 0353                              u4315 0360  
                            u2715 0643                              u3515 0107                              u4325 036B  
                            u3605 0155                              u3285 0066                              u4245 05CF  
                            u2825 066A                              u2745 04AE                              u4345 037F  
                            u3705 01A3                              u3465 00E4                              u4365 0397  
                            u3805 0203                              u3655 017C                              u4295 05F5  
                            u3915 025A                              u3855 022A                              u3975 0290  
            control_transfer@data 0024                              _TMR0 0015                              _TMR1 0016  
                            _TMR2 001A              control_transfer@page 0049              control_transfer@dptr 0047  
                            _Load 0780                      __CFG_WRT$OFF 0000                              _Save 06AA  
                            _main 04C6                     Send_Byte@data 0078                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            _tone 07C9                              indf1 0001                              fsr1l 0006  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0015                              ttemp 007E                              wtemp 007E  
                __end_of_ADC_read 04B7                 ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000  
             hit_by@respawn_timer 0054                    ?_LoadFromFlash 0070                             ?_Load 0071  
                           ?_Save 0071                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0071  
                           _PMADR 0191                             _PMDAT 0193                             _RCREG 0199  
                __end_of_SEND_EOF 04E6                  __end_of_SEND_SOF 04DA                             Load@i 0076  
                           _TXREG 019A                             Save@i 0076                       hit_by@i_747 0057  
                           _Setup 0756                             _cheat 044D                     ?_green_led_on 0070  
                 add_to_hitlist@i 0078                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
        __end_of_control_transfer 0342                        Send_Byte@i 0079                   __initialization 0016  
                    __end_of_Load 07A5                      __end_of_Save 06F1                      __end_of_main 04D2  
                    __end_of_tone 07E0                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 05AE                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 0756                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070                    ??_green_led_on 0071                            ?_cheat 0070  
            __size_of_handle_fire 0094                            _ADCON1 009E                            _ANSELA 018C  
                          _PMADRL 0191                            _PMCON2 0196                            _OSCCON 0099  
                          _PWM3DC 0DB3                            _PWM3PH 0DB1                            _SPBRGL 019B  
                          _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077  
              __size_of_Send_Byte 0034                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0020  
                          _config 00C0                            _hit_by 03D6                            cheat@i 0076  
                 play_song@length 0073                            _one_up 0546                   play_song@repeat 0076  
                     Save@address 0071                  _my_random_number 0069                         ?_ADC_read 0071  
         __end_of__initialization 0023           handle_serial@rx_counter 006A                         ?_SEND_EOF 0070  
                       ?_SEND_SOF 0070                    __pcstackCOMMON 0070                     __end_of_Setup 0780  
                   __end_of_cheat 046E           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004E                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0073                           ??_cheat 0075                   _GET_CHAR_HELPER 046E  
               __end_of_Send_Byte 0725           __size_of_add_to_hitlist 0054                        __pbssBANK0 005B  
                      __pbssBANK1 00A0             __end_of_handle_serial 0602                        _death_song 0500  
                      _delay_1_ms 04B7                        ??_SEND_EOF 007C                        ??_SEND_SOF 007C  
                      __pmaintext 04C6              __end_of_green_led_on 04F1                 _cur_song_duration 005F  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0558                           Load@ptr 0073  
              __size_of_stop_song 0006                           Save@ptr 0073                        cheat@i_724 0077  
                    _handle_music 0725                 ?_control_transfer 0070                ??_control_transfer 0022  
                 SEND_DATA_BYTE@b 007B         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0546  
                 __size_of_hit_by 0077                           __ptext1 05AE                           __ptext2 03D6  
                         __ptext3 0558                           __ptext4 0725                           __ptext5 0026  
                         __ptext6 04D2                           __ptext7 04E0                           __ptext8 048B  
                         __ptext9 046E                        _red_led_on 04F1                         _T1CONbits 0018  
         __end_of_GET_CHAR_HELPER 048B                           _hitlist 00A0                         _T2CONbits 001C  
                         clrloop0 04DB                 add_to_hitlist@gun 0075              end_of_initialization 0023  
                         hit_by@i 0056                 __end_of_play_song 07C9                       ?_delay_1_ms 0070  
                       _RCSTAbits 019D                      __pstringtext 0500                         _PORTAbits 000C  
               __end_of_stop_song 04EC                     ??_handle_fire 0020                  __CFG_FOSC$INTOSC 0000  
                       _TRISAbits 008C                       _DACCON0bits 0118                    _add_to_hitlist 0602  
               __size_of_ADC_read 0012                         _TXSTAbits 019E               control_transfer@cmd 0044  
           __size_of_green_led_on 0005                handle_fire@counter 0061                 __size_of_SEND_EOF 0006  
               __size_of_SEND_SOF 0008             __end_of_LoadFromFlash 06AA                       _BAUDCONbits 019F  
                  __end_of_hit_by 044D                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0552                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             __size_of_delay_1_ms 000F               start_initialization 0016            __end_of_add_to_hitlist 0656  
                    _green_led_on 04EC               __end_of_handle_fire 03D6                         _Send_Byte 06F1  
                   _PWM3LDCONbits 0DBF                  __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0067  
                        ??_hit_by 0051                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 001A  
                       __checksum 0065                  handle_fire@timer 0063          __size_of_super_dead_mode 0056  
                 Save@data_length 0074                         _dead_song 0552                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 005A                         _fire_song 0526  
          __size_of_handle_serial 0054         __size_of_control_transfer 031C                       _handle_fire 0342  
                        _ADC_read 04A5                    __size_of_Setup 002A                    __size_of_cheat 0021  
                    ??_delay_1_ms 0071                         clear_ram0 04DA                   Load@data_length 0074  
                       _play_song 07A5                          _PIR1bits 0011                          _SEND_EOF 04E0  
                        _SEND_SOF 04D2                        _ADCON0bits 009D                __end_of_death_song 0526  
              control_transfer@id 0046                __end_of_delay_1_ms 04C6                        tone@period 0071  
             add_to_hitlist@gun16 0076                         _stop_song 04E6                         hit_by@who 0053  
          super_dead_mode@counter 004F                       ??_Send_Byte 0078                     _handle_serial 05AE  
               ??_super_dead_mode 004C          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
                    ??_red_led_on 0071                        _ANSELAbits 018C                    _SEND_DATA_BYTE 048B  
                      ?_stop_song 0070                   _cur_song_length 0066     control_transfer@random_number 0045  
                        __ptext10 0602                          __ptext11 0342                          __ptext20 0756  
                        __ptext12 04E6                          __ptext21 04B7                          __ptext13 07A5  
                        __ptext22 0656                          __ptext14 04EC                          __ptext23 06AA  
                        __ptext15 06F1                          __ptext24 0780                          __ptext16 044D  
                        __ptext17 07C9                          __ptext18 04F1                          __ptext19 04A5  
                 _cur_song_repeat 0068                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 005D                     __size_of_Save 0047                     __size_of_main 000C  
                     delay_1_ms@i 0071                     __size_of_tone 0017                __end_of_red_led_on 04F6  
               control_transfer@i 0048                 control_transfer@x 004B            play_song@note_duration 0074  
                ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 04A5                  _control_transfer 0026  
                      _INTCONbits 000B                       _PWM3CONbits 0DBB                       pic14e$flags 007E  
                        intlevel1 0000          __size_of_GET_CHAR_HELPER 001D   __end_of_High_Priority_Interrupt 0015  
                    handle_fire@a 0022            __size_of_LoadFromFlash 0054                        _PMCON1bits 0195  
               __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070                       ??_play_song 0077  
                 ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070                       ??_stop_song 0071  
                 ??_handle_serial 0058                handle_serial@rx_id 006B                    ??_handle_music 0075  
