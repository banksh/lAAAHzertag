

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Aug 20 01:50:03 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  008C                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009A                     	;# 
    75  009B                     	;# 
    76  009B                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  0111                     	;# 
    83  0112                     	;# 
    84  0115                     	;# 
    85  0116                     	;# 
    86  0117                     	;# 
    87  0118                     	;# 
    88  0119                     	;# 
    89  011D                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  0191                     	;# 
    93  0191                     	;# 
    94  0192                     	;# 
    95  0193                     	;# 
    96  0193                     	;# 
    97  0194                     	;# 
    98  0195                     	;# 
    99  0196                     	;# 
   100  0197                     	;# 
   101  0199                     	;# 
   102  019A                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019C                     	;# 
   106  019D                     	;# 
   107  019E                     	;# 
   108  019F                     	;# 
   109  020C                     	;# 
   110  028C                     	;# 
   111  030C                     	;# 
   112  038C                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0691                     	;# 
   117  0692                     	;# 
   118  0693                     	;# 
   119  0694                     	;# 
   120  0695                     	;# 
   121  0D8E                     	;# 
   122  0D8F                     	;# 
   123  0D90                     	;# 
   124  0D91                     	;# 
   125  0D91                     	;# 
   126  0D92                     	;# 
   127  0D93                     	;# 
   128  0D93                     	;# 
   129  0D94                     	;# 
   130  0D95                     	;# 
   131  0D95                     	;# 
   132  0D96                     	;# 
   133  0D97                     	;# 
   134  0D97                     	;# 
   135  0D98                     	;# 
   136  0D99                     	;# 
   137  0D99                     	;# 
   138  0D9A                     	;# 
   139  0D9B                     	;# 
   140  0D9C                     	;# 
   141  0D9C                     	;# 
   142  0D9D                     	;# 
   143  0D9D                     	;# 
   144  0D9E                     	;# 
   145  0D9F                     	;# 
   146  0DA0                     	;# 
   147  0DA1                     	;# 
   148  0DA1                     	;# 
   149  0DA2                     	;# 
   150  0DA3                     	;# 
   151  0DA3                     	;# 
   152  0DA4                     	;# 
   153  0DA5                     	;# 
   154  0DA5                     	;# 
   155  0DA6                     	;# 
   156  0DA7                     	;# 
   157  0DA7                     	;# 
   158  0DA8                     	;# 
   159  0DA9                     	;# 
   160  0DA9                     	;# 
   161  0DAA                     	;# 
   162  0DAB                     	;# 
   163  0DAC                     	;# 
   164  0DAC                     	;# 
   165  0DAD                     	;# 
   166  0DAD                     	;# 
   167  0DAE                     	;# 
   168  0DAF                     	;# 
   169  0DB0                     	;# 
   170  0DB1                     	;# 
   171  0DB1                     	;# 
   172  0DB2                     	;# 
   173  0DB3                     	;# 
   174  0DB3                     	;# 
   175  0DB4                     	;# 
   176  0DB5                     	;# 
   177  0DB5                     	;# 
   178  0DB6                     	;# 
   179  0DB7                     	;# 
   180  0DB7                     	;# 
   181  0DB8                     	;# 
   182  0DB9                     	;# 
   183  0DB9                     	;# 
   184  0DBA                     	;# 
   185  0DBB                     	;# 
   186  0DBC                     	;# 
   187  0DBC                     	;# 
   188  0DBD                     	;# 
   189  0DBD                     	;# 
   190  0DBE                     	;# 
   191  0DBF                     	;# 
   192  0DC0                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEE                     	;# 
   206  0FEF                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0013                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  008C                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  0197                     	;# 
   268  0199                     	;# 
   269  019A                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  028C                     	;# 
   278  030C                     	;# 
   279  038C                     	;# 
   280  0391                     	;# 
   281  0392                     	;# 
   282  0393                     	;# 
   283  0691                     	;# 
   284  0692                     	;# 
   285  0693                     	;# 
   286  0694                     	;# 
   287  0695                     	;# 
   288  0D8E                     	;# 
   289  0D8F                     	;# 
   290  0D90                     	;# 
   291  0D91                     	;# 
   292  0D91                     	;# 
   293  0D92                     	;# 
   294  0D93                     	;# 
   295  0D93                     	;# 
   296  0D94                     	;# 
   297  0D95                     	;# 
   298  0D95                     	;# 
   299  0D96                     	;# 
   300  0D97                     	;# 
   301  0D97                     	;# 
   302  0D98                     	;# 
   303  0D99                     	;# 
   304  0D99                     	;# 
   305  0D9A                     	;# 
   306  0D9B                     	;# 
   307  0D9C                     	;# 
   308  0D9C                     	;# 
   309  0D9D                     	;# 
   310  0D9D                     	;# 
   311  0D9E                     	;# 
   312  0D9F                     	;# 
   313  0DA0                     	;# 
   314  0DA1                     	;# 
   315  0DA1                     	;# 
   316  0DA2                     	;# 
   317  0DA3                     	;# 
   318  0DA3                     	;# 
   319  0DA4                     	;# 
   320  0DA5                     	;# 
   321  0DA5                     	;# 
   322  0DA6                     	;# 
   323  0DA7                     	;# 
   324  0DA7                     	;# 
   325  0DA8                     	;# 
   326  0DA9                     	;# 
   327  0DA9                     	;# 
   328  0DAA                     	;# 
   329  0DAB                     	;# 
   330  0DAC                     	;# 
   331  0DAC                     	;# 
   332  0DAD                     	;# 
   333  0DAD                     	;# 
   334  0DAE                     	;# 
   335  0DAF                     	;# 
   336  0DB0                     	;# 
   337  0DB1                     	;# 
   338  0DB1                     	;# 
   339  0DB2                     	;# 
   340  0DB3                     	;# 
   341  0DB3                     	;# 
   342  0DB4                     	;# 
   343  0DB5                     	;# 
   344  0DB5                     	;# 
   345  0DB6                     	;# 
   346  0DB7                     	;# 
   347  0DB7                     	;# 
   348  0DB8                     	;# 
   349  0DB9                     	;# 
   350  0DB9                     	;# 
   351  0DBA                     	;# 
   352  0DBB                     	;# 
   353  0DBC                     	;# 
   354  0DBC                     	;# 
   355  0DBD                     	;# 
   356  0DBD                     	;# 
   357  0DBE                     	;# 
   358  0DBF                     	;# 
   359  0DC0                     	;# 
   360  0FE4                     	;# 
   361  0FE5                     	;# 
   362  0FE6                     	;# 
   363  0FE7                     	;# 
   364  0FE8                     	;# 
   365  0FE8                     	;# 
   366  0FE9                     	;# 
   367  0FEA                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0013                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  008C                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  009F                     	;# 
   415  010C                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0115                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  0118                     	;# 
   422  0119                     	;# 
   423  011D                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019C                     	;# 
   440  019D                     	;# 
   441  019E                     	;# 
   442  019F                     	;# 
   443  020C                     	;# 
   444  028C                     	;# 
   445  030C                     	;# 
   446  038C                     	;# 
   447  0391                     	;# 
   448  0392                     	;# 
   449  0393                     	;# 
   450  0691                     	;# 
   451  0692                     	;# 
   452  0693                     	;# 
   453  0694                     	;# 
   454  0695                     	;# 
   455  0D8E                     	;# 
   456  0D8F                     	;# 
   457  0D90                     	;# 
   458  0D91                     	;# 
   459  0D91                     	;# 
   460  0D92                     	;# 
   461  0D93                     	;# 
   462  0D93                     	;# 
   463  0D94                     	;# 
   464  0D95                     	;# 
   465  0D95                     	;# 
   466  0D96                     	;# 
   467  0D97                     	;# 
   468  0D97                     	;# 
   469  0D98                     	;# 
   470  0D99                     	;# 
   471  0D99                     	;# 
   472  0D9A                     	;# 
   473  0D9B                     	;# 
   474  0D9C                     	;# 
   475  0D9C                     	;# 
   476  0D9D                     	;# 
   477  0D9D                     	;# 
   478  0D9E                     	;# 
   479  0D9F                     	;# 
   480  0DA0                     	;# 
   481  0DA1                     	;# 
   482  0DA1                     	;# 
   483  0DA2                     	;# 
   484  0DA3                     	;# 
   485  0DA3                     	;# 
   486  0DA4                     	;# 
   487  0DA5                     	;# 
   488  0DA5                     	;# 
   489  0DA6                     	;# 
   490  0DA7                     	;# 
   491  0DA7                     	;# 
   492  0DA8                     	;# 
   493  0DA9                     	;# 
   494  0DA9                     	;# 
   495  0DAA                     	;# 
   496  0DAB                     	;# 
   497  0DAC                     	;# 
   498  0DAC                     	;# 
   499  0DAD                     	;# 
   500  0DAD                     	;# 
   501  0DAE                     	;# 
   502  0DAF                     	;# 
   503  0DB0                     	;# 
   504  0DB1                     	;# 
   505  0DB1                     	;# 
   506  0DB2                     	;# 
   507  0DB3                     	;# 
   508  0DB3                     	;# 
   509  0DB4                     	;# 
   510  0DB5                     	;# 
   511  0DB5                     	;# 
   512  0DB6                     	;# 
   513  0DB7                     	;# 
   514  0DB7                     	;# 
   515  0DB8                     	;# 
   516  0DB9                     	;# 
   517  0DB9                     	;# 
   518  0DBA                     	;# 
   519  0DBB                     	;# 
   520  0DBC                     	;# 
   521  0DBC                     	;# 
   522  0DBD                     	;# 
   523  0DBD                     	;# 
   524  0DBE                     	;# 
   525  0DBF                     	;# 
   526  0DC0                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541                           
   542                           	psect	stringtext
   543  0600                     __pstringtext:	
   544  0600                     _death_song:	
   545  0600  3462               	retlw	98
   546  0601  34F0               	retlw	240
   547  0602  3400               	retlw	0
   548  0603  34FA               	retlw	250
   549  0604  3400               	retlw	0
   550  0605  3400               	retlw	0
   551  0606  3400               	retlw	0
   552  0607  3400               	retlw	0
   553  0608  3400               	retlw	0
   554  0609  3400               	retlw	0
   555  060A  3400               	retlw	0
   556  060B  3400               	retlw	0
   557  060C  346F               	retlw	111
   558  060D  3477               	retlw	119
   559  060E  347A               	retlw	122
   560  060F  3459               	retlw	89
   561  0610  3400               	retlw	0
   562  0611  3400               	retlw	0
   563  0612  34CC               	retlw	204
   564  0613  345E               	retlw	94
   565  0614  347A               	retlw	122
   566  0615  3459               	retlw	89
   567  0616  34CC               	retlw	204
   568  0617  345E               	retlw	94
   569  0618  3400               	retlw	0
   570  0619  3400               	retlw	0
   571  061A  346B               	retlw	107
   572  061B  346A               	retlw	106
   573  061C  346F               	retlw	111
   574  061D  3477               	retlw	119
   575  061E  3470               	retlw	112
   576  061F  349F               	retlw	159
   577  0620  3400               	retlw	0
   578  0621  3400               	retlw	0
   579  0622  3470               	retlw	112
   580  0623  349F               	retlw	159
   581  0624  34EA               	retlw	234
   582  0625  34EE               	retlw	238
   583  0626                     __end_of_death_song:	
   584  0626                     _fire_song:	
   585  0626  34A0               	retlw	160
   586  0627  340F               	retlw	15
   587  0628  34DB               	retlw	219
   588  0629  3411               	retlw	17
   589  062A  34D5               	retlw	213
   590  062B  3414               	retlw	20
   591  062C  3400               	retlw	0
   592  062D  3419               	retlw	25
   593  062E  3440               	retlw	64
   594  062F  341F               	retlw	31
   595  0630  34AA               	retlw	170
   596  0631  3429               	retlw	41
   597  0632  3480               	retlw	128
   598  0633  343E               	retlw	62
   599  0634  3400               	retlw	0
   600  0635  347D               	retlw	125
   601  0636  34E3               	retlw	227
   602  0637  348A               	retlw	138
   603  0638  3440               	retlw	64
   604  0639  349C               	retlw	156
   605  063A  3492               	retlw	146
   606  063B  34B2               	retlw	178
   607  063C  3455               	retlw	85
   608  063D  34D0               	retlw	208
   609  063E  3400               	retlw	0
   610  063F  34FA               	retlw	250
   611  0640  3400               	retlw	0
   612  0641  3400               	retlw	0
   613  0642  3400               	retlw	0
   614  0643  3400               	retlw	0
   615  0644  3400               	retlw	0
   616  0645  3400               	retlw	0
   617  0646                     __end_of_fire_song:	
   618  0646                     _one_up:	
   619  0646  34CC               	retlw	204
   620  0647  345E               	retlw	94
   621  0648  34B8               	retlw	184
   622  0649  344F               	retlw	79
   623  064A  3467               	retlw	103
   624  064B  342F               	retlw	47
   625  064C  34B9               	retlw	185
   626  064D  343B               	retlw	59
   627  064E  3434               	retlw	52
   628  064F  3435               	retlw	53
   629  0650  34DC               	retlw	220
   630  0651  3427               	retlw	39
   631  0652                     __end_of_one_up:	
   632  0652                     _dead_song:	
   633  0652  3470               	retlw	112
   634  0653  349F               	retlw	159
   635  0654  34EA               	retlw	234
   636  0655  34EE               	retlw	238
   637  0656  34EA               	retlw	234
   638  0657  34EE               	retlw	238
   639  0658                     __end_of_dead_song:	
   640  0016                     _TMR1	set	22
   641  000B                     _INTCONbits	set	11
   642  0011                     _PIR1bits	set	17
   643  000C                     _PORTAbits	set	12
   644  0018                     _T1CONbits	set	24
   645  001C                     _T2CONbits	set	28
   646  0015                     _TMR0	set	21
   647  001A                     _TMR2	set	26
   648  009B                     _ADRES	set	155
   649  009D                     _ADCON0bits	set	157
   650  009E                     _ADCON1	set	158
   651  0095                     _OPTION_REGbits	set	149
   652  0099                     _OSCCON	set	153
   653  0091                     _PIE1bits	set	145
   654  008C                     _TRISAbits	set	140
   655  0118                     _DACCON0bits	set	280
   656  0191                     _PMADR	set	401
   657  0193                     _PMDAT	set	403
   658  018C                     _ANSELA	set	396
   659  018C                     _ANSELAbits	set	396
   660  019F                     _BAUDCONbits	set	415
   661  0191                     _PMADRL	set	401
   662  0195                     _PMCON1bits	set	405
   663  0196                     _PMCON2	set	406
   664  0199                     _RCREG	set	409
   665  019D                     _RCSTAbits	set	413
   666  019B                     _SPBRGL	set	411
   667  019A                     _TXREG	set	410
   668  019E                     _TXSTAbits	set	414
   669  0DB3                     _PWM3DC	set	3507
   670  0DB1                     _PWM3PH	set	3505
   671  0DB5                     _PWM3PR	set	3509
   672  0DBB                     _PWM3CONbits	set	3515
   673  0DBF                     _PWM3LDCONbits	set	3519
   674                           
   675                           ; #config settings
   676  0000                     
   677                           	psect	cinit
   678  0018                     start_initialization:	
   679  0018                     __initialization:	
   680                           
   681                           ; Clear objects allocated to COMMON
   682  0018  01FC               	clrf	__pbssCOMMON& (0+127)
   683                           
   684                           ; Clear objects allocated to BANK0
   685  0019  3056               	movlw	low __pbssBANK0
   686  001A  0084               	movwf	4
   687  001B  3000               	movlw	high __pbssBANK0
   688  001C  0085               	movwf	5
   689  001D  3012               	movlw	18
   690  001E  25C5               	fcall	clear_ram0
   691                           
   692                           ; Clear objects allocated to BANK1
   693  001F  30A0               	movlw	low __pbssBANK1
   694  0020  0084               	movwf	4
   695  0021  3000               	movlw	high __pbssBANK1
   696  0022  0085               	movwf	5
   697  0023  3032               	movlw	50
   698  0024  25C5               	fcall	clear_ram0
   699  0025                     end_of_initialization:	
   700                           ;End of C runtime variable initialization code
   701                           
   702  0025                     __end_of__initialization:	
   703  0025  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   704  0026  0020               	movlb	0
   705  0027  2D9C               	ljmp	_main	;jump to C main() function
   706                           
   707                           	psect	bssCOMMON
   708  007C                     __pbssCOMMON:	
   709  007C                     _cur_song_ptr:	
   710  007C                     	ds	1
   711                           
   712                           	psect	bssBANK0
   713  0056                     __pbssBANK0:	
   714  0056                     __i:	
   715  0056                     	ds	2
   716  0058                     _cur_song:	
   717  0058                     	ds	2
   718  005A                     _cur_song_duration:	
   719  005A                     	ds	2
   720  005C                     handle_fire@counter:	
   721  005C                     	ds	2
   722  005E                     handle_fire@timer:	
   723  005E                     	ds	2
   724  0060                     __checksum:	
   725  0060                     	ds	1
   726  0061                     _cur_song_length:	
   727  0061                     	ds	1
   728  0062                     _cur_song_repeat:	
   729  0062                     	ds	1
   730  0063                     _my_random_number:	
   731  0063                     	ds	1
   732  0064                     handle_serial@rx_counter:	
   733  0064                     	ds	1
   734  0065                     handle_serial@rx_id:	
   735  0065                     	ds	1
   736  0066                     __x:	
   737  0066                     	ds	1
   738  0067                     __y:	
   739  0067                     	ds	1
   740                           
   741                           	psect	bssBANK1
   742  00A0                     __pbssBANK1:	
   743  00A0                     _hitlist:	
   744  00A0                     	ds	32
   745  00C0                     _config:	
   746  00C0                     	ds	18
   747                           
   748                           	psect	clrtext
   749  05C5                     clear_ram0:	
   750                           ;	Called with FSR0 containing the base address, and
   751                           ;	WREG with the size to clear
   752                           
   753  05C5  0064               	clrwdt	;clear the watchdog before getting into this loop
   754  05C6                     clrloop0:	
   755  05C6  0180               	clrf	0	;clear RAM location pointed to by FSR
   756  05C7  3101               	addfsr 0,1
   757  05C8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   758  05C9  2DC6               	goto	clrloop0	;have we reached the end yet?
   759  05CA  3400               	retlw	0	;all done for this memory range, return
   760                           
   761                           	psect	cstackCOMMON
   762  0070                     __pcstackCOMMON:	
   763  0070                     ?_Setup:	
   764  0070                     ?_super_dead_mode:	
   765                           ; 0 bytes @ 0x0
   766                           
   767  0070                     ?_handle_music:	
   768                           ; 0 bytes @ 0x0
   769                           
   770  0070                     ?_tone_off:	
   771                           ; 0 bytes @ 0x0
   772                           
   773  0070                     ?_Modulate_Serial:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0070                     ?_Disable_Modulation:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0070                     ?_control_transfer:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0070                     ?_LoadFromFlash:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0070                     ?_main:	
   786                           ; 0 bytes @ 0x0
   787                           
   788  0070                     ?_red_led_on:	
   789                           ; 0 bytes @ 0x0
   790                           
   791  0070                     ?_led_off:	
   792                           ; 0 bytes @ 0x0
   793                           
   794  0070                     ?_stop_song:	
   795                           ; 0 bytes @ 0x0
   796                           
   797  0070                     ?_Send_Byte:	
   798                           ; 0 bytes @ 0x0
   799                           
   800  0070                     ?_High_Priority_Interrupt:	
   801                           ; 0 bytes @ 0x0
   802                           
   803  0070                     ??_High_Priority_Interrupt:	
   804                           ; 0 bytes @ 0x0
   805                           
   806  0070                     ?_add_to_hitlist:	
   807                           ; 0 bytes @ 0x0
   808                           
   809  0070                     ?_hit_by:	
   810                           ; 0 bytes @ 0x0
   811                           
   812  0070                     ?_SEND_DATA_BYTE:	
   813                           ; 0 bytes @ 0x0
   814                           
   815  0070                     ?_SEND_SOF:	
   816                           ; 0 bytes @ 0x0
   817                           
   818  0070                     ?_SEND_EOF:	
   819                           ; 0 bytes @ 0x0
   820                           
   821  0070                     ?_handle_serial:	
   822                           ; 0 bytes @ 0x0
   823                           
   824  0070                     ?_handle_fire:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_GET_CHAR_HELPER:	
   828                           ; 1 bytes @ 0x0
   829                           
   830                           
   831                           ; 1 bytes @ 0x0
   832  0070                     	ds	1
   833  0071                     ?_Load:	
   834  0071                     ?_Save:	
   835                           ; 0 bytes @ 0x1
   836                           
   837  0071                     ??_Setup:	
   838                           ; 0 bytes @ 0x1
   839                           
   840  0071                     ??_tone_off:	
   841                           ; 0 bytes @ 0x1
   842                           
   843  0071                     ?_tone:	
   844                           ; 0 bytes @ 0x1
   845                           
   846  0071                     ??_Modulate_Serial:	
   847                           ; 0 bytes @ 0x1
   848                           
   849  0071                     ??_Disable_Modulation:	
   850                           ; 0 bytes @ 0x1
   851                           
   852  0071                     ??_red_led_on:	
   853                           ; 0 bytes @ 0x1
   854                           
   855  0071                     ??_led_off:	
   856                           ; 0 bytes @ 0x1
   857                           
   858  0071                     ?_play_song:	
   859                           ; 0 bytes @ 0x1
   860                           
   861  0071                     ??_stop_song:	
   862                           ; 0 bytes @ 0x1
   863                           
   864  0071                     ??_Send_Byte:	
   865                           ; 0 bytes @ 0x1
   866                           
   867  0071                     ??_add_to_hitlist:	
   868                           ; 0 bytes @ 0x1
   869                           
   870  0071                     ??_GET_CHAR_HELPER:	
   871                           ; 0 bytes @ 0x1
   872                           
   873  0071                     ?_ADC_read:	
   874                           ; 0 bytes @ 0x1
   875                           
   876  0071                     Send_Byte@data:	
   877                           ; 2 bytes @ 0x1
   878                           
   879  0071                     play_song@song:	
   880                           ; 1 bytes @ 0x1
   881                           
   882  0071                     tone@period:	
   883                           ; 2 bytes @ 0x1
   884                           
   885  0071                     Load@address:	
   886                           ; 2 bytes @ 0x1
   887                           
   888  0071                     Save@address:	
   889                           ; 2 bytes @ 0x1
   890                           
   891                           
   892                           ; 2 bytes @ 0x1
   893  0071                     	ds	1
   894  0072                     ??_SEND_DATA_BYTE:	
   895  0072                     GET_CHAR_HELPER@val:	
   896                           ; 0 bytes @ 0x2
   897                           
   898                           
   899                           ; 1 bytes @ 0x2
   900  0072                     	ds	1
   901  0073                     ??_tone:	
   902  0073                     ??_ADC_read:	
   903                           ; 0 bytes @ 0x3
   904                           
   905  0073                     play_song@length:	
   906                           ; 0 bytes @ 0x3
   907                           
   908  0073                     Load@ptr:	
   909                           ; 1 bytes @ 0x3
   910                           
   911  0073                     Save@ptr:	
   912                           ; 1 bytes @ 0x3
   913                           
   914                           
   915                           ; 1 bytes @ 0x3
   916  0073                     	ds	1
   917  0074                     Load@data_length:	
   918  0074                     Save@data_length:	
   919                           ; 1 bytes @ 0x4
   920                           
   921  0074                     SEND_DATA_BYTE@b:	
   922                           ; 1 bytes @ 0x4
   923                           
   924  0074                     play_song@note_duration:	
   925                           ; 1 bytes @ 0x4
   926                           
   927                           
   928                           ; 2 bytes @ 0x4
   929  0074                     	ds	1
   930  0075                     ??_Load:	
   931  0075                     ??_Save:	
   932                           ; 0 bytes @ 0x5
   933                           
   934  0075                     ??_handle_music:	
   935                           ; 0 bytes @ 0x5
   936                           
   937  0075                     ??_SEND_SOF:	
   938                           ; 0 bytes @ 0x5
   939                           
   940  0075                     ??_SEND_EOF:	
   941                           ; 0 bytes @ 0x5
   942                           
   943  0075                     add_to_hitlist@gun:	
   944                           ; 0 bytes @ 0x5
   945                           
   946                           
   947                           ; 1 bytes @ 0x5
   948  0075                     	ds	1
   949  0076                     play_song@repeat:	
   950  0076                     Load@i:	
   951                           ; 1 bytes @ 0x6
   952                           
   953  0076                     Save@i:	
   954                           ; 1 bytes @ 0x6
   955                           
   956  0076                     add_to_hitlist@gun16:	
   957                           ; 1 bytes @ 0x6
   958                           
   959                           
   960                           ; 2 bytes @ 0x6
   961  0076                     	ds	1
   962  0077                     ??_LoadFromFlash:	
   963  0077                     ??_play_song:	
   964                           ; 0 bytes @ 0x7
   965                           
   966                           
   967                           ; 0 bytes @ 0x7
   968  0077                     	ds	1
   969  0078                     add_to_hitlist@i:	
   970                           
   971                           ; 1 bytes @ 0x8
   972  0078                     	ds	1
   973  0079                     ??_handle_fire:	
   974  0079                     ??_control_transfer:	
   975                           ; 0 bytes @ 0x9
   976                           
   977                           
   978                           ; 0 bytes @ 0x9
   979  0079                     	ds	2
   980  007B                     handle_serial@b:	
   981                           
   982                           ; 1 bytes @ 0xB
   983  007B                     	ds	1
   984  007C                     ??_main:	
   985                           
   986                           	psect	cstackBANK0
   987  0020                     __pcstackBANK0:	
   988                           ; 0 bytes @ 0xC
   989                           
   990  0020                     handle_fire@a:	
   991  0020                     control_transfer@data:	
   992                           ; 2 bytes @ 0x0
   993                           
   994                           
   995                           ; 32 bytes @ 0x0
   996  0020                     	ds	32
   997  0040                     control_transfer@cmd:	
   998                           
   999                           ; 1 bytes @ 0x20
  1000  0040                     	ds	1
  1001  0041                     control_transfer@random_number:	
  1002                           
  1003                           ; 1 bytes @ 0x21
  1004  0041                     	ds	1
  1005  0042                     control_transfer@id:	
  1006                           
  1007                           ; 1 bytes @ 0x22
  1008  0042                     	ds	1
  1009  0043                     control_transfer@dptr:	
  1010                           
  1011                           ; 1 bytes @ 0x23
  1012  0043                     	ds	1
  1013  0044                     control_transfer@i:	
  1014                           
  1015                           ; 1 bytes @ 0x24
  1016  0044                     	ds	1
  1017  0045                     control_transfer@page:	
  1018                           
  1019                           ; 2 bytes @ 0x25
  1020  0045                     	ds	2
  1021  0047                     control_transfer@x:	
  1022                           
  1023                           ; 1 bytes @ 0x27
  1024  0047                     	ds	1
  1025  0048                     ??_super_dead_mode:	
  1026                           
  1027                           ; 0 bytes @ 0x28
  1028  0048                     	ds	2
  1029  004A                     super_dead_mode@b:	
  1030                           
  1031                           ; 1 bytes @ 0x2A
  1032  004A                     	ds	1
  1033  004B                     super_dead_mode@counter:	
  1034                           
  1035                           ; 2 bytes @ 0x2B
  1036  004B                     	ds	2
  1037  004D                     ??_hit_by:	
  1038                           
  1039                           ; 0 bytes @ 0x2D
  1040  004D                     	ds	2
  1041  004F                     hit_by@who:	
  1042                           
  1043                           ; 1 bytes @ 0x2F
  1044  004F                     	ds	1
  1045  0050                     hit_by@respawn_timer:	
  1046                           
  1047                           ; 2 bytes @ 0x30
  1048  0050                     	ds	2
  1049  0052                     hit_by@i:	
  1050                           
  1051                           ; 1 bytes @ 0x32
  1052  0052                     	ds	1
  1053  0053                     hit_by@i_790:	
  1054                           
  1055                           ; 1 bytes @ 0x33
  1056  0053                     	ds	1
  1057  0054                     ??_handle_serial:	
  1058                           
  1059                           ; 0 bytes @ 0x34
  1060  0054                     	ds	2
  1061                           
  1062                           	psect	maintext
  1063  059C                     __pmaintext:	
  1064 ;;
  1065 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1066 ;;
  1067 ;; *************** function _main *****************
  1068 ;; Defined at:
  1069 ;;		line 48 in file "main.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;		None               void
  1076 ;; Registers used:
  1077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 17F/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1083 ;;      Params:         0       0       0       0
  1084 ;;      Locals:         0       0       0       0
  1085 ;;      Temps:          0       0       0       0
  1086 ;;      Totals:         0       0       0       0
  1087 ;;Total ram usage:        0 bytes
  1088 ;; Hardware stack levels required when called:    9
  1089 ;; This function calls:
  1090 ;;		_LoadFromFlash
  1091 ;;		_Setup
  1092 ;;		_handle_fire
  1093 ;;		_handle_music
  1094 ;;		_handle_serial
  1095 ;;		_super_dead_mode
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _main
  1103  059C                     _main:	
  1104                           
  1105                           ;main.c: 50: Setup();
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1109  059C  2506               	fcall	_Setup
  1110                           
  1111                           ;main.c: 51: LoadFromFlash();
  1112  059D  2448               	fcall	_LoadFromFlash
  1113                           
  1114                           ;main.c: 52: if(!config.health) {
  1115  059E  0021               	movlb	1	; select bank1
  1116  059F  0845               	movf	((_config+1)^(0+128)+4),w
  1117  05A0  0444               	iorwf	(_config^(0+128)+4),w
  1118  05A1  1D03               	skipz
  1119  05A2  2DA4               	goto	l26
  1120                           
  1121                           ;main.c: 53: super_dead_mode();
  1122  05A3  24A8               	fcall	_super_dead_mode
  1123  05A4                     l26:	
  1124                           ;main.c: 54: }
  1125                           ;main.c: 56: while(1)
  1126                           
  1127                           
  1128                           ;main.c: 57: {
  1129                           ;main.c: 58: handle_serial();
  1130  05A4  26AC               	fcall	_handle_serial
  1131                           
  1132                           ;main.c: 59: handle_fire();
  1133  05A5  23CA               	fcall	_handle_fire
  1134                           
  1135                           ;main.c: 60: handle_music();
  1136  05A6  2746               	fcall	_handle_music
  1137  05A7  2DA4               	goto	l26
  1138  05A8                     __end_of_main:	
  1139                           
  1140                           	psect	text1
  1141  06AC                     __ptext1:	
  1142 ;; *************** function _handle_serial *****************
  1143 ;; Defined at:
  1144 ;;		line 137 in file "protocol.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  b               1   11[COMMON] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      unsigned char 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1158 ;;      Params:         0       0       0       0
  1159 ;;      Locals:         1       0       0       0
  1160 ;;      Temps:          0       2       0       0
  1161 ;;      Totals:         1       2       0       0
  1162 ;;Total ram usage:        3 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    8
  1165 ;; This function calls:
  1166 ;;		_control_transfer
  1167 ;;		_hit_by
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _handle_serial
  1175  06AC                     _handle_serial:	
  1176                           
  1177                           ;protocol.c: 139: static uint8_t rx_id=0;
  1178                           ;protocol.c: 140: static uint8_t rx_counter=0;
  1179                           ;protocol.c: 141: uint8_t b;
  1180                           ;protocol.c: 143: if(!(PIR1bits.RCIF)) return 0;
  1181                           
  1182                           ;incstack = 0
  1183                           ; Regs used in _handle_serial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1184  06AC  0020               	movlb	0	; select bank0
  1185  06AD  1E91               	btfss	17,5	;volatile
  1186  06AE  0008               	return
  1187                           
  1188                           ;protocol.c: 144: b=(RCREG);
  1189                           
  1190                           ;	Return value of _handle_serial is never used
  1191  06AF  0023               	movlb	3	; select bank3
  1192  06B0  0819               	movf	25,w	;volatile
  1193  06B1  0020               	movlb	0	; select bank0
  1194  06B2  00D4               	movwf	??_handle_serial
  1195  06B3  0854               	movf	??_handle_serial,w
  1196  06B4  00FB               	movwf	handle_serial@b
  1197                           
  1198                           ;protocol.c: 145: if(b == 0x10) {
  1199  06B5  087B               	movf	handle_serial@b,w
  1200  06B6  3A10               	xorlw	16
  1201  06B7  1D03               	skipz
  1202  06B8  2EBB               	goto	l3231
  1203                           
  1204                           ;protocol.c: 146: control_transfer();
  1205  06B9  2028               	fcall	_control_transfer
  1206                           
  1207                           ;protocol.c: 147: }
  1208  06BA  0008               	return
  1209  06BB                     l3231:	
  1210                           
  1211                           ;protocol.c: 149: else if((b > 0x80) && (b != config.id) && (config.id != 0x80) && !(con
      +                          fig.id & (1<<9))) {
  1212  06BB  3081               	movlw	129
  1213  06BC  027B               	subwf	handle_serial@b,w
  1214  06BD  1C03               	skipc
  1215  06BE  0008               	return
  1216  06BF  087B               	movf	handle_serial@b,w
  1217  06C0  0020               	movlb	0	; select bank0
  1218  06C1  00D4               	movwf	??_handle_serial
  1219  06C2  01D5               	clrf	??_handle_serial+1
  1220  06C3  0021               	movlb	1	; select bank1
  1221  06C4  0841               	movf	(_config+1)^(0+128),w
  1222  06C5  0020               	movlb	0	; select bank0
  1223  06C6  0655               	xorwf	??_handle_serial+1,w
  1224  06C7  1D03               	skipz
  1225  06C8  2ECD               	goto	u4145
  1226  06C9  0021               	movlb	1	; select bank1
  1227  06CA  0840               	movf	_config^(0+128),w
  1228  06CB  0020               	movlb	0	; select bank0
  1229  06CC  0654               	xorwf	??_handle_serial,w
  1230  06CD                     u4145:	
  1231  06CD  1903               	skipnz
  1232  06CE  0008               	return
  1233  06CF  3080               	movlw	128
  1234  06D0  0021               	movlb	1	; select bank1
  1235  06D1  0640               	xorwf	_config^(0+128),w
  1236  06D2  0441               	iorwf	(_config+1)^(0+128),w
  1237  06D3  1903               	skipnz
  1238  06D4  0008               	return
  1239  06D5  18C1               	btfsc	(_config+1)^(0+128),1
  1240  06D6  0008               	return
  1241                           
  1242                           ;protocol.c: 150: if((b != rx_id) || PIR1bits.TMR2IF) rx_counter=0;
  1243  06D7  087B               	movf	handle_serial@b,w
  1244  06D8  0020               	movlb	0	; select bank0
  1245  06D9  0665               	xorwf	handle_serial@rx_id,w
  1246  06DA  1903               	btfsc	3,2
  1247  06DB  1891               	btfsc	17,1	;volatile
  1248  06DC  01E4               	clrf	handle_serial@rx_counter
  1249                           
  1250                           ;protocol.c: 151: TMR2 = 0;
  1251  06DD  019A               	clrf	26	;volatile
  1252                           
  1253                           ;protocol.c: 152: PIR1bits.TMR2IF = 0;
  1254  06DE  1091               	bcf	17,1	;volatile
  1255                           
  1256                           ;protocol.c: 153: rx_id = b;
  1257  06DF  087B               	movf	handle_serial@b,w
  1258  06E0  00D4               	movwf	??_handle_serial
  1259  06E1  0854               	movf	??_handle_serial,w
  1260  06E2  00E5               	movwf	handle_serial@rx_id
  1261                           
  1262                           ;protocol.c: 154: rx_counter++;
  1263  06E3  3001               	movlw	1
  1264  06E4  00D4               	movwf	??_handle_serial
  1265  06E5  0854               	movf	??_handle_serial,w
  1266  06E6  07E4               	addwf	handle_serial@rx_counter,f
  1267                           
  1268                           ;protocol.c: 155: if(rx_counter > config.shield) {
  1269  06E7  0864               	movf	handle_serial@rx_counter,w
  1270  06E8  00D4               	movwf	??_handle_serial
  1271  06E9  01D5               	clrf	??_handle_serial+1
  1272  06EA  0855               	movf	??_handle_serial+1,w
  1273  06EB  0021               	movlb	1	; select bank1
  1274  06EC  0247               	subwf	((_config+1)^(0+128)+6),w
  1275  06ED  1D03               	skipz
  1276  06EE  2EF3               	goto	u4195
  1277  06EF  0020               	movlb	0	; select bank0
  1278  06F0  0854               	movf	??_handle_serial,w
  1279  06F1  0021               	movlb	1	; select bank1
  1280  06F2  0246               	subwf	(_config^(0+128)+6),w
  1281  06F3                     u4195:	
  1282  06F3  1803               	skipnc
  1283  06F4  0008               	return
  1284                           
  1285                           ;protocol.c: 156: RCSTAbits.CREN = 0;
  1286  06F5  0023               	movlb	3	; select bank3
  1287  06F6  121D               	bcf	29,4	;volatile
  1288                           
  1289                           ;protocol.c: 157: hit_by(b);
  1290  06F7  087B               	movf	handle_serial@b,w
  1291  06F8  2343               	fcall	_hit_by
  1292                           
  1293                           ;protocol.c: 158: rx_id = 0;
  1294  06F9  0020               	movlb	0	; select bank0
  1295  06FA  01E5               	clrf	handle_serial@rx_id
  1296                           
  1297                           ;protocol.c: 159: (RCREG);
  1298  06FB  0023               	movlb	3	; select bank3
  1299  06FC  0819               	movf	25,w	;volatile
  1300                           
  1301                           ;protocol.c: 160: RCSTAbits.CREN = 1;
  1302  06FD  161D               	bsf	29,4	;volatile
  1303  06FE  0008               	return
  1304  06FF                     __end_of_handle_serial:	
  1305                           ;protocol.c: 161: }
  1306                           ;protocol.c: 162: }
  1307                           ;protocol.c: 163: return 1;
  1308                           ;	Return value of _handle_serial is never used
  1309                           
  1310                           
  1311                           	psect	text2
  1312  0343                     __ptext2:	
  1313 ;; *************** function _hit_by *****************
  1314 ;; Defined at:
  1315 ;;		line 363 in file "user.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  who             1    wreg     unsigned char 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  who             1   47[BANK0 ] unsigned char 
  1320 ;;  i               1   51[BANK0 ] unsigned char 
  1321 ;;  i               1   50[BANK0 ] unsigned char 
  1322 ;;  respawn_time    2   48[BANK0 ] unsigned int 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;		None               void
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1332 ;;      Params:         0       0       0       0
  1333 ;;      Locals:         0       5       0       0
  1334 ;;      Temps:          0       2       0       0
  1335 ;;      Totals:         0       7       0       0
  1336 ;;Total ram usage:        7 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    7
  1339 ;; This function calls:
  1340 ;;		_Save
  1341 ;;		_add_to_hitlist
  1342 ;;		_handle_music
  1343 ;;		_led_off
  1344 ;;		_play_song
  1345 ;;		_red_led_on
  1346 ;;		_super_dead_mode
  1347 ;; This function is called by:
  1348 ;;		_handle_serial
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function _hit_by
  1354  0343                     _hit_by:	
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in _hit_by: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1358                           ;hit_by@who stored from wreg
  1359  0343  0020               	movlb	0	; select bank0
  1360  0344  00CF               	movwf	hit_by@who
  1361                           
  1362                           ;user.c: 365: uint16_t respawn_timer;
  1363                           ;user.c: 367: add_to_hitlist(who);
  1364  0345  084F               	movf	hit_by@who,w
  1365  0346  2658               	fcall	_add_to_hitlist
  1366                           
  1367                           ;user.c: 368: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  1368  0347  30E0               	movlw	224
  1369  0348  00F1               	movwf	Save@address
  1370  0349  3007               	movlw	7
  1371  034A  00F2               	movwf	Save@address+1
  1372  034B  30A0               	movlw	_hitlist& (0+255)
  1373  034C  0020               	movlb	0	; select bank0
  1374  034D  00CD               	movwf	??_hit_by
  1375  034E  084D               	movf	??_hit_by,w
  1376  034F  00F3               	movwf	Save@ptr
  1377  0350  3010               	movlw	16
  1378  0351  00CE               	movwf	??_hit_by+1
  1379  0352  084E               	movf	??_hit_by+1,w
  1380  0353  00F4               	movwf	Save@data_length
  1381  0354  26FF               	fcall	_Save
  1382                           
  1383                           ;user.c: 370: config.health --;
  1384  0355  3001               	movlw	1
  1385  0356  0021               	movlb	1	; select bank1
  1386  0357  02C4               	subwf	(_config^(0+128)+4),f
  1387  0358  3000               	movlw	0
  1388  0359  3BC5               	subwfb	((_config+1)^(0+128)+4),f
  1389                           
  1390                           ;user.c: 371: Save(0x7D0,(uint16_t*)&config, (sizeof(config_t)/2));
  1391  035A  30D0               	movlw	208
  1392  035B  00F1               	movwf	Save@address
  1393  035C  3007               	movlw	7
  1394  035D  00F2               	movwf	Save@address+1
  1395  035E  30C0               	movlw	_config& (0+255)
  1396  035F  0020               	movlb	0	; select bank0
  1397  0360  00CD               	movwf	??_hit_by
  1398  0361  084D               	movf	??_hit_by,w
  1399  0362  00F3               	movwf	Save@ptr
  1400  0363  3009               	movlw	9
  1401  0364  00CE               	movwf	??_hit_by+1
  1402  0365  084E               	movf	??_hit_by+1,w
  1403  0366  00F4               	movwf	Save@data_length
  1404  0367  26FF               	fcall	_Save
  1405                           
  1406                           ;user.c: 373: play_song(death_song,sizeof(death_song)/sizeof(uint16_t),60000,0);
  1407  0368  3000               	movlw	low (_death_song| (0+32768))
  1408  0369  00F1               	movwf	play_song@song
  1409  036A  3086               	movlw	high (_death_song| (0+32768))
  1410  036B  00F2               	movwf	play_song@song+1
  1411  036C  3013               	movlw	19
  1412  036D  0020               	movlb	0	; select bank0
  1413  036E  00CD               	movwf	??_hit_by
  1414  036F  084D               	movf	??_hit_by,w
  1415  0370  00F3               	movwf	play_song@length
  1416  0371  3060               	movlw	96
  1417  0372  00F4               	movwf	play_song@note_duration
  1418  0373  30EA               	movlw	234
  1419  0374  00F5               	movwf	play_song@note_duration+1
  1420  0375  01F6               	clrf	play_song@repeat
  1421  0376  279C               	fcall	_play_song
  1422                           
  1423                           ;user.c: 375: if(!config.health)
  1424  0377  0021               	movlb	1	; select bank1
  1425  0378  0845               	movf	((_config+1)^(0+128)+4),w
  1426  0379  0444               	iorwf	(_config^(0+128)+4),w
  1427  037A  1D03               	skipz
  1428  037B  2B7E               	goto	l3157
  1429                           
  1430                           ;user.c: 376: {
  1431                           ;user.c: 377: super_dead_mode();
  1432  037C  24A8               	fcall	_super_dead_mode
  1433                           
  1434                           ;user.c: 378: return;
  1435  037D  0008               	return
  1436  037E                     l3157:	
  1437                           
  1438                           ;user.c: 379: }
  1439                           ;user.c: 381: respawn_timer = config.respawn_delay;
  1440  037E  0021               	movlb	1	; select bank1
  1441  037F  0849               	movf	((_config+1)^(0+128)+8),w
  1442  0380  0020               	movlb	0	; select bank0
  1443  0381  01D1               	clrf	hit_by@respawn_timer+1
  1444  0382  07D1               	addwf	hit_by@respawn_timer+1,f
  1445  0383  0021               	movlb	1	; select bank1
  1446  0384  0848               	movf	(_config^(0+128)+8),w
  1447  0385  0020               	movlb	0	; select bank0
  1448  0386  01D0               	clrf	hit_by@respawn_timer
  1449  0387  07D0               	addwf	hit_by@respawn_timer,f
  1450  0388                     l3195:	
  1451                           ;user.c: 382: while(respawn_timer)
  1452                           
  1453  0388  0851               	movf	hit_by@respawn_timer+1,w
  1454  0389  0450               	iorwf	hit_by@respawn_timer,w
  1455  038A  1903               	btfsc	3,2
  1456  038B  0008               	return
  1457                           
  1458                           ;user.c: 383: {
  1459                           ;user.c: 384: respawn_timer--;
  1460  038C  3001               	movlw	1
  1461  038D  02D0               	subwf	hit_by@respawn_timer,f
  1462  038E  3000               	movlw	0
  1463  038F  3BD1               	subwfb	hit_by@respawn_timer+1,f
  1464                           
  1465                           ;user.c: 385: red_led_on();
  1466  0390  25D0               	fcall	_red_led_on
  1467                           
  1468                           ;user.c: 386: for(uint8_t i=0;i<50;i++)
  1469  0391  0020               	movlb	0	; select bank0
  1470  0392  01D2               	clrf	hit_by@i
  1471  0393  3032               	movlw	50
  1472  0394  0252               	subwf	hit_by@i,w
  1473  0395  1803               	btfsc	3,0
  1474  0396  2BAB               	goto	l3177
  1475  0397                     l3169:	
  1476                           
  1477                           ;user.c: 387: {
  1478                           ;user.c: 388: handle_music();
  1479  0397  2746               	fcall	_handle_music
  1480                           
  1481                           ;user.c: 389: _delay((unsigned long)((1)*(16000000/4000.0)));
  1482  0398  3006               	movlw	6
  1483  0399  0020               	movlb	0	; select bank0
  1484  039A  00CE               	movwf	??_hit_by+1
  1485  039B  3030               	movlw	48
  1486  039C  00CD               	movwf	??_hit_by
  1487  039D                     u4307:	
  1488  039D  0BCD               	decfsz	??_hit_by,f
  1489  039E  2B9D               	goto	u4307
  1490  039F  0BCE               	decfsz	??_hit_by+1,f
  1491  03A0  2B9D               	goto	u4307
  1492  03A1  0000               	nop
  1493  03A2  3001               	movlw	1
  1494  03A3  0020               	movlb	0	; select bank0
  1495  03A4  00CD               	movwf	??_hit_by
  1496  03A5  084D               	movf	??_hit_by,w
  1497  03A6  07D2               	addwf	hit_by@i,f
  1498  03A7  3032               	movlw	50
  1499  03A8  0252               	subwf	hit_by@i,w
  1500  03A9  1C03               	skipc
  1501  03AA  2B97               	goto	l3169
  1502  03AB                     l3177:	
  1503                           
  1504                           ;user.c: 390: }
  1505                           ;user.c: 392: if(respawn_timer < 30)
  1506  03AB  3000               	movlw	0
  1507  03AC  0251               	subwf	hit_by@respawn_timer+1,w
  1508  03AD  301E               	movlw	30
  1509  03AE  1903               	skipnz
  1510  03AF  0250               	subwf	hit_by@respawn_timer,w
  1511  03B0  1803               	skipnc
  1512  03B1  2BB3               	goto	l3181
  1513                           
  1514                           ;user.c: 393: {
  1515                           ;user.c: 394: led_off();
  1516  03B2  25DC               	fcall	_led_off
  1517  03B3                     l3181:	
  1518                           
  1519                           ;user.c: 395: }
  1520                           ;user.c: 396: for(uint8_t i=0;i<50;i++)
  1521  03B3  0020               	movlb	0	; select bank0
  1522  03B4  01D3               	clrf	hit_by@i_790
  1523  03B5                     L1:	
  1524  03B5  3032               	movlw	50
  1525  03B6  0253               	subwf	hit_by@i_790,w
  1526  03B7  1803               	btfsc	3,0
  1527  03B8  2B88               	goto	l3195
  1528                           
  1529                           ;user.c: 397: {
  1530                           ;user.c: 398: handle_music();
  1531  03B9  2746               	fcall	_handle_music
  1532                           
  1533                           ;user.c: 399: _delay((unsigned long)((1)*(16000000/4000.0)));
  1534  03BA  3006               	movlw	6
  1535  03BB  0020               	movlb	0	; select bank0
  1536  03BC  00CE               	movwf	??_hit_by+1
  1537  03BD  3030               	movlw	48
  1538  03BE  00CD               	movwf	??_hit_by
  1539  03BF                     u4317:	
  1540  03BF  0BCD               	decfsz	??_hit_by,f
  1541  03C0  2BBF               	goto	u4317
  1542  03C1  0BCE               	decfsz	??_hit_by+1,f
  1543  03C2  2BBF               	goto	u4317
  1544  03C3  0000               	nop
  1545  03C4  3001               	movlw	1
  1546  03C5  0020               	movlb	0	; select bank0
  1547  03C6  00CD               	movwf	??_hit_by
  1548  03C7  084D               	movf	??_hit_by,w
  1549  03C8  07D3               	addwf	hit_by@i_790,f
  1550  03C9  2BB5               	goto	L1
  1551  03CA                     __end_of_hit_by:	
  1552                           
  1553                           	psect	text3
  1554  04A8                     __ptext3:	
  1555 ;; *************** function _super_dead_mode *****************
  1556 ;; Defined at:
  1557 ;;		line 337 in file "user.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  b               1   42[BANK0 ] unsigned char 
  1562 ;;  counter         2   43[BANK0 ] unsigned int 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1572 ;;      Params:         0       0       0       0
  1573 ;;      Locals:         0       3       0       0
  1574 ;;      Temps:          0       2       0       0
  1575 ;;      Totals:         0       5       0       0
  1576 ;;Total ram usage:        5 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    6
  1579 ;; This function calls:
  1580 ;;		_Send_Byte
  1581 ;;		_control_transfer
  1582 ;;		_handle_music
  1583 ;;		_led_off
  1584 ;;		_play_song
  1585 ;;		_red_led_on
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;;		_hit_by
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _super_dead_mode
  1594  04A8                     _super_dead_mode:	
  1595                           
  1596                           ;user.c: 338: uint16_t counter = 0;
  1597                           
  1598                           ;incstack = 0
  1599                           ; Regs used in _super_dead_mode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1600  04A8  0020               	movlb	0	; select bank0
  1601  04A9  01CB               	clrf	super_dead_mode@counter
  1602  04AA  01CC               	clrf	super_dead_mode@counter+1
  1603  04AB                     l3107:	
  1604                           ;user.c: 339: while(!config.health){
  1605                           
  1606  04AB  3004               	movlw	4
  1607  04AC  3EC0               	addlw	_config& (0+255)
  1608  04AD  0086               	movwf	6
  1609  04AE  0187               	clrf	7
  1610  04AF  0016               	moviw fsr1++
  1611  04B0  0401               	iorwf	1,w
  1612  04B1  1D03               	btfss	3,2
  1613  04B2  0008               	return
  1614                           
  1615                           ;user.c: 340: handle_music();
  1616  04B3  2746               	fcall	_handle_music
  1617                           
  1618                           ;user.c: 342: uint8_t b;
  1619                           ;user.c: 343: if((PIR1bits.RCIF)){
  1620  04B4  0020               	movlb	0	; select bank0
  1621  04B5  1E91               	btfss	17,5	;volatile
  1622  04B6  2CC2               	goto	l3089
  1623                           
  1624                           ;user.c: 344: b=(RCREG);
  1625  04B7  0023               	movlb	3	; select bank3
  1626  04B8  0819               	movf	25,w	;volatile
  1627  04B9  0020               	movlb	0	; select bank0
  1628  04BA  00C8               	movwf	??_super_dead_mode
  1629  04BB  0848               	movf	??_super_dead_mode,w
  1630  04BC  00CA               	movwf	super_dead_mode@b
  1631                           
  1632                           ;user.c: 345: if(b == 0x10) {
  1633  04BD  084A               	movf	super_dead_mode@b,w
  1634  04BE  3A10               	xorlw	16
  1635  04BF  1D03               	skipz
  1636  04C0  2CC2               	goto	l3089
  1637                           
  1638                           ;user.c: 346: control_transfer();
  1639  04C1  2028               	fcall	_control_transfer
  1640  04C2                     l3089:	
  1641                           
  1642                           ;user.c: 347: }
  1643                           ;user.c: 348: }
  1644                           ;user.c: 349: counter++;
  1645  04C2  3001               	movlw	1
  1646  04C3  0020               	movlb	0	; select bank0
  1647  04C4  07CB               	addwf	super_dead_mode@counter,f
  1648  04C5  3000               	movlw	0
  1649  04C6  3DCC               	addwfc	super_dead_mode@counter+1,f
  1650                           
  1651                           ;user.c: 350: _delay((unsigned long)((1)*(16000000/4000.0)));
  1652  04C7  3006               	movlw	6
  1653  04C8  00C9               	movwf	??_super_dead_mode+1
  1654  04C9  3030               	movlw	48
  1655  04CA  00C8               	movwf	??_super_dead_mode
  1656  04CB                     u4327:	
  1657  04CB  0BC8               	decfsz	??_super_dead_mode,f
  1658  04CC  2CCB               	goto	u4327
  1659  04CD  0BC9               	decfsz	??_super_dead_mode+1,f
  1660  04CE  2CCB               	goto	u4327
  1661  04CF  0000               	nop
  1662                           
  1663                           ;user.c: 351: if(counter > config.death_period){
  1664  04D0  0020               	movlb	0	; select bank0
  1665  04D1  084C               	movf	super_dead_mode@counter+1,w
  1666  04D2  0021               	movlb	1	; select bank1
  1667  04D3  0251               	subwf	((_config+1)^(0+128)+16),w
  1668  04D4  1D03               	skipz
  1669  04D5  2CDA               	goto	u3935
  1670  04D6  0020               	movlb	0	; select bank0
  1671  04D7  084B               	movf	super_dead_mode@counter,w
  1672  04D8  0021               	movlb	1	; select bank1
  1673  04D9  0250               	subwf	(_config^(0+128)+16),w
  1674  04DA                     u3935:	
  1675  04DA  1803               	skipnc
  1676  04DB  2CF2               	goto	l3103
  1677                           
  1678                           ;user.c: 352: counter = 0;
  1679  04DC  0020               	movlb	0	; select bank0
  1680  04DD  01CB               	clrf	super_dead_mode@counter
  1681  04DE  01CC               	clrf	super_dead_mode@counter+1
  1682                           
  1683                           ;user.c: 353: led_off();
  1684  04DF  25DC               	fcall	_led_off
  1685                           
  1686                           ;user.c: 354: Send_Byte(config.id);
  1687  04E0  0021               	movlb	1	; select bank1
  1688  04E1  0840               	movf	_config^(0+128),w
  1689  04E2  27C0               	fcall	_Send_Byte
  1690                           
  1691                           ;user.c: 355: play_song(dead_song,sizeof(dead_song)/sizeof(uint16_t),10000,0);
  1692  04E3  3052               	movlw	low (_dead_song| (0+32768))
  1693  04E4  00F1               	movwf	play_song@song
  1694  04E5  3086               	movlw	high (_dead_song| (0+32768))
  1695  04E6  00F2               	movwf	play_song@song+1
  1696  04E7  3003               	movlw	3
  1697  04E8  0020               	movlb	0	; select bank0
  1698  04E9  00C8               	movwf	??_super_dead_mode
  1699  04EA  0848               	movf	??_super_dead_mode,w
  1700  04EB  00F3               	movwf	play_song@length
  1701  04EC  3010               	movlw	16
  1702  04ED  00F4               	movwf	play_song@note_duration
  1703  04EE  3027               	movlw	39
  1704  04EF  00F5               	movwf	play_song@note_duration+1
  1705  04F0  01F6               	clrf	play_song@repeat
  1706  04F1  279C               	fcall	_play_song
  1707  04F2                     l3103:	
  1708                           
  1709                           ;user.c: 356: }
  1710                           ;user.c: 357: if(counter == config.death_period-50){
  1711  04F2  0021               	movlb	1	; select bank1
  1712  04F3  0850               	movf	(_config^(0+128)+16),w
  1713  04F4  3ECE               	addlw	206
  1714  04F5  0020               	movlb	0	; select bank0
  1715  04F6  00C8               	movwf	??_super_dead_mode
  1716  04F7  30FF               	movlw	255
  1717  04F8  0021               	movlb	1	; select bank1
  1718  04F9  3D51               	addwfc	((_config+1)^(0+128)+16),w
  1719  04FA  0020               	movlb	0	; select bank0
  1720  04FB  00C9               	movwf	??_super_dead_mode+1
  1721  04FC  084C               	movf	super_dead_mode@counter+1,w
  1722  04FD  0649               	xorwf	??_super_dead_mode+1,w
  1723  04FE  1D03               	skipz
  1724  04FF  2D02               	goto	u3945
  1725  0500  084B               	movf	super_dead_mode@counter,w
  1726  0501  0648               	xorwf	??_super_dead_mode,w
  1727  0502                     u3945:	
  1728  0502  1D03               	skipz
  1729  0503  2CAB               	goto	l3107
  1730                           
  1731                           ;user.c: 358: red_led_on();
  1732  0504  25D0               	fcall	_red_led_on
  1733  0505  2CAB               	goto	l3107
  1734  0506                     __end_of_super_dead_mode:	
  1735                           
  1736                           	psect	text4
  1737  0746                     __ptext4:	
  1738 ;; *************** function _handle_music *****************
  1739 ;; Defined at:
  1740 ;;		line 115 in file "user.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1754 ;;      Params:         0       0       0       0
  1755 ;;      Locals:         0       0       0       0
  1756 ;;      Temps:          2       0       0       0
  1757 ;;      Totals:         2       0       0       0
  1758 ;;Total ram usage:        2 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    3
  1761 ;; This function calls:
  1762 ;;		_stop_song
  1763 ;;		_tone
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;;		_super_dead_mode
  1767 ;;		_hit_by
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _handle_music
  1773  0746                     _handle_music:	
  1774                           
  1775                           ;user.c: 117: if(!PIR1bits.TMR1IF) return;
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _handle_music: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1779  0746  0020               	movlb	0	; select bank0
  1780  0747  1C11               	btfss	17,0	;volatile
  1781  0748  0008               	return
  1782                           
  1783                           ;user.c: 118: if(cur_song_ptr >= cur_song_length)
  1784  0749  0861               	movf	_cur_song_length,w
  1785  074A  027C               	subwf	_cur_song_ptr,w
  1786  074B  1C03               	skipc
  1787  074C  2F54               	goto	l2723
  1788                           
  1789                           ;user.c: 119: {
  1790                           ;user.c: 120: if(cur_song_repeat)
  1791  074D  0862               	movf	_cur_song_repeat,w
  1792  074E  1903               	btfsc	3,2
  1793  074F  2F52               	goto	l2719
  1794                           
  1795                           ;user.c: 121: {
  1796                           ;user.c: 122: cur_song_ptr=0;
  1797  0750  01FC               	clrf	_cur_song_ptr
  1798                           
  1799                           ;user.c: 123: }
  1800  0751  2F54               	goto	l2723
  1801  0752                     l2719:	
  1802                           
  1803                           ;user.c: 124: else
  1804                           ;user.c: 125: {
  1805                           ;user.c: 126: stop_song();
  1806  0752  25CB               	fcall	_stop_song
  1807                           
  1808                           ;user.c: 127: return;
  1809  0753  0008               	return
  1810  0754                     l2723:	
  1811                           
  1812                           ;user.c: 128: }
  1813                           ;user.c: 129: }
  1814                           ;user.c: 130: tone(cur_song[cur_song_ptr]);
  1815  0754  087C               	movf	_cur_song_ptr,w
  1816  0755  00F5               	movwf	??_handle_music
  1817  0756  01F6               	clrf	??_handle_music+1
  1818  0757  35F5               	lslf	??_handle_music,f
  1819  0758  0DF6               	rlf	??_handle_music+1,f
  1820  0759  0020               	movlb	0	; select bank0
  1821  075A  0858               	movf	_cur_song,w
  1822  075B  0775               	addwf	??_handle_music,w
  1823  075C  0084               	movwf	4
  1824  075D  0859               	movf	_cur_song+1,w
  1825  075E  3D76               	addwfc	??_handle_music+1,w
  1826  075F  0085               	movwf	5
  1827  0760  3F00               	moviw [0]fsr0
  1828  0761  00F1               	movwf	tone@period
  1829  0762  3F01               	moviw [1]fsr0
  1830  0763  00F2               	movwf	tone@period+1
  1831  0764  2585               	fcall	_tone
  1832                           
  1833                           ;user.c: 131: TMR1 = -cur_song_duration;
  1834  0765  0020               	movlb	0	; select bank0
  1835  0766  095A               	comf	_cur_song_duration,w
  1836  0767  00F5               	movwf	??_handle_music
  1837  0768  095B               	comf	_cur_song_duration+1,w
  1838  0769  00F6               	movwf	??_handle_music+1
  1839  076A  0AF5               	incf	??_handle_music,f
  1840  076B  1903               	skipnz
  1841  076C  0AF6               	incf	??_handle_music+1,f
  1842  076D  0875               	movf	??_handle_music,w
  1843  076E  0096               	movwf	22	;volatile
  1844  076F  0876               	movf	??_handle_music+1,w
  1845  0770  0097               	movwf	23	;volatile
  1846                           
  1847                           ;user.c: 132: cur_song_ptr++;
  1848  0771  3001               	movlw	1
  1849  0772  00F5               	movwf	??_handle_music
  1850  0773  0875               	movf	??_handle_music,w
  1851  0774  07FC               	addwf	_cur_song_ptr,f
  1852                           
  1853                           ;user.c: 133: PIR1bits.TMR1IF=0;
  1854  0775  1011               	bcf	17,0	;volatile
  1855  0776  0008               	return
  1856  0777                     __end_of_handle_music:	
  1857                           
  1858                           	psect	text5
  1859  0585                     __ptext5:	
  1860 ;; *************** function _tone *****************
  1861 ;; Defined at:
  1862 ;;		line 136 in file "user.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  period          2    1[COMMON] unsigned int 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;		None               void
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, status,0
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1876 ;;      Params:         2       0       0       0
  1877 ;;      Locals:         0       0       0       0
  1878 ;;      Temps:          2       0       0       0
  1879 ;;      Totals:         4       0       0       0
  1880 ;;Total ram usage:        4 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    1
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_handle_music
  1887 ;;		_Buzz
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           
  1892                           ;psect for function _tone
  1893  0585                     _tone:	
  1894                           
  1895                           ;user.c: 138: PWM3CONbits.PWM3EN = 1;
  1896                           
  1897                           ;incstack = 0
  1898                           ; Regs used in _tone: [wreg+status,2+status,0]
  1899  0585  003B               	movlb	27	; select bank27
  1900  0586  17BB               	bsf	59,7	;volatile
  1901                           
  1902                           ;user.c: 139: PWM3CONbits.PWM3OE = 1;
  1903  0587  173B               	bsf	59,6	;volatile
  1904                           
  1905                           ;user.c: 140: PWM3PR = period;
  1906  0588  0872               	movf	tone@period+1,w
  1907  0589  01B6               	clrf	54	;volatile
  1908  058A  07B6               	addwf	54,f	;volatile
  1909  058B  0871               	movf	tone@period,w
  1910  058C  01B5               	clrf	53	;volatile
  1911  058D  07B5               	addwf	53,f	;volatile
  1912                           
  1913                           ;user.c: 141: PWM3DC = period >> 1;
  1914  058E  0872               	movf	tone@period+1,w
  1915  058F  00F4               	movwf	??_tone+1
  1916  0590  0871               	movf	tone@period,w
  1917  0591  00F3               	movwf	??_tone
  1918  0592  36F4               	lsrf	??_tone+1,f
  1919  0593  0CF3               	rrf	??_tone,f
  1920  0594  0873               	movf	??_tone,w
  1921  0595  00B3               	movwf	51	;volatile
  1922  0596  0874               	movf	??_tone+1,w
  1923  0597  00B4               	movwf	52	;volatile
  1924                           
  1925                           ;user.c: 142: PWM3PH = 0x0000;
  1926  0598  01B1               	clrf	49	;volatile
  1927  0599  01B2               	clrf	50	;volatile
  1928                           
  1929                           ;user.c: 143: PWM3LDCONbits.PWM3LD = 1;
  1930  059A  17BF               	bsf	63,7	;volatile
  1931  059B  0008               	return
  1932  059C                     __end_of_tone:	
  1933                           
  1934                           	psect	text6
  1935  0028                     __ptext6:	
  1936 ;; *************** function _control_transfer *****************
  1937 ;; Defined at:
  1938 ;;		line 46 in file "protocol.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  data           32    0[BANK0 ] unsigned int [16]
  1943 ;;  page            2   37[BANK0 ] unsigned int 
  1944 ;;  x               1   39[BANK0 ] unsigned char 
  1945 ;;  i               1   36[BANK0 ] unsigned char 
  1946 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1947 ;;		 -> control_transfer@data(32), 
  1948 ;;  id              1   34[BANK0 ] unsigned char 
  1949 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1950 ;;  cmd             1   32[BANK0 ] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;		None               void
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1960 ;;      Params:         0       0       0       0
  1961 ;;      Locals:         0      40       0       0
  1962 ;;      Temps:          2       0       0       0
  1963 ;;      Totals:         2      40       0       0
  1964 ;;Total ram usage:       42 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    5
  1967 ;; This function calls:
  1968 ;;		_GET_CHAR_HELPER
  1969 ;;		_Load
  1970 ;;		_SEND_DATA_BYTE
  1971 ;;		_SEND_EOF
  1972 ;;		_SEND_SOF
  1973 ;;		_Save
  1974 ;;		_play_song
  1975 ;; This function is called by:
  1976 ;;		_super_dead_mode
  1977 ;;		_handle_serial
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _control_transfer
  1983  0028                     _control_transfer:	
  1984                           
  1985                           ;protocol.c: 48: uint8_t i;
  1986                           ;protocol.c: 49: uint8_t cmd;
  1987                           ;protocol.c: 50: uint8_t random_number,id;
  1988                           ;protocol.c: 52: uint16_t page;
  1989                           ;protocol.c: 53: uint16_t data[16];
  1990                           ;protocol.c: 54: uint8_t* dptr;
  1991                           ;protocol.c: 55: uint8_t x;
  1992                           ;protocol.c: 57: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != (uint8_t)config.id) goto err;
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1996  0028  0020               	movlb	0	; select bank0
  1997  0029  01E0               	clrf	__checksum
  1998  002A  3066               	movlw	__x& (0+255)
  1999  002B  254B               	fcall	_GET_CHAR_HELPER
  2000  002C  3A00               	xorlw	0
  2001  002D  1D03               	btfss	3,2
  2002  002E  0008               	return
  2003  002F  3067               	movlw	__y& (0+255)
  2004  0030  254B               	fcall	_GET_CHAR_HELPER
  2005  0031  3A00               	xorlw	0
  2006  0032  1D03               	btfss	3,2
  2007  0033  0008               	return
  2008  0034  0020               	movlb	0	; select bank0
  2009  0035  0866               	movf	__x,w
  2010  0036  39F0               	andlw	240
  2011  0037  1D03               	btfss	3,2
  2012  0038  0008               	return
  2013  0039  0867               	movf	__y,w
  2014  003A  39F0               	andlw	240
  2015  003B  1D03               	btfss	3,2
  2016  003C  0008               	return
  2017  003D  0867               	movf	__y,w
  2018  003E  00F9               	movwf	??_control_transfer
  2019  003F  3003               	movlw	3
  2020  0040                     u3045:	
  2021  0040  35F9               	lslf	??_control_transfer,f
  2022  0041  3EFF               	addlw	-1
  2023  0042  1D03               	skipz
  2024  0043  2840               	goto	u3045
  2025  0044  3579               	lslf	??_control_transfer,w
  2026  0045  0466               	iorwf	__x,w
  2027  0046  00FA               	movwf	??_control_transfer+1
  2028  0047  087A               	movf	??_control_transfer+1,w
  2029  0048  00E6               	movwf	__x
  2030  0049  0866               	movf	__x,w
  2031  004A  00F9               	movwf	??_control_transfer
  2032  004B  0879               	movf	??_control_transfer,w
  2033  004C  07E0               	addwf	__checksum,f
  2034  004D  0021               	movlb	1	; select bank1
  2035  004E  0840               	movf	_config^(0+128),w
  2036  004F  0020               	movlb	0	; select bank0
  2037  0050  0666               	xorwf	__x,w
  2038  0051  1D03               	btfss	3,2
  2039  0052  0008               	return
  2040                           
  2041                           ;protocol.c: 58: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd
      +                          ;
  2042  0053  3066               	movlw	__x& (0+255)
  2043  0054  254B               	fcall	_GET_CHAR_HELPER
  2044  0055  3A00               	xorlw	0
  2045  0056  1D03               	btfss	3,2
  2046  0057  0008               	return
  2047  0058  3067               	movlw	__y& (0+255)
  2048  0059  254B               	fcall	_GET_CHAR_HELPER
  2049  005A  3A00               	xorlw	0
  2050  005B  1D03               	btfss	3,2
  2051  005C  0008               	return
  2052  005D  0020               	movlb	0	; select bank0
  2053  005E  0866               	movf	__x,w
  2054  005F  39F0               	andlw	240
  2055  0060  1D03               	btfss	3,2
  2056  0061  0008               	return
  2057  0062  0867               	movf	__y,w
  2058  0063  39F0               	andlw	240
  2059  0064  1D03               	btfss	3,2
  2060  0065  0008               	return
  2061  0066  0867               	movf	__y,w
  2062  0067  00F9               	movwf	??_control_transfer
  2063  0068  3003               	movlw	3
  2064  0069                     u3105:	
  2065  0069  35F9               	lslf	??_control_transfer,f
  2066  006A  3EFF               	addlw	-1
  2067  006B  1D03               	skipz
  2068  006C  2869               	goto	u3105
  2069  006D  3579               	lslf	??_control_transfer,w
  2070  006E  0466               	iorwf	__x,w
  2071  006F  00FA               	movwf	??_control_transfer+1
  2072  0070  087A               	movf	??_control_transfer+1,w
  2073  0071  00C0               	movwf	control_transfer@cmd
  2074  0072  0840               	movf	control_transfer@cmd,w
  2075  0073  00F9               	movwf	??_control_transfer
  2076  0074  0879               	movf	??_control_transfer,w
  2077  0075  07E0               	addwf	__checksum,f
  2078                           
  2079                           ;protocol.c: 60: switch(cmd)
  2080  0076  2B2F               	goto	l3073
  2081  0077                     l2769:	
  2082                           ;protocol.c: 61: {
  2083                           ;protocol.c: 62: case 0x01:
  2084                           
  2085                           
  2086                           ;protocol.c: 63: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2087  0077  3066               	movlw	__x& (0+255)
  2088  0078  254B               	fcall	_GET_CHAR_HELPER
  2089  0079  3A00               	xorlw	0
  2090  007A  1D03               	btfss	3,2
  2091  007B  0008               	return
  2092  007C  3067               	movlw	__y& (0+255)
  2093  007D  254B               	fcall	_GET_CHAR_HELPER
  2094  007E  3A00               	xorlw	0
  2095  007F  1D03               	btfss	3,2
  2096  0080  0008               	return
  2097  0081  0020               	movlb	0	; select bank0
  2098  0082  0866               	movf	__x,w
  2099  0083  39F0               	andlw	240
  2100  0084  1D03               	btfss	3,2
  2101  0085  0008               	return
  2102  0086  0867               	movf	__y,w
  2103  0087  39F0               	andlw	240
  2104  0088  1D03               	btfss	3,2
  2105  0089  0008               	return
  2106  008A  0867               	movf	__y,w
  2107  008B  00F9               	movwf	??_control_transfer
  2108  008C  3003               	movlw	3
  2109  008D                     u3155:	
  2110  008D  35F9               	lslf	??_control_transfer,f
  2111  008E  3EFF               	addlw	-1
  2112  008F  1D03               	skipz
  2113  0090  288D               	goto	u3155
  2114  0091  3579               	lslf	??_control_transfer,w
  2115  0092  0466               	iorwf	__x,w
  2116  0093  00FA               	movwf	??_control_transfer+1
  2117  0094  087A               	movf	??_control_transfer+1,w
  2118  0095  00E6               	movwf	__x
  2119  0096  0866               	movf	__x,w
  2120  0097  00F9               	movwf	??_control_transfer
  2121  0098  0879               	movf	??_control_transfer,w
  2122  0099  07E0               	addwf	__checksum,f
  2123  009A  0860               	movf	__checksum,w
  2124  009B  1D03               	skipz
  2125  009C  0008               	return
  2126  009D  3066               	movlw	__x& (0+255)
  2127  009E  254B               	fcall	_GET_CHAR_HELPER
  2128  009F  3A00               	xorlw	0
  2129  00A0  1D03               	btfss	3,2
  2130  00A1  0008               	return
  2131  00A2  0020               	movlb	0	; select bank0
  2132  00A3  0866               	movf	__x,w
  2133  00A4  3A11               	xorlw	17
  2134  00A5  1D03               	btfss	3,2
  2135  00A6  0008               	return
  2136                           
  2137                           ;protocol.c: 64: SEND_SOF();
  2138  00A7  25A8               	fcall	_SEND_SOF
  2139                           
  2140                           ;protocol.c: 65: SEND_DATA_BYTE(0x02);
  2141  00A8  3002               	movlw	2
  2142  00A9  2529               	fcall	_SEND_DATA_BYTE
  2143                           
  2144                           ;protocol.c: 66: SEND_DATA_BYTE(my_random_number);
  2145  00AA  0020               	movlb	0	; select bank0
  2146  00AB  0863               	movf	_my_random_number,w
  2147  00AC  2529               	fcall	_SEND_DATA_BYTE
  2148                           
  2149                           ;protocol.c: 67: SEND_EOF();
  2150  00AD  25B4               	fcall	_SEND_EOF
  2151                           
  2152                           ;protocol.c: 68: break;
  2153  00AE  0008               	return
  2154  00AF                     l2797:	
  2155                           ;protocol.c: 69: case 0x03:
  2156                           
  2157                           
  2158                           ;protocol.c: 70: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2159  00AF  3066               	movlw	__x& (0+255)
  2160  00B0  254B               	fcall	_GET_CHAR_HELPER
  2161  00B1  3A00               	xorlw	0
  2162  00B2  1D03               	btfss	3,2
  2163  00B3  0008               	return
  2164  00B4  3067               	movlw	__y& (0+255)
  2165  00B5  254B               	fcall	_GET_CHAR_HELPER
  2166  00B6  3A00               	xorlw	0
  2167  00B7  1D03               	btfss	3,2
  2168  00B8  0008               	return
  2169  00B9  0020               	movlb	0	; select bank0
  2170  00BA  0866               	movf	__x,w
  2171  00BB  39F0               	andlw	240
  2172  00BC  1D03               	btfss	3,2
  2173  00BD  0008               	return
  2174  00BE  0867               	movf	__y,w
  2175  00BF  39F0               	andlw	240
  2176  00C0  1D03               	btfss	3,2
  2177  00C1  0008               	return
  2178  00C2  0867               	movf	__y,w
  2179  00C3  00F9               	movwf	??_control_transfer
  2180  00C4  3003               	movlw	3
  2181  00C5                     u3235:	
  2182  00C5  35F9               	lslf	??_control_transfer,f
  2183  00C6  3EFF               	addlw	-1
  2184  00C7  1D03               	skipz
  2185  00C8  28C5               	goto	u3235
  2186  00C9  3579               	lslf	??_control_transfer,w
  2187  00CA  0466               	iorwf	__x,w
  2188  00CB  00FA               	movwf	??_control_transfer+1
  2189  00CC  087A               	movf	??_control_transfer+1,w
  2190  00CD  00C1               	movwf	control_transfer@random_number
  2191  00CE  0841               	movf	control_transfer@random_number,w
  2192  00CF  00F9               	movwf	??_control_transfer
  2193  00D0  0879               	movf	??_control_transfer,w
  2194  00D1  07E0               	addwf	__checksum,f
  2195                           
  2196                           ;protocol.c: 71: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2197  00D2  3066               	movlw	__x& (0+255)
  2198  00D3  254B               	fcall	_GET_CHAR_HELPER
  2199  00D4  3A00               	xorlw	0
  2200  00D5  1D03               	btfss	3,2
  2201  00D6  0008               	return
  2202  00D7  3067               	movlw	__y& (0+255)
  2203  00D8  254B               	fcall	_GET_CHAR_HELPER
  2204  00D9  3A00               	xorlw	0
  2205  00DA  1D03               	btfss	3,2
  2206  00DB  0008               	return
  2207  00DC  0020               	movlb	0	; select bank0
  2208  00DD  0866               	movf	__x,w
  2209  00DE  39F0               	andlw	240
  2210  00DF  1D03               	btfss	3,2
  2211  00E0  0008               	return
  2212  00E1  0867               	movf	__y,w
  2213  00E2  39F0               	andlw	240
  2214  00E3  1D03               	btfss	3,2
  2215  00E4  0008               	return
  2216  00E5  0867               	movf	__y,w
  2217  00E6  00F9               	movwf	??_control_transfer
  2218  00E7  3003               	movlw	3
  2219  00E8                     u3285:	
  2220  00E8  35F9               	lslf	??_control_transfer,f
  2221  00E9  3EFF               	addlw	-1
  2222  00EA  1D03               	skipz
  2223  00EB  28E8               	goto	u3285
  2224  00EC  3579               	lslf	??_control_transfer,w
  2225  00ED  0466               	iorwf	__x,w
  2226  00EE  00FA               	movwf	??_control_transfer+1
  2227  00EF  087A               	movf	??_control_transfer+1,w
  2228  00F0  00C2               	movwf	control_transfer@id
  2229  00F1  0842               	movf	control_transfer@id,w
  2230  00F2  00F9               	movwf	??_control_transfer
  2231  00F3  0879               	movf	??_control_transfer,w
  2232  00F4  07E0               	addwf	__checksum,f
  2233                           
  2234                           ;protocol.c: 72: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2235  00F5  3066               	movlw	__x& (0+255)
  2236  00F6  254B               	fcall	_GET_CHAR_HELPER
  2237  00F7  3A00               	xorlw	0
  2238  00F8  1D03               	btfss	3,2
  2239  00F9  0008               	return
  2240  00FA  3067               	movlw	__y& (0+255)
  2241  00FB  254B               	fcall	_GET_CHAR_HELPER
  2242  00FC  3A00               	xorlw	0
  2243  00FD  1D03               	btfss	3,2
  2244  00FE  0008               	return
  2245  00FF  0020               	movlb	0	; select bank0
  2246  0100  0866               	movf	__x,w
  2247  0101  39F0               	andlw	240
  2248  0102  1D03               	btfss	3,2
  2249  0103  0008               	return
  2250  0104  0867               	movf	__y,w
  2251  0105  39F0               	andlw	240
  2252  0106  1D03               	btfss	3,2
  2253  0107  0008               	return
  2254  0108  0867               	movf	__y,w
  2255  0109  00F9               	movwf	??_control_transfer
  2256  010A  3003               	movlw	3
  2257  010B                     u3335:	
  2258  010B  35F9               	lslf	??_control_transfer,f
  2259  010C  3EFF               	addlw	-1
  2260  010D  1D03               	skipz
  2261  010E  290B               	goto	u3335
  2262  010F  3579               	lslf	??_control_transfer,w
  2263  0110  0466               	iorwf	__x,w
  2264  0111  00FA               	movwf	??_control_transfer+1
  2265  0112  087A               	movf	??_control_transfer+1,w
  2266  0113  00E6               	movwf	__x
  2267  0114  0866               	movf	__x,w
  2268  0115  00F9               	movwf	??_control_transfer
  2269  0116  0879               	movf	??_control_transfer,w
  2270  0117  07E0               	addwf	__checksum,f
  2271  0118  0860               	movf	__checksum,w
  2272  0119  1D03               	skipz
  2273  011A  0008               	return
  2274  011B  3066               	movlw	__x& (0+255)
  2275  011C  254B               	fcall	_GET_CHAR_HELPER
  2276  011D  3A00               	xorlw	0
  2277  011E  1D03               	btfss	3,2
  2278  011F  0008               	return
  2279  0120  0020               	movlb	0	; select bank0
  2280  0121  0866               	movf	__x,w
  2281  0122  3A11               	xorlw	17
  2282  0123  1D03               	btfss	3,2
  2283  0124  0008               	return
  2284                           
  2285                           ;protocol.c: 73: if(random_number != my_random_number) goto err;
  2286  0125  0841               	movf	control_transfer@random_number,w
  2287  0126  0663               	xorwf	_my_random_number,w
  2288  0127  1D03               	btfss	3,2
  2289  0128  0008               	return
  2290                           
  2291                           ;protocol.c: 74: SEND_SOF();
  2292  0129  25A8               	fcall	_SEND_SOF
  2293                           
  2294                           ;protocol.c: 75: SEND_DATA_BYTE(0x00);
  2295  012A  3000               	movlw	0
  2296  012B  2529               	fcall	_SEND_DATA_BYTE
  2297                           
  2298                           ;protocol.c: 76: SEND_EOF();
  2299  012C  25B4               	fcall	_SEND_EOF
  2300                           
  2301                           ;protocol.c: 77: config.id=id | (1<<9);
  2302  012D  3000               	movlw	0
  2303  012E  0020               	movlb	0	; select bank0
  2304  012F  0442               	iorwf	control_transfer@id,w
  2305  0130  0021               	movlb	1	; select bank1
  2306  0131  00C0               	movwf	_config^(0+128)
  2307  0132  3002               	movlw	2
  2308  0133  00C1               	movwf	(_config+1)^(0+128)
  2309                           
  2310                           ;protocol.c: 78: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2311  0134  30D0               	movlw	208
  2312  0135  00F1               	movwf	Save@address
  2313  0136  3007               	movlw	7
  2314  0137  00F2               	movwf	Save@address+1
  2315  0138  30C0               	movlw	_config& (0+255)
  2316  0139  00F9               	movwf	??_control_transfer
  2317  013A  0879               	movf	??_control_transfer,w
  2318  013B  00F3               	movwf	Save@ptr
  2319  013C  3009               	movlw	9
  2320  013D  00FA               	movwf	??_control_transfer+1
  2321  013E  087A               	movf	??_control_transfer+1,w
  2322  013F  00F4               	movwf	Save@data_length
  2323  0140  26FF               	fcall	_Save
  2324                           
  2325                           ;protocol.c: 79: break;
  2326  0141  0008               	return
  2327  0142                     l2861:	
  2328                           ;protocol.c: 80: case 0x04:
  2329                           
  2330                           
  2331                           ;protocol.c: 81: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2332  0142  3066               	movlw	__x& (0+255)
  2333  0143  254B               	fcall	_GET_CHAR_HELPER
  2334  0144  3A00               	xorlw	0
  2335  0145  1D03               	btfss	3,2
  2336  0146  0008               	return
  2337  0147  3067               	movlw	__y& (0+255)
  2338  0148  254B               	fcall	_GET_CHAR_HELPER
  2339  0149  3A00               	xorlw	0
  2340  014A  1D03               	btfss	3,2
  2341  014B  0008               	return
  2342  014C  0020               	movlb	0	; select bank0
  2343  014D  0866               	movf	__x,w
  2344  014E  39F0               	andlw	240
  2345  014F  1D03               	btfss	3,2
  2346  0150  0008               	return
  2347  0151  0867               	movf	__y,w
  2348  0152  39F0               	andlw	240
  2349  0153  1D03               	btfss	3,2
  2350  0154  0008               	return
  2351  0155  0867               	movf	__y,w
  2352  0156  00F9               	movwf	??_control_transfer
  2353  0157  3003               	movlw	3
  2354  0158                     u3425:	
  2355  0158  35F9               	lslf	??_control_transfer,f
  2356  0159  3EFF               	addlw	-1
  2357  015A  1D03               	skipz
  2358  015B  2958               	goto	u3425
  2359  015C  3579               	lslf	??_control_transfer,w
  2360  015D  0466               	iorwf	__x,w
  2361  015E  00FA               	movwf	??_control_transfer+1
  2362  015F  087A               	movf	??_control_transfer+1,w
  2363  0160  00C7               	movwf	control_transfer@x
  2364  0161  0847               	movf	control_transfer@x,w
  2365  0162  00F9               	movwf	??_control_transfer
  2366  0163  0879               	movf	??_control_transfer,w
  2367  0164  07E0               	addwf	__checksum,f
  2368                           
  2369                           ;protocol.c: 82: *((uint8_t*)(&page))=x;
  2370  0165  0847               	movf	control_transfer@x,w
  2371  0166  00F9               	movwf	??_control_transfer
  2372  0167  0879               	movf	??_control_transfer,w
  2373  0168  00C5               	movwf	control_transfer@page
  2374                           
  2375                           ;protocol.c: 83: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2376  0169  3066               	movlw	__x& (0+255)
  2377  016A  254B               	fcall	_GET_CHAR_HELPER
  2378  016B  3A00               	xorlw	0
  2379  016C  1D03               	btfss	3,2
  2380  016D  0008               	return
  2381  016E  3067               	movlw	__y& (0+255)
  2382  016F  254B               	fcall	_GET_CHAR_HELPER
  2383  0170  3A00               	xorlw	0
  2384  0171  1D03               	btfss	3,2
  2385  0172  0008               	return
  2386  0173  0020               	movlb	0	; select bank0
  2387  0174  0866               	movf	__x,w
  2388  0175  39F0               	andlw	240
  2389  0176  1D03               	btfss	3,2
  2390  0177  0008               	return
  2391  0178  0867               	movf	__y,w
  2392  0179  39F0               	andlw	240
  2393  017A  1D03               	btfss	3,2
  2394  017B  0008               	return
  2395  017C  0867               	movf	__y,w
  2396  017D  00F9               	movwf	??_control_transfer
  2397  017E  3003               	movlw	3
  2398  017F                     u3475:	
  2399  017F  35F9               	lslf	??_control_transfer,f
  2400  0180  3EFF               	addlw	-1
  2401  0181  1D03               	skipz
  2402  0182  297F               	goto	u3475
  2403  0183  3579               	lslf	??_control_transfer,w
  2404  0184  0466               	iorwf	__x,w
  2405  0185  00FA               	movwf	??_control_transfer+1
  2406  0186  087A               	movf	??_control_transfer+1,w
  2407  0187  00C7               	movwf	control_transfer@x
  2408  0188  0847               	movf	control_transfer@x,w
  2409  0189  00F9               	movwf	??_control_transfer
  2410  018A  0879               	movf	??_control_transfer,w
  2411  018B  07E0               	addwf	__checksum,f
  2412                           
  2413                           ;protocol.c: 84: *(((uint8_t*)(&page))+1)=x;
  2414  018C  0847               	movf	control_transfer@x,w
  2415  018D  00F9               	movwf	??_control_transfer
  2416  018E  0879               	movf	??_control_transfer,w
  2417  018F  00C6               	movwf	control_transfer@page+1
  2418                           
  2419                           ;protocol.c: 85: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2420  0190  3066               	movlw	__x& (0+255)
  2421  0191  254B               	fcall	_GET_CHAR_HELPER
  2422  0192  3A00               	xorlw	0
  2423  0193  1D03               	btfss	3,2
  2424  0194  0008               	return
  2425  0195  3067               	movlw	__y& (0+255)
  2426  0196  254B               	fcall	_GET_CHAR_HELPER
  2427  0197  3A00               	xorlw	0
  2428  0198  1D03               	btfss	3,2
  2429  0199  0008               	return
  2430  019A  0020               	movlb	0	; select bank0
  2431  019B  0866               	movf	__x,w
  2432  019C  39F0               	andlw	240
  2433  019D  1D03               	btfss	3,2
  2434  019E  0008               	return
  2435  019F  0867               	movf	__y,w
  2436  01A0  39F0               	andlw	240
  2437  01A1  1D03               	btfss	3,2
  2438  01A2  0008               	return
  2439  01A3  0867               	movf	__y,w
  2440  01A4  00F9               	movwf	??_control_transfer
  2441  01A5  3003               	movlw	3
  2442  01A6                     u3525:	
  2443  01A6  35F9               	lslf	??_control_transfer,f
  2444  01A7  3EFF               	addlw	-1
  2445  01A8  1D03               	skipz
  2446  01A9  29A6               	goto	u3525
  2447  01AA  3579               	lslf	??_control_transfer,w
  2448  01AB  0466               	iorwf	__x,w
  2449  01AC  00FA               	movwf	??_control_transfer+1
  2450  01AD  087A               	movf	??_control_transfer+1,w
  2451  01AE  00E6               	movwf	__x
  2452  01AF  0866               	movf	__x,w
  2453  01B0  00F9               	movwf	??_control_transfer
  2454  01B1  0879               	movf	??_control_transfer,w
  2455  01B2  07E0               	addwf	__checksum,f
  2456  01B3  0860               	movf	__checksum,w
  2457  01B4  1D03               	skipz
  2458  01B5  0008               	return
  2459  01B6  3066               	movlw	__x& (0+255)
  2460  01B7  254B               	fcall	_GET_CHAR_HELPER
  2461  01B8  3A00               	xorlw	0
  2462  01B9  1D03               	btfss	3,2
  2463  01BA  0008               	return
  2464  01BB  0020               	movlb	0	; select bank0
  2465  01BC  0866               	movf	__x,w
  2466  01BD  3A11               	xorlw	17
  2467  01BE  1D03               	btfss	3,2
  2468  01BF  0008               	return
  2469                           
  2470                           ;protocol.c: 86: Load(page,data,16);
  2471  01C0  0846               	movf	control_transfer@page+1,w
  2472  01C1  01F2               	clrf	Load@address+1
  2473  01C2  07F2               	addwf	Load@address+1,f
  2474  01C3  0845               	movf	control_transfer@page,w
  2475  01C4  01F1               	clrf	Load@address
  2476  01C5  07F1               	addwf	Load@address,f
  2477  01C6  3020               	movlw	control_transfer@data& (0+255)
  2478  01C7  00F9               	movwf	??_control_transfer
  2479  01C8  0879               	movf	??_control_transfer,w
  2480  01C9  00F3               	movwf	Load@ptr
  2481  01CA  3010               	movlw	16
  2482  01CB  00FA               	movwf	??_control_transfer+1
  2483  01CC  087A               	movf	??_control_transfer+1,w
  2484  01CD  00F4               	movwf	Load@data_length
  2485  01CE  2777               	fcall	_Load
  2486                           
  2487                           ;protocol.c: 87: SEND_SOF();
  2488  01CF  25A8               	fcall	_SEND_SOF
  2489                           
  2490                           ;protocol.c: 88: SEND_DATA_BYTE(0x05);
  2491  01D0  3005               	movlw	5
  2492  01D1  2529               	fcall	_SEND_DATA_BYTE
  2493                           
  2494                           ;protocol.c: 89: dptr=(uint8_t*)data;
  2495  01D2  3020               	movlw	control_transfer@data& (0+255)
  2496  01D3  00F9               	movwf	??_control_transfer
  2497  01D4  0879               	movf	??_control_transfer,w
  2498  01D5  0020               	movlb	0	; select bank0
  2499  01D6  00C3               	movwf	control_transfer@dptr
  2500                           
  2501                           ;protocol.c: 90: for(i=0;i<32;i++)
  2502  01D7  01C4               	clrf	control_transfer@i
  2503  01D8  3020               	movlw	32
  2504  01D9  0244               	subwf	control_transfer@i,w
  2505  01DA  1803               	btfsc	3,0
  2506  01DB  29EE               	goto	l2941
  2507  01DC                     l2933:	
  2508                           
  2509                           ;protocol.c: 91: {
  2510                           ;protocol.c: 92: SEND_DATA_BYTE(*dptr++);
  2511  01DC  0843               	movf	control_transfer@dptr,w
  2512  01DD  0086               	movwf	6
  2513  01DE  0187               	clrf	7
  2514  01DF  0801               	movf	1,w
  2515  01E0  2529               	fcall	_SEND_DATA_BYTE
  2516  01E1  3001               	movlw	1
  2517  01E2  00F9               	movwf	??_control_transfer
  2518  01E3  0879               	movf	??_control_transfer,w
  2519  01E4  0020               	movlb	0	; select bank0
  2520  01E5  07C3               	addwf	control_transfer@dptr,f
  2521  01E6  3001               	movlw	1
  2522  01E7  00F9               	movwf	??_control_transfer
  2523  01E8  0879               	movf	??_control_transfer,w
  2524  01E9  07C4               	addwf	control_transfer@i,f
  2525  01EA  3020               	movlw	32
  2526  01EB  0244               	subwf	control_transfer@i,w
  2527  01EC  1C03               	skipc
  2528  01ED  29DC               	goto	l2933
  2529  01EE                     l2941:	
  2530                           
  2531                           ;protocol.c: 93: }
  2532                           ;protocol.c: 94: SEND_EOF();
  2533  01EE  25B4               	fcall	_SEND_EOF
  2534                           
  2535                           ;protocol.c: 95: break;
  2536  01EF  0008               	return
  2537  01F0                     l2943:	
  2538                           ;protocol.c: 96: case 0x06:
  2539                           
  2540                           
  2541                           ;protocol.c: 97: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2542  01F0  3066               	movlw	__x& (0+255)
  2543  01F1  254B               	fcall	_GET_CHAR_HELPER
  2544  01F2  3A00               	xorlw	0
  2545  01F3  1D03               	btfss	3,2
  2546  01F4  0008               	return
  2547  01F5  3067               	movlw	__y& (0+255)
  2548  01F6  254B               	fcall	_GET_CHAR_HELPER
  2549  01F7  3A00               	xorlw	0
  2550  01F8  1D03               	btfss	3,2
  2551  01F9  0008               	return
  2552  01FA  0020               	movlb	0	; select bank0
  2553  01FB  0866               	movf	__x,w
  2554  01FC  39F0               	andlw	240
  2555  01FD  1D03               	btfss	3,2
  2556  01FE  0008               	return
  2557  01FF  0867               	movf	__y,w
  2558  0200  39F0               	andlw	240
  2559  0201  1D03               	btfss	3,2
  2560  0202  0008               	return
  2561  0203  0867               	movf	__y,w
  2562  0204  00F9               	movwf	??_control_transfer
  2563  0205  3003               	movlw	3
  2564  0206                     u3625:	
  2565  0206  35F9               	lslf	??_control_transfer,f
  2566  0207  3EFF               	addlw	-1
  2567  0208  1D03               	skipz
  2568  0209  2A06               	goto	u3625
  2569  020A  3579               	lslf	??_control_transfer,w
  2570  020B  0466               	iorwf	__x,w
  2571  020C  00FA               	movwf	??_control_transfer+1
  2572  020D  087A               	movf	??_control_transfer+1,w
  2573  020E  00C7               	movwf	control_transfer@x
  2574  020F  0847               	movf	control_transfer@x,w
  2575  0210  00F9               	movwf	??_control_transfer
  2576  0211  0879               	movf	??_control_transfer,w
  2577  0212  07E0               	addwf	__checksum,f
  2578                           
  2579                           ;protocol.c: 98: *((uint8_t*)(&page))=x;
  2580  0213  0847               	movf	control_transfer@x,w
  2581  0214  00F9               	movwf	??_control_transfer
  2582  0215  0879               	movf	??_control_transfer,w
  2583  0216  00C5               	movwf	control_transfer@page
  2584                           
  2585                           ;protocol.c: 99: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2586  0217  3066               	movlw	__x& (0+255)
  2587  0218  254B               	fcall	_GET_CHAR_HELPER
  2588  0219  3A00               	xorlw	0
  2589  021A  1D03               	btfss	3,2
  2590  021B  0008               	return
  2591  021C  3067               	movlw	__y& (0+255)
  2592  021D  254B               	fcall	_GET_CHAR_HELPER
  2593  021E  3A00               	xorlw	0
  2594  021F  1D03               	btfss	3,2
  2595  0220  0008               	return
  2596  0221  0020               	movlb	0	; select bank0
  2597  0222  0866               	movf	__x,w
  2598  0223  39F0               	andlw	240
  2599  0224  1D03               	btfss	3,2
  2600  0225  0008               	return
  2601  0226  0867               	movf	__y,w
  2602  0227  39F0               	andlw	240
  2603  0228  1D03               	btfss	3,2
  2604  0229  0008               	return
  2605  022A  0867               	movf	__y,w
  2606  022B  00F9               	movwf	??_control_transfer
  2607  022C  3003               	movlw	3
  2608  022D                     u3675:	
  2609  022D  35F9               	lslf	??_control_transfer,f
  2610  022E  3EFF               	addlw	-1
  2611  022F  1D03               	skipz
  2612  0230  2A2D               	goto	u3675
  2613  0231  3579               	lslf	??_control_transfer,w
  2614  0232  0466               	iorwf	__x,w
  2615  0233  00FA               	movwf	??_control_transfer+1
  2616  0234  087A               	movf	??_control_transfer+1,w
  2617  0235  00C7               	movwf	control_transfer@x
  2618  0236  0847               	movf	control_transfer@x,w
  2619  0237  00F9               	movwf	??_control_transfer
  2620  0238  0879               	movf	??_control_transfer,w
  2621  0239  07E0               	addwf	__checksum,f
  2622                           
  2623                           ;protocol.c: 100: *(((uint8_t*)(&page))+1)=x;
  2624  023A  0847               	movf	control_transfer@x,w
  2625  023B  00F9               	movwf	??_control_transfer
  2626  023C  0879               	movf	??_control_transfer,w
  2627  023D  00C6               	movwf	control_transfer@page+1
  2628                           
  2629                           ;protocol.c: 101: dptr=(uint8_t*)data;
  2630  023E  3020               	movlw	control_transfer@data& (0+255)
  2631  023F  00F9               	movwf	??_control_transfer
  2632  0240  0879               	movf	??_control_transfer,w
  2633  0241  00C3               	movwf	control_transfer@dptr
  2634                           
  2635                           ;protocol.c: 102: for(i=0;i<32;i++)
  2636  0242  01C4               	clrf	control_transfer@i
  2637  0243  3020               	movlw	32
  2638  0244  0244               	subwf	control_transfer@i,w
  2639  0245  1803               	btfsc	3,0
  2640  0246  2A7D               	goto	l3005
  2641  0247                     l2983:	
  2642                           
  2643                           ;protocol.c: 103: {
  2644                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2645  0247  3066               	movlw	__x& (0+255)
  2646  0248  254B               	fcall	_GET_CHAR_HELPER
  2647  0249  3A00               	xorlw	0
  2648  024A  1D03               	btfss	3,2
  2649  024B  0008               	return
  2650  024C  3067               	movlw	__y& (0+255)
  2651  024D  254B               	fcall	_GET_CHAR_HELPER
  2652  024E  3A00               	xorlw	0
  2653  024F  1D03               	btfss	3,2
  2654  0250  0008               	return
  2655  0251  0020               	movlb	0	; select bank0
  2656  0252  0866               	movf	__x,w
  2657  0253  39F0               	andlw	240
  2658  0254  1D03               	btfss	3,2
  2659  0255  0008               	return
  2660  0256  0867               	movf	__y,w
  2661  0257  39F0               	andlw	240
  2662  0258  1D03               	btfss	3,2
  2663  0259  0008               	return
  2664  025A  0867               	movf	__y,w
  2665  025B  00F9               	movwf	??_control_transfer
  2666  025C  3003               	movlw	3
  2667  025D                     u3735:	
  2668  025D  35F9               	lslf	??_control_transfer,f
  2669  025E  3EFF               	addlw	-1
  2670  025F  1D03               	skipz
  2671  0260  2A5D               	goto	u3735
  2672  0261  3579               	lslf	??_control_transfer,w
  2673  0262  0466               	iorwf	__x,w
  2674  0263  00FA               	movwf	??_control_transfer+1
  2675  0264  087A               	movf	??_control_transfer+1,w
  2676  0265  00C7               	movwf	control_transfer@x
  2677  0266  0847               	movf	control_transfer@x,w
  2678  0267  00F9               	movwf	??_control_transfer
  2679  0268  0879               	movf	??_control_transfer,w
  2680  0269  07E0               	addwf	__checksum,f
  2681                           
  2682                           ;protocol.c: 105: *dptr++=x;
  2683  026A  0847               	movf	control_transfer@x,w
  2684  026B  00F9               	movwf	??_control_transfer
  2685  026C  0843               	movf	control_transfer@dptr,w
  2686  026D  0086               	movwf	6
  2687  026E  0187               	clrf	7
  2688  026F  0879               	movf	??_control_transfer,w
  2689  0270  0081               	movwf	1
  2690  0271  3001               	movlw	1
  2691  0272  00F9               	movwf	??_control_transfer
  2692  0273  0879               	movf	??_control_transfer,w
  2693  0274  07C3               	addwf	control_transfer@dptr,f
  2694  0275  3001               	movlw	1
  2695  0276  00F9               	movwf	??_control_transfer
  2696  0277  0879               	movf	??_control_transfer,w
  2697  0278  07C4               	addwf	control_transfer@i,f
  2698  0279  3020               	movlw	32
  2699  027A  0244               	subwf	control_transfer@i,w
  2700  027B  1C03               	skipc
  2701  027C  2A47               	goto	l2983
  2702  027D                     l3005:	
  2703                           
  2704                           ;protocol.c: 106: }
  2705                           ;protocol.c: 107: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2706  027D  3066               	movlw	__x& (0+255)
  2707  027E  254B               	fcall	_GET_CHAR_HELPER
  2708  027F  3A00               	xorlw	0
  2709  0280  1D03               	btfss	3,2
  2710  0281  0008               	return
  2711  0282  3067               	movlw	__y& (0+255)
  2712  0283  254B               	fcall	_GET_CHAR_HELPER
  2713  0284  3A00               	xorlw	0
  2714  0285  1D03               	btfss	3,2
  2715  0286  0008               	return
  2716  0287  0020               	movlb	0	; select bank0
  2717  0288  0866               	movf	__x,w
  2718  0289  39F0               	andlw	240
  2719  028A  1D03               	btfss	3,2
  2720  028B  0008               	return
  2721  028C  0867               	movf	__y,w
  2722  028D  39F0               	andlw	240
  2723  028E  1D03               	btfss	3,2
  2724  028F  0008               	return
  2725  0290  0867               	movf	__y,w
  2726  0291  00F9               	movwf	??_control_transfer
  2727  0292  3003               	movlw	3
  2728  0293                     u3795:	
  2729  0293  35F9               	lslf	??_control_transfer,f
  2730  0294  3EFF               	addlw	-1
  2731  0295  1D03               	skipz
  2732  0296  2A93               	goto	u3795
  2733  0297  3579               	lslf	??_control_transfer,w
  2734  0298  0466               	iorwf	__x,w
  2735  0299  00FA               	movwf	??_control_transfer+1
  2736  029A  087A               	movf	??_control_transfer+1,w
  2737  029B  00E6               	movwf	__x
  2738  029C  0866               	movf	__x,w
  2739  029D  00F9               	movwf	??_control_transfer
  2740  029E  0879               	movf	??_control_transfer,w
  2741  029F  07E0               	addwf	__checksum,f
  2742  02A0  0860               	movf	__checksum,w
  2743  02A1  1D03               	skipz
  2744  02A2  0008               	return
  2745  02A3  3066               	movlw	__x& (0+255)
  2746  02A4  254B               	fcall	_GET_CHAR_HELPER
  2747  02A5  3A00               	xorlw	0
  2748  02A6  1D03               	btfss	3,2
  2749  02A7  0008               	return
  2750  02A8  0020               	movlb	0	; select bank0
  2751  02A9  0866               	movf	__x,w
  2752  02AA  3A11               	xorlw	17
  2753  02AB  1D03               	btfss	3,2
  2754  02AC  0008               	return
  2755                           
  2756                           ;protocol.c: 108: Save(page,data,16);
  2757  02AD  0846               	movf	control_transfer@page+1,w
  2758  02AE  01F2               	clrf	Save@address+1
  2759  02AF  07F2               	addwf	Save@address+1,f
  2760  02B0  0845               	movf	control_transfer@page,w
  2761  02B1  01F1               	clrf	Save@address
  2762  02B2  07F1               	addwf	Save@address,f
  2763  02B3  3020               	movlw	control_transfer@data& (0+255)
  2764  02B4  00F9               	movwf	??_control_transfer
  2765  02B5  0879               	movf	??_control_transfer,w
  2766  02B6  00F3               	movwf	Save@ptr
  2767  02B7  3010               	movlw	16
  2768  02B8  00FA               	movwf	??_control_transfer+1
  2769  02B9  087A               	movf	??_control_transfer+1,w
  2770  02BA  00F4               	movwf	Save@data_length
  2771  02BB  26FF               	fcall	_Save
  2772                           
  2773                           ;protocol.c: 109: switch(page)
  2774  02BC  2AD9               	goto	l3039
  2775  02BD                     l3033:	
  2776                           ;protocol.c: 110: {
  2777                           ;protocol.c: 111: case 0x7D0:
  2778                           
  2779                           
  2780                           ;protocol.c: 112: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2781  02BD  30D0               	movlw	208
  2782  02BE  00F1               	movwf	Load@address
  2783  02BF  3007               	movlw	7
  2784  02C0  00F2               	movwf	Load@address+1
  2785  02C1  30C0               	movlw	_config& (0+255)
  2786  02C2  00F9               	movwf	??_control_transfer
  2787  02C3  0879               	movf	??_control_transfer,w
  2788  02C4  00F3               	movwf	Load@ptr
  2789  02C5  3009               	movlw	9
  2790  02C6  00FA               	movwf	??_control_transfer+1
  2791  02C7  087A               	movf	??_control_transfer+1,w
  2792  02C8  00F4               	movwf	Load@data_length
  2793  02C9  2777               	fcall	_Load
  2794                           
  2795                           ;protocol.c: 113: break;
  2796  02CA  2AE7               	goto	l3041
  2797  02CB                     l3035:	
  2798                           ;protocol.c: 114: case 0x7E0:
  2799                           
  2800                           
  2801                           ;protocol.c: 115: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2802  02CB  30E0               	movlw	224
  2803  02CC  00F1               	movwf	Load@address
  2804  02CD  3007               	movlw	7
  2805  02CE  00F2               	movwf	Load@address+1
  2806  02CF  30A0               	movlw	_hitlist& (0+255)
  2807  02D0  00F9               	movwf	??_control_transfer
  2808  02D1  0879               	movf	??_control_transfer,w
  2809  02D2  00F3               	movwf	Load@ptr
  2810  02D3  3010               	movlw	16
  2811  02D4  00FA               	movwf	??_control_transfer+1
  2812  02D5  087A               	movf	??_control_transfer+1,w
  2813  02D6  00F4               	movwf	Load@data_length
  2814  02D7  2777               	fcall	_Load
  2815                           
  2816                           ;protocol.c: 117: }
  2817                           
  2818                           ;protocol.c: 116: break;
  2819  02D8  2AE7               	goto	l3041
  2820  02D9                     l3039:	
  2821                           
  2822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2823                           ; Switch size 1, requested type "space"
  2824                           ; Number of cases is 1, Range of values is 7 to 7
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte            4     3 (average)
  2828                           ; direct_byte           11     9 (fixed)
  2829                           ; jumptable            263     9 (fixed)
  2830                           ;	Chosen strategy is simple_byte
  2831  02D9  0020               	movlb	0	; select bank0
  2832  02DA  0846               	movf	control_transfer@page+1,w
  2833  02DB  3A07               	xorlw	7	; case 7
  2834  02DC  1903               	skipnz
  2835  02DD  2ADF               	goto	l3349
  2836  02DE  2AE7               	goto	l3041
  2837  02DF                     l3349:	
  2838                           
  2839                           ; Switch size 1, requested type "space"
  2840                           ; Number of cases is 2, Range of values is 208 to 224
  2841                           ; switch strategies available:
  2842                           ; Name         Instructions Cycles
  2843                           ; simple_byte            7     4 (average)
  2844                           ; direct_byte           43     9 (fixed)
  2845                           ; jumptable            263     9 (fixed)
  2846                           ;	Chosen strategy is simple_byte
  2847  02DF  0845               	movf	control_transfer@page,w
  2848  02E0  3AD0               	xorlw	208	; case 208
  2849  02E1  1903               	skipnz
  2850  02E2  2ABD               	goto	l3033
  2851  02E3  3A30               	xorlw	48	; case 224
  2852  02E4  1903               	skipnz
  2853  02E5  2ACB               	goto	l3035
  2854  02E6  2AE7               	goto	l3041
  2855  02E7                     l3041:	
  2856                           
  2857                           ;protocol.c: 118: SEND_SOF();
  2858  02E7  25A8               	fcall	_SEND_SOF
  2859                           
  2860                           ;protocol.c: 119: SEND_DATA_BYTE(0x00);
  2861  02E8  3000               	movlw	0
  2862  02E9  2529               	fcall	_SEND_DATA_BYTE
  2863                           
  2864                           ;protocol.c: 120: SEND_EOF();
  2865  02EA  25B4               	fcall	_SEND_EOF
  2866                           
  2867                           ;protocol.c: 121: break;
  2868  02EB  0008               	return
  2869  02EC                     l3043:	
  2870                           ;protocol.c: 122: case 0x7:
  2871                           
  2872                           
  2873                           ;protocol.c: 123: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2874  02EC  3066               	movlw	__x& (0+255)
  2875  02ED  254B               	fcall	_GET_CHAR_HELPER
  2876  02EE  3A00               	xorlw	0
  2877  02EF  1D03               	btfss	3,2
  2878  02F0  0008               	return
  2879  02F1  3067               	movlw	__y& (0+255)
  2880  02F2  254B               	fcall	_GET_CHAR_HELPER
  2881  02F3  3A00               	xorlw	0
  2882  02F4  1D03               	btfss	3,2
  2883  02F5  0008               	return
  2884  02F6  0020               	movlb	0	; select bank0
  2885  02F7  0866               	movf	__x,w
  2886  02F8  39F0               	andlw	240
  2887  02F9  1D03               	btfss	3,2
  2888  02FA  0008               	return
  2889  02FB  0867               	movf	__y,w
  2890  02FC  39F0               	andlw	240
  2891  02FD  1D03               	btfss	3,2
  2892  02FE  0008               	return
  2893  02FF  0867               	movf	__y,w
  2894  0300  00F9               	movwf	??_control_transfer
  2895  0301  3003               	movlw	3
  2896  0302                     u3875:	
  2897  0302  35F9               	lslf	??_control_transfer,f
  2898  0303  3EFF               	addlw	-1
  2899  0304  1D03               	skipz
  2900  0305  2B02               	goto	u3875
  2901  0306  3579               	lslf	??_control_transfer,w
  2902  0307  0466               	iorwf	__x,w
  2903  0308  00FA               	movwf	??_control_transfer+1
  2904  0309  087A               	movf	??_control_transfer+1,w
  2905  030A  00E6               	movwf	__x
  2906  030B  0866               	movf	__x,w
  2907  030C  00F9               	movwf	??_control_transfer
  2908  030D  0879               	movf	??_control_transfer,w
  2909  030E  07E0               	addwf	__checksum,f
  2910  030F  0860               	movf	__checksum,w
  2911  0310  1D03               	skipz
  2912  0311  0008               	return
  2913  0312  3066               	movlw	__x& (0+255)
  2914  0313  254B               	fcall	_GET_CHAR_HELPER
  2915  0314  3A00               	xorlw	0
  2916  0315  1D03               	btfss	3,2
  2917  0316  0008               	return
  2918  0317  0020               	movlb	0	; select bank0
  2919  0318  0866               	movf	__x,w
  2920  0319  3A11               	xorlw	17
  2921  031A  1D03               	btfss	3,2
  2922  031B  0008               	return
  2923                           
  2924                           ;protocol.c: 124: play_song(one_up,sizeof(one_up)/sizeof(uint16_t),65000,0);
  2925  031C  3046               	movlw	low (_one_up| (0+32768))
  2926  031D  00F1               	movwf	play_song@song
  2927  031E  3086               	movlw	high (_one_up| (0+32768))
  2928  031F  00F2               	movwf	play_song@song+1
  2929  0320  3006               	movlw	6
  2930  0321  00F9               	movwf	??_control_transfer
  2931  0322  0879               	movf	??_control_transfer,w
  2932  0323  00F3               	movwf	play_song@length
  2933  0324  30E8               	movlw	232
  2934  0325  00F4               	movwf	play_song@note_duration
  2935  0326  30FD               	movlw	253
  2936  0327  00F5               	movwf	play_song@note_duration+1
  2937  0328  01F6               	clrf	play_song@repeat
  2938  0329  279C               	fcall	_play_song
  2939                           
  2940                           ;protocol.c: 125: SEND_SOF();
  2941  032A  25A8               	fcall	_SEND_SOF
  2942                           
  2943                           ;protocol.c: 126: SEND_DATA_BYTE(0x00);
  2944  032B  3000               	movlw	0
  2945  032C  2529               	fcall	_SEND_DATA_BYTE
  2946                           
  2947                           ;protocol.c: 127: SEND_EOF();
  2948  032D  25B4               	fcall	_SEND_EOF
  2949                           
  2950                           ;protocol.c: 132: }
  2951                           
  2952                           ;protocol.c: 131: goto err;
  2953                           
  2954                           ;protocol.c: 130: default:
  2955                           
  2956                           ;protocol.c: 128: break;
  2957  032E  0008               	return
  2958  032F                     l3073:	
  2959  032F  0020               	movlb	0	; select bank0
  2960  0330  0840               	movf	control_transfer@cmd,w
  2961                           
  2962                           ; Switch size 1, requested type "space"
  2963                           ; Number of cases is 5, Range of values is 1 to 7
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte           16     9 (average)
  2967                           ; direct_byte           23     9 (fixed)
  2968                           ; jumptable            263     9 (fixed)
  2969                           ;	Chosen strategy is simple_byte
  2970  0331  3A01               	xorlw	1	; case 1
  2971  0332  1903               	skipnz
  2972  0333  2877               	goto	l2769
  2973  0334  3A02               	xorlw	2	; case 3
  2974  0335  1903               	skipnz
  2975  0336  28AF               	goto	l2797
  2976  0337  3A07               	xorlw	7	; case 4
  2977  0338  1903               	skipnz
  2978  0339  2942               	goto	l2861
  2979  033A  3A02               	xorlw	2	; case 6
  2980  033B  1903               	skipnz
  2981  033C  29F0               	goto	l2943
  2982  033D  3A01               	xorlw	1	; case 7
  2983  033E  1903               	skipnz
  2984  033F  2AEC               	goto	l3043
  2985  0340  2B42               	goto	l419
  2986  0341  0008               	return
  2987  0342                     l419:	
  2988                           ;protocol.c: 134: return;
  2989                           
  2990                           ;protocol.c: 133: err:
  2991                           
  2992  0342  0008               	return
  2993  0343                     __end_of_control_transfer:	
  2994                           
  2995                           	psect	text7
  2996  05A8                     __ptext7:	
  2997 ;; *************** function _SEND_SOF *****************
  2998 ;; Defined at:
  2999 ;;		line 38 in file "protocol.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;		None               void
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3013 ;;      Params:         0       0       0       0
  3014 ;;      Locals:         0       0       0       0
  3015 ;;      Temps:          1       0       0       0
  3016 ;;      Totals:         1       0       0       0
  3017 ;;Total ram usage:        1 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    4
  3020 ;; This function calls:
  3021 ;;		_SEND_DATA_BYTE
  3022 ;;		_Send_Byte
  3023 ;; This function is called by:
  3024 ;;		_control_transfer
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           
  3029                           ;psect for function _SEND_SOF
  3030  05A8                     _SEND_SOF:	
  3031                           
  3032                           ;incstack = 0
  3033                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  3034  05A8  3010               	movlw	16
  3035  05A9  27C0               	fcall	_Send_Byte
  3036  05AA  3085               	movlw	133
  3037  05AB  00F5               	movwf	??_SEND_SOF
  3038  05AC                     u4337:	
  3039  05AC  0BF5               	decfsz	??_SEND_SOF,f
  3040  05AD  2DAC               	goto	u4337
  3041  05AE  0020               	movlb	0	; select bank0
  3042  05AF  01E0               	clrf	__checksum
  3043  05B0  0021               	movlb	1	; select bank1
  3044  05B1  0840               	movf	_config^(0+128),w
  3045  05B2  2529               	fcall	_SEND_DATA_BYTE
  3046  05B3  0008               	return
  3047  05B4                     __end_of_SEND_SOF:	
  3048                           
  3049                           	psect	text8
  3050  05B4                     __ptext8:	
  3051 ;; *************** function _SEND_EOF *****************
  3052 ;; Defined at:
  3053 ;;		line 39 in file "protocol.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;		None               void
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3067 ;;      Params:         0       0       0       0
  3068 ;;      Locals:         0       0       0       0
  3069 ;;      Temps:          1       0       0       0
  3070 ;;      Totals:         1       0       0       0
  3071 ;;Total ram usage:        1 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    4
  3074 ;; This function calls:
  3075 ;;		_SEND_DATA_BYTE
  3076 ;;		_Send_Byte
  3077 ;; This function is called by:
  3078 ;;		_control_transfer
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _SEND_EOF
  3084  05B4                     _SEND_EOF:	
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  3088  05B4  0020               	movlb	0	; select bank0
  3089  05B5  0860               	movf	__checksum,w
  3090  05B6  2529               	fcall	_SEND_DATA_BYTE
  3091  05B7  3011               	movlw	17
  3092  05B8  27C0               	fcall	_Send_Byte
  3093  05B9  3085               	movlw	133
  3094  05BA  00F5               	movwf	??_SEND_EOF
  3095  05BB                     u4347:	
  3096  05BB  0BF5               	decfsz	??_SEND_EOF,f
  3097  05BC  2DBB               	goto	u4347
  3098  05BD  0008               	return
  3099  05BE                     __end_of_SEND_EOF:	
  3100                           
  3101                           	psect	text9
  3102  0529                     __ptext9:	
  3103 ;; *************** function _SEND_DATA_BYTE *****************
  3104 ;; Defined at:
  3105 ;;		line 37 in file "protocol.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  b               1    wreg     unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  b               1    4[COMMON] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, pclath, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3119 ;;      Params:         0       0       0       0
  3120 ;;      Locals:         1       0       0       0
  3121 ;;      Temps:          2       0       0       0
  3122 ;;      Totals:         3       0       0       0
  3123 ;;Total ram usage:        3 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    3
  3126 ;; This function calls:
  3127 ;;		_Send_Byte
  3128 ;; This function is called by:
  3129 ;;		_SEND_SOF
  3130 ;;		_SEND_EOF
  3131 ;;		_control_transfer
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _SEND_DATA_BYTE
  3137  0529                     _SEND_DATA_BYTE:	
  3138                           
  3139                           ;incstack = 0
  3140                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3141                           ;SEND_DATA_BYTE@b stored from wreg
  3142  0529  00F4               	movwf	SEND_DATA_BYTE@b
  3143  052A  0874               	movf	SEND_DATA_BYTE@b,w
  3144  052B  390F               	andlw	15
  3145  052C  00F2               	movwf	??_SEND_DATA_BYTE
  3146  052D  0872               	movf	??_SEND_DATA_BYTE,w
  3147  052E  0020               	movlb	0	; select bank0
  3148  052F  00E6               	movwf	__x
  3149  0530  0874               	movf	SEND_DATA_BYTE@b,w
  3150  0531  00F2               	movwf	??_SEND_DATA_BYTE
  3151  0532  3004               	movlw	4
  3152  0533                     u2915:	
  3153  0533  36F2               	lsrf	??_SEND_DATA_BYTE,f
  3154  0534  0B89               	decfsz	9,f
  3155  0535  2D33               	goto	u2915
  3156  0536  0872               	movf	??_SEND_DATA_BYTE,w
  3157  0537  00F3               	movwf	??_SEND_DATA_BYTE+1
  3158  0538  0873               	movf	??_SEND_DATA_BYTE+1,w
  3159  0539  00E7               	movwf	__y
  3160  053A  0866               	movf	__x,w
  3161  053B  27C0               	fcall	_Send_Byte
  3162  053C  3085               	movlw	133
  3163  053D  00F2               	movwf	??_SEND_DATA_BYTE
  3164  053E                     u4357:	
  3165  053E  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3166  053F  2D3E               	goto	u4357
  3167  0540  0020               	movlb	0	; select bank0
  3168  0541  0867               	movf	__y,w
  3169  0542  27C0               	fcall	_Send_Byte
  3170  0543  3085               	movlw	133
  3171  0544  00F2               	movwf	??_SEND_DATA_BYTE
  3172  0545                     u4367:	
  3173  0545  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3174  0546  2D45               	goto	u4367
  3175  0547  0874               	movf	SEND_DATA_BYTE@b,w
  3176  0548  0020               	movlb	0	; select bank0
  3177  0549  02E0               	subwf	__checksum,f
  3178  054A  0008               	return
  3179  054B                     __end_of_SEND_DATA_BYTE:	
  3180                           
  3181                           	psect	text10
  3182  054B                     __ptext10:	
  3183 ;; *************** function _GET_CHAR_HELPER *****************
  3184 ;; Defined at:
  3185 ;;		line 31 in file "protocol.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  val             1    wreg     PTR unsigned char 
  3188 ;;		 -> _y(1), _x(1), 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  val             1    2[COMMON] PTR unsigned char 
  3191 ;;		 -> _y(1), _x(1), 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      unsigned char 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr1l, fsr1h, status,2
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3201 ;;      Params:         0       0       0       0
  3202 ;;      Locals:         1       0       0       0
  3203 ;;      Temps:          1       0       0       0
  3204 ;;      Totals:         2       0       0       0
  3205 ;;Total ram usage:        2 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    1
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_control_transfer
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           
  3216                           ;psect for function _GET_CHAR_HELPER
  3217  054B                     _GET_CHAR_HELPER:	
  3218                           
  3219                           ;incstack = 0
  3220                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3221                           ;GET_CHAR_HELPER@val stored from wreg
  3222  054B  00F2               	movwf	GET_CHAR_HELPER@val
  3223  054C  0020               	movlb	0	; select bank0
  3224  054D  01D6               	clrf	__i
  3225  054E  01D7               	clrf	__i+1
  3226  054F                     l297:	
  3227  054F  1A91               	btfsc	17,5	;volatile
  3228  0550  2D5E               	goto	l2691
  3229  0551  3001               	movlw	1
  3230  0552  07D6               	addwf	__i,f
  3231  0553  3000               	movlw	0
  3232  0554  3DD7               	addwfc	__i+1,f
  3233  0555  3075               	movlw	117
  3234  0556  0257               	subwf	__i+1,w
  3235  0557  3030               	movlw	48
  3236  0558  1903               	skipnz
  3237  0559  0256               	subwf	__i,w
  3238  055A  1C03               	skipc
  3239  055B  2D4F               	goto	l297
  3240  055C  3001               	movlw	1
  3241  055D  0008               	return
  3242  055E                     l2691:	
  3243  055E  0023               	movlb	3	; select bank3
  3244  055F  0819               	movf	25,w	;volatile
  3245  0560  00F1               	movwf	??_GET_CHAR_HELPER
  3246  0561  0872               	movf	GET_CHAR_HELPER@val,w
  3247  0562  0086               	movwf	6
  3248  0563  0187               	clrf	7
  3249  0564  0871               	movf	??_GET_CHAR_HELPER,w
  3250  0565  0081               	movwf	1
  3251  0566  3000               	movlw	0
  3252  0567  0008               	return
  3253  0568                     __end_of_GET_CHAR_HELPER:	
  3254                           
  3255                           	psect	text11
  3256  0658                     __ptext11:	
  3257 ;; *************** function _add_to_hitlist *****************
  3258 ;; Defined at:
  3259 ;;		line 319 in file "user.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  gun             1    wreg     unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  gun             1    5[COMMON] unsigned char 
  3264 ;;  i               1    8[COMMON] unsigned char 
  3265 ;;  gun16           2    6[COMMON] unsigned int 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;		None               void
  3268 ;; Registers used:
  3269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3275 ;;      Params:         0       0       0       0
  3276 ;;      Locals:         4       0       0       0
  3277 ;;      Temps:          4       0       0       0
  3278 ;;      Totals:         8       0       0       0
  3279 ;;Total ram usage:        8 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    1
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_hit_by
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           
  3290                           ;psect for function _add_to_hitlist
  3291  0658                     _add_to_hitlist:	
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  3295                           ;add_to_hitlist@gun stored from wreg
  3296  0658  00F5               	movwf	add_to_hitlist@gun
  3297                           
  3298                           ;user.c: 321: uint16_t gun16 = gun & 0x7F;
  3299  0659  0875               	movf	add_to_hitlist@gun,w
  3300  065A  397F               	andlw	127
  3301  065B  00F1               	movwf	??_add_to_hitlist
  3302  065C  01F2               	clrf	??_add_to_hitlist+1
  3303  065D  0871               	movf	??_add_to_hitlist,w
  3304  065E  00F6               	movwf	add_to_hitlist@gun16
  3305  065F  0872               	movf	??_add_to_hitlist+1,w
  3306  0660  00F7               	movwf	add_to_hitlist@gun16+1
  3307                           
  3308                           ;user.c: 322: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  3309  0661  01F8               	clrf	add_to_hitlist@i
  3310  0662                     L2:	
  3311  0662  3010               	movlw	16
  3312  0663  0278               	subwf	add_to_hitlist@i,w
  3313  0664  1803               	btfsc	3,0
  3314  0665  0008               	return
  3315                           
  3316                           ;user.c: 323: {
  3317                           ;user.c: 324: if(!(hitlist[i] & 0x007F))
  3318  0666  3578               	lslf	add_to_hitlist@i,w
  3319  0667  3EA0               	addlw	_hitlist& (0+255)
  3320  0668  0086               	movwf	6
  3321  0669  0187               	clrf	7
  3322  066A  3F40               	moviw [0]fsr1
  3323  066B  00F1               	movwf	??_add_to_hitlist
  3324  066C  3F41               	moviw [1]fsr1
  3325  066D  00F2               	movwf	??_add_to_hitlist+1
  3326  066E  307F               	movlw	127
  3327  066F  0571               	andwf	??_add_to_hitlist,w
  3328  0670  00F3               	movwf	??_add_to_hitlist+2
  3329  0671  3000               	movlw	0
  3330  0672  0572               	andwf	??_add_to_hitlist+1,w
  3331  0673  00F4               	movwf	??_add_to_hitlist+3
  3332  0674  0874               	movf	??_add_to_hitlist+3,w
  3333  0675  0473               	iorwf	??_add_to_hitlist+2,w
  3334  0676  1D03               	skipz
  3335  0677  2E82               	goto	l3121
  3336                           
  3337                           ;user.c: 325: {
  3338                           ;user.c: 326: hitlist[i] |= gun16;
  3339  0678  3578               	lslf	add_to_hitlist@i,w
  3340  0679  3EA0               	addlw	_hitlist& (0+255)
  3341  067A  0086               	movwf	6
  3342  067B  0187               	clrf	7
  3343  067C  0876               	movf	add_to_hitlist@gun16,w
  3344  067D  0481               	iorwf	1,f
  3345  067E  3141               	addfsr 1,1
  3346  067F  0877               	movf	add_to_hitlist@gun16+1,w
  3347  0680  0481               	iorwf	1,f
  3348                           
  3349                           ;user.c: 327: return;
  3350  0681  0008               	return
  3351  0682                     l3121:	
  3352                           
  3353                           ;user.c: 328: }
  3354                           ;user.c: 329: if(!(hitlist[i] & 0x3F80))
  3355  0682  3578               	lslf	add_to_hitlist@i,w
  3356  0683  3EA0               	addlw	_hitlist& (0+255)
  3357  0684  0086               	movwf	6
  3358  0685  0187               	clrf	7
  3359  0686  3F40               	moviw [0]fsr1
  3360  0687  00F1               	movwf	??_add_to_hitlist
  3361  0688  3F41               	moviw [1]fsr1
  3362  0689  00F2               	movwf	??_add_to_hitlist+1
  3363  068A  3080               	movlw	128
  3364  068B  0571               	andwf	??_add_to_hitlist,w
  3365  068C  00F3               	movwf	??_add_to_hitlist+2
  3366  068D  303F               	movlw	63
  3367  068E  0572               	andwf	??_add_to_hitlist+1,w
  3368  068F  00F4               	movwf	??_add_to_hitlist+3
  3369  0690  0874               	movf	??_add_to_hitlist+3,w
  3370  0691  0473               	iorwf	??_add_to_hitlist+2,w
  3371  0692  1D03               	skipz
  3372  0693  2EA7               	goto	l3127
  3373                           
  3374                           ;user.c: 330: {
  3375                           ;user.c: 331: hitlist[i] |= gun16 << 7;
  3376  0694  0877               	movf	add_to_hitlist@gun16+1,w
  3377  0695  00F2               	movwf	??_add_to_hitlist+1
  3378  0696  0876               	movf	add_to_hitlist@gun16,w
  3379  0697  00F1               	movwf	??_add_to_hitlist
  3380  0698  3007               	movlw	7
  3381  0699                     u3995:	
  3382  0699  35F1               	lslf	??_add_to_hitlist,f
  3383  069A  0DF2               	rlf	??_add_to_hitlist+1,f
  3384  069B  0B89               	decfsz	9,f
  3385  069C  2E99               	goto	u3995
  3386  069D  3578               	lslf	add_to_hitlist@i,w
  3387  069E  3EA0               	addlw	_hitlist& (0+255)
  3388  069F  0086               	movwf	6
  3389  06A0  0187               	clrf	7
  3390  06A1  0871               	movf	??_add_to_hitlist,w
  3391  06A2  0481               	iorwf	1,f
  3392  06A3  3141               	addfsr 1,1
  3393  06A4  0872               	movf	??_add_to_hitlist+1,w
  3394  06A5  0481               	iorwf	1,f
  3395                           
  3396                           ;user.c: 332: return;
  3397  06A6  0008               	return
  3398  06A7                     l3127:	
  3399  06A7  3001               	movlw	1
  3400  06A8  00F1               	movwf	??_add_to_hitlist
  3401  06A9  0871               	movf	??_add_to_hitlist,w
  3402  06AA  07F8               	addwf	add_to_hitlist@i,f
  3403  06AB  2E62               	goto	L2
  3404  06AC                     __end_of_add_to_hitlist:	
  3405                           
  3406                           	psect	text12
  3407  03CA                     __ptext12:	
  3408 ;; *************** function _handle_fire *****************
  3409 ;; Defined at:
  3410 ;;		line 236 in file "user.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  a               2    0[BANK0 ] unsigned int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3424 ;;      Params:         0       0       0       0
  3425 ;;      Locals:         0       2       0       0
  3426 ;;      Temps:          2       0       0       0
  3427 ;;      Totals:         2       2       0       0
  3428 ;;Total ram usage:        4 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		_ADC_read
  3433 ;;		_Send_Byte
  3434 ;;		_led_off
  3435 ;;		_play_song
  3436 ;;		_red_led_on
  3437 ;;		_stop_song
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _handle_fire
  3445  03CA                     _handle_fire:	
  3446                           
  3447                           ;user.c: 237: static uint16_t timer = 0;
  3448                           ;user.c: 238: static uint16_t counter = 0;
  3449                           ;user.c: 239: uint16_t a;
  3450                           ;user.c: 241: a=ADC_read();
  3451                           
  3452                           ;incstack = 0
  3453                           ; Regs used in _handle_fire: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3454  03CA  2568               	fcall	_ADC_read
  3455  03CB  0872               	movf	?_ADC_read+1,w
  3456  03CC  0020               	movlb	0	; select bank0
  3457  03CD  01A1               	clrf	handle_fire@a+1
  3458  03CE  07A1               	addwf	handle_fire@a+1,f
  3459  03CF  0871               	movf	?_ADC_read,w
  3460  03D0  01A0               	clrf	handle_fire@a
  3461  03D1  07A0               	addwf	handle_fire@a,f
  3462                           
  3463                           ;user.c: 242: if (a > config.fire_threshold && a < config.fire_cheating)
  3464  03D2  0821               	movf	handle_fire@a+1,w
  3465  03D3  0021               	movlb	1	; select bank1
  3466  03D4  024B               	subwf	((_config+1)^(0+128)+10),w
  3467  03D5  1D03               	skipz
  3468  03D6  2BDB               	goto	u4205
  3469  03D7  0020               	movlb	0	; select bank0
  3470  03D8  0820               	movf	handle_fire@a,w
  3471  03D9  0021               	movlb	1	; select bank1
  3472  03DA  024A               	subwf	(_config^(0+128)+10),w
  3473  03DB                     u4205:	
  3474  03DB  1803               	skipnc
  3475  03DC  2C36               	goto	l3291
  3476  03DD  084D               	movf	((_config+1)^(0+128)+12),w
  3477  03DE  0020               	movlb	0	; select bank0
  3478  03DF  0221               	subwf	handle_fire@a+1,w
  3479  03E0  1D03               	skipz
  3480  03E1  2BE6               	goto	u4215
  3481  03E2  0021               	movlb	1	; select bank1
  3482  03E3  084C               	movf	(_config^(0+128)+12),w
  3483  03E4  0020               	movlb	0	; select bank0
  3484  03E5  0220               	subwf	handle_fire@a,w
  3485  03E6                     u4215:	
  3486  03E6  1803               	skipnc
  3487  03E7  2C36               	goto	l3291
  3488                           
  3489                           ;user.c: 243: {
  3490                           ;user.c: 244: if(timer < config.fire_holdoff)
  3491  03E8  0021               	movlb	1	; select bank1
  3492  03E9  084F               	movf	((_config+1)^(0+128)+14),w
  3493  03EA  0020               	movlb	0	; select bank0
  3494  03EB  025F               	subwf	handle_fire@timer+1,w
  3495  03EC  1D03               	skipz
  3496  03ED  2BF2               	goto	u4225
  3497  03EE  0021               	movlb	1	; select bank1
  3498  03EF  084E               	movf	(_config^(0+128)+14),w
  3499  03F0  0020               	movlb	0	; select bank0
  3500  03F1  025E               	subwf	handle_fire@timer,w
  3501  03F2                     u4225:	
  3502  03F2  1803               	skipnc
  3503  03F3  2BF9               	goto	l3275
  3504                           
  3505                           ;user.c: 245: {
  3506                           ;user.c: 246: timer ++;
  3507  03F4  3001               	movlw	1
  3508  03F5  07DE               	addwf	handle_fire@timer,f
  3509  03F6  3000               	movlw	0
  3510  03F7  3DDF               	addwfc	handle_fire@timer+1,f
  3511                           
  3512                           ;user.c: 247: }
  3513  03F8  0008               	return
  3514  03F9                     l3275:	
  3515                           
  3516                           ;user.c: 248: else
  3517                           ;user.c: 249: {
  3518                           ;user.c: 250: if(!config.power || counter <= config.power)
  3519  03F9  3002               	movlw	2
  3520  03FA  3EC0               	addlw	_config& (0+255)
  3521  03FB  0086               	movwf	6
  3522  03FC  0187               	clrf	7
  3523  03FD  0016               	moviw fsr1++
  3524  03FE  0401               	iorwf	1,w
  3525  03FF  1903               	skipnz
  3526  0400  2C0C               	goto	l3279
  3527  0401  085D               	movf	handle_fire@counter+1,w
  3528  0402  0021               	movlb	1	; select bank1
  3529  0403  0243               	subwf	((_config+1)^(0+128)+2),w
  3530  0404  1D03               	skipz
  3531  0405  2C0A               	goto	u4245
  3532  0406  0020               	movlb	0	; select bank0
  3533  0407  085C               	movf	handle_fire@counter,w
  3534  0408  0021               	movlb	1	; select bank1
  3535  0409  0242               	subwf	(_config^(0+128)+2),w
  3536  040A                     u4245:	
  3537  040A  1C03               	skipc
  3538  040B  2C34               	goto	l3289
  3539  040C                     l3279:	
  3540                           
  3541                           ;user.c: 251: {
  3542                           ;user.c: 252: if(!counter)
  3543  040C  0020               	movlb	0	; select bank0
  3544  040D  085D               	movf	handle_fire@counter+1,w
  3545  040E  045C               	iorwf	handle_fire@counter,w
  3546  040F  1D03               	skipz
  3547  0410  2C2B               	goto	l3285
  3548                           
  3549                           ;user.c: 253: {
  3550                           ;user.c: 254: red_led_on();
  3551  0411  25D0               	fcall	_red_led_on
  3552                           
  3553                           ;user.c: 255: play_song(fire_song,sizeof(fire_song)/sizeof(uint16_t),3000,!(config.power
      +                          ));
  3554  0412  3026               	movlw	low (_fire_song| (0+32768))
  3555  0413  00F1               	movwf	play_song@song
  3556  0414  3086               	movlw	high (_fire_song| (0+32768))
  3557  0415  00F2               	movwf	play_song@song+1
  3558  0416  3010               	movlw	16
  3559  0417  00F9               	movwf	??_handle_fire
  3560  0418  0879               	movf	??_handle_fire,w
  3561  0419  00F3               	movwf	play_song@length
  3562  041A  30B8               	movlw	184
  3563  041B  00F4               	movwf	play_song@note_duration
  3564  041C  300B               	movlw	11
  3565  041D  00F5               	movwf	play_song@note_duration+1
  3566  041E  3002               	movlw	2
  3567  041F  3EC0               	addlw	_config& (0+255)
  3568  0420  0086               	movwf	6
  3569  0421  0187               	clrf	7
  3570  0422  0016               	moviw fsr1++
  3571  0423  0401               	iorwf	1,w
  3572  0424  3000               	movlw	0
  3573  0425  1903               	skipnz
  3574  0426  3001               	movlw	1
  3575  0427  00FA               	movwf	??_handle_fire+1
  3576  0428  087A               	movf	??_handle_fire+1,w
  3577  0429  00F6               	movwf	play_song@repeat
  3578  042A  279C               	fcall	_play_song
  3579  042B                     l3285:	
  3580                           
  3581                           ;user.c: 256: }
  3582                           ;user.c: 257: Send_Byte(config.id);
  3583  042B  0021               	movlb	1	; select bank1
  3584  042C  0840               	movf	_config^(0+128),w
  3585  042D  27C0               	fcall	_Send_Byte
  3586                           
  3587                           ;user.c: 258: counter++;
  3588  042E  3001               	movlw	1
  3589  042F  0020               	movlb	0	; select bank0
  3590  0430  07DC               	addwf	handle_fire@counter,f
  3591  0431  3000               	movlw	0
  3592  0432  3DDD               	addwfc	handle_fire@counter+1,f
  3593                           
  3594                           ;user.c: 259: }
  3595  0433  0008               	return
  3596  0434                     l3289:	
  3597                           
  3598                           ;user.c: 260: else
  3599                           ;user.c: 261: {
  3600                           ;user.c: 262: led_off();
  3601  0434  25DC               	fcall	_led_off
  3602                           
  3603                           ;user.c: 263: }
  3604                           ;user.c: 264: }
  3605                           ;user.c: 265: }
  3606  0435  0008               	return
  3607  0436                     l3291:	
  3608                           
  3609                           ;user.c: 266: else
  3610                           ;user.c: 267: {
  3611                           ;user.c: 268: led_off();
  3612  0436  25DC               	fcall	_led_off
  3613                           
  3614                           ;user.c: 269: if(!config.power && counter) stop_song();
  3615  0437  0021               	movlb	1	; select bank1
  3616  0438  0843               	movf	((_config+1)^(0+128)+2),w
  3617  0439  0442               	iorwf	(_config^(0+128)+2),w
  3618  043A  1D03               	skipz
  3619  043B  2C42               	goto	l3299
  3620  043C  0020               	movlb	0	; select bank0
  3621  043D  085D               	movf	handle_fire@counter+1,w
  3622  043E  045C               	iorwf	handle_fire@counter,w
  3623  043F  1903               	skipnz
  3624  0440  2C42               	goto	l3299
  3625  0441  25CB               	fcall	_stop_song
  3626  0442                     l3299:	
  3627                           
  3628                           ;user.c: 270: timer = 0;
  3629  0442  0020               	movlb	0	; select bank0
  3630  0443  01DE               	clrf	handle_fire@timer
  3631  0444  01DF               	clrf	handle_fire@timer+1
  3632                           
  3633                           ;user.c: 271: counter = 0;
  3634  0445  01DC               	clrf	handle_fire@counter
  3635  0446  01DD               	clrf	handle_fire@counter+1
  3636                           
  3637                           ;user.c: 272: return 0;
  3638                           ;	Return value of _handle_fire is never used
  3639  0447  0008               	return
  3640  0448                     __end_of_handle_fire:	
  3641                           ;user.c: 273: }
  3642                           ;user.c: 274: return 1;
  3643                           ;	Return value of _handle_fire is never used
  3644                           
  3645                           
  3646                           	psect	text13
  3647  05CB                     __ptext13:	
  3648 ;; *************** function _stop_song *****************
  3649 ;; Defined at:
  3650 ;;		line 108 in file "user.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;		None               void
  3657 ;; Registers used:
  3658 ;;		status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3664 ;;      Params:         0       0       0       0
  3665 ;;      Locals:         0       0       0       0
  3666 ;;      Temps:          0       0       0       0
  3667 ;;      Totals:         0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    2
  3671 ;; This function calls:
  3672 ;;		_tone_off
  3673 ;; This function is called by:
  3674 ;;		_handle_music
  3675 ;;		_handle_fire
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function _stop_song
  3681  05CB                     _stop_song:	
  3682                           
  3683                           ;user.c: 110: tone_off();
  3684                           
  3685                           ;incstack = 0
  3686                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  3687  05CB  25D9               	fcall	_tone_off
  3688                           
  3689                           ;user.c: 111: T1CONbits.TMR1ON=0;
  3690  05CC  0020               	movlb	0	; select bank0
  3691  05CD  1018               	bcf	24,0	;volatile
  3692                           
  3693                           ;user.c: 112: PIR1bits.TMR1IF=0;
  3694  05CE  1011               	bcf	17,0	;volatile
  3695  05CF  0008               	return
  3696  05D0                     __end_of_stop_song:	
  3697                           
  3698                           	psect	text14
  3699  05D9                     __ptext14:	
  3700 ;; *************** function _tone_off *****************
  3701 ;; Defined at:
  3702 ;;		line 146 in file "user.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		None
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3716 ;;      Params:         0       0       0       0
  3717 ;;      Locals:         0       0       0       0
  3718 ;;      Temps:          0       0       0       0
  3719 ;;      Totals:         0       0       0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    1
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_stop_song
  3727 ;;		_Buzz
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           
  3732                           ;psect for function _tone_off
  3733  05D9                     _tone_off:	
  3734                           
  3735                           ;user.c: 148: PWM3CONbits.PWM3OE = 0;
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _tone_off: []
  3739  05D9  003B               	movlb	27	; select bank27
  3740  05DA  133B               	bcf	59,6	;volatile
  3741  05DB  0008               	return
  3742  05DC                     __end_of_tone_off:	
  3743                           
  3744                           	psect	text15
  3745  05D0                     __ptext15:	
  3746 ;; *************** function _red_led_on *****************
  3747 ;; Defined at:
  3748 ;;		line 78 in file "user.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;		None               void
  3755 ;; Registers used:
  3756 ;;		None
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3762 ;;      Params:         0       0       0       0
  3763 ;;      Locals:         0       0       0       0
  3764 ;;      Temps:          0       0       0       0
  3765 ;;      Totals:         0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    1
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		_handle_fire
  3773 ;;		_super_dead_mode
  3774 ;;		_hit_by
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           
  3779                           ;psect for function _red_led_on
  3780  05D0                     _red_led_on:	
  3781                           
  3782                           ;user.c: 80: TRISAbits.TRISA5 = 0;
  3783                           
  3784                           ;incstack = 0
  3785                           ; Regs used in _red_led_on: []
  3786  05D0  0021               	movlb	1	; select bank1
  3787  05D1  128C               	bcf	12,5	;volatile
  3788                           
  3789                           ;user.c: 81: PORTAbits.RA5 = 0;
  3790  05D2  0020               	movlb	0	; select bank0
  3791  05D3  128C               	bcf	12,5	;volatile
  3792  05D4  0008               	return
  3793  05D5                     __end_of_red_led_on:	
  3794                           
  3795                           	psect	text16
  3796  079C                     __ptext16:	
  3797 ;; *************** function _play_song *****************
  3798 ;; Defined at:
  3799 ;;		line 95 in file "user.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  song            2    1[COMMON] PTR unsigned int 
  3802 ;;		 -> one_up(12), death_song(38), dead_song(6), fire_song(32), 
  3803 ;;  length          1    3[COMMON] unsigned char 
  3804 ;;  note_duratio    2    4[COMMON] unsigned int 
  3805 ;;  repeat          1    6[COMMON] unsigned char 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3817 ;;      Params:         6       0       0       0
  3818 ;;      Locals:         0       0       0       0
  3819 ;;      Temps:          2       0       0       0
  3820 ;;      Totals:         8       0       0       0
  3821 ;;Total ram usage:        8 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    1
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_handle_fire
  3828 ;;		_super_dead_mode
  3829 ;;		_hit_by
  3830 ;;		_control_transfer
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _play_song
  3836  079C                     _play_song:	
  3837                           
  3838                           ;user.c: 97: cur_song=song;
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in _play_song: [wreg+status,2+status,0]
  3842  079C  0872               	movf	play_song@song+1,w
  3843  079D  0020               	movlb	0	; select bank0
  3844  079E  01D9               	clrf	_cur_song+1
  3845  079F  07D9               	addwf	_cur_song+1,f
  3846  07A0  0871               	movf	play_song@song,w
  3847  07A1  01D8               	clrf	_cur_song
  3848  07A2  07D8               	addwf	_cur_song,f
  3849                           
  3850                           ;user.c: 98: cur_song_length=length;
  3851  07A3  0873               	movf	play_song@length,w
  3852  07A4  00F7               	movwf	??_play_song
  3853  07A5  0877               	movf	??_play_song,w
  3854  07A6  00E1               	movwf	_cur_song_length
  3855                           
  3856                           ;user.c: 99: cur_song_ptr=0;
  3857  07A7  01FC               	clrf	_cur_song_ptr
  3858                           
  3859                           ;user.c: 100: cur_song_repeat=repeat;
  3860  07A8  0876               	movf	play_song@repeat,w
  3861  07A9  00F7               	movwf	??_play_song
  3862  07AA  0877               	movf	??_play_song,w
  3863  07AB  00E2               	movwf	_cur_song_repeat
  3864                           
  3865                           ;user.c: 101: cur_song_duration=note_duration;
  3866  07AC  0875               	movf	play_song@note_duration+1,w
  3867  07AD  01DB               	clrf	_cur_song_duration+1
  3868  07AE  07DB               	addwf	_cur_song_duration+1,f
  3869  07AF  0874               	movf	play_song@note_duration,w
  3870  07B0  01DA               	clrf	_cur_song_duration
  3871  07B1  07DA               	addwf	_cur_song_duration,f
  3872                           
  3873                           ;user.c: 103: TMR1 = -cur_song_duration;
  3874  07B2  095A               	comf	_cur_song_duration,w
  3875  07B3  00F7               	movwf	??_play_song
  3876  07B4  095B               	comf	_cur_song_duration+1,w
  3877  07B5  00F8               	movwf	??_play_song+1
  3878  07B6  0AF7               	incf	??_play_song,f
  3879  07B7  1903               	skipnz
  3880  07B8  0AF8               	incf	??_play_song+1,f
  3881  07B9  0877               	movf	??_play_song,w
  3882  07BA  0096               	movwf	22	;volatile
  3883  07BB  0878               	movf	??_play_song+1,w
  3884  07BC  0097               	movwf	23	;volatile
  3885                           
  3886                           ;user.c: 104: PIR1bits.TMR1IF = 1;
  3887  07BD  1411               	bsf	17,0	;volatile
  3888                           
  3889                           ;user.c: 105: T1CONbits.TMR1ON = 1;
  3890  07BE  1418               	bsf	24,0	;volatile
  3891  07BF  0008               	return
  3892  07C0                     __end_of_play_song:	
  3893                           
  3894                           	psect	text17
  3895  05DC                     __ptext17:	
  3896 ;; *************** function _led_off *****************
  3897 ;; Defined at:
  3898 ;;		line 90 in file "user.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;		None               void
  3905 ;; Registers used:
  3906 ;;		None
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3912 ;;      Params:         0       0       0       0
  3913 ;;      Locals:         0       0       0       0
  3914 ;;      Temps:          0       0       0       0
  3915 ;;      Totals:         0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    1
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_handle_fire
  3923 ;;		_super_dead_mode
  3924 ;;		_hit_by
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           
  3929                           ;psect for function _led_off
  3930  05DC                     _led_off:	
  3931                           
  3932                           ;user.c: 92: TRISAbits.TRISA5 = 1;
  3933                           
  3934                           ;incstack = 0
  3935                           ; Regs used in _led_off: []
  3936  05DC  0021               	movlb	1	; select bank1
  3937  05DD  168C               	bsf	12,5	;volatile
  3938  05DE  0008               	return
  3939  05DF                     __end_of_led_off:	
  3940                           
  3941                           	psect	text18
  3942  07C0                     __ptext18:	
  3943 ;; *************** function _Send_Byte *****************
  3944 ;; Defined at:
  3945 ;;		line 158 in file "user.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  data            1    wreg     unsigned char 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  data            1    1[COMMON] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, pclath, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         1       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         1       0       0       0
  3963 ;;Total ram usage:        1 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		_Disable_Modulation
  3968 ;;		_Modulate_Serial
  3969 ;; This function is called by:
  3970 ;;		_handle_fire
  3971 ;;		_super_dead_mode
  3972 ;;		_SEND_DATA_BYTE
  3973 ;;		_SEND_SOF
  3974 ;;		_SEND_EOF
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _Send_Byte
  3980  07C0                     _Send_Byte:	
  3981                           
  3982                           ;incstack = 0
  3983                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3984                           ;Send_Byte@data stored from wreg
  3985  07C0  00F1               	movwf	Send_Byte@data
  3986                           
  3987                           ;user.c: 160: RCSTAbits.CREN = 0;
  3988  07C1  0023               	movlb	3	; select bank3
  3989  07C2  121D               	bcf	29,4	;volatile
  3990                           
  3991                           ;user.c: 161: Modulate_Serial();
  3992  07C3  25BE               	fcall	_Modulate_Serial
  3993                           
  3994                           ;user.c: 162: TXREG = data;
  3995  07C4  0871               	movf	Send_Byte@data,w
  3996  07C5  0023               	movlb	3	; select bank3
  3997  07C6  009A               	movwf	26	;volatile
  3998  07C7                     l175:	
  3999                           ;user.c: 163: while(!TXSTAbits.TRMT);
  4000                           
  4001  07C7  1C9E               	btfss	30,1	;volatile
  4002  07C8  2FC7               	goto	l175
  4003                           
  4004                           ;user.c: 164: Disable_Modulation();
  4005  07C9  25D5               	fcall	_Disable_Modulation
  4006                           
  4007                           ;user.c: 165: RCSTAbits.CREN = 1;
  4008  07CA  0023               	movlb	3	; select bank3
  4009  07CB  161D               	bsf	29,4	;volatile
  4010                           
  4011                           ;user.c: 166: RCREG;
  4012  07CC  0819               	movf	25,w	;volatile
  4013  07CD  0008               	return
  4014  07CE                     __end_of_Send_Byte:	
  4015                           
  4016                           	psect	text19
  4017  05BE                     __ptext19:	
  4018 ;; *************** function _Modulate_Serial *****************
  4019 ;; Defined at:
  4020 ;;		line 169 in file "user.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		status,2
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       0       0       0
  4035 ;;      Locals:         0       0       0       0
  4036 ;;      Temps:          0       0       0       0
  4037 ;;      Totals:         0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    1
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_Send_Byte
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _Modulate_Serial
  4050  05BE                     _Modulate_Serial:	
  4051                           
  4052                           ;user.c: 170: DACCON0bits.DACEN = 1;
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _Modulate_Serial: [status,2]
  4056  05BE  0022               	movlb	2	; select bank2
  4057  05BF  1798               	bsf	24,7	;volatile
  4058                           
  4059                           ;user.c: 171: TMR0=0;
  4060  05C0  0020               	movlb	0	; select bank0
  4061  05C1  0195               	clrf	21	;volatile
  4062                           
  4063                           ;user.c: 172: INTCONbits.TMR0IF=1;
  4064  05C2  150B               	bsf	11,2	;volatile
  4065                           
  4066                           ;user.c: 173: INTCONbits.TMR0IE=1;
  4067  05C3  168B               	bsf	11,5	;volatile
  4068  05C4  0008               	return
  4069  05C5                     __end_of_Modulate_Serial:	
  4070                           
  4071                           	psect	text20
  4072  05D5                     __ptext20:	
  4073 ;; *************** function _Disable_Modulation *****************
  4074 ;; Defined at:
  4075 ;;		line 176 in file "user.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		None
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4089 ;;      Params:         0       0       0       0
  4090 ;;      Locals:         0       0       0       0
  4091 ;;      Temps:          0       0       0       0
  4092 ;;      Totals:         0       0       0       0
  4093 ;;Total ram usage:        0 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    1
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_Send_Byte
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _Disable_Modulation
  4105  05D5                     _Disable_Modulation:	
  4106                           
  4107                           ;user.c: 177: INTCONbits.TMR0IE=0;
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _Disable_Modulation: []
  4111  05D5  128B               	bcf	11,5	;volatile
  4112                           
  4113                           ;user.c: 178: DACCON0bits.DACEN=0;
  4114  05D6  0022               	movlb	2	; select bank2
  4115  05D7  1398               	bcf	24,7	;volatile
  4116  05D8  0008               	return
  4117  05D9                     __end_of_Disable_Modulation:	
  4118                           
  4119                           	psect	text21
  4120  0568                     __ptext21:	
  4121 ;; *************** function _ADC_read *****************
  4122 ;; Defined at:
  4123 ;;		line 68 in file "user.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  2    1[COMMON] unsigned int 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4137 ;;      Params:         2       0       0       0
  4138 ;;      Locals:         0       0       0       0
  4139 ;;      Temps:          2       0       0       0
  4140 ;;      Totals:         4       0       0       0
  4141 ;;Total ram usage:        4 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    1
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_handle_fire
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function _ADC_read
  4153  0568                     _ADC_read:	
  4154                           
  4155                           ;user.c: 70: ADCON0bits.CHS = 3;
  4156                           
  4157                           ;incstack = 0
  4158                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  4159  0568  0021               	movlb	1	; select bank1
  4160  0569  081D               	movf	29,w	;volatile
  4161  056A  3983               	andlw	-125
  4162  056B  380C               	iorlw	12
  4163  056C  009D               	movwf	29	;volatile
  4164                           
  4165                           ;user.c: 71: ADCON0bits.ADON = 1;
  4166  056D  141D               	bsf	29,0	;volatile
  4167                           
  4168                           ;user.c: 72: _delay((unsigned long)((6)*(16000000/4000000.0)));
  4169  056E  3007               	movlw	7
  4170  056F  00F3               	movwf	??_ADC_read
  4171  0570                     u4377:	
  4172  0570  0BF3               	decfsz	??_ADC_read,f
  4173  0571  2D70               	goto	u4377
  4174  0572  3200               	nop2	;nop
  4175                           
  4176                           ;user.c: 73: ADCON0bits.GO = 1;
  4177  0573  0021               	movlb	1	; select bank1
  4178  0574  149D               	bsf	29,1	;volatile
  4179  0575                     l135:	
  4180                           ;user.c: 74: while(ADCON0bits.GO){};
  4181                           
  4182  0575  189D               	btfsc	29,1	;volatile
  4183  0576  2D75               	goto	l135
  4184                           
  4185                           ;user.c: 75: return ADRES >> 6;
  4186  0577  081C               	movf	28,w	;volatile
  4187  0578  00F4               	movwf	??_ADC_read+1
  4188  0579  081B               	movf	27,w	;volatile
  4189  057A  00F3               	movwf	??_ADC_read
  4190  057B  3006               	movlw	6
  4191  057C                     u4025:	
  4192  057C  36F4               	lsrf	??_ADC_read+1,f
  4193  057D  0CF3               	rrf	??_ADC_read,f
  4194  057E  0B89               	decfsz	9,f
  4195  057F  2D7C               	goto	u4025
  4196  0580  0873               	movf	??_ADC_read,w
  4197  0581  00F1               	movwf	?_ADC_read
  4198  0582  0874               	movf	??_ADC_read+1,w
  4199  0583  00F2               	movwf	?_ADC_read+1
  4200  0584  0008               	return
  4201  0585                     __end_of_ADC_read:	
  4202                           
  4203                           	psect	text22
  4204  0506                     __ptext22:	
  4205 ;; *************** function _Setup *****************
  4206 ;; Defined at:
  4207 ;;		line 31 in file "user.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4221 ;;      Params:         0       0       0       0
  4222 ;;      Locals:         0       0       0       0
  4223 ;;      Temps:          1       0       0       0
  4224 ;;      Totals:         1       0       0       0
  4225 ;;Total ram usage:        1 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    1
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           
  4236                           ;psect for function _Setup
  4237  0506                     _Setup:	
  4238                           
  4239                           ;user.c: 33: OSCCON = 0b01111010;
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4243  0506  307A               	movlw	122
  4244  0507  0021               	movlb	1	; select bank1
  4245  0508  0099               	movwf	25	;volatile
  4246                           
  4247                           ;user.c: 35: ANSELA = 0x00;
  4248  0509  0023               	movlb	3	; select bank3
  4249  050A  018C               	clrf	12	;volatile
  4250                           
  4251                           ;user.c: 36: TRISAbits.TRISA2 = 0;
  4252  050B  0021               	movlb	1	; select bank1
  4253  050C  110C               	bcf	12,2	;volatile
  4254                           
  4255                           ;user.c: 37: TRISAbits.TRISA0 = 0;
  4256  050D  100C               	bcf	12,0	;volatile
  4257                           
  4258                           ;user.c: 40: ANSELAbits.ANSA4 = 1;
  4259  050E  0023               	movlb	3	; select bank3
  4260  050F  160C               	bsf	12,4	;volatile
  4261                           
  4262                           ;user.c: 41: ADCON1 |= 0b00110000;
  4263  0510  3030               	movlw	48
  4264  0511  00F1               	movwf	??_Setup
  4265  0512  0871               	movf	??_Setup,w
  4266  0513  0021               	movlb	1	; select bank1
  4267  0514  049E               	iorwf	30,f	;volatile
  4268                           
  4269                           ;user.c: 44: SPBRGL = 103;
  4270  0515  3067               	movlw	103
  4271  0516  0023               	movlb	3	; select bank3
  4272  0517  009B               	movwf	27	;volatile
  4273                           
  4274                           ;user.c: 45: TXSTAbits.SYNC = 0;
  4275  0518  121E               	bcf	30,4	;volatile
  4276                           
  4277                           ;user.c: 46: RCSTAbits.SPEN = 1;
  4278  0519  179D               	bsf	29,7	;volatile
  4279                           
  4280                           ;user.c: 47: BAUDCONbits.SCKP = 1;
  4281  051A  161F               	bsf	31,4	;volatile
  4282                           
  4283                           ;user.c: 48: TXSTAbits.TXEN = 1;
  4284  051B  169E               	bsf	30,5	;volatile
  4285                           
  4286                           ;user.c: 51: RCSTAbits.CREN = 1;
  4287  051C  161D               	bsf	29,4	;volatile
  4288                           
  4289                           ;user.c: 54: INTCONbits.GIE = 1;
  4290  051D  178B               	bsf	11,7	;volatile
  4291                           
  4292                           ;user.c: 57: OPTION_REGbits.TMR0CS = 0;
  4293  051E  0021               	movlb	1	; select bank1
  4294  051F  1295               	bcf	21,5	;volatile
  4295                           
  4296                           ;user.c: 60: T1CONbits.T1CKPS=3;
  4297  0520  3030               	movlw	48
  4298  0521  0020               	movlb	0	; select bank0
  4299  0522  0498               	iorwf	24,f	;volatile
  4300                           
  4301                           ;user.c: 63: T2CONbits.T2CKPS = 3;
  4302  0523  3003               	movlw	3
  4303  0524  049C               	iorwf	28,f	;volatile
  4304                           
  4305                           ;user.c: 64: T2CONbits.T2OUTPS = 15;
  4306  0525  3078               	movlw	120
  4307  0526  049C               	iorwf	28,f	;volatile
  4308                           
  4309                           ;user.c: 65: T2CONbits.TMR2ON = 1;
  4310  0527  151C               	bsf	28,2	;volatile
  4311  0528  0008               	return
  4312  0529                     __end_of_Setup:	
  4313                           
  4314                           	psect	text23
  4315  0448                     __ptext23:	
  4316 ;; *************** function _LoadFromFlash *****************
  4317 ;; Defined at:
  4318 ;;		line 28 in file "main.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4332 ;;      Params:         0       0       0       0
  4333 ;;      Locals:         0       0       0       0
  4334 ;;      Temps:          2       0       0       0
  4335 ;;      Totals:         2       0       0       0
  4336 ;;Total ram usage:        2 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    2
  4339 ;; This function calls:
  4340 ;;		_Load
  4341 ;;		_Save
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _LoadFromFlash
  4349  0448                     _LoadFromFlash:	
  4350                           
  4351                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4352                           
  4353                           ;incstack = 0
  4354                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4355  0448  30D0               	movlw	208
  4356  0449  00F1               	movwf	Load@address
  4357  044A  3007               	movlw	7
  4358  044B  00F2               	movwf	Load@address+1
  4359  044C  30C0               	movlw	_config& (0+255)
  4360  044D  00F7               	movwf	??_LoadFromFlash
  4361  044E  0877               	movf	??_LoadFromFlash,w
  4362  044F  00F3               	movwf	Load@ptr
  4363  0450  3009               	movlw	9
  4364  0451  00F8               	movwf	??_LoadFromFlash+1
  4365  0452  0878               	movf	??_LoadFromFlash+1,w
  4366  0453  00F4               	movwf	Load@data_length
  4367  0454  2777               	fcall	_Load
  4368                           
  4369                           ;main.c: 31: if(config.id == 0x3FFF)
  4370  0455  303F               	movlw	63
  4371  0456  0021               	movlb	1	; select bank1
  4372  0457  0641               	xorwf	(_config+1)^(0+128),w
  4373  0458  1D03               	skipz
  4374  0459  2C5C               	goto	u4105
  4375  045A  30FF               	movlw	255
  4376  045B  0640               	xorwf	_config^(0+128),w
  4377  045C                     u4105:	
  4378  045C  1D03               	skipz
  4379  045D  2C9A               	goto	l3221
  4380                           
  4381                           ;main.c: 32: {
  4382                           ;main.c: 33: config.health = 16;
  4383  045E  3010               	movlw	16
  4384  045F  00C4               	movwf	(_config^(0+128)+4)
  4385  0460  3000               	movlw	0
  4386  0461  00C5               	movwf	(_config^(0+128)+5)
  4387                           
  4388                           ;main.c: 34: config.id = 0x80;
  4389  0462  3080               	movlw	128
  4390  0463  00C0               	movwf	_config^(0+128)
  4391  0464  3000               	movlw	0
  4392  0465  00C1               	movwf	(_config^(0+128)+1)
  4393                           
  4394                           ;main.c: 35: config.power = 0;
  4395  0466  01C2               	clrf	(_config^(0+128)+2)
  4396  0467  01C3               	clrf	((_config+1)^(0+128)+2)
  4397                           
  4398                           ;main.c: 36: config.respawn_delay = 100;
  4399  0468  3064               	movlw	100
  4400  0469  00C8               	movwf	(_config^(0+128)+8)
  4401  046A  3000               	movlw	0
  4402  046B  00C9               	movwf	(_config^(0+128)+9)
  4403                           
  4404                           ;main.c: 37: config.fire_threshold = 500;
  4405  046C  30F4               	movlw	244
  4406  046D  00CA               	movwf	(_config^(0+128)+10)
  4407  046E  3001               	movlw	1
  4408  046F  00CB               	movwf	(_config^(0+128)+11)
  4409                           
  4410                           ;main.c: 38: config.fire_holdoff = 8000;
  4411  0470  3040               	movlw	64
  4412  0471  00CE               	movwf	(_config^(0+128)+14)
  4413  0472  301F               	movlw	31
  4414  0473  00CF               	movwf	(_config^(0+128)+15)
  4415                           
  4416                           ;main.c: 39: config.shield = 2;
  4417  0474  3002               	movlw	2
  4418  0475  00C6               	movwf	(_config^(0+128)+6)
  4419  0476  3000               	movlw	0
  4420  0477  00C7               	movwf	(_config^(0+128)+7)
  4421                           
  4422                           ;main.c: 40: config.fire_cheating = 1000;
  4423  0478  30E8               	movlw	232
  4424  0479  00CC               	movwf	(_config^(0+128)+12)
  4425  047A  3003               	movlw	3
  4426  047B  00CD               	movwf	(_config^(0+128)+13)
  4427                           
  4428                           ;main.c: 41: config.death_period = 3000;
  4429  047C  30B8               	movlw	184
  4430  047D  00D0               	movwf	(_config^(0+128)+16)
  4431  047E  300B               	movlw	11
  4432  047F  00D1               	movwf	(_config^(0+128)+17)
  4433                           
  4434                           ;main.c: 42: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4435  0480  30D0               	movlw	208
  4436  0481  00F1               	movwf	Save@address
  4437  0482  3007               	movlw	7
  4438  0483  00F2               	movwf	Save@address+1
  4439  0484  30C0               	movlw	_config& (0+255)
  4440  0485  00F7               	movwf	??_LoadFromFlash
  4441  0486  0877               	movf	??_LoadFromFlash,w
  4442  0487  00F3               	movwf	Save@ptr
  4443  0488  3009               	movlw	9
  4444  0489  00F8               	movwf	??_LoadFromFlash+1
  4445  048A  0878               	movf	??_LoadFromFlash+1,w
  4446  048B  00F4               	movwf	Save@data_length
  4447  048C  26FF               	fcall	_Save
  4448                           
  4449                           ;main.c: 43: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4450  048D  30E0               	movlw	224
  4451  048E  00F1               	movwf	Save@address
  4452  048F  3007               	movlw	7
  4453  0490  00F2               	movwf	Save@address+1
  4454  0491  30A0               	movlw	_hitlist& (0+255)
  4455  0492  00F7               	movwf	??_LoadFromFlash
  4456  0493  0877               	movf	??_LoadFromFlash,w
  4457  0494  00F3               	movwf	Save@ptr
  4458  0495  3010               	movlw	16
  4459  0496  00F8               	movwf	??_LoadFromFlash+1
  4460  0497  0878               	movf	??_LoadFromFlash+1,w
  4461  0498  00F4               	movwf	Save@data_length
  4462  0499  26FF               	fcall	_Save
  4463  049A                     l3221:	
  4464                           
  4465                           ;main.c: 44: }
  4466                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4467  049A  30E0               	movlw	224
  4468  049B  00F1               	movwf	Load@address
  4469  049C  3007               	movlw	7
  4470  049D  00F2               	movwf	Load@address+1
  4471  049E  30A0               	movlw	_hitlist& (0+255)
  4472  049F  00F7               	movwf	??_LoadFromFlash
  4473  04A0  0877               	movf	??_LoadFromFlash,w
  4474  04A1  00F3               	movwf	Load@ptr
  4475  04A2  3010               	movlw	16
  4476  04A3  00F8               	movwf	??_LoadFromFlash+1
  4477  04A4  0878               	movf	??_LoadFromFlash+1,w
  4478  04A5  00F4               	movwf	Load@data_length
  4479  04A6  2777               	fcall	_Load
  4480  04A7  0008               	return
  4481  04A8                     __end_of_LoadFromFlash:	
  4482                           
  4483                           	psect	text24
  4484  06FF                     __ptext24:	
  4485 ;; *************** function _Save *****************
  4486 ;; Defined at:
  4487 ;;		line 202 in file "user.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  address         2    1[COMMON] unsigned int 
  4490 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4491 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4492 ;;  data_length     1    4[COMMON] unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  i               1    6[COMMON] unsigned char 
  4495 ;; Return value:  Size  Location     Type
  4496 ;;		None               void
  4497 ;; Registers used:
  4498 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4504 ;;      Params:         4       0       0       0
  4505 ;;      Locals:         1       0       0       0
  4506 ;;      Temps:          1       0       0       0
  4507 ;;      Totals:         6       0       0       0
  4508 ;;Total ram usage:        6 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    1
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_LoadFromFlash
  4515 ;;		_hit_by
  4516 ;;		_control_transfer
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _Save
  4522  06FF                     _Save:	
  4523                           
  4524                           ;user.c: 204: INTCONbits.GIE = 0;
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  4528  06FF  138B               	bcf	11,7	;volatile
  4529                           
  4530                           ;user.c: 205: PMADR = address;
  4531  0700  0872               	movf	Save@address+1,w
  4532  0701  0023               	movlb	3	; select bank3
  4533  0702  0192               	clrf	18	;volatile
  4534  0703  0792               	addwf	18,f	;volatile
  4535  0704  0871               	movf	Save@address,w
  4536  0705  0191               	clrf	17	;volatile
  4537  0706  0791               	addwf	17,f	;volatile
  4538                           
  4539                           ;user.c: 206: PMCON1bits.CFGS = 0;
  4540  0707  1315               	bcf	21,6	;volatile
  4541                           
  4542                           ;user.c: 207: PMCON1bits.FREE = 1;
  4543  0708  1615               	bsf	21,4	;volatile
  4544                           
  4545                           ;user.c: 208: PMCON1bits.WREN = 1;
  4546  0709  1515               	bsf	21,2	;volatile
  4547                           
  4548                           ;user.c: 209: PMCON2 = 0x55;
  4549  070A  3055               	movlw	85
  4550  070B  0096               	movwf	22	;volatile
  4551                           
  4552                           ;user.c: 210: PMCON2 = 0xAA;
  4553  070C  30AA               	movlw	170
  4554  070D  0096               	movwf	22	;volatile
  4555                           
  4556                           ;user.c: 211: PMCON1bits.WR = 1;
  4557  070E  1495               	bsf	21,1	;volatile
  4558                           
  4559                           ;user.c: 212: __nop();
  4560  070F  0000               	nop
  4561                           
  4562                           ;user.c: 213: __nop();
  4563  0710  0000               	nop
  4564                           
  4565                           ;user.c: 214: PMCON1bits.WREN = 0;
  4566  0711  0023               	movlb	3	; select bank3
  4567  0712  1115               	bcf	21,2	;volatile
  4568                           
  4569                           ;user.c: 216: PMADR = address;
  4570  0713  0872               	movf	Save@address+1,w
  4571  0714  0192               	clrf	18	;volatile
  4572  0715  0792               	addwf	18,f	;volatile
  4573  0716  0871               	movf	Save@address,w
  4574  0717  0191               	clrf	17	;volatile
  4575  0718  0791               	addwf	17,f	;volatile
  4576                           
  4577                           ;user.c: 217: PMCON1bits.CFGS = 0;
  4578  0719  1315               	bcf	21,6	;volatile
  4579                           
  4580                           ;user.c: 218: PMCON1bits.FREE = 0;
  4581  071A  1215               	bcf	21,4	;volatile
  4582                           
  4583                           ;user.c: 219: PMCON1bits.WREN = 1;
  4584  071B  1515               	bsf	21,2	;volatile
  4585                           
  4586                           ;user.c: 220: PMCON1bits.LWLO = 1;
  4587  071C  1695               	bsf	21,5	;volatile
  4588                           
  4589                           ;user.c: 222: for (uint8_t i=1; i<=data_length; i++){
  4590  071D  01F6               	clrf	Save@i
  4591  071E  0AF6               	incf	Save@i,f
  4592  071F                     l196:	
  4593  071F  0876               	movf	Save@i,w
  4594  0720  0274               	subwf	Save@data_length,w
  4595  0721  1C03               	btfss	3,0
  4596  0722  2F43               	goto	l199
  4597                           
  4598                           ;user.c: 223: PMDAT = *ptr++;
  4599  0723  0873               	movf	Save@ptr,w
  4600  0724  0086               	movwf	6
  4601  0725  0187               	clrf	7
  4602  0726  3F40               	moviw [0]fsr1
  4603  0727  0093               	movwf	19	;volatile
  4604  0728  3F41               	moviw [1]fsr1
  4605  0729  0094               	movwf	20	;volatile
  4606  072A  3002               	movlw	2
  4607  072B  00F5               	movwf	??_Save
  4608  072C  0875               	movf	??_Save,w
  4609  072D  07F3               	addwf	Save@ptr,f
  4610                           
  4611                           ;user.c: 224: if(i == data_length) PMCON1bits.LWLO = 0;
  4612  072E  0876               	movf	Save@i,w
  4613  072F  0674               	xorwf	Save@data_length,w
  4614  0730  1903               	btfsc	3,2
  4615  0731  1295               	bcf	21,5	;volatile
  4616                           
  4617                           ;user.c: 225: PMCON2 = 0x55;
  4618  0732  3055               	movlw	85
  4619  0733  0096               	movwf	22	;volatile
  4620                           
  4621                           ;user.c: 226: PMCON2 = 0xAA;
  4622  0734  30AA               	movlw	170
  4623  0735  0096               	movwf	22	;volatile
  4624                           
  4625                           ;user.c: 227: PMCON1bits.WR = 1;
  4626  0736  1495               	bsf	21,1	;volatile
  4627                           
  4628                           ;user.c: 228: __nop();
  4629  0737  0000               	nop
  4630                           
  4631                           ;user.c: 229: __nop();
  4632  0738  0000               	nop
  4633                           
  4634                           ;user.c: 230: PMADRL++;
  4635  0739  3001               	movlw	1
  4636  073A  00F5               	movwf	??_Save
  4637  073B  0875               	movf	??_Save,w
  4638  073C  0023               	movlb	3	; select bank3
  4639  073D  0791               	addwf	17,f	;volatile
  4640  073E  3001               	movlw	1
  4641  073F  00F5               	movwf	??_Save
  4642  0740  0875               	movf	??_Save,w
  4643  0741  07F6               	addwf	Save@i,f
  4644  0742  2F1F               	goto	l196
  4645  0743                     l199:	
  4646                           
  4647                           ;user.c: 231: }
  4648                           ;user.c: 232: PMCON1bits.WREN = 0;
  4649  0743  1115               	bcf	21,2	;volatile
  4650                           
  4651                           ;user.c: 233: INTCONbits.GIE = 1;
  4652  0744  178B               	bsf	11,7	;volatile
  4653  0745  0008               	return
  4654  0746                     __end_of_Save:	
  4655                           
  4656                           	psect	text25
  4657  0777                     __ptext25:	
  4658 ;; *************** function _Load *****************
  4659 ;; Defined at:
  4660 ;;		line 190 in file "user.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  address         2    1[COMMON] unsigned int 
  4663 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4664 ;;		 -> control_transfer@data(32), hitlist(32), config(18), 
  4665 ;;  data_length     1    4[COMMON] unsigned char 
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  i               1    6[COMMON] unsigned char 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;		None               void
  4670 ;; Registers used:
  4671 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4677 ;;      Params:         4       0       0       0
  4678 ;;      Locals:         1       0       0       0
  4679 ;;      Temps:          1       0       0       0
  4680 ;;      Totals:         6       0       0       0
  4681 ;;Total ram usage:        6 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    1
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_LoadFromFlash
  4688 ;;		_control_transfer
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _Load
  4694  0777                     _Load:	
  4695                           
  4696                           ;user.c: 191: PMCON1bits.CFGS = 0;
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4700  0777  0023               	movlb	3	; select bank3
  4701  0778  1315               	bcf	21,6	;volatile
  4702                           
  4703                           ;user.c: 192: PMADR = address;
  4704  0779  0872               	movf	Load@address+1,w
  4705  077A  0192               	clrf	18	;volatile
  4706  077B  0792               	addwf	18,f	;volatile
  4707  077C  0871               	movf	Load@address,w
  4708  077D  0191               	clrf	17	;volatile
  4709  077E  0791               	addwf	17,f	;volatile
  4710                           
  4711                           ;user.c: 193: for (uint8_t i=0; i<data_length; i++){
  4712  077F  01F6               	clrf	Load@i
  4713  0780                     l2599:	
  4714  0780  0874               	movf	Load@data_length,w
  4715  0781  0276               	subwf	Load@i,w
  4716  0782  1803               	btfsc	3,0
  4717  0783  0008               	return
  4718                           
  4719                           ;user.c: 194: PMCON1bits.RD = 1;
  4720  0784  1415               	bsf	21,0	;volatile
  4721                           
  4722                           ;user.c: 195: __nop();
  4723  0785  0000               	nop
  4724                           
  4725                           ;user.c: 196: __nop();
  4726  0786  0000               	nop
  4727                           
  4728                           ;user.c: 197: *ptr++ = PMDAT;
  4729  0787  0873               	movf	Load@ptr,w
  4730  0788  0086               	movwf	6
  4731  0789  0187               	clrf	7
  4732  078A  0023               	movlb	3	; select bank3
  4733  078B  0813               	movf	19,w	;volatile
  4734  078C  3FC0               	movwi [0]fsr1
  4735  078D  0814               	movf	20,w	;volatile
  4736  078E  3FC1               	movwi [1]fsr1
  4737  078F  3002               	movlw	2
  4738  0790  00F5               	movwf	??_Load
  4739  0791  0875               	movf	??_Load,w
  4740  0792  07F3               	addwf	Load@ptr,f
  4741                           
  4742                           ;user.c: 198: PMADR ++;
  4743  0793  3001               	movlw	1
  4744  0794  0791               	addwf	17,f	;volatile
  4745  0795  3000               	movlw	0
  4746  0796  3D92               	addwfc	18,f	;volatile
  4747  0797  3001               	movlw	1
  4748  0798  00F5               	movwf	??_Load
  4749  0799  0875               	movf	??_Load,w
  4750  079A  07F6               	addwf	Load@i,f
  4751  079B  2F80               	goto	l2599
  4752  079C                     __end_of_Load:	
  4753                           
  4754                           	psect	intentry
  4755  0004                     __pintentry:	
  4756 ;; *************** function _High_Priority_Interrupt *****************
  4757 ;; Defined at:
  4758 ;;		line 295 in file "user.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;		None               void
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4772 ;;      Params:         0       0       0       0
  4773 ;;      Locals:         0       0       0       0
  4774 ;;      Temps:          1       0       0       0
  4775 ;;      Totals:         1       0       0       0
  4776 ;;Total ram usage:        1 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		Interrupt level 1
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785  0004                     _High_Priority_Interrupt:	
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4789  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4790  0005  3180               	pagesel	$
  4791  0006  0020               	movlb	0	; select bank0
  4792  0007  087F               	movf	127,w
  4793  0008  00F0               	movwf	??_High_Priority_Interrupt
  4794                           
  4795                           ;user.c: 296: if(INTCONbits.TMR0IF)
  4796  0009  1D0B               	btfss	11,2	;volatile
  4797  000A  2813               	goto	i1l224
  4798  000B  0022               	banksel	280	;# 
  4799  000C  0818               	movf	24,w	;# 
  4800  000D  3A20               	xorlw	32	;# 
  4801  000E  0098               	movwf	24	;# 
  4802                           
  4803                           ;user.c: 303: TMR0 -= 50;
  4804  000F  3032               	movlw	50
  4805  0010  0020               	movlb	0	; select bank0
  4806  0011  0295               	subwf	21,f	;volatile
  4807                           
  4808                           ;user.c: 304: INTCONbits.TMR0IF = 0;
  4809  0012  110B               	bcf	11,2	;volatile
  4810  0013                     i1l224:	
  4811  0013  0870               	movf	??_High_Priority_Interrupt,w
  4812  0014  00FF               	movwf	127
  4813  0015  107E               	bcf	126,0	;clear compiler interrupt flag
  4814  0016  0009               	retfie
  4815  0017                     __end_of_High_Priority_Interrupt:	
  4816  007E                     btemp	set	126	;btemp
  4817  007E                     pic14e$flags	set	126
  4818  007E                     wtemp	set	126
  4819  007E                     wtemp0	set	126
  4820  0080                     wtemp1	set	128
  4821  0082                     wtemp2	set	130
  4822  0084                     wtemp3	set	132
  4823  0086                     wtemp4	set	134
  4824  0088                     wtemp5	set	136
  4825  007F                     wtemp6	set	127
  4826  007E                     ttemp	set	126
  4827  007E                     ttemp0	set	126
  4828  0081                     ttemp1	set	129
  4829  0084                     ttemp2	set	132
  4830  0087                     ttemp3	set	135
  4831  007F                     ttemp4	set	127
  4832  007E                     ltemp	set	126
  4833  007E                     ltemp0	set	126
  4834  0082                     ltemp1	set	130
  4835  0086                     ltemp2	set	134
  4836  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    88
    Data        0
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     54      72
    BANK1            80      0      50
    BANK2            80      0       0

Pointer List with Targets:

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK1[18]), 

    play_song@song	PTR unsigned int  size(2) Largest target is 38
		 -> one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), fire_song(CODE[32]), 

    cur_song	PTR unsigned int  size(2) Largest target is 38
		 -> NULL(NULL[0]), one_up(CODE[12]), death_song(CODE[38]), dead_song(CODE[6]), 
		 -> fire_song(CODE[32]), 


Critical Paths under _main in COMMON

    _main->_handle_serial
    _handle_serial->_control_transfer
    _super_dead_mode->_control_transfer
    _handle_music->_tone
    _control_transfer->_play_song
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _handle_fire->_play_song
    _LoadFromFlash->_Load
    _LoadFromFlash->_Save

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_serial->_hit_by
    _hit_by->_super_dead_mode
    _super_dead_mode->_control_transfer

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28908
                      _LoadFromFlash
                              _Setup
                        _handle_fire
                       _handle_music
                      _handle_serial
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0   17292
                                             11 COMMON     1     1      0
                                             52 BANK0      2     2      0
                   _control_transfer
                             _hit_by
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               7     7      0   10935
                                             45 BANK0      7     7      0
                               _Save
                     _add_to_hitlist
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
                    _super_dead_mode
 ---------------------------------------------------------------------------------
 (1) _super_dead_mode                                      5     5      0    7660
                                             40 BANK0      5     5      0
                          _Send_Byte
                   _control_transfer
                       _handle_music
                            _led_off
                          _play_song
                         _red_led_on
 ---------------------------------------------------------------------------------
 (2) _handle_music                                         2     2      0     192
                                              5 COMMON     2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (3) _tone                                                 4     2      2     192
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    6168
                                              9 COMMON     2     2      0
                                              0 BANK0     40    40      0
                    _GET_CHAR_HELPER
                               _Load
                     _SEND_DATA_BYTE
                           _SEND_EOF
                           _SEND_SOF
                               _Save
                          _play_song
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     155
                                              5 COMMON     1     1      0
                     _SEND_DATA_BYTE
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0     124
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0    1021
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     288
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0    1260
                                              9 COMMON     2     2      0
                                              0 BANK0      2     2      0
                           _ADC_read
                          _Send_Byte
                            _led_off
                          _play_song
                         _red_led_on
                          _stop_song
 ---------------------------------------------------------------------------------
 (3) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (4) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _red_led_on                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _play_song                                            8     2      6    1164
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _led_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Send_Byte                                            1     1      0      31
                                              1 COMMON     1     1      0
                 _Disable_Modulation
                    _Modulate_Serial
 ---------------------------------------------------------------------------------
 (5) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0    2504
                                              7 COMMON     2     2      0
                               _Load
                               _Save
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4    1396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4    1108
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
     _Save
   _Setup
   _handle_fire
     _ADC_read
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
     _led_off
     _play_song
     _red_led_on
     _stop_song
       _tone_off
   _handle_music
     _stop_song
       _tone_off
     _tone
   _handle_serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _Save
       _play_song
     _hit_by
       _Save
       _add_to_hitlist
       _handle_music
         _stop_song
           _tone_off
         _tone
       _led_off
       _play_song
       _red_led_on
       _super_dead_mode
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
         _control_transfer
           _GET_CHAR_HELPER
           _Load
           _SEND_DATA_BYTE
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _SEND_EOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _SEND_SOF
             _SEND_DATA_BYTE
               _Send_Byte
                 _Disable_Modulation
                 _Modulate_Serial
             _Send_Byte
               _Disable_Modulation
               _Modulate_Serial
           _Save
           _play_song
         _handle_music
           _stop_song
             _tone_off
           _tone
         _led_off
         _play_song
         _red_led_on
   _super_dead_mode
     _Send_Byte
       _Disable_Modulation
       _Modulate_Serial
     _control_transfer
       _GET_CHAR_HELPER
       _Load
       _SEND_DATA_BYTE
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_EOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _SEND_SOF
         _SEND_DATA_BYTE
           _Send_Byte
             _Disable_Modulation
             _Modulate_Serial
         _Send_Byte
           _Disable_Modulation
           _Modulate_Serial
       _Save
       _play_song
     _handle_music
       _stop_song
         _tone_off
       _tone
     _led_off
     _play_song
     _red_led_on

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      87       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     36      48       6       90.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      87      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Aug 20 01:50:03 2014

                     __CFG_CP$OFF 0000                                l26 05A4                                __i 0056  
                              __x 0066                                __y 0067                     _LoadFromFlash 0448  
                             l135 0575                               l175 07C7                               l419 0342  
                             l196 071F                               l199 0743                               l297 054F  
                    __CFG_BORV$LO 0000                               wreg 0009                   _super_dead_mode 04A8  
                    __CFG_LVP$OFF 0000                              l3005 027D                              l3103 04F2  
                     Load@address 0071                              l3121 0682                              l3041 02E7  
                            l3033 02BD                              l3043 02EC                              l3035 02CB  
                            l3107 04AB                              l3221 049A                              l3127 06A7  
                            l3039 02D9                              l3231 06BB                              l3073 032F  
                            l3181 03B3                              l3157 037E                              l3089 04C2  
                            l3177 03AB                              l3169 0397                              l3275 03F9  
                            l3291 0436                              l2723 0754                              l3195 0388  
                            l3285 042B                              l3349 02DF                              l3279 040C  
                            l2719 0752                              l3289 0434                              l3299 0442  
                            l2691 055E                              l2941 01EE                              l2933 01DC  
                            l2861 0142                              l2599 0780                              l2943 01F0  
                            l2769 0077                              l2797 00AF                              l2983 0247  
                            u3105 0069                              u3045 0040                              u4105 045C  
                            u4025 057C                              u3235 00C5                              u3155 008D  
                            u4205 03DB                              u4215 03E6                              u3335 010B  
                            u4225 03F2                              u3425 0158                              u4145 06CD  
                            u4307 039D                              u4245 040A                              u3525 01A6  
                            u3285 00E8                              u4317 03BF                              u4327 04CB  
                            u4337 05AC                              u3625 0206                              u2915 0533  
                            u4347 05BB                              u3475 017F                              u4195 06F3  
                            u4357 053E                              u4367 0545                              u3735 025D  
                            u4377 0570                              u3675 022D                              u3935 04DA  
                            u3945 0502                              u3875 0302                              u3795 0293  
                            u3995 0699              control_transfer@data 0020                              _TMR0 0015  
                            _TMR1 0016                              _TMR2 001A              control_transfer@page 0045  
            control_transfer@dptr 0043                              _Load 0777                      __CFG_WRT$OFF 0000  
                            _Save 06FF                              _main 059C                     Send_Byte@data 0071  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              _tone 0585                              indf1 0001  
                            fsr1l 0006                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E                              start 0017                              ttemp 007E  
                            wtemp 007E                  __end_of_ADC_read 0585                 ??_GET_CHAR_HELPER 0071  
                   __CFG_MCLRE$ON 0000               hit_by@respawn_timer 0050                    ?_LoadFromFlash 0070  
                           ?_Load 0071                             ?_Save 0071                             ?_main 0070  
                           _ADRES 009B                     __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0013  
                           ?_tone 0071                             i1l224 0013                             _PMADR 0191  
                           _PMDAT 0193                             _RCREG 0199                  __end_of_SEND_EOF 05BE  
                __end_of_SEND_SOF 05B4                             Load@i 0076                             _TXREG 019A  
                           Save@i 0076                       hit_by@i_790 0053                             _Setup 0506  
                 __end_of_led_off 05DF                   add_to_hitlist@i 0078                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F          __end_of_control_transfer 0343                   __initialization 0018  
                    __end_of_Load 079C                      __end_of_Save 0746                      __end_of_main 05A8  
                    __end_of_tone 059C                            DACCON0 0118                            ??_Load 0075  
                          ??_Save 0075           __end_of_super_dead_mode 0506                            ??_main 007C  
                          ??_tone 0073              __end_of_handle_music 0777                    __CFG_PLLEN$OFF 0000  
                          ?_Setup 0070              __size_of_handle_fire 007E                            _ADCON1 009E  
                          _ANSELA 018C                            _PMADRL 0191                            _PMCON2 0196  
                          _OSCCON 0099                            _PWM3DC 0DB3                            _PWM3PH 0DB1  
                          _SPBRGL 019B                            _PWM3PR 0DB5                    __CFG_PWRTE$OFF 0000  
                 ??_LoadFromFlash 0077                __size_of_Send_Byte 000E                    __CFG_STVREN$ON 0000  
                ??_SEND_DATA_BYTE 0072                            _config 00C0                            _hit_by 0343  
                 play_song@length 0073                            _one_up 0646                   play_song@repeat 0076  
                       ??_led_off 0071        __end_of_Disable_Modulation 05D9                       Save@address 0071  
                _my_random_number 0063                         ?_ADC_read 0071                  __end_of_tone_off 05DC  
        __size_of_Modulate_Serial 0007           __end_of__initialization 0025           handle_serial@rx_counter 0064  
                       ?_SEND_EOF 0070                         ?_SEND_SOF 0070                    __pcstackCOMMON 0070  
                   __end_of_Setup 0529           _High_Priority_Interrupt 0004                  ?_super_dead_mode 0070  
                super_dead_mode@b 004A                    _OPTION_REGbits 0095                        ??_ADC_read 0073  
                         ??_Setup 0071                   _GET_CHAR_HELPER 054B                 __end_of_Send_Byte 07CE  
         __size_of_add_to_hitlist 0054                        __pbssBANK0 0056                        __pbssBANK1 00A0  
           __end_of_handle_serial 06FF                        _death_song 0600                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 059C                 _cur_song_duration 005A  
                      __pintentry 0004             __size_of_handle_music 0031                           ?_hit_by 0070  
              __size_of_play_song 0024                 __end_of_dead_song 0658                           Load@ptr 0073  
              __size_of_stop_song 0005                 ??_Modulate_Serial 0071                           Save@ptr 0073  
                    _handle_music 0746                 ?_control_transfer 0070                ??_control_transfer 0079  
                 SEND_DATA_BYTE@b 0074         ??_High_Priority_Interrupt 0070                 __end_of_fire_song 0646  
                       ?_tone_off 0070                   __size_of_hit_by 0087                           __ptext1 06AC  
                         __ptext2 0343                           __ptext3 04A8                           __ptext4 0746  
                         __ptext5 0585                           __ptext6 0028                           __ptext7 05A8  
                         __ptext8 05B4                           __ptext9 0529                           _led_off 05DC  
                      _red_led_on 05D0                         _T1CONbits 0018           __end_of_GET_CHAR_HELPER 0568  
                         _hitlist 00A0                         _T2CONbits 001C                           clrloop0 05C6  
               add_to_hitlist@gun 0075              end_of_initialization 0025                           hit_by@i 0052  
               __end_of_play_song 07C0                         _RCSTAbits 019D                        ??_tone_off 0071  
                    __pstringtext 0600                         _PORTAbits 000C                 __end_of_stop_song 05D0  
                   ??_handle_fire 0079                  __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C  
                     _DACCON0bits 0118                    _add_to_hitlist 0658                 __size_of_ADC_read 001D  
              _Disable_Modulation 05D5                         _TXSTAbits 019E               control_transfer@cmd 0040  
             ?_Disable_Modulation 0070                handle_fire@counter 005C                 __size_of_SEND_EOF 000A  
               __size_of_SEND_SOF 000C             __end_of_LoadFromFlash 04A8                       _BAUDCONbits 019F  
                  __end_of_hit_by 03CA                GET_CHAR_HELPER@val 0072                     play_song@song 0071  
                  __end_of_one_up 0652                       ?_red_led_on 0070                  ?_GET_CHAR_HELPER 0070  
             start_initialization 0018              ??_Disable_Modulation 0071            __end_of_add_to_hitlist 06AC  
             __end_of_handle_fire 0448                         _Send_Byte 07C0                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 007C                          ??_hit_by 004D  
                     __pbssCOMMON 007C                         ___latbits 0000                   _Modulate_Serial 05BE  
                   __pcstackBANK0 0020                   ?_add_to_hitlist 0070           __size_of_SEND_DATA_BYTE 0022  
                       __checksum 0060                  handle_fire@timer 005E          __size_of_super_dead_mode 005E  
                 Save@data_length 0074                         _dead_song 0652                        ?_Send_Byte 0070  
             __size_of_red_led_on 0005                    handle_serial@b 007B                 __size_of_tone_off 0003  
                       _fire_song 0626            __size_of_handle_serial 0053                          ?_led_off 0070  
       __size_of_control_transfer 031B                       _handle_fire 03CA                          _ADC_read 0568  
                  __size_of_Setup 0023                         clear_ram0 05C5                          _PIE1bits 0091  
                 Load@data_length 0074                         _play_song 079C                          _PIR1bits 0011  
                        _SEND_EOF 05B4                          _SEND_SOF 05A8           __end_of_Modulate_Serial 05C5  
                      _ADCON0bits 009D                __end_of_death_song 0626                control_transfer@id 0042  
                      tone@period 0071               add_to_hitlist@gun16 0076                         _stop_song 05CB  
                       hit_by@who 004F            super_dead_mode@counter 004B                       ??_Send_Byte 0071  
                   _handle_serial 06AC                 ??_super_dead_mode 0048          ?_High_Priority_Interrupt 0070  
                      ?_play_song 0071                      ??_red_led_on 0071                        _ANSELAbits 018C  
                __size_of_led_off 0003                    _SEND_DATA_BYTE 0529                        ?_stop_song 0070  
                 _cur_song_length 0061     control_transfer@random_number 0041                          __ptext10 054B  
                        __ptext11 0658                          __ptext20 05D5                          __ptext12 03CA  
                        __ptext21 0568                          __ptext13 05CB                          __ptext22 0506  
                        __ptext14 05D9                          __ptext23 0448                          __ptext15 05D0  
                        __ptext24 06FF                          __ptext16 079C                          __ptext25 0777  
                        __ptext17 05DC                          __ptext18 07C0                          __ptext19 05BE  
                 _cur_song_repeat 0062                     __size_of_Load 0025                    ?_handle_serial 0070  
                        _cur_song 0058                     __size_of_Save 0047                     __size_of_main 000C  
                   __size_of_tone 0017                __end_of_red_led_on 05D5                          _tone_off 05D9  
               control_transfer@i 0044                 control_transfer@x 0047            play_song@note_duration 0074  
                ?_Modulate_Serial 0070                  ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 054B  
                _control_transfer 0028                        _INTCONbits 000B       __size_of_Disable_Modulation 0004  
                     _PWM3CONbits 0DBB                       pic14e$flags 007E                          intlevel1 0000  
        __size_of_GET_CHAR_HELPER 001D   __end_of_High_Priority_Interrupt 0017                      handle_fire@a 0020  
          __size_of_LoadFromFlash 0060                        _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000  
                   ?_handle_music 0070                       ??_play_song 0077                   ?_SEND_DATA_BYTE 0070  
                    ?_handle_fire 0070                       ??_stop_song 0071                   ??_handle_serial 0054  
              handle_serial@rx_id 0065                    ??_handle_music 0075  
