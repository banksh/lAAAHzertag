

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Aug 18 23:18:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	12LF1572
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  008C                     	;# 
    69  0091                     	;# 
    70  0092                     	;# 
    71  0093                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  010C                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0115                     	;# 
    88  0116                     	;# 
    89  0117                     	;# 
    90  0118                     	;# 
    91  0119                     	;# 
    92  011D                     	;# 
    93  011D                     	;# 
    94  018C                     	;# 
    95  0191                     	;# 
    96  0191                     	;# 
    97  0192                     	;# 
    98  0193                     	;# 
    99  0193                     	;# 
   100  0194                     	;# 
   101  0195                     	;# 
   102  0196                     	;# 
   103  0197                     	;# 
   104  0199                     	;# 
   105  019A                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019E                     	;# 
   111  019F                     	;# 
   112  020C                     	;# 
   113  028C                     	;# 
   114  030C                     	;# 
   115  038C                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  0691                     	;# 
   120  0692                     	;# 
   121  0693                     	;# 
   122  0694                     	;# 
   123  0695                     	;# 
   124  0D8E                     	;# 
   125  0D8F                     	;# 
   126  0D90                     	;# 
   127  0D91                     	;# 
   128  0D91                     	;# 
   129  0D92                     	;# 
   130  0D93                     	;# 
   131  0D93                     	;# 
   132  0D94                     	;# 
   133  0D95                     	;# 
   134  0D95                     	;# 
   135  0D96                     	;# 
   136  0D97                     	;# 
   137  0D97                     	;# 
   138  0D98                     	;# 
   139  0D99                     	;# 
   140  0D99                     	;# 
   141  0D9A                     	;# 
   142  0D9B                     	;# 
   143  0D9C                     	;# 
   144  0D9D                     	;# 
   145  0D9E                     	;# 
   146  0D9F                     	;# 
   147  0DA0                     	;# 
   148  0DA1                     	;# 
   149  0DA1                     	;# 
   150  0DA2                     	;# 
   151  0DA3                     	;# 
   152  0DA3                     	;# 
   153  0DA4                     	;# 
   154  0DA5                     	;# 
   155  0DA5                     	;# 
   156  0DA6                     	;# 
   157  0DA7                     	;# 
   158  0DA7                     	;# 
   159  0DA8                     	;# 
   160  0DA9                     	;# 
   161  0DA9                     	;# 
   162  0DAA                     	;# 
   163  0DAB                     	;# 
   164  0DAC                     	;# 
   165  0DAD                     	;# 
   166  0DAE                     	;# 
   167  0DAF                     	;# 
   168  0DB0                     	;# 
   169  0DB1                     	;# 
   170  0DB1                     	;# 
   171  0DB2                     	;# 
   172  0DB3                     	;# 
   173  0DB3                     	;# 
   174  0DB4                     	;# 
   175  0DB5                     	;# 
   176  0DB5                     	;# 
   177  0DB6                     	;# 
   178  0DB7                     	;# 
   179  0DB7                     	;# 
   180  0DB8                     	;# 
   181  0DB9                     	;# 
   182  0DB9                     	;# 
   183  0DBA                     	;# 
   184  0DBB                     	;# 
   185  0DBC                     	;# 
   186  0DBD                     	;# 
   187  0DBE                     	;# 
   188  0DBF                     	;# 
   189  0DC0                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0115                     	;# 
   249  0116                     	;# 
   250  0117                     	;# 
   251  0118                     	;# 
   252  0119                     	;# 
   253  011D                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0197                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  028C                     	;# 
   275  030C                     	;# 
   276  038C                     	;# 
   277  0391                     	;# 
   278  0392                     	;# 
   279  0393                     	;# 
   280  0691                     	;# 
   281  0692                     	;# 
   282  0693                     	;# 
   283  0694                     	;# 
   284  0695                     	;# 
   285  0D8E                     	;# 
   286  0D8F                     	;# 
   287  0D90                     	;# 
   288  0D91                     	;# 
   289  0D91                     	;# 
   290  0D92                     	;# 
   291  0D93                     	;# 
   292  0D93                     	;# 
   293  0D94                     	;# 
   294  0D95                     	;# 
   295  0D95                     	;# 
   296  0D96                     	;# 
   297  0D97                     	;# 
   298  0D97                     	;# 
   299  0D98                     	;# 
   300  0D99                     	;# 
   301  0D99                     	;# 
   302  0D9A                     	;# 
   303  0D9B                     	;# 
   304  0D9C                     	;# 
   305  0D9D                     	;# 
   306  0D9E                     	;# 
   307  0D9F                     	;# 
   308  0DA0                     	;# 
   309  0DA1                     	;# 
   310  0DA1                     	;# 
   311  0DA2                     	;# 
   312  0DA3                     	;# 
   313  0DA3                     	;# 
   314  0DA4                     	;# 
   315  0DA5                     	;# 
   316  0DA5                     	;# 
   317  0DA6                     	;# 
   318  0DA7                     	;# 
   319  0DA7                     	;# 
   320  0DA8                     	;# 
   321  0DA9                     	;# 
   322  0DA9                     	;# 
   323  0DAA                     	;# 
   324  0DAB                     	;# 
   325  0DAC                     	;# 
   326  0DAD                     	;# 
   327  0DAE                     	;# 
   328  0DAF                     	;# 
   329  0DB0                     	;# 
   330  0DB1                     	;# 
   331  0DB1                     	;# 
   332  0DB2                     	;# 
   333  0DB3                     	;# 
   334  0DB3                     	;# 
   335  0DB4                     	;# 
   336  0DB5                     	;# 
   337  0DB5                     	;# 
   338  0DB6                     	;# 
   339  0DB7                     	;# 
   340  0DB7                     	;# 
   341  0DB8                     	;# 
   342  0DB9                     	;# 
   343  0DB9                     	;# 
   344  0DBA                     	;# 
   345  0DBB                     	;# 
   346  0DBC                     	;# 
   347  0DBD                     	;# 
   348  0DBE                     	;# 
   349  0DBF                     	;# 
   350  0DC0                     	;# 
   351  0FE4                     	;# 
   352  0FE5                     	;# 
   353  0FE6                     	;# 
   354  0FE7                     	;# 
   355  0FE8                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0013                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0093                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  0111                     	;# 
   408  0112                     	;# 
   409  0115                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  0118                     	;# 
   413  0119                     	;# 
   414  011D                     	;# 
   415  011D                     	;# 
   416  018C                     	;# 
   417  0191                     	;# 
   418  0191                     	;# 
   419  0192                     	;# 
   420  0193                     	;# 
   421  0193                     	;# 
   422  0194                     	;# 
   423  0195                     	;# 
   424  0196                     	;# 
   425  0197                     	;# 
   426  0199                     	;# 
   427  019A                     	;# 
   428  019B                     	;# 
   429  019B                     	;# 
   430  019C                     	;# 
   431  019D                     	;# 
   432  019E                     	;# 
   433  019F                     	;# 
   434  020C                     	;# 
   435  028C                     	;# 
   436  030C                     	;# 
   437  038C                     	;# 
   438  0391                     	;# 
   439  0392                     	;# 
   440  0393                     	;# 
   441  0691                     	;# 
   442  0692                     	;# 
   443  0693                     	;# 
   444  0694                     	;# 
   445  0695                     	;# 
   446  0D8E                     	;# 
   447  0D8F                     	;# 
   448  0D90                     	;# 
   449  0D91                     	;# 
   450  0D91                     	;# 
   451  0D92                     	;# 
   452  0D93                     	;# 
   453  0D93                     	;# 
   454  0D94                     	;# 
   455  0D95                     	;# 
   456  0D95                     	;# 
   457  0D96                     	;# 
   458  0D97                     	;# 
   459  0D97                     	;# 
   460  0D98                     	;# 
   461  0D99                     	;# 
   462  0D99                     	;# 
   463  0D9A                     	;# 
   464  0D9B                     	;# 
   465  0D9C                     	;# 
   466  0D9D                     	;# 
   467  0D9E                     	;# 
   468  0D9F                     	;# 
   469  0DA0                     	;# 
   470  0DA1                     	;# 
   471  0DA1                     	;# 
   472  0DA2                     	;# 
   473  0DA3                     	;# 
   474  0DA3                     	;# 
   475  0DA4                     	;# 
   476  0DA5                     	;# 
   477  0DA5                     	;# 
   478  0DA6                     	;# 
   479  0DA7                     	;# 
   480  0DA7                     	;# 
   481  0DA8                     	;# 
   482  0DA9                     	;# 
   483  0DA9                     	;# 
   484  0DAA                     	;# 
   485  0DAB                     	;# 
   486  0DAC                     	;# 
   487  0DAD                     	;# 
   488  0DAE                     	;# 
   489  0DAF                     	;# 
   490  0DB0                     	;# 
   491  0DB1                     	;# 
   492  0DB1                     	;# 
   493  0DB2                     	;# 
   494  0DB3                     	;# 
   495  0DB3                     	;# 
   496  0DB4                     	;# 
   497  0DB5                     	;# 
   498  0DB5                     	;# 
   499  0DB6                     	;# 
   500  0DB7                     	;# 
   501  0DB7                     	;# 
   502  0DB8                     	;# 
   503  0DB9                     	;# 
   504  0DB9                     	;# 
   505  0DBA                     	;# 
   506  0DBB                     	;# 
   507  0DBC                     	;# 
   508  0DBD                     	;# 
   509  0DBE                     	;# 
   510  0DBF                     	;# 
   511  0DC0                     	;# 
   512  0FE4                     	;# 
   513  0FE5                     	;# 
   514  0FE6                     	;# 
   515  0FE7                     	;# 
   516  0FE8                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEA                     	;# 
   521  0FEB                     	;# 
   522  0FED                     	;# 
   523  0FEE                     	;# 
   524  0FEE                     	;# 
   525  0FEF                     	;# 
   526                           
   527                           	psect	idataBANK1
   528  0659                     __pidataBANK1:	
   529                           
   530                           ;initializer for _fire_song
   531  0659  34A0               	retlw	160
   532  065A  340F               	retlw	15
   533  065B  34D5               	retlw	213
   534  065C  3414               	retlw	20
   535  065D  3440               	retlw	64
   536  065E  341F               	retlw	31
   537  065F  3480               	retlw	128
   538  0660  343E               	retlw	62
   539  0661  3440               	retlw	64
   540  0662  349C               	retlw	156
   541  0663  3455               	retlw	85
   542  0664  34D0               	retlw	208
   543  0665  341A               	retlw	26
   544  0666  34FF               	retlw	255
   545  0667  341A               	retlw	26
   546  0668  34FF               	retlw	255
   547  0669  3400               	retlw	0
   548  066A  3400               	retlw	0
   549  066B  3400               	retlw	0
   550  066C  3400               	retlw	0
   551  066D  3400               	retlw	0
   552  066E  3400               	retlw	0
   553  066F  3400               	retlw	0
   554  0670  3400               	retlw	0
   555  0671  3400               	retlw	0
   556  0672  3400               	retlw	0
   557  0673  3400               	retlw	0
   558  0674  3400               	retlw	0
   559  0675  3400               	retlw	0
   560  0676  3400               	retlw	0
   561  0677  3400               	retlw	0
   562  0678  3400               	retlw	0
   563  0016                     _TMR1	set	22
   564  000B                     _INTCONbits	set	11
   565  0011                     _PIR1bits	set	17
   566  000C                     _PORTAbits	set	12
   567  0018                     _T1CONbits	set	24
   568  0015                     _TMR0	set	21
   569  009B                     _ADRES	set	155
   570  009D                     _ADCON0bits	set	157
   571  009E                     _ADCON1	set	158
   572  0095                     _OPTION_REGbits	set	149
   573  0099                     _OSCCON	set	153
   574  0091                     _PIE1bits	set	145
   575  008C                     _TRISAbits	set	140
   576  0118                     _DACCON0bits	set	280
   577  0191                     _PMADR	set	401
   578  0193                     _PMDAT	set	403
   579  018C                     _ANSELA	set	396
   580  018C                     _ANSELAbits	set	396
   581  019F                     _BAUDCONbits	set	415
   582  0191                     _PMADRL	set	401
   583  0195                     _PMCON1bits	set	405
   584  0196                     _PMCON2	set	406
   585  0199                     _RCREG	set	409
   586  019D                     _RCSTAbits	set	413
   587  019B                     _SPBRGL	set	411
   588  019A                     _TXREG	set	410
   589  019E                     _TXSTAbits	set	414
   590  0DB3                     _PWM3DC	set	3507
   591  0DB1                     _PWM3PH	set	3505
   592  0DB5                     _PWM3PR	set	3509
   593  0DBB                     _PWM3CONbits	set	3515
   594  0DBF                     _PWM3LDCONbits	set	3519
   595                           
   596                           ; #config settings
   597  0000                     
   598                           	psect	cinit
   599  0016                     start_initialization:	
   600  0016                     __initialization:	
   601                           
   602                           ; Clear objects allocated to BANK0
   603  0016  304B               	movlw	low __pbssBANK0
   604  0017  0084               	movwf	4
   605  0018  3000               	movlw	high __pbssBANK0
   606  0019  0085               	movwf	5
   607  001A  3022               	movlw	34
   608  001B  26FA               	fcall	clear_ram0
   609                           
   610                           ; Clear objects allocated to BANK1
   611  001C  30A0               	movlw	low __pbssBANK1
   612  001D  0084               	movwf	4
   613  001E  3000               	movlw	high __pbssBANK1
   614  001F  0085               	movwf	5
   615  0020  3020               	movlw	32
   616  0021  26FA               	fcall	clear_ram0
   617                           
   618                           ; Initialize objects allocated to BANK1
   619  0022  3059               	movlw	low __pidataBANK1
   620  0023  0084               	movwf	4
   621  0024  3086               	movlw	(high __pidataBANK1)| (0+128)
   622  0025  0085               	movwf	5
   623  0026  30C0               	movlw	low __pdataBANK1
   624  0027  0086               	movwf	6
   625  0028  3000               	movlw	high __pdataBANK1
   626  0029  0087               	movwf	7
   627  002A  3020               	movlw	32
   628  002B  2700               	fcall	init_ram
   629  002C                     end_of_initialization:	
   630                           ;End of C runtime variable initialization code
   631                           
   632  002C                     __end_of__initialization:	
   633  002C  0020               	movlb	0
   634  002D  2F06               	ljmp	_main	;jump to C main() function
   635                           
   636                           	psect	bssBANK0
   637  004B                     __pbssBANK0:	
   638  004B                     __i:	
   639  004B                     	ds	2
   640  004D                     _cur_song_duration:	
   641  004D                     	ds	2
   642  004F                     handle_fire@counter:	
   643  004F                     	ds	2
   644  0051                     handle_fire@timer:	
   645  0051                     	ds	2
   646  0053                     __checksum:	
   647  0053                     	ds	1
   648  0054                     _cur_song:	
   649  0054                     	ds	1
   650  0055                     _cur_song_length:	
   651  0055                     	ds	1
   652  0056                     _cur_song_ptr:	
   653  0056                     	ds	1
   654  0057                     _cur_song_repeat:	
   655  0057                     	ds	1
   656  0058                     _my_random_number:	
   657  0058                     	ds	1
   658  0059                     handle_serial@rx_counter:	
   659  0059                     	ds	1
   660  005A                     handle_serial@rx_id:	
   661  005A                     	ds	1
   662  005B                     _config:	
   663  005B                     	ds	16
   664  006B                     __x:	
   665  006B                     	ds	1
   666  006C                     __y:	
   667  006C                     	ds	1
   668                           
   669                           	psect	bssBANK1
   670  00A0                     __pbssBANK1:	
   671  00A0                     _hitlist:	
   672  00A0                     	ds	32
   673                           
   674                           	psect	dataBANK1
   675  00C0                     __pdataBANK1:	
   676  00C0                     _fire_song:	
   677  00C0                     	ds	32
   678                           
   679                           	psect	clrtext
   680  06FA                     clear_ram0:	
   681                           ;	Called with FSR0 containing the base address, and
   682                           ;	WREG with the size to clear
   683                           
   684  06FA  0064               	clrwdt	;clear the watchdog before getting into this loop
   685  06FB                     clrloop0:	
   686  06FB  0180               	clrf	0	;clear RAM location pointed to by FSR
   687  06FC  3101               	addfsr 0,1
   688  06FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   689  06FE  2EFB               	goto	clrloop0	;have we reached the end yet?
   690  06FF  3400               	retlw	0	;all done for this memory range, return
   691                           
   692                           	psect	inittext
   693  0700                     init_ram:	
   694  0700  00FE               	movwf	126
   695  0701                     initloop:	
   696  0701  0012               	moviw fsr0++
   697  0702  001E               	movwi fsr1++
   698  0703  0BFE               	decfsz	126,f
   699  0704  2F01               	goto	initloop
   700  0705  3400               	retlw	0
   701                           
   702                           	psect	cstackCOMMON
   703  0070                     __pcstackCOMMON:	
   704  0070                     ?_Setup:	
   705  0070                     ?_handle_music:	
   706                           ; 0 bytes @ 0x0
   707                           
   708  0070                     ?_add_to_hitlist:	
   709                           ; 0 bytes @ 0x0
   710                           
   711  0070                     ?_tone_off:	
   712                           ; 0 bytes @ 0x0
   713                           
   714  0070                     ?_Modulate_Serial:	
   715                           ; 0 bytes @ 0x0
   716                           
   717  0070                     ?_Disable_Modulation:	
   718                           ; 0 bytes @ 0x0
   719                           
   720  0070                     ?_LoadFromFlash:	
   721                           ; 0 bytes @ 0x0
   722                           
   723  0070                     ?_main:	
   724                           ; 0 bytes @ 0x0
   725                           
   726  0070                     ?_hit_by:	
   727                           ; 0 bytes @ 0x0
   728                           
   729  0070                     ?_LED_on:	
   730                           ; 0 bytes @ 0x0
   731                           
   732  0070                     ?_LED_off:	
   733                           ; 0 bytes @ 0x0
   734                           
   735  0070                     ?_stop_song:	
   736                           ; 0 bytes @ 0x0
   737                           
   738  0070                     ?_Send_Byte:	
   739                           ; 0 bytes @ 0x0
   740                           
   741  0070                     ?_High_Priority_Interrupt:	
   742                           ; 0 bytes @ 0x0
   743                           
   744  0070                     ??_High_Priority_Interrupt:	
   745                           ; 0 bytes @ 0x0
   746                           
   747  0070                     ?_SEND_DATA_BYTE:	
   748                           ; 0 bytes @ 0x0
   749                           
   750  0070                     ?_SEND_SOF:	
   751                           ; 0 bytes @ 0x0
   752                           
   753  0070                     ?_SEND_EOF:	
   754                           ; 0 bytes @ 0x0
   755                           
   756  0070                     ?_control_transfer:	
   757                           ; 0 bytes @ 0x0
   758                           
   759  0070                     ?_handle_serial:	
   760                           ; 0 bytes @ 0x0
   761                           
   762  0070                     ?_handle_fire:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0070                     ?_get_hitlist_length:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0070                     ?_GET_CHAR_HELPER:	
   769                           ; 1 bytes @ 0x0
   770                           
   771                           
   772                           ; 1 bytes @ 0x0
   773  0070                     	ds	1
   774  0071                     ?_Load:	
   775  0071                     ??_Setup:	
   776                           ; 0 bytes @ 0x1
   777                           
   778  0071                     ??_add_to_hitlist:	
   779                           ; 0 bytes @ 0x1
   780                           
   781  0071                     ?_Save:	
   782                           ; 0 bytes @ 0x1
   783                           
   784  0071                     ??_get_hitlist_length:	
   785                           ; 0 bytes @ 0x1
   786                           
   787  0071                     ??_tone_off:	
   788                           ; 0 bytes @ 0x1
   789                           
   790  0071                     ??_Modulate_Serial:	
   791                           ; 0 bytes @ 0x1
   792                           
   793  0071                     ??_Disable_Modulation:	
   794                           ; 0 bytes @ 0x1
   795                           
   796  0071                     ??_LED_on:	
   797                           ; 0 bytes @ 0x1
   798                           
   799  0071                     ??_LED_off:	
   800                           ; 0 bytes @ 0x1
   801                           
   802  0071                     ?_play_song:	
   803                           ; 0 bytes @ 0x1
   804                           
   805  0071                     ??_stop_song:	
   806                           ; 0 bytes @ 0x1
   807                           
   808  0071                     ??_Send_Byte:	
   809                           ; 0 bytes @ 0x1
   810                           
   811  0071                     ??_GET_CHAR_HELPER:	
   812                           ; 0 bytes @ 0x1
   813                           
   814  0071                     ?_ADC_read:	
   815                           ; 0 bytes @ 0x1
   816                           
   817  0071                     ?___aldiv:	
   818                           ; 2 bytes @ 0x1
   819                           
   820  0071                     play_song@length:	
   821                           ; 4 bytes @ 0x1
   822                           
   823  0071                     Send_Byte@data:	
   824                           ; 1 bytes @ 0x1
   825                           
   826  0071                     Load@address:	
   827                           ; 1 bytes @ 0x1
   828                           
   829  0071                     Save@address:	
   830                           ; 2 bytes @ 0x1
   831                           
   832  0071                     ___aldiv@divisor:	
   833                           ; 2 bytes @ 0x1
   834                           
   835                           
   836                           ; 4 bytes @ 0x1
   837  0071                     	ds	1
   838  0072                     ??_SEND_DATA_BYTE:	
   839  0072                     GET_CHAR_HELPER@val:	
   840                           ; 0 bytes @ 0x2
   841                           
   842  0072                     play_song@note_duration:	
   843                           ; 1 bytes @ 0x2
   844                           
   845                           
   846                           ; 2 bytes @ 0x2
   847  0072                     	ds	1
   848  0073                     ??_ADC_read:	
   849  0073                     Load@ptr:	
   850                           ; 0 bytes @ 0x3
   851                           
   852  0073                     Save@ptr:	
   853                           ; 1 bytes @ 0x3
   854                           
   855                           
   856                           ; 1 bytes @ 0x3
   857  0073                     	ds	1
   858  0074                     play_song@repeat:	
   859  0074                     Load@data_length:	
   860                           ; 1 bytes @ 0x4
   861                           
   862  0074                     Save@data_length:	
   863                           ; 1 bytes @ 0x4
   864                           
   865  0074                     SEND_DATA_BYTE@b:	
   866                           ; 1 bytes @ 0x4
   867                           
   868                           
   869                           ; 1 bytes @ 0x4
   870  0074                     	ds	1
   871  0075                     ??_Load:	
   872  0075                     ??_Save:	
   873                           ; 0 bytes @ 0x5
   874                           
   875  0075                     ??_play_song:	
   876                           ; 0 bytes @ 0x5
   877                           
   878  0075                     ??_SEND_SOF:	
   879                           ; 0 bytes @ 0x5
   880                           
   881  0075                     ??_SEND_EOF:	
   882                           ; 0 bytes @ 0x5
   883                           
   884  0075                     get_hitlist_length@i:	
   885                           ; 0 bytes @ 0x5
   886                           
   887  0075                     add_to_hitlist@gun:	
   888                           ; 1 bytes @ 0x5
   889                           
   890  0075                     ___aldiv@dividend:	
   891                           ; 1 bytes @ 0x5
   892                           
   893                           
   894                           ; 4 bytes @ 0x5
   895  0075                     	ds	1
   896  0076                     Load@i:	
   897  0076                     Save@i:	
   898                           ; 1 bytes @ 0x6
   899                           
   900  0076                     add_to_hitlist@gun16:	
   901                           ; 1 bytes @ 0x6
   902                           
   903                           
   904                           ; 2 bytes @ 0x6
   905  0076                     	ds	1
   906  0077                     ??_LoadFromFlash:	
   907  0077                     ??_control_transfer:	
   908                           ; 0 bytes @ 0x7
   909                           
   910  0077                     play_song@song:	
   911                           ; 0 bytes @ 0x7
   912                           
   913                           
   914                           ; 1 bytes @ 0x7
   915  0077                     	ds	1
   916  0078                     ??_handle_fire:	
   917  0078                     add_to_hitlist@i:	
   918                           ; 0 bytes @ 0x8
   919                           
   920                           
   921                           ; 1 bytes @ 0x8
   922  0078                     	ds	1
   923  0079                     ??___aldiv:	
   924                           
   925                           ; 0 bytes @ 0x9
   926  0079                     	ds	1
   927  007A                     ??_tone:	
   928  007A                     handle_fire@a:	
   929                           ; 0 bytes @ 0xA
   930                           
   931                           
   932                           ; 2 bytes @ 0xA
   933  007A                     	ds	2
   934  007C                     hit_by@who:	
   935                           
   936                           ; 1 bytes @ 0xC
   937  007C                     	ds	1
   938  007D                     ??_main:	
   939                           
   940                           	psect	cstackBANK0
   941  0020                     __pcstackBANK0:	
   942                           ; 0 bytes @ 0xD
   943                           
   944  0020                     ___aldiv@counter:	
   945  0020                     control_transfer@data:	
   946                           ; 1 bytes @ 0x0
   947                           
   948                           
   949                           ; 32 bytes @ 0x0
   950  0020                     	ds	1
   951  0021                     ___aldiv@sign:	
   952                           
   953                           ; 1 bytes @ 0x1
   954  0021                     	ds	1
   955  0022                     ___aldiv@quotient:	
   956                           
   957                           ; 4 bytes @ 0x2
   958  0022                     	ds	4
   959  0026                     ?_tone:	
   960  0026                     tone@period:	
   961                           ; 0 bytes @ 0x6
   962                           
   963                           
   964                           ; 2 bytes @ 0x6
   965  0026                     	ds	2
   966  0028                     ??_handle_music:	
   967  0028                     ?_Buzz:	
   968                           ; 0 bytes @ 0x8
   969                           
   970  0028                     Buzz@freq:	
   971                           ; 0 bytes @ 0x8
   972                           
   973                           
   974                           ; 2 bytes @ 0x8
   975  0028                     	ds	2
   976  002A                     Buzz@dur_ms:	
   977                           
   978                           ; 2 bytes @ 0xA
   979  002A                     	ds	2
   980  002C                     ??_Buzz:	
   981                           
   982                           ; 0 bytes @ 0xC
   983  002C                     	ds	2
   984  002E                     Buzz@i:	
   985                           
   986                           ; 2 bytes @ 0xE
   987  002E                     	ds	2
   988  0030                     ??_hit_by:	
   989                           
   990                           ; 0 bytes @ 0x10
   991  0030                     	ds	16
   992  0040                     control_transfer@cmd:	
   993                           
   994                           ; 1 bytes @ 0x20
   995  0040                     	ds	1
   996  0041                     control_transfer@random_number:	
   997                           
   998                           ; 1 bytes @ 0x21
   999  0041                     	ds	1
  1000  0042                     control_transfer@id:	
  1001                           
  1002                           ; 1 bytes @ 0x22
  1003  0042                     	ds	1
  1004  0043                     control_transfer@dptr:	
  1005                           
  1006                           ; 1 bytes @ 0x23
  1007  0043                     	ds	1
  1008  0044                     control_transfer@i:	
  1009                           
  1010                           ; 1 bytes @ 0x24
  1011  0044                     	ds	1
  1012  0045                     control_transfer@page:	
  1013                           
  1014                           ; 2 bytes @ 0x25
  1015  0045                     	ds	2
  1016  0047                     control_transfer@x:	
  1017                           
  1018                           ; 1 bytes @ 0x27
  1019  0047                     	ds	1
  1020  0048                     ??_handle_serial:	
  1021                           
  1022                           ; 0 bytes @ 0x28
  1023  0048                     	ds	2
  1024  004A                     handle_serial@b:	
  1025                           
  1026                           ; 1 bytes @ 0x2A
  1027  004A                     	ds	1
  1028                           
  1029                           	psect	maintext
  1030  0706                     __pmaintext:	
  1031 ;;
  1032 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1033 ;;
  1034 ;; *************** function _main *****************
  1035 ;; Defined at:
  1036 ;;		line 49 in file "main.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;		None               void
  1043 ;; Registers used:
  1044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 17F/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1050 ;;      Params:         0       0       0       0
  1051 ;;      Locals:         0       0       0       0
  1052 ;;      Temps:          0       0       0       0
  1053 ;;      Totals:         0       0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels required when called:    7
  1056 ;; This function calls:
  1057 ;;		_LoadFromFlash
  1058 ;;		_Setup
  1059 ;;		_handle_serial
  1060 ;;		_handle_fire
  1061 ;;		_handle_music
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _main
  1069  0706                     _main:	
  1070                           
  1071                           ;main.c: 50: Setup();
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _main: [allreg]
  1075  0706  2638               	fcall	_Setup
  1076                           
  1077                           ;main.c: 51: LoadFromFlash();
  1078  0707  2489               	fcall	_LoadFromFlash
  1079  0708                     l1602:	
  1080                           ;main.c: 53: while(1)
  1081                           
  1082                           
  1083                           ;main.c: 54: {
  1084                           ;main.c: 55: handle_serial();
  1085  0708  24CB               	fcall	_handle_serial
  1086                           
  1087                           ;main.c: 56: handle_fire();
  1088  0709  238B               	fcall	_handle_fire
  1089                           
  1090                           ;main.c: 57: handle_music();
  1091  070A  25A3               	fcall	_handle_music
  1092  070B  2F08               	goto	l1602
  1093  070C                     __end_of_main:	
  1094                           
  1095                           	psect	text1
  1096  05A3                     __ptext1:	
  1097 ;; *************** function _handle_music *****************
  1098 ;; Defined at:
  1099 ;;		line 95 in file "user.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;		None               void
  1106 ;; Registers used:
  1107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1113 ;;      Params:         0       0       0       0
  1114 ;;      Locals:         0       0       0       0
  1115 ;;      Temps:          0       2       0       0
  1116 ;;      Totals:         0       2       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    3
  1120 ;; This function calls:
  1121 ;;		_stop_song
  1122 ;;		_tone
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           
  1129                           ;psect for function _handle_music
  1130  05A3                     _handle_music:	
  1131                           
  1132                           ;user.c: 96: if(!PIR1bits.TMR1IF) return;
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in _handle_music: [allreg]
  1136  05A3  0020               	movlb	0	; select bank0
  1137  05A4  1C11               	btfss	17,0	;volatile
  1138  05A5  0008               	return
  1139                           
  1140                           ;user.c: 97: tone(cur_song[cur_song_ptr]);
  1141  05A6  3556               	lslf	_cur_song_ptr,w
  1142  05A7  0754               	addwf	_cur_song,w
  1143  05A8  00A8               	movwf	??_handle_music
  1144  05A9  0828               	movf	??_handle_music,w
  1145  05AA  0086               	movwf	6
  1146  05AB  0187               	clrf	7
  1147  05AC  3F40               	moviw [0]fsr1
  1148  05AD  00A6               	movwf	?_tone
  1149  05AE  3F41               	moviw [1]fsr1
  1150  05AF  00A7               	movwf	?_tone+1
  1151  05B0  26B3               	fcall	_tone
  1152                           
  1153                           ;user.c: 98: TMR1 = -cur_song_duration;
  1154  05B1  0020               	movlb	0	; select bank0
  1155  05B2  094D               	comf	_cur_song_duration,w
  1156  05B3  00A8               	movwf	??_handle_music
  1157  05B4  094E               	comf	_cur_song_duration+1,w
  1158  05B5  00A9               	movwf	??_handle_music+1
  1159  05B6  0AA8               	incf	??_handle_music,f
  1160  05B7  1903               	skipnz
  1161  05B8  0AA9               	incf	??_handle_music+1,f
  1162  05B9  0828               	movf	??_handle_music,w
  1163  05BA  0096               	movwf	22	;volatile
  1164  05BB  0829               	movf	??_handle_music+1,w
  1165  05BC  0097               	movwf	23	;volatile
  1166                           
  1167                           ;user.c: 99: cur_song_ptr++;
  1168  05BD  3001               	movlw	1
  1169  05BE  00A8               	movwf	??_handle_music
  1170  05BF  0828               	movf	??_handle_music,w
  1171  05C0  07D6               	addwf	_cur_song_ptr,f
  1172                           
  1173                           ;user.c: 100: if(cur_song_ptr >= cur_song_length)
  1174  05C1  0855               	movf	_cur_song_length,w
  1175  05C2  0256               	subwf	_cur_song_ptr,w
  1176  05C3  1C03               	skipc
  1177  05C4  2DCB               	goto	l1690
  1178                           
  1179                           ;user.c: 101: {
  1180                           ;user.c: 102: if(cur_song_repeat)
  1181  05C5  0857               	movf	_cur_song_repeat,w
  1182  05C6  1903               	btfsc	3,2
  1183  05C7  2DCA               	goto	l1688
  1184                           
  1185                           ;user.c: 103: {
  1186                           ;user.c: 104: cur_song_ptr=0;
  1187  05C8  01D6               	clrf	_cur_song_ptr
  1188                           
  1189                           ;user.c: 105: }
  1190  05C9  2DCB               	goto	l1690
  1191  05CA                     l1688:	
  1192                           
  1193                           ;user.c: 106: else
  1194                           ;user.c: 107: {
  1195                           ;user.c: 108: stop_song();
  1196  05CA  270C               	fcall	_stop_song
  1197  05CB                     l1690:	
  1198                           
  1199                           ;user.c: 109: }
  1200                           ;user.c: 110: }
  1201                           ;user.c: 111: PIR1bits.TMR1IF=0;
  1202  05CB  0020               	movlb	0	; select bank0
  1203  05CC  1011               	bcf	17,0	;volatile
  1204  05CD  0008               	return
  1205  05CE                     __end_of_handle_music:	
  1206                           
  1207                           	psect	text2
  1208  038B                     __ptext2:	
  1209 ;; *************** function _handle_fire *****************
  1210 ;; Defined at:
  1211 ;;		line 228 in file "user.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  a               2   10[COMMON] unsigned int 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      unsigned char 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1225 ;;      Params:         0       0       0       0
  1226 ;;      Locals:         2       0       0       0
  1227 ;;      Temps:          2       0       0       0
  1228 ;;      Totals:         4       0       0       0
  1229 ;;Total ram usage:        4 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    3
  1232 ;; This function calls:
  1233 ;;		_ADC_read
  1234 ;;		_LED_on
  1235 ;;		_LED_off
  1236 ;;		_play_song
  1237 ;;		_stop_song
  1238 ;;		_Send_Byte
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function _handle_fire
  1246  038B                     _handle_fire:	
  1247                           
  1248                           ;user.c: 229: static uint16_t timer = 0;
  1249                           ;user.c: 230: static uint16_t counter = 0;
  1250                           ;user.c: 231: uint16_t a;
  1251                           ;user.c: 232: a=ADC_read();
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _handle_fire: [allreg]
  1255  038B  2679               	fcall	_ADC_read
  1256  038C  0872               	movf	?_ADC_read+1,w
  1257  038D  01FB               	clrf	handle_fire@a+1
  1258  038E  07FB               	addwf	handle_fire@a+1,f
  1259  038F  0871               	movf	?_ADC_read,w
  1260  0390  01FA               	clrf	handle_fire@a
  1261  0391  07FA               	addwf	handle_fire@a,f
  1262                           
  1263                           ;user.c: 233: if (a > config.fire_threshold && a < config.fire_cheating)
  1264  0392  087B               	movf	handle_fire@a+1,w
  1265  0393  0020               	movlb	0	; select bank0
  1266  0394  0266               	subwf	_config+11,w
  1267  0395  1D03               	skipz
  1268  0396  2B99               	goto	u1395
  1269  0397  087A               	movf	handle_fire@a,w
  1270  0398  0265               	subwf	_config+10,w
  1271  0399                     u1395:	
  1272  0399  1803               	skipnc
  1273  039A  2BE6               	goto	l1662
  1274  039B  0868               	movf	_config+13,w
  1275  039C  027B               	subwf	handle_fire@a+1,w
  1276  039D  1D03               	skipz
  1277  039E  2BA1               	goto	u1405
  1278  039F  0867               	movf	_config+12,w
  1279  03A0  027A               	subwf	handle_fire@a,w
  1280  03A1                     u1405:	
  1281  03A1  1803               	skipnc
  1282  03A2  2BE6               	goto	l1662
  1283                           
  1284                           ;user.c: 234: {
  1285                           ;user.c: 235: if(timer < config.fire_holdoff)
  1286  03A3  086A               	movf	_config+15,w
  1287  03A4  0252               	subwf	handle_fire@timer+1,w
  1288  03A5  1D03               	skipz
  1289  03A6  2BA9               	goto	u1415
  1290  03A7  0869               	movf	_config+14,w
  1291  03A8  0251               	subwf	handle_fire@timer,w
  1292  03A9                     u1415:	
  1293  03A9  1803               	skipnc
  1294  03AA  2BB0               	goto	l1646
  1295                           
  1296                           ;user.c: 236: {
  1297                           ;user.c: 237: timer ++;
  1298  03AB  3001               	movlw	1
  1299  03AC  07D1               	addwf	handle_fire@timer,f
  1300  03AD  3000               	movlw	0
  1301  03AE  3DD2               	addwfc	handle_fire@timer+1,f
  1302                           
  1303                           ;user.c: 238: }
  1304  03AF  0008               	return
  1305  03B0                     l1646:	
  1306                           
  1307                           ;user.c: 239: else
  1308                           ;user.c: 240: {
  1309                           ;user.c: 241: if(!config.power || counter <= config.power)
  1310  03B0  3002               	movlw	2
  1311  03B1  3E5B               	addlw	_config& (0+255)
  1312  03B2  0086               	movwf	6
  1313  03B3  0187               	clrf	7
  1314  03B4  0016               	moviw fsr1++
  1315  03B5  0401               	iorwf	1,w
  1316  03B6  1903               	skipnz
  1317  03B7  2BC0               	goto	l1650
  1318  03B8  0850               	movf	handle_fire@counter+1,w
  1319  03B9  025E               	subwf	_config+3,w
  1320  03BA  1D03               	skipz
  1321  03BB  2BBE               	goto	u1435
  1322  03BC  084F               	movf	handle_fire@counter,w
  1323  03BD  025D               	subwf	_config+2,w
  1324  03BE                     u1435:	
  1325  03BE  1C03               	skipc
  1326  03BF  2BE4               	goto	l1660
  1327  03C0                     l1650:	
  1328                           
  1329                           ;user.c: 242: {
  1330                           ;user.c: 243: if(!counter)
  1331  03C0  0850               	movf	handle_fire@counter+1,w
  1332  03C1  044F               	iorwf	handle_fire@counter,w
  1333  03C2  1D03               	skipz
  1334  03C3  2BDB               	goto	l1656
  1335                           
  1336                           ;user.c: 244: {
  1337                           ;user.c: 245: LED_on();
  1338  03C4  2718               	fcall	_LED_on
  1339                           
  1340                           ;user.c: 246: play_song(fire_song,16,3000,!(config.power));
  1341  03C5  3010               	movlw	16
  1342  03C6  00F8               	movwf	??_handle_fire
  1343  03C7  0878               	movf	??_handle_fire,w
  1344  03C8  00F1               	movwf	?_play_song
  1345  03C9  30B8               	movlw	184
  1346  03CA  00F2               	movwf	?_play_song+1
  1347  03CB  300B               	movlw	11
  1348  03CC  00F3               	movwf	?_play_song+2
  1349  03CD  3002               	movlw	2
  1350  03CE  3E5B               	addlw	_config& (0+255)
  1351  03CF  0086               	movwf	6
  1352  03D0  0187               	clrf	7
  1353  03D1  0016               	moviw fsr1++
  1354  03D2  0401               	iorwf	1,w
  1355  03D3  3000               	movlw	0
  1356  03D4  1903               	skipnz
  1357  03D5  3001               	movlw	1
  1358  03D6  00F9               	movwf	??_handle_fire+1
  1359  03D7  0879               	movf	??_handle_fire+1,w
  1360  03D8  00F4               	movwf	?_play_song+3
  1361  03D9  30C0               	movlw	_fire_song& (0+255)
  1362  03DA  25F3               	fcall	_play_song
  1363  03DB                     l1656:	
  1364                           
  1365                           ;user.c: 247: }
  1366                           ;user.c: 248: Send_Byte(config.id);
  1367  03DB  0020               	movlb	0	; select bank0
  1368  03DC  085B               	movf	_config,w
  1369  03DD  26D0               	fcall	_Send_Byte
  1370                           
  1371                           ;user.c: 249: counter++;
  1372  03DE  3001               	movlw	1
  1373  03DF  0020               	movlb	0	; select bank0
  1374  03E0  07CF               	addwf	handle_fire@counter,f
  1375  03E1  3000               	movlw	0
  1376  03E2  3DD0               	addwfc	handle_fire@counter+1,f
  1377                           
  1378                           ;user.c: 250: }
  1379  03E3  0008               	return
  1380  03E4                     l1660:	
  1381                           
  1382                           ;user.c: 251: else
  1383                           ;user.c: 252: {
  1384                           ;user.c: 253: LED_off();
  1385  03E4  2715               	fcall	_LED_off
  1386                           
  1387                           ;user.c: 254: }
  1388                           ;user.c: 255: }
  1389                           ;user.c: 256: }
  1390  03E5  0008               	return
  1391  03E6                     l1662:	
  1392                           
  1393                           ;user.c: 257: else
  1394                           ;user.c: 258: {
  1395                           ;user.c: 259: LED_off();
  1396  03E6  2715               	fcall	_LED_off
  1397                           
  1398                           ;user.c: 260: stop_song();
  1399  03E7  270C               	fcall	_stop_song
  1400                           
  1401                           ;user.c: 261: timer = 0;
  1402  03E8  0020               	movlb	0	; select bank0
  1403  03E9  01D1               	clrf	handle_fire@timer
  1404  03EA  01D2               	clrf	handle_fire@timer+1
  1405                           
  1406                           ;user.c: 262: counter = 0;
  1407  03EB  01CF               	clrf	handle_fire@counter
  1408  03EC  01D0               	clrf	handle_fire@counter+1
  1409                           
  1410                           ;user.c: 263: return 0;
  1411                           ;	Return value of _handle_fire is never used
  1412  03ED  0008               	return
  1413  03EE                     __end_of_handle_fire:	
  1414                           ;user.c: 264: }
  1415                           ;user.c: 265: return 1;
  1416                           ;	Return value of _handle_fire is never used
  1417                           
  1418                           
  1419                           	psect	text3
  1420  070C                     __ptext3:	
  1421 ;; *************** function _stop_song *****************
  1422 ;; Defined at:
  1423 ;;		line 88 in file "user.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;		None               void
  1430 ;; Registers used:
  1431 ;;		status,2, status,0, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1437 ;;      Params:         0       0       0       0
  1438 ;;      Locals:         0       0       0       0
  1439 ;;      Temps:          0       0       0       0
  1440 ;;      Totals:         0       0       0       0
  1441 ;;Total ram usage:        0 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    2
  1444 ;; This function calls:
  1445 ;;		_tone_off
  1446 ;; This function is called by:
  1447 ;;		_handle_music
  1448 ;;		_handle_fire
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           
  1453                           ;psect for function _stop_song
  1454  070C                     _stop_song:	
  1455                           
  1456                           ;user.c: 89: tone_off();
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _stop_song: [status,2+status,0+pclath+cstack]
  1460  070C  271B               	fcall	_tone_off
  1461                           
  1462                           ;user.c: 90: T1CONbits.TMR1ON=0;
  1463  070D  0020               	movlb	0	; select bank0
  1464  070E  1018               	bcf	24,0	;volatile
  1465                           
  1466                           ;user.c: 91: PIR1bits.TMR1IF=0;
  1467  070F  1011               	bcf	17,0	;volatile
  1468  0710  0008               	return
  1469  0711                     __end_of_stop_song:	
  1470                           
  1471                           	psect	text4
  1472  05F3                     __ptext4:	
  1473 ;; *************** function _play_song *****************
  1474 ;; Defined at:
  1475 ;;		line 75 in file "user.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  song            1    wreg     PTR unsigned int 
  1478 ;;		 -> fire_song(32), 
  1479 ;;  length          1    1[COMMON] unsigned char 
  1480 ;;  note_duratio    2    2[COMMON] unsigned int 
  1481 ;;  repeat          1    4[COMMON] unsigned char 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  song            1    7[COMMON] PTR unsigned int 
  1484 ;;		 -> fire_song(32), 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;		None               void
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1494 ;;      Params:         4       0       0       0
  1495 ;;      Locals:         1       0       0       0
  1496 ;;      Temps:          2       0       0       0
  1497 ;;      Totals:         7       0       0       0
  1498 ;;Total ram usage:        7 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    1
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_handle_fire
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _play_song
  1510  05F3                     _play_song:	
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _play_song: [wreg+status,2+status,0]
  1514                           ;play_song@song stored from wreg
  1515  05F3  00F7               	movwf	play_song@song
  1516                           
  1517                           ;user.c: 76: cur_song=song;
  1518  05F4  0877               	movf	play_song@song,w
  1519  05F5  00F5               	movwf	??_play_song
  1520  05F6  0875               	movf	??_play_song,w
  1521  05F7  0020               	movlb	0	; select bank0
  1522  05F8  00D4               	movwf	_cur_song
  1523                           
  1524                           ;user.c: 77: cur_song_length=length;
  1525  05F9  0871               	movf	play_song@length,w
  1526  05FA  00F5               	movwf	??_play_song
  1527  05FB  0875               	movf	??_play_song,w
  1528  05FC  00D5               	movwf	_cur_song_length
  1529                           
  1530                           ;user.c: 78: cur_song_ptr=0;
  1531  05FD  01D6               	clrf	_cur_song_ptr
  1532                           
  1533                           ;user.c: 79: cur_song_repeat=repeat;
  1534  05FE  0874               	movf	play_song@repeat,w
  1535  05FF  00F5               	movwf	??_play_song
  1536  0600  0875               	movf	??_play_song,w
  1537  0601  00D7               	movwf	_cur_song_repeat
  1538                           
  1539                           ;user.c: 80: cur_song_duration=note_duration;
  1540  0602  0873               	movf	play_song@note_duration+1,w
  1541  0603  01CE               	clrf	_cur_song_duration+1
  1542  0604  07CE               	addwf	_cur_song_duration+1,f
  1543  0605  0872               	movf	play_song@note_duration,w
  1544  0606  01CD               	clrf	_cur_song_duration
  1545  0607  07CD               	addwf	_cur_song_duration,f
  1546                           
  1547                           ;user.c: 82: TMR1 = -cur_song_duration;
  1548  0608  094D               	comf	_cur_song_duration,w
  1549  0609  00F5               	movwf	??_play_song
  1550  060A  094E               	comf	_cur_song_duration+1,w
  1551  060B  00F6               	movwf	??_play_song+1
  1552  060C  0AF5               	incf	??_play_song,f
  1553  060D  1903               	skipnz
  1554  060E  0AF6               	incf	??_play_song+1,f
  1555  060F  0875               	movf	??_play_song,w
  1556  0610  0096               	movwf	22	;volatile
  1557  0611  0876               	movf	??_play_song+1,w
  1558  0612  0097               	movwf	23	;volatile
  1559                           
  1560                           ;user.c: 83: PIR1bits.TMR1IF = 1;
  1561  0613  1411               	bsf	17,0	;volatile
  1562                           
  1563                           ;user.c: 84: T1CONbits.TMR1ON = 1;
  1564  0614  1418               	bsf	24,0	;volatile
  1565  0615  0008               	return
  1566  0616                     __end_of_play_song:	
  1567                           
  1568                           	psect	text5
  1569  0715                     __ptext5:	
  1570 ;; *************** function _LED_off *****************
  1571 ;; Defined at:
  1572 ;;		line 70 in file "user.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		None
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1586 ;;      Params:         0       0       0       0
  1587 ;;      Locals:         0       0       0       0
  1588 ;;      Temps:          0       0       0       0
  1589 ;;      Totals:         0       0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    1
  1593 ;; This function calls:
  1594 ;;		Nothing
  1595 ;; This function is called by:
  1596 ;;		_handle_fire
  1597 ;;		_Get_hit
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _LED_off
  1603  0715                     _LED_off:	
  1604                           
  1605                           ;user.c: 71: PORTAbits.RA5 = 1;
  1606                           
  1607                           ;incstack = 0
  1608                           ; Regs used in _LED_off: []
  1609  0715  0020               	movlb	0	; select bank0
  1610  0716  168C               	bsf	12,5	;volatile
  1611  0717  0008               	return
  1612  0718                     __end_of_LED_off:	
  1613                           
  1614                           	psect	text6
  1615  0718                     __ptext6:	
  1616 ;; *************** function _LED_on *****************
  1617 ;; Defined at:
  1618 ;;		line 65 in file "user.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;		None               void
  1625 ;; Registers used:
  1626 ;;		None
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1632 ;;      Params:         0       0       0       0
  1633 ;;      Locals:         0       0       0       0
  1634 ;;      Temps:          0       0       0       0
  1635 ;;      Totals:         0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_handle_fire
  1643 ;;		_Get_hit
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _LED_on
  1649  0718                     _LED_on:	
  1650                           
  1651                           ;user.c: 66: PORTAbits.RA5 = 0;
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _LED_on: []
  1655  0718  0020               	movlb	0	; select bank0
  1656  0719  128C               	bcf	12,5	;volatile
  1657  071A  0008               	return
  1658  071B                     __end_of_LED_on:	
  1659                           
  1660                           	psect	text7
  1661  0679                     __ptext7:	
  1662 ;; *************** function _ADC_read *****************
  1663 ;; Defined at:
  1664 ;;		line 55 in file "user.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  2    1[COMMON] unsigned int 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1678 ;;      Params:         2       0       0       0
  1679 ;;      Locals:         0       0       0       0
  1680 ;;      Temps:          2       0       0       0
  1681 ;;      Totals:         4       0       0       0
  1682 ;;Total ram usage:        4 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_handle_fire
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _ADC_read
  1694  0679                     _ADC_read:	
  1695                           
  1696                           ;user.c: 56: ADCON0bits.CHS = 3;
  1697                           
  1698                           ;incstack = 0
  1699                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
  1700  0679  0021               	movlb	1	; select bank1
  1701  067A  081D               	movf	29,w	;volatile
  1702  067B  3983               	andlw	-125
  1703  067C  380C               	iorlw	12
  1704  067D  009D               	movwf	29	;volatile
  1705                           
  1706                           ;user.c: 57: ADCON0bits.ADON = 1;
  1707  067E  141D               	bsf	29,0	;volatile
  1708                           
  1709                           ;user.c: 58: _delay((unsigned long)((6)*(16000000/4000000.0)));
  1710  067F  3007               	movlw	7
  1711  0680  00F3               	movwf	??_ADC_read
  1712  0681                     u2607:	
  1713  0681  0BF3               	decfsz	??_ADC_read,f
  1714  0682  2E81               	goto	u2607
  1715  0683  2E84               	nop2	;nop
  1716                           
  1717                           ;user.c: 59: ADCON0bits.GO = 1;
  1718  0684  0021               	movlb	1	; select bank1
  1719  0685  149D               	bsf	29,1	;volatile
  1720  0686                     l134:	
  1721                           ;user.c: 60: while(ADCON0bits.GO){};
  1722                           
  1723  0686  189D               	btfsc	29,1	;volatile
  1724  0687  2E86               	goto	l134
  1725                           
  1726                           ;user.c: 61: return ADRES >> 6;
  1727  0688  081C               	movf	28,w	;volatile
  1728  0689  00F4               	movwf	??_ADC_read+1
  1729  068A  081B               	movf	27,w	;volatile
  1730  068B  00F3               	movwf	??_ADC_read
  1731  068C  3006               	movlw	6
  1732  068D                     u1625:	
  1733  068D  36F4               	lsrf	??_ADC_read+1,f
  1734  068E  0CF3               	rrf	??_ADC_read,f
  1735  068F  0B89               	decfsz	9,f
  1736  0690  2E8D               	goto	u1625
  1737  0691  0873               	movf	??_ADC_read,w
  1738  0692  00F1               	movwf	?_ADC_read
  1739  0693  0874               	movf	??_ADC_read+1,w
  1740  0694  00F2               	movwf	?_ADC_read+1
  1741  0695  0008               	return
  1742  0696                     __end_of_ADC_read:	
  1743                           
  1744                           	psect	text8
  1745  04CB                     __ptext8:	
  1746 ;; *************** function _handle_serial *****************
  1747 ;; Defined at:
  1748 ;;		line 127 in file "protocol.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  b               1   42[BANK0 ] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      unsigned char 
  1755 ;; Registers used:
  1756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1762 ;;      Params:         0       0       0       0
  1763 ;;      Locals:         0       1       0       0
  1764 ;;      Temps:          0       2       0       0
  1765 ;;      Totals:         0       3       0       0
  1766 ;;Total ram usage:        3 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    6
  1769 ;; This function calls:
  1770 ;;		_hit_by
  1771 ;;		_control_transfer
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _handle_serial
  1779  04CB                     _handle_serial:	
  1780                           
  1781                           ;protocol.c: 128: static uint8_t rx_id=0;
  1782                           ;protocol.c: 129: static uint8_t rx_counter=0;
  1783                           ;protocol.c: 130: uint8_t b;
  1784                           ;protocol.c: 132: if(!(PIR1bits.RCIF)) return 0;
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in _handle_serial: [allreg]
  1788  04CB  0020               	movlb	0	; select bank0
  1789  04CC  1E91               	btfss	17,5	;volatile
  1790  04CD  0008               	return
  1791                           
  1792                           ;protocol.c: 133: b=(RCREG);
  1793                           
  1794                           ;	Return value of _handle_serial is never used
  1795  04CE  0023               	movlb	3	; select bank3
  1796  04CF  0819               	movf	25,w	;volatile
  1797  04D0  0020               	movlb	0	; select bank0
  1798  04D1  00C8               	movwf	??_handle_serial
  1799  04D2  0848               	movf	??_handle_serial,w
  1800  04D3  00CA               	movwf	handle_serial@b
  1801                           
  1802                           ;protocol.c: 134: if(b == 0x10) {
  1803  04D4  084A               	movf	handle_serial@b,w
  1804  04D5  3A10               	xorlw	16
  1805  04D6  1D03               	skipz
  1806  04D7  2CDA               	goto	l1616
  1807                           
  1808                           ;protocol.c: 135: control_transfer();
  1809  04D8  202E               	fcall	_control_transfer
  1810                           
  1811                           ;protocol.c: 136: }
  1812  04D9  0008               	return
  1813  04DA                     l1616:	
  1814                           
  1815                           ;protocol.c: 137: else if((b > 0x80) && (b != config.id)) {
  1816  04DA  3081               	movlw	129
  1817  04DB  0020               	movlb	0	; select bank0
  1818  04DC  024A               	subwf	handle_serial@b,w
  1819  04DD  1C03               	skipc
  1820  04DE  0008               	return
  1821  04DF  084A               	movf	handle_serial@b,w
  1822  04E0  00C8               	movwf	??_handle_serial
  1823  04E1  01C9               	clrf	??_handle_serial+1
  1824  04E2  085C               	movf	_config+1,w
  1825  04E3  0649               	xorwf	??_handle_serial+1,w
  1826  04E4  1D03               	skipz
  1827  04E5  2CE8               	goto	u1365
  1828  04E6  085B               	movf	_config,w
  1829  04E7  0648               	xorwf	??_handle_serial,w
  1830  04E8                     u1365:	
  1831  04E8  1903               	skipnz
  1832  04E9  0008               	return
  1833                           
  1834                           ;protocol.c: 138: if(b != rx_id) rx_counter=0;
  1835  04EA  084A               	movf	handle_serial@b,w
  1836  04EB  065A               	xorwf	handle_serial@rx_id,w
  1837  04EC  1D03               	btfss	3,2
  1838  04ED  01D9               	clrf	handle_serial@rx_counter
  1839                           
  1840                           ;protocol.c: 139: rx_id = b;
  1841  04EE  084A               	movf	handle_serial@b,w
  1842  04EF  00C8               	movwf	??_handle_serial
  1843  04F0  0848               	movf	??_handle_serial,w
  1844  04F1  00DA               	movwf	handle_serial@rx_id
  1845                           
  1846                           ;protocol.c: 140: rx_counter++;
  1847  04F2  3001               	movlw	1
  1848  04F3  00C8               	movwf	??_handle_serial
  1849  04F4  0848               	movf	??_handle_serial,w
  1850  04F5  07D9               	addwf	handle_serial@rx_counter,f
  1851                           
  1852                           ;protocol.c: 141: if(rx_counter > config.shield) {
  1853  04F6  0859               	movf	handle_serial@rx_counter,w
  1854  04F7  00C8               	movwf	??_handle_serial
  1855  04F8  01C9               	clrf	??_handle_serial+1
  1856  04F9  0849               	movf	??_handle_serial+1,w
  1857  04FA  0262               	subwf	_config+7,w
  1858  04FB  1D03               	skipz
  1859  04FC  2CFF               	goto	u1385
  1860  04FD  0848               	movf	??_handle_serial,w
  1861  04FE  0261               	subwf	_config+6,w
  1862  04FF                     u1385:	
  1863  04FF  1803               	skipnc
  1864  0500  0008               	return
  1865                           
  1866                           ;protocol.c: 142: hit_by(b);
  1867  0501  084A               	movf	handle_serial@b,w
  1868  0502  2572               	fcall	_hit_by
  1869                           
  1870                           ;protocol.c: 143: rx_id = 0;
  1871  0503  0020               	movlb	0	; select bank0
  1872  0504  01DA               	clrf	handle_serial@rx_id
  1873  0505  0008               	return
  1874  0506                     __end_of_handle_serial:	
  1875                           ;protocol.c: 144: }
  1876                           ;protocol.c: 145: }
  1877                           ;protocol.c: 146: return 1;
  1878                           ;	Return value of _handle_serial is never used
  1879                           
  1880                           
  1881                           	psect	text9
  1882  002E                     __ptext9:	
  1883 ;; *************** function _control_transfer *****************
  1884 ;; Defined at:
  1885 ;;		line 44 in file "protocol.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  data           32    0[BANK0 ] unsigned int [16]
  1890 ;;  page            2   37[BANK0 ] unsigned int 
  1891 ;;  x               1   39[BANK0 ] unsigned char 
  1892 ;;  i               1   36[BANK0 ] unsigned char 
  1893 ;;  dptr            1   35[BANK0 ] PTR unsigned char 
  1894 ;;		 -> control_transfer@data(32), 
  1895 ;;  id              1   34[BANK0 ] unsigned char 
  1896 ;;  random_numbe    1   33[BANK0 ] unsigned char 
  1897 ;;  cmd             1   32[BANK0 ] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;		None               void
  1900 ;; Registers used:
  1901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1907 ;;      Params:         0       0       0       0
  1908 ;;      Locals:         0      40       0       0
  1909 ;;      Temps:          2       0       0       0
  1910 ;;      Totals:         2      40       0       0
  1911 ;;Total ram usage:       42 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		_Load
  1916 ;;		_Save
  1917 ;;		_GET_CHAR_HELPER
  1918 ;;		_SEND_DATA_BYTE
  1919 ;;		_SEND_SOF
  1920 ;;		_SEND_EOF
  1921 ;; This function is called by:
  1922 ;;		_handle_serial
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           
  1927                           ;psect for function _control_transfer
  1928  002E                     _control_transfer:	
  1929                           
  1930                           ;protocol.c: 45: uint8_t i;
  1931                           ;protocol.c: 46: uint8_t cmd;
  1932                           ;protocol.c: 47: uint8_t random_number,id;
  1933                           ;protocol.c: 49: uint16_t page;
  1934                           ;protocol.c: 50: uint16_t data[16];
  1935                           ;protocol.c: 51: uint8_t* dptr;
  1936                           ;protocol.c: 52: uint8_t x;
  1937                           ;protocol.c: 54: _checksum = 0; if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(
      +                          &(_y))) goto err; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _c
      +                          hecksum += _x; if(_x != config.id) goto err;
  1938                           
  1939                           ;incstack = 0
  1940                           ; Regs used in _control_transfer: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1941  002E  0020               	movlb	0	; select bank0
  1942  002F  01D3               	clrf	__checksum
  1943  0030  306B               	movlw	__x& (0+255)
  1944  0031  2696               	fcall	_GET_CHAR_HELPER
  1945  0032  3A00               	xorlw	0
  1946  0033  1D03               	btfss	3,2
  1947  0034  0008               	return
  1948  0035  306C               	movlw	__y& (0+255)
  1949  0036  2696               	fcall	_GET_CHAR_HELPER
  1950  0037  3A00               	xorlw	0
  1951  0038  1D03               	btfss	3,2
  1952  0039  0008               	return
  1953  003A  0020               	movlb	0	; select bank0
  1954  003B  086B               	movf	__x,w
  1955  003C  39F0               	andlw	240
  1956  003D  1D03               	btfss	3,2
  1957  003E  0008               	return
  1958  003F  086C               	movf	__y,w
  1959  0040  39F0               	andlw	240
  1960  0041  1D03               	btfss	3,2
  1961  0042  0008               	return
  1962  0043  086C               	movf	__y,w
  1963  0044  00F7               	movwf	??_control_transfer
  1964  0045  3003               	movlw	3
  1965  0046                     u1715:	
  1966  0046  35F7               	lslf	??_control_transfer,f
  1967  0047  3EFF               	addlw	-1
  1968  0048  1D03               	skipz
  1969  0049  2846               	goto	u1715
  1970  004A  3577               	lslf	??_control_transfer,w
  1971  004B  046B               	iorwf	__x,w
  1972  004C  00F8               	movwf	??_control_transfer+1
  1973  004D  0878               	movf	??_control_transfer+1,w
  1974  004E  00EB               	movwf	__x
  1975  004F  086B               	movf	__x,w
  1976  0050  00F7               	movwf	??_control_transfer
  1977  0051  0877               	movf	??_control_transfer,w
  1978  0052  07D3               	addwf	__checksum,f
  1979  0053  086B               	movf	__x,w
  1980  0054  00F7               	movwf	??_control_transfer
  1981  0055  01F8               	clrf	??_control_transfer+1
  1982  0056  085C               	movf	_config+1,w
  1983  0057  0678               	xorwf	??_control_transfer+1,w
  1984  0058  1D03               	skipz
  1985  0059  285C               	goto	u1725
  1986  005A  085B               	movf	_config,w
  1987  005B  0677               	xorwf	??_control_transfer,w
  1988  005C                     u1725:	
  1989  005C  1D03               	btfss	3,2
  1990  005D  0008               	return
  1991                           
  1992                           ;protocol.c: 55: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; cmd=((_y << 4) | _x); _checksum += cmd;
  1993  005E  306B               	movlw	__x& (0+255)
  1994  005F  2696               	fcall	_GET_CHAR_HELPER
  1995  0060  3A00               	xorlw	0
  1996  0061  1D03               	btfss	3,2
  1997  0062  0008               	return
  1998  0063  306C               	movlw	__y& (0+255)
  1999  0064  2696               	fcall	_GET_CHAR_HELPER
  2000  0065  3A00               	xorlw	0
  2001  0066  1D03               	btfss	3,2
  2002  0067  0008               	return
  2003  0068  0020               	movlb	0	; select bank0
  2004  0069  086B               	movf	__x,w
  2005  006A  39F0               	andlw	240
  2006  006B  1D03               	btfss	3,2
  2007  006C  0008               	return
  2008  006D  086C               	movf	__y,w
  2009  006E  39F0               	andlw	240
  2010  006F  1D03               	btfss	3,2
  2011  0070  0008               	return
  2012  0071  086C               	movf	__y,w
  2013  0072  00F7               	movwf	??_control_transfer
  2014  0073  3003               	movlw	3
  2015  0074                     u1775:	
  2016  0074  35F7               	lslf	??_control_transfer,f
  2017  0075  3EFF               	addlw	-1
  2018  0076  1D03               	skipz
  2019  0077  2874               	goto	u1775
  2020  0078  3577               	lslf	??_control_transfer,w
  2021  0079  046B               	iorwf	__x,w
  2022  007A  00F8               	movwf	??_control_transfer+1
  2023  007B  0878               	movf	??_control_transfer+1,w
  2024  007C  00C0               	movwf	control_transfer@cmd
  2025  007D  0840               	movf	control_transfer@cmd,w
  2026  007E  00F7               	movwf	??_control_transfer
  2027  007F  0877               	movf	??_control_transfer,w
  2028  0080  07D3               	addwf	__checksum,f
  2029                           
  2030                           ;protocol.c: 57: switch(cmd)
  2031  0081  2AF8               	goto	l2246
  2032  0082                     l1970:	
  2033                           ;protocol.c: 58: {
  2034                           ;protocol.c: 59: case 0x01:
  2035                           
  2036                           
  2037                           ;protocol.c: 60: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2038  0082  306B               	movlw	__x& (0+255)
  2039  0083  2696               	fcall	_GET_CHAR_HELPER
  2040  0084  3A00               	xorlw	0
  2041  0085  1D03               	btfss	3,2
  2042  0086  0008               	return
  2043  0087  306C               	movlw	__y& (0+255)
  2044  0088  2696               	fcall	_GET_CHAR_HELPER
  2045  0089  3A00               	xorlw	0
  2046  008A  1D03               	btfss	3,2
  2047  008B  0008               	return
  2048  008C  0020               	movlb	0	; select bank0
  2049  008D  086B               	movf	__x,w
  2050  008E  39F0               	andlw	240
  2051  008F  1D03               	btfss	3,2
  2052  0090  0008               	return
  2053  0091  086C               	movf	__y,w
  2054  0092  39F0               	andlw	240
  2055  0093  1D03               	btfss	3,2
  2056  0094  0008               	return
  2057  0095  086C               	movf	__y,w
  2058  0096  00F7               	movwf	??_control_transfer
  2059  0097  3003               	movlw	3
  2060  0098                     u1825:	
  2061  0098  35F7               	lslf	??_control_transfer,f
  2062  0099  3EFF               	addlw	-1
  2063  009A  1D03               	skipz
  2064  009B  2898               	goto	u1825
  2065  009C  3577               	lslf	??_control_transfer,w
  2066  009D  046B               	iorwf	__x,w
  2067  009E  00F8               	movwf	??_control_transfer+1
  2068  009F  0878               	movf	??_control_transfer+1,w
  2069  00A0  00EB               	movwf	__x
  2070  00A1  086B               	movf	__x,w
  2071  00A2  00F7               	movwf	??_control_transfer
  2072  00A3  0877               	movf	??_control_transfer,w
  2073  00A4  07D3               	addwf	__checksum,f
  2074  00A5  0853               	movf	__checksum,w
  2075  00A6  1D03               	skipz
  2076  00A7  0008               	return
  2077  00A8  306B               	movlw	__x& (0+255)
  2078  00A9  2696               	fcall	_GET_CHAR_HELPER
  2079  00AA  3A00               	xorlw	0
  2080  00AB  1D03               	btfss	3,2
  2081  00AC  0008               	return
  2082  00AD  0020               	movlb	0	; select bank0
  2083  00AE  086B               	movf	__x,w
  2084  00AF  3A11               	xorlw	17
  2085  00B0  1D03               	btfss	3,2
  2086  00B1  0008               	return
  2087                           
  2088                           ;protocol.c: 61: SEND_SOF();
  2089  00B2  26DE               	fcall	_SEND_SOF
  2090                           
  2091                           ;protocol.c: 62: SEND_DATA_BYTE(0x02);
  2092  00B3  3002               	movlw	2
  2093  00B4  2616               	fcall	_SEND_DATA_BYTE
  2094                           
  2095                           ;protocol.c: 63: SEND_DATA_BYTE(my_random_number);
  2096  00B5  0020               	movlb	0	; select bank0
  2097  00B6  0858               	movf	_my_random_number,w
  2098  00B7  2616               	fcall	_SEND_DATA_BYTE
  2099                           
  2100                           ;protocol.c: 64: SEND_EOF();
  2101  00B8  26E9               	fcall	_SEND_EOF
  2102                           
  2103                           ;protocol.c: 65: break;
  2104  00B9  0008               	return
  2105  00BA                     l1998:	
  2106                           ;protocol.c: 66: case 0x03:
  2107                           
  2108                           
  2109                           ;protocol.c: 67: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; random_number=((_y << 4) | _x); _check
      +                          sum += random_number;
  2110  00BA  306B               	movlw	__x& (0+255)
  2111  00BB  2696               	fcall	_GET_CHAR_HELPER
  2112  00BC  3A00               	xorlw	0
  2113  00BD  1D03               	btfss	3,2
  2114  00BE  0008               	return
  2115  00BF  306C               	movlw	__y& (0+255)
  2116  00C0  2696               	fcall	_GET_CHAR_HELPER
  2117  00C1  3A00               	xorlw	0
  2118  00C2  1D03               	btfss	3,2
  2119  00C3  0008               	return
  2120  00C4  0020               	movlb	0	; select bank0
  2121  00C5  086B               	movf	__x,w
  2122  00C6  39F0               	andlw	240
  2123  00C7  1D03               	btfss	3,2
  2124  00C8  0008               	return
  2125  00C9  086C               	movf	__y,w
  2126  00CA  39F0               	andlw	240
  2127  00CB  1D03               	btfss	3,2
  2128  00CC  0008               	return
  2129  00CD  086C               	movf	__y,w
  2130  00CE  00F7               	movwf	??_control_transfer
  2131  00CF  3003               	movlw	3
  2132  00D0                     u1905:	
  2133  00D0  35F7               	lslf	??_control_transfer,f
  2134  00D1  3EFF               	addlw	-1
  2135  00D2  1D03               	skipz
  2136  00D3  28D0               	goto	u1905
  2137  00D4  3577               	lslf	??_control_transfer,w
  2138  00D5  046B               	iorwf	__x,w
  2139  00D6  00F8               	movwf	??_control_transfer+1
  2140  00D7  0878               	movf	??_control_transfer+1,w
  2141  00D8  00C1               	movwf	control_transfer@random_number
  2142  00D9  0841               	movf	control_transfer@random_number,w
  2143  00DA  00F7               	movwf	??_control_transfer
  2144  00DB  0877               	movf	??_control_transfer,w
  2145  00DC  07D3               	addwf	__checksum,f
  2146                           
  2147                           ;protocol.c: 68: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; id=((_y << 4) | _x); _checksum += id;
  2148  00DD  306B               	movlw	__x& (0+255)
  2149  00DE  2696               	fcall	_GET_CHAR_HELPER
  2150  00DF  3A00               	xorlw	0
  2151  00E0  1D03               	btfss	3,2
  2152  00E1  0008               	return
  2153  00E2  306C               	movlw	__y& (0+255)
  2154  00E3  2696               	fcall	_GET_CHAR_HELPER
  2155  00E4  3A00               	xorlw	0
  2156  00E5  1D03               	btfss	3,2
  2157  00E6  0008               	return
  2158  00E7  0020               	movlb	0	; select bank0
  2159  00E8  086B               	movf	__x,w
  2160  00E9  39F0               	andlw	240
  2161  00EA  1D03               	btfss	3,2
  2162  00EB  0008               	return
  2163  00EC  086C               	movf	__y,w
  2164  00ED  39F0               	andlw	240
  2165  00EE  1D03               	btfss	3,2
  2166  00EF  0008               	return
  2167  00F0  086C               	movf	__y,w
  2168  00F1  00F7               	movwf	??_control_transfer
  2169  00F2  3003               	movlw	3
  2170  00F3                     u1955:	
  2171  00F3  35F7               	lslf	??_control_transfer,f
  2172  00F4  3EFF               	addlw	-1
  2173  00F5  1D03               	skipz
  2174  00F6  28F3               	goto	u1955
  2175  00F7  3577               	lslf	??_control_transfer,w
  2176  00F8  046B               	iorwf	__x,w
  2177  00F9  00F8               	movwf	??_control_transfer+1
  2178  00FA  0878               	movf	??_control_transfer+1,w
  2179  00FB  00C2               	movwf	control_transfer@id
  2180  00FC  0842               	movf	control_transfer@id,w
  2181  00FD  00F7               	movwf	??_control_transfer
  2182  00FE  0877               	movf	??_control_transfer,w
  2183  00FF  07D3               	addwf	__checksum,f
  2184                           
  2185                           ;protocol.c: 69: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2186  0100  306B               	movlw	__x& (0+255)
  2187  0101  2696               	fcall	_GET_CHAR_HELPER
  2188  0102  3A00               	xorlw	0
  2189  0103  1D03               	btfss	3,2
  2190  0104  0008               	return
  2191  0105  306C               	movlw	__y& (0+255)
  2192  0106  2696               	fcall	_GET_CHAR_HELPER
  2193  0107  3A00               	xorlw	0
  2194  0108  1D03               	btfss	3,2
  2195  0109  0008               	return
  2196  010A  0020               	movlb	0	; select bank0
  2197  010B  086B               	movf	__x,w
  2198  010C  39F0               	andlw	240
  2199  010D  1D03               	btfss	3,2
  2200  010E  0008               	return
  2201  010F  086C               	movf	__y,w
  2202  0110  39F0               	andlw	240
  2203  0111  1D03               	btfss	3,2
  2204  0112  0008               	return
  2205  0113  086C               	movf	__y,w
  2206  0114  00F7               	movwf	??_control_transfer
  2207  0115  3003               	movlw	3
  2208  0116                     u2005:	
  2209  0116  35F7               	lslf	??_control_transfer,f
  2210  0117  3EFF               	addlw	-1
  2211  0118  1D03               	skipz
  2212  0119  2916               	goto	u2005
  2213  011A  3577               	lslf	??_control_transfer,w
  2214  011B  046B               	iorwf	__x,w
  2215  011C  00F8               	movwf	??_control_transfer+1
  2216  011D  0878               	movf	??_control_transfer+1,w
  2217  011E  00EB               	movwf	__x
  2218  011F  086B               	movf	__x,w
  2219  0120  00F7               	movwf	??_control_transfer
  2220  0121  0877               	movf	??_control_transfer,w
  2221  0122  07D3               	addwf	__checksum,f
  2222  0123  0853               	movf	__checksum,w
  2223  0124  1D03               	skipz
  2224  0125  0008               	return
  2225  0126  306B               	movlw	__x& (0+255)
  2226  0127  2696               	fcall	_GET_CHAR_HELPER
  2227  0128  3A00               	xorlw	0
  2228  0129  1D03               	btfss	3,2
  2229  012A  0008               	return
  2230  012B  0020               	movlb	0	; select bank0
  2231  012C  086B               	movf	__x,w
  2232  012D  3A11               	xorlw	17
  2233  012E  1D03               	btfss	3,2
  2234  012F  0008               	return
  2235                           
  2236                           ;protocol.c: 70: if(random_number != my_random_number) goto err;
  2237  0130  0841               	movf	control_transfer@random_number,w
  2238  0131  0658               	xorwf	_my_random_number,w
  2239  0132  1D03               	btfss	3,2
  2240  0133  0008               	return
  2241                           
  2242                           ;protocol.c: 71: SEND_SOF();
  2243  0134  26DE               	fcall	_SEND_SOF
  2244                           
  2245                           ;protocol.c: 72: SEND_DATA_BYTE(0x00);
  2246  0135  3000               	movlw	0
  2247  0136  2616               	fcall	_SEND_DATA_BYTE
  2248                           
  2249                           ;protocol.c: 73: SEND_EOF();
  2250  0137  26E9               	fcall	_SEND_EOF
  2251                           
  2252                           ;protocol.c: 74: config.id=id;
  2253  0138  0020               	movlb	0	; select bank0
  2254  0139  0842               	movf	control_transfer@id,w
  2255  013A  00F7               	movwf	??_control_transfer
  2256  013B  01F8               	clrf	??_control_transfer+1
  2257  013C  0877               	movf	??_control_transfer,w
  2258  013D  00DB               	movwf	_config
  2259  013E  0878               	movf	??_control_transfer+1,w
  2260  013F  00DC               	movwf	_config+1
  2261                           
  2262                           ;protocol.c: 75: Save(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2263  0140  30D0               	movlw	208
  2264  0141  00F1               	movwf	?_Save
  2265  0142  3007               	movlw	7
  2266  0143  00F2               	movwf	?_Save+1
  2267  0144  305B               	movlw	_config& (0+255)
  2268  0145  00F7               	movwf	??_control_transfer
  2269  0146  0877               	movf	??_control_transfer,w
  2270  0147  00F3               	movwf	?_Save+2
  2271  0148  3008               	movlw	8
  2272  0149  00F8               	movwf	??_control_transfer+1
  2273  014A  0878               	movf	??_control_transfer+1,w
  2274  014B  00F4               	movwf	?_Save+3
  2275  014C  2442               	fcall	_Save
  2276                           
  2277                           ;protocol.c: 76: break;
  2278  014D  0008               	return
  2279  014E                     l2062:	
  2280                           ;protocol.c: 77: case 0x04:
  2281                           
  2282                           
  2283                           ;protocol.c: 78: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2284  014E  306B               	movlw	__x& (0+255)
  2285  014F  2696               	fcall	_GET_CHAR_HELPER
  2286  0150  3A00               	xorlw	0
  2287  0151  1D03               	btfss	3,2
  2288  0152  0008               	return
  2289  0153  306C               	movlw	__y& (0+255)
  2290  0154  2696               	fcall	_GET_CHAR_HELPER
  2291  0155  3A00               	xorlw	0
  2292  0156  1D03               	btfss	3,2
  2293  0157  0008               	return
  2294  0158  0020               	movlb	0	; select bank0
  2295  0159  086B               	movf	__x,w
  2296  015A  39F0               	andlw	240
  2297  015B  1D03               	btfss	3,2
  2298  015C  0008               	return
  2299  015D  086C               	movf	__y,w
  2300  015E  39F0               	andlw	240
  2301  015F  1D03               	btfss	3,2
  2302  0160  0008               	return
  2303  0161  086C               	movf	__y,w
  2304  0162  00F7               	movwf	??_control_transfer
  2305  0163  3003               	movlw	3
  2306  0164                     u2095:	
  2307  0164  35F7               	lslf	??_control_transfer,f
  2308  0165  3EFF               	addlw	-1
  2309  0166  1D03               	skipz
  2310  0167  2964               	goto	u2095
  2311  0168  3577               	lslf	??_control_transfer,w
  2312  0169  046B               	iorwf	__x,w
  2313  016A  00F8               	movwf	??_control_transfer+1
  2314  016B  0878               	movf	??_control_transfer+1,w
  2315  016C  00C7               	movwf	control_transfer@x
  2316  016D  0847               	movf	control_transfer@x,w
  2317  016E  00F7               	movwf	??_control_transfer
  2318  016F  0877               	movf	??_control_transfer,w
  2319  0170  07D3               	addwf	__checksum,f
  2320                           
  2321                           ;protocol.c: 79: *((uint8_t*)(&page))=x;
  2322  0171  0847               	movf	control_transfer@x,w
  2323  0172  00F7               	movwf	??_control_transfer
  2324  0173  0877               	movf	??_control_transfer,w
  2325  0174  00C5               	movwf	control_transfer@page
  2326                           
  2327                           ;protocol.c: 80: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2328  0175  306B               	movlw	__x& (0+255)
  2329  0176  2696               	fcall	_GET_CHAR_HELPER
  2330  0177  3A00               	xorlw	0
  2331  0178  1D03               	btfss	3,2
  2332  0179  0008               	return
  2333  017A  306C               	movlw	__y& (0+255)
  2334  017B  2696               	fcall	_GET_CHAR_HELPER
  2335  017C  3A00               	xorlw	0
  2336  017D  1D03               	btfss	3,2
  2337  017E  0008               	return
  2338  017F  0020               	movlb	0	; select bank0
  2339  0180  086B               	movf	__x,w
  2340  0181  39F0               	andlw	240
  2341  0182  1D03               	btfss	3,2
  2342  0183  0008               	return
  2343  0184  086C               	movf	__y,w
  2344  0185  39F0               	andlw	240
  2345  0186  1D03               	btfss	3,2
  2346  0187  0008               	return
  2347  0188  086C               	movf	__y,w
  2348  0189  00F7               	movwf	??_control_transfer
  2349  018A  3003               	movlw	3
  2350  018B                     u2145:	
  2351  018B  35F7               	lslf	??_control_transfer,f
  2352  018C  3EFF               	addlw	-1
  2353  018D  1D03               	skipz
  2354  018E  298B               	goto	u2145
  2355  018F  3577               	lslf	??_control_transfer,w
  2356  0190  046B               	iorwf	__x,w
  2357  0191  00F8               	movwf	??_control_transfer+1
  2358  0192  0878               	movf	??_control_transfer+1,w
  2359  0193  00C7               	movwf	control_transfer@x
  2360  0194  0847               	movf	control_transfer@x,w
  2361  0195  00F7               	movwf	??_control_transfer
  2362  0196  0877               	movf	??_control_transfer,w
  2363  0197  07D3               	addwf	__checksum,f
  2364                           
  2365                           ;protocol.c: 81: *(((uint8_t*)(&page))+1)=x;
  2366  0198  0847               	movf	control_transfer@x,w
  2367  0199  00F7               	movwf	??_control_transfer
  2368  019A  0877               	movf	??_control_transfer,w
  2369  019B  00C6               	movwf	control_transfer@page+1
  2370                           
  2371                           ;protocol.c: 82: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x; 
      +                          if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2372  019C  306B               	movlw	__x& (0+255)
  2373  019D  2696               	fcall	_GET_CHAR_HELPER
  2374  019E  3A00               	xorlw	0
  2375  019F  1D03               	btfss	3,2
  2376  01A0  0008               	return
  2377  01A1  306C               	movlw	__y& (0+255)
  2378  01A2  2696               	fcall	_GET_CHAR_HELPER
  2379  01A3  3A00               	xorlw	0
  2380  01A4  1D03               	btfss	3,2
  2381  01A5  0008               	return
  2382  01A6  0020               	movlb	0	; select bank0
  2383  01A7  086B               	movf	__x,w
  2384  01A8  39F0               	andlw	240
  2385  01A9  1D03               	btfss	3,2
  2386  01AA  0008               	return
  2387  01AB  086C               	movf	__y,w
  2388  01AC  39F0               	andlw	240
  2389  01AD  1D03               	btfss	3,2
  2390  01AE  0008               	return
  2391  01AF  086C               	movf	__y,w
  2392  01B0  00F7               	movwf	??_control_transfer
  2393  01B1  3003               	movlw	3
  2394  01B2                     u2195:	
  2395  01B2  35F7               	lslf	??_control_transfer,f
  2396  01B3  3EFF               	addlw	-1
  2397  01B4  1D03               	skipz
  2398  01B5  29B2               	goto	u2195
  2399  01B6  3577               	lslf	??_control_transfer,w
  2400  01B7  046B               	iorwf	__x,w
  2401  01B8  00F8               	movwf	??_control_transfer+1
  2402  01B9  0878               	movf	??_control_transfer+1,w
  2403  01BA  00EB               	movwf	__x
  2404  01BB  086B               	movf	__x,w
  2405  01BC  00F7               	movwf	??_control_transfer
  2406  01BD  0877               	movf	??_control_transfer,w
  2407  01BE  07D3               	addwf	__checksum,f
  2408  01BF  0853               	movf	__checksum,w
  2409  01C0  1D03               	skipz
  2410  01C1  0008               	return
  2411  01C2  306B               	movlw	__x& (0+255)
  2412  01C3  2696               	fcall	_GET_CHAR_HELPER
  2413  01C4  3A00               	xorlw	0
  2414  01C5  1D03               	btfss	3,2
  2415  01C6  0008               	return
  2416  01C7  0020               	movlb	0	; select bank0
  2417  01C8  086B               	movf	__x,w
  2418  01C9  3A11               	xorlw	17
  2419  01CA  1D03               	btfss	3,2
  2420  01CB  0008               	return
  2421                           
  2422                           ;protocol.c: 83: Load(page,data,16);
  2423  01CC  0846               	movf	control_transfer@page+1,w
  2424  01CD  01F2               	clrf	?_Load+1
  2425  01CE  07F2               	addwf	?_Load+1,f
  2426  01CF  0845               	movf	control_transfer@page,w
  2427  01D0  01F1               	clrf	?_Load
  2428  01D1  07F1               	addwf	?_Load,f
  2429  01D2  3020               	movlw	control_transfer@data& (0+255)
  2430  01D3  00F7               	movwf	??_control_transfer
  2431  01D4  0877               	movf	??_control_transfer,w
  2432  01D5  00F3               	movwf	?_Load+2
  2433  01D6  3010               	movlw	16
  2434  01D7  00F8               	movwf	??_control_transfer+1
  2435  01D8  0878               	movf	??_control_transfer+1,w
  2436  01D9  00F4               	movwf	?_Load+3
  2437  01DA  25CE               	fcall	_Load
  2438                           
  2439                           ;protocol.c: 84: SEND_SOF();
  2440  01DB  26DE               	fcall	_SEND_SOF
  2441                           
  2442                           ;protocol.c: 85: SEND_DATA_BYTE(0x05);
  2443  01DC  3005               	movlw	5
  2444  01DD  2616               	fcall	_SEND_DATA_BYTE
  2445                           
  2446                           ;protocol.c: 86: dptr=(uint8_t*)data;
  2447  01DE  3020               	movlw	control_transfer@data& (0+255)
  2448  01DF  00F7               	movwf	??_control_transfer
  2449  01E0  0877               	movf	??_control_transfer,w
  2450  01E1  0020               	movlb	0	; select bank0
  2451  01E2  00C3               	movwf	control_transfer@dptr
  2452                           
  2453                           ;protocol.c: 87: for(i=0;i<32;i++)
  2454  01E3  01C4               	clrf	control_transfer@i
  2455  01E4  3020               	movlw	32
  2456  01E5  0244               	subwf	control_transfer@i,w
  2457  01E6  1803               	btfsc	3,0
  2458  01E7  29FA               	goto	l2142
  2459  01E8                     l2134:	
  2460                           
  2461                           ;protocol.c: 88: {
  2462                           ;protocol.c: 89: SEND_DATA_BYTE(*dptr++);
  2463  01E8  0843               	movf	control_transfer@dptr,w
  2464  01E9  0086               	movwf	6
  2465  01EA  0187               	clrf	7
  2466  01EB  0801               	movf	1,w
  2467  01EC  2616               	fcall	_SEND_DATA_BYTE
  2468  01ED  3001               	movlw	1
  2469  01EE  00F7               	movwf	??_control_transfer
  2470  01EF  0877               	movf	??_control_transfer,w
  2471  01F0  0020               	movlb	0	; select bank0
  2472  01F1  07C3               	addwf	control_transfer@dptr,f
  2473  01F2  3001               	movlw	1
  2474  01F3  00F7               	movwf	??_control_transfer
  2475  01F4  0877               	movf	??_control_transfer,w
  2476  01F5  07C4               	addwf	control_transfer@i,f
  2477  01F6  3020               	movlw	32
  2478  01F7  0244               	subwf	control_transfer@i,w
  2479  01F8  1C03               	skipc
  2480  01F9  29E8               	goto	l2134
  2481  01FA                     l2142:	
  2482                           
  2483                           ;protocol.c: 90: }
  2484                           ;protocol.c: 91: SEND_EOF();
  2485  01FA  26E9               	fcall	_SEND_EOF
  2486                           
  2487                           ;protocol.c: 92: break;
  2488  01FB  0008               	return
  2489  01FC                     l2144:	
  2490                           ;protocol.c: 93: case 0x06:
  2491                           
  2492                           
  2493                           ;protocol.c: 94: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2494  01FC  306B               	movlw	__x& (0+255)
  2495  01FD  2696               	fcall	_GET_CHAR_HELPER
  2496  01FE  3A00               	xorlw	0
  2497  01FF  1D03               	btfss	3,2
  2498  0200  0008               	return
  2499  0201  306C               	movlw	__y& (0+255)
  2500  0202  2696               	fcall	_GET_CHAR_HELPER
  2501  0203  3A00               	xorlw	0
  2502  0204  1D03               	btfss	3,2
  2503  0205  0008               	return
  2504  0206  0020               	movlb	0	; select bank0
  2505  0207  086B               	movf	__x,w
  2506  0208  39F0               	andlw	240
  2507  0209  1D03               	btfss	3,2
  2508  020A  0008               	return
  2509  020B  086C               	movf	__y,w
  2510  020C  39F0               	andlw	240
  2511  020D  1D03               	btfss	3,2
  2512  020E  0008               	return
  2513  020F  086C               	movf	__y,w
  2514  0210  00F7               	movwf	??_control_transfer
  2515  0211  3003               	movlw	3
  2516  0212                     u2295:	
  2517  0212  35F7               	lslf	??_control_transfer,f
  2518  0213  3EFF               	addlw	-1
  2519  0214  1D03               	skipz
  2520  0215  2A12               	goto	u2295
  2521  0216  3577               	lslf	??_control_transfer,w
  2522  0217  046B               	iorwf	__x,w
  2523  0218  00F8               	movwf	??_control_transfer+1
  2524  0219  0878               	movf	??_control_transfer+1,w
  2525  021A  00C7               	movwf	control_transfer@x
  2526  021B  0847               	movf	control_transfer@x,w
  2527  021C  00F7               	movwf	??_control_transfer
  2528  021D  0877               	movf	??_control_transfer,w
  2529  021E  07D3               	addwf	__checksum,f
  2530                           
  2531                           ;protocol.c: 95: *((uint8_t*)(&page))=x;
  2532  021F  0847               	movf	control_transfer@x,w
  2533  0220  00F7               	movwf	??_control_transfer
  2534  0221  0877               	movf	??_control_transfer,w
  2535  0222  00C5               	movwf	control_transfer@page
  2536                           
  2537                           ;protocol.c: 96: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto er
      +                          r; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;
  2538  0223  306B               	movlw	__x& (0+255)
  2539  0224  2696               	fcall	_GET_CHAR_HELPER
  2540  0225  3A00               	xorlw	0
  2541  0226  1D03               	btfss	3,2
  2542  0227  0008               	return
  2543  0228  306C               	movlw	__y& (0+255)
  2544  0229  2696               	fcall	_GET_CHAR_HELPER
  2545  022A  3A00               	xorlw	0
  2546  022B  1D03               	btfss	3,2
  2547  022C  0008               	return
  2548  022D  0020               	movlb	0	; select bank0
  2549  022E  086B               	movf	__x,w
  2550  022F  39F0               	andlw	240
  2551  0230  1D03               	btfss	3,2
  2552  0231  0008               	return
  2553  0232  086C               	movf	__y,w
  2554  0233  39F0               	andlw	240
  2555  0234  1D03               	btfss	3,2
  2556  0235  0008               	return
  2557  0236  086C               	movf	__y,w
  2558  0237  00F7               	movwf	??_control_transfer
  2559  0238  3003               	movlw	3
  2560  0239                     u2345:	
  2561  0239  35F7               	lslf	??_control_transfer,f
  2562  023A  3EFF               	addlw	-1
  2563  023B  1D03               	skipz
  2564  023C  2A39               	goto	u2345
  2565  023D  3577               	lslf	??_control_transfer,w
  2566  023E  046B               	iorwf	__x,w
  2567  023F  00F8               	movwf	??_control_transfer+1
  2568  0240  0878               	movf	??_control_transfer+1,w
  2569  0241  00C7               	movwf	control_transfer@x
  2570  0242  0847               	movf	control_transfer@x,w
  2571  0243  00F7               	movwf	??_control_transfer
  2572  0244  0877               	movf	??_control_transfer,w
  2573  0245  07D3               	addwf	__checksum,f
  2574                           
  2575                           ;protocol.c: 97: *(((uint8_t*)(&page))+1)=x;
  2576  0246  0847               	movf	control_transfer@x,w
  2577  0247  00F7               	movwf	??_control_transfer
  2578  0248  0877               	movf	??_control_transfer,w
  2579  0249  00C6               	movwf	control_transfer@page+1
  2580                           
  2581                           ;protocol.c: 98: dptr=(uint8_t*)data;
  2582  024A  3020               	movlw	control_transfer@data& (0+255)
  2583  024B  00F7               	movwf	??_control_transfer
  2584  024C  0877               	movf	??_control_transfer,w
  2585  024D  00C3               	movwf	control_transfer@dptr
  2586                           
  2587                           ;protocol.c: 99: for(i=0;i<32;i++)
  2588  024E  01C4               	clrf	control_transfer@i
  2589  024F  3020               	movlw	32
  2590  0250  0244               	subwf	control_transfer@i,w
  2591  0251  1803               	btfsc	3,0
  2592  0252  2A89               	goto	l2206
  2593  0253                     l2184:	
  2594                           
  2595                           ;protocol.c: 100: {
  2596                           ;protocol.c: 101: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; x=((_y << 4) | _x); _checksum += x;;
  2597  0253  306B               	movlw	__x& (0+255)
  2598  0254  2696               	fcall	_GET_CHAR_HELPER
  2599  0255  3A00               	xorlw	0
  2600  0256  1D03               	btfss	3,2
  2601  0257  0008               	return
  2602  0258  306C               	movlw	__y& (0+255)
  2603  0259  2696               	fcall	_GET_CHAR_HELPER
  2604  025A  3A00               	xorlw	0
  2605  025B  1D03               	btfss	3,2
  2606  025C  0008               	return
  2607  025D  0020               	movlb	0	; select bank0
  2608  025E  086B               	movf	__x,w
  2609  025F  39F0               	andlw	240
  2610  0260  1D03               	btfss	3,2
  2611  0261  0008               	return
  2612  0262  086C               	movf	__y,w
  2613  0263  39F0               	andlw	240
  2614  0264  1D03               	btfss	3,2
  2615  0265  0008               	return
  2616  0266  086C               	movf	__y,w
  2617  0267  00F7               	movwf	??_control_transfer
  2618  0268  3003               	movlw	3
  2619  0269                     u2405:	
  2620  0269  35F7               	lslf	??_control_transfer,f
  2621  026A  3EFF               	addlw	-1
  2622  026B  1D03               	skipz
  2623  026C  2A69               	goto	u2405
  2624  026D  3577               	lslf	??_control_transfer,w
  2625  026E  046B               	iorwf	__x,w
  2626  026F  00F8               	movwf	??_control_transfer+1
  2627  0270  0878               	movf	??_control_transfer+1,w
  2628  0271  00C7               	movwf	control_transfer@x
  2629  0272  0847               	movf	control_transfer@x,w
  2630  0273  00F7               	movwf	??_control_transfer
  2631  0274  0877               	movf	??_control_transfer,w
  2632  0275  07D3               	addwf	__checksum,f
  2633                           
  2634                           ;protocol.c: 102: *dptr++=x;
  2635  0276  0847               	movf	control_transfer@x,w
  2636  0277  00F7               	movwf	??_control_transfer
  2637  0278  0843               	movf	control_transfer@dptr,w
  2638  0279  0086               	movwf	6
  2639  027A  0187               	clrf	7
  2640  027B  0877               	movf	??_control_transfer,w
  2641  027C  0081               	movwf	1
  2642  027D  3001               	movlw	1
  2643  027E  00F7               	movwf	??_control_transfer
  2644  027F  0877               	movf	??_control_transfer,w
  2645  0280  07C3               	addwf	control_transfer@dptr,f
  2646  0281  3001               	movlw	1
  2647  0282  00F7               	movwf	??_control_transfer
  2648  0283  0877               	movf	??_control_transfer,w
  2649  0284  07C4               	addwf	control_transfer@i,f
  2650  0285  3020               	movlw	32
  2651  0286  0244               	subwf	control_transfer@i,w
  2652  0287  1C03               	skipc
  2653  0288  2A53               	goto	l2184
  2654  0289                     l2206:	
  2655                           
  2656                           ;protocol.c: 103: }
  2657                           ;protocol.c: 104: if(GET_CHAR_HELPER(&(_x))) goto err; if(GET_CHAR_HELPER(&(_y))) goto e
      +                          rr; if((_x & (~0x0F)) || (_y & (~0x0F))) goto err; _x=((_y << 4) | _x); _checksum += _x;
      +                           if(_checksum) goto err; if(GET_CHAR_HELPER(&(_x))) goto err; if(_x != 0x11) goto err;
  2658  0289  306B               	movlw	__x& (0+255)
  2659  028A  2696               	fcall	_GET_CHAR_HELPER
  2660  028B  3A00               	xorlw	0
  2661  028C  1D03               	btfss	3,2
  2662  028D  0008               	return
  2663  028E  306C               	movlw	__y& (0+255)
  2664  028F  2696               	fcall	_GET_CHAR_HELPER
  2665  0290  3A00               	xorlw	0
  2666  0291  1D03               	btfss	3,2
  2667  0292  0008               	return
  2668  0293  0020               	movlb	0	; select bank0
  2669  0294  086B               	movf	__x,w
  2670  0295  39F0               	andlw	240
  2671  0296  1D03               	btfss	3,2
  2672  0297  0008               	return
  2673  0298  086C               	movf	__y,w
  2674  0299  39F0               	andlw	240
  2675  029A  1D03               	btfss	3,2
  2676  029B  0008               	return
  2677  029C  086C               	movf	__y,w
  2678  029D  00F7               	movwf	??_control_transfer
  2679  029E  3003               	movlw	3
  2680  029F                     u2465:	
  2681  029F  35F7               	lslf	??_control_transfer,f
  2682  02A0  3EFF               	addlw	-1
  2683  02A1  1D03               	skipz
  2684  02A2  2A9F               	goto	u2465
  2685  02A3  3577               	lslf	??_control_transfer,w
  2686  02A4  046B               	iorwf	__x,w
  2687  02A5  00F8               	movwf	??_control_transfer+1
  2688  02A6  0878               	movf	??_control_transfer+1,w
  2689  02A7  00EB               	movwf	__x
  2690  02A8  086B               	movf	__x,w
  2691  02A9  00F7               	movwf	??_control_transfer
  2692  02AA  0877               	movf	??_control_transfer,w
  2693  02AB  07D3               	addwf	__checksum,f
  2694  02AC  0853               	movf	__checksum,w
  2695  02AD  1D03               	skipz
  2696  02AE  0008               	return
  2697  02AF  306B               	movlw	__x& (0+255)
  2698  02B0  2696               	fcall	_GET_CHAR_HELPER
  2699  02B1  3A00               	xorlw	0
  2700  02B2  1D03               	btfss	3,2
  2701  02B3  0008               	return
  2702  02B4  0020               	movlb	0	; select bank0
  2703  02B5  086B               	movf	__x,w
  2704  02B6  3A11               	xorlw	17
  2705  02B7  1D03               	btfss	3,2
  2706  02B8  0008               	return
  2707                           
  2708                           ;protocol.c: 105: Save(page,data,16);
  2709  02B9  0846               	movf	control_transfer@page+1,w
  2710  02BA  01F2               	clrf	?_Save+1
  2711  02BB  07F2               	addwf	?_Save+1,f
  2712  02BC  0845               	movf	control_transfer@page,w
  2713  02BD  01F1               	clrf	?_Save
  2714  02BE  07F1               	addwf	?_Save,f
  2715  02BF  3020               	movlw	control_transfer@data& (0+255)
  2716  02C0  00F7               	movwf	??_control_transfer
  2717  02C1  0877               	movf	??_control_transfer,w
  2718  02C2  00F3               	movwf	?_Save+2
  2719  02C3  3010               	movlw	16
  2720  02C4  00F8               	movwf	??_control_transfer+1
  2721  02C5  0878               	movf	??_control_transfer+1,w
  2722  02C6  00F4               	movwf	?_Save+3
  2723  02C7  2442               	fcall	_Save
  2724                           
  2725                           ;protocol.c: 106: switch(page)
  2726  02C8  2AE5               	goto	l2240
  2727  02C9                     l2234:	
  2728                           ;protocol.c: 107: {
  2729                           ;protocol.c: 108: case 0x7D0:
  2730                           
  2731                           
  2732                           ;protocol.c: 109: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  2733  02C9  30D0               	movlw	208
  2734  02CA  00F1               	movwf	?_Load
  2735  02CB  3007               	movlw	7
  2736  02CC  00F2               	movwf	?_Load+1
  2737  02CD  305B               	movlw	_config& (0+255)
  2738  02CE  00F7               	movwf	??_control_transfer
  2739  02CF  0877               	movf	??_control_transfer,w
  2740  02D0  00F3               	movwf	?_Load+2
  2741  02D1  3008               	movlw	8
  2742  02D2  00F8               	movwf	??_control_transfer+1
  2743  02D3  0878               	movf	??_control_transfer+1,w
  2744  02D4  00F4               	movwf	?_Load+3
  2745  02D5  25CE               	fcall	_Load
  2746                           
  2747                           ;protocol.c: 110: break;
  2748  02D6  2AF3               	goto	l2242
  2749  02D7                     l2236:	
  2750                           ;protocol.c: 111: case 0x7E0:
  2751                           
  2752                           
  2753                           ;protocol.c: 112: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  2754  02D7  30E0               	movlw	224
  2755  02D8  00F1               	movwf	?_Load
  2756  02D9  3007               	movlw	7
  2757  02DA  00F2               	movwf	?_Load+1
  2758  02DB  30A0               	movlw	_hitlist& (0+255)
  2759  02DC  00F7               	movwf	??_control_transfer
  2760  02DD  0877               	movf	??_control_transfer,w
  2761  02DE  00F3               	movwf	?_Load+2
  2762  02DF  3010               	movlw	16
  2763  02E0  00F8               	movwf	??_control_transfer+1
  2764  02E1  0878               	movf	??_control_transfer+1,w
  2765  02E2  00F4               	movwf	?_Load+3
  2766  02E3  25CE               	fcall	_Load
  2767                           
  2768                           ;protocol.c: 114: }
  2769                           
  2770                           ;protocol.c: 113: break;
  2771  02E4  2AF3               	goto	l2242
  2772  02E5                     l2240:	
  2773                           
  2774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2775                           ; Switch size 1, requested type "space"
  2776                           ; Number of cases is 1, Range of values is 7 to 7
  2777                           ; switch strategies available:
  2778                           ; Name         Instructions Cycles
  2779                           ; simple_byte            4     3 (average)
  2780                           ; direct_byte           11     9 (fixed)
  2781                           ; jumptable            263     9 (fixed)
  2782                           ;	Chosen strategy is simple_byte
  2783  02E5  0020               	movlb	0	; select bank0
  2784  02E6  0846               	movf	control_transfer@page+1,w
  2785  02E7  3A07               	xorlw	7	; case 7
  2786  02E8  1903               	skipnz
  2787  02E9  2AEB               	goto	l2312
  2788  02EA  2AF3               	goto	l2242
  2789  02EB                     l2312:	
  2790                           
  2791                           ; Switch size 1, requested type "space"
  2792                           ; Number of cases is 2, Range of values is 208 to 224
  2793                           ; switch strategies available:
  2794                           ; Name         Instructions Cycles
  2795                           ; simple_byte            7     4 (average)
  2796                           ; direct_byte           43     9 (fixed)
  2797                           ; jumptable            263     9 (fixed)
  2798                           ;	Chosen strategy is simple_byte
  2799  02EB  0845               	movf	control_transfer@page,w
  2800  02EC  3AD0               	xorlw	208	; case 208
  2801  02ED  1903               	skipnz
  2802  02EE  2AC9               	goto	l2234
  2803  02EF  3A30               	xorlw	48	; case 224
  2804  02F0  1903               	skipnz
  2805  02F1  2AD7               	goto	l2236
  2806  02F2  2AF3               	goto	l2242
  2807  02F3                     l2242:	
  2808                           
  2809                           ;protocol.c: 115: SEND_SOF();
  2810  02F3  26DE               	fcall	_SEND_SOF
  2811                           
  2812                           ;protocol.c: 116: SEND_DATA_BYTE(0x00);
  2813  02F4  3000               	movlw	0
  2814  02F5  2616               	fcall	_SEND_DATA_BYTE
  2815                           
  2816                           ;protocol.c: 117: SEND_EOF();
  2817  02F6  26E9               	fcall	_SEND_EOF
  2818                           
  2819                           ;protocol.c: 121: }
  2820                           
  2821                           ;protocol.c: 120: goto err;
  2822                           
  2823                           ;protocol.c: 119: default:
  2824                           
  2825                           ;protocol.c: 118: break;
  2826  02F7  0008               	return
  2827  02F8                     l2246:	
  2828  02F8  0020               	movlb	0	; select bank0
  2829  02F9  0840               	movf	control_transfer@cmd,w
  2830                           
  2831                           ; Switch size 1, requested type "space"
  2832                           ; Number of cases is 4, Range of values is 1 to 6
  2833                           ; switch strategies available:
  2834                           ; Name         Instructions Cycles
  2835                           ; simple_byte           13     7 (average)
  2836                           ; direct_byte           21     9 (fixed)
  2837                           ; jumptable            263     9 (fixed)
  2838                           ;	Chosen strategy is simple_byte
  2839  02FA  3A01               	xorlw	1	; case 1
  2840  02FB  1903               	skipnz
  2841  02FC  2882               	goto	l1970
  2842  02FD  3A02               	xorlw	2	; case 3
  2843  02FE  1903               	skipnz
  2844  02FF  28BA               	goto	l1998
  2845  0300  3A07               	xorlw	7	; case 4
  2846  0301  1903               	skipnz
  2847  0302  294E               	goto	l2062
  2848  0303  3A02               	xorlw	2	; case 6
  2849  0304  1903               	skipnz
  2850  0305  29FC               	goto	l2144
  2851  0306  2B08               	goto	l378
  2852  0307  0008               	return
  2853  0308                     l378:	
  2854                           ;protocol.c: 123: return;
  2855                           
  2856                           ;protocol.c: 122: err:
  2857                           
  2858  0308  0008               	return
  2859  0309                     __end_of_control_transfer:	
  2860                           
  2861                           	psect	text10
  2862  06E9                     __ptext10:	
  2863 ;; *************** function _SEND_EOF *****************
  2864 ;; Defined at:
  2865 ;;		line 36 in file "protocol.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;		None               void
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0, pclath, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2879 ;;      Params:         0       0       0       0
  2880 ;;      Locals:         0       0       0       0
  2881 ;;      Temps:          1       0       0       0
  2882 ;;      Totals:         1       0       0       0
  2883 ;;Total ram usage:        1 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    4
  2886 ;; This function calls:
  2887 ;;		_Send_Byte
  2888 ;;		_SEND_DATA_BYTE
  2889 ;; This function is called by:
  2890 ;;		_control_transfer
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function _SEND_EOF
  2896  06E9                     _SEND_EOF:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _SEND_EOF: [wreg+status,2+status,0+pclath+cstack]
  2900  06E9  0020               	movlb	0	; select bank0
  2901  06EA  0853               	movf	__checksum,w
  2902  06EB  2616               	fcall	_SEND_DATA_BYTE
  2903  06EC  3011               	movlw	17
  2904  06ED  26D0               	fcall	_Send_Byte
  2905  06EE  3085               	movlw	133
  2906  06EF  00F5               	movwf	??_SEND_EOF
  2907  06F0                     u2617:	
  2908  06F0  0BF5               	decfsz	??_SEND_EOF,f
  2909  06F1  2EF0               	goto	u2617
  2910  06F2  0008               	return
  2911  06F3                     __end_of_SEND_EOF:	
  2912                           
  2913                           	psect	text11
  2914  06DE                     __ptext11:	
  2915 ;; *************** function _SEND_SOF *****************
  2916 ;; Defined at:
  2917 ;;		line 35 in file "protocol.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;		None               void
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, pclath, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2931 ;;      Params:         0       0       0       0
  2932 ;;      Locals:         0       0       0       0
  2933 ;;      Temps:          1       0       0       0
  2934 ;;      Totals:         1       0       0       0
  2935 ;;Total ram usage:        1 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    4
  2938 ;; This function calls:
  2939 ;;		_Send_Byte
  2940 ;;		_SEND_DATA_BYTE
  2941 ;; This function is called by:
  2942 ;;		_control_transfer
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           
  2947                           ;psect for function _SEND_SOF
  2948  06DE                     _SEND_SOF:	
  2949                           
  2950                           ;incstack = 0
  2951                           ; Regs used in _SEND_SOF: [wreg+status,2+status,0+pclath+cstack]
  2952  06DE  3010               	movlw	16
  2953  06DF  26D0               	fcall	_Send_Byte
  2954  06E0  3085               	movlw	133
  2955  06E1  00F5               	movwf	??_SEND_SOF
  2956  06E2                     u2627:	
  2957  06E2  0BF5               	decfsz	??_SEND_SOF,f
  2958  06E3  2EE2               	goto	u2627
  2959  06E4  0020               	movlb	0	; select bank0
  2960  06E5  01D3               	clrf	__checksum
  2961  06E6  085B               	movf	_config,w
  2962  06E7  2616               	fcall	_SEND_DATA_BYTE
  2963  06E8  0008               	return
  2964  06E9                     __end_of_SEND_SOF:	
  2965                           
  2966                           	psect	text12
  2967  0616                     __ptext12:	
  2968 ;; *************** function _SEND_DATA_BYTE *****************
  2969 ;; Defined at:
  2970 ;;		line 34 in file "protocol.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  b               1    wreg     unsigned char 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  b               1    4[COMMON] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;		None               void
  2977 ;; Registers used:
  2978 ;;		wreg, status,2, status,0, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         1       0       0       0
  2986 ;;      Temps:          2       0       0       0
  2987 ;;      Totals:         3       0       0       0
  2988 ;;Total ram usage:        3 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		_Send_Byte
  2993 ;; This function is called by:
  2994 ;;		_SEND_SOF
  2995 ;;		_SEND_EOF
  2996 ;;		_control_transfer
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _SEND_DATA_BYTE
  3002  0616                     _SEND_DATA_BYTE:	
  3003                           
  3004                           ;incstack = 0
  3005                           ; Regs used in _SEND_DATA_BYTE: [wreg+status,2+status,0+pclath+cstack]
  3006                           ;SEND_DATA_BYTE@b stored from wreg
  3007  0616  00F4               	movwf	SEND_DATA_BYTE@b
  3008  0617  0874               	movf	SEND_DATA_BYTE@b,w
  3009  0618  390F               	andlw	15
  3010  0619  00F2               	movwf	??_SEND_DATA_BYTE
  3011  061A  0872               	movf	??_SEND_DATA_BYTE,w
  3012  061B  0020               	movlb	0	; select bank0
  3013  061C  00EB               	movwf	__x
  3014  061D  0874               	movf	SEND_DATA_BYTE@b,w
  3015  061E  00F2               	movwf	??_SEND_DATA_BYTE
  3016  061F  3004               	movlw	4
  3017  0620                     u1665:	
  3018  0620  36F2               	lsrf	??_SEND_DATA_BYTE,f
  3019  0621  0B89               	decfsz	9,f
  3020  0622  2E20               	goto	u1665
  3021  0623  0872               	movf	??_SEND_DATA_BYTE,w
  3022  0624  00F3               	movwf	??_SEND_DATA_BYTE+1
  3023  0625  0873               	movf	??_SEND_DATA_BYTE+1,w
  3024  0626  00EC               	movwf	__y
  3025  0627  086B               	movf	__x,w
  3026  0628  26D0               	fcall	_Send_Byte
  3027  0629  3085               	movlw	133
  3028  062A  00F2               	movwf	??_SEND_DATA_BYTE
  3029  062B                     u2637:	
  3030  062B  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3031  062C  2E2B               	goto	u2637
  3032  062D  0020               	movlb	0	; select bank0
  3033  062E  086C               	movf	__y,w
  3034  062F  26D0               	fcall	_Send_Byte
  3035  0630  3085               	movlw	133
  3036  0631  00F2               	movwf	??_SEND_DATA_BYTE
  3037  0632                     u2647:	
  3038  0632  0BF2               	decfsz	??_SEND_DATA_BYTE,f
  3039  0633  2E32               	goto	u2647
  3040  0634  0874               	movf	SEND_DATA_BYTE@b,w
  3041  0635  0020               	movlb	0	; select bank0
  3042  0636  02D3               	subwf	__checksum,f
  3043  0637  0008               	return
  3044  0638                     __end_of_SEND_DATA_BYTE:	
  3045                           
  3046                           	psect	text13
  3047  06D0                     __ptext13:	
  3048 ;; *************** function _Send_Byte *****************
  3049 ;; Defined at:
  3050 ;;		line 137 in file "user.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  data            1    wreg     unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  data            1    1[COMMON] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;		None               void
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0, pclath, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3064 ;;      Params:         0       0       0       0
  3065 ;;      Locals:         1       0       0       0
  3066 ;;      Temps:          0       0       0       0
  3067 ;;      Totals:         1       0       0       0
  3068 ;;Total ram usage:        1 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    2
  3071 ;; This function calls:
  3072 ;;		_Modulate_Serial
  3073 ;;		_Disable_Modulation
  3074 ;; This function is called by:
  3075 ;;		_handle_fire
  3076 ;;		_SEND_DATA_BYTE
  3077 ;;		_SEND_SOF
  3078 ;;		_SEND_EOF
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _Send_Byte
  3084  06D0                     _Send_Byte:	
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in _Send_Byte: [wreg+status,2+status,0+pclath+cstack]
  3088                           ;Send_Byte@data stored from wreg
  3089  06D0  00F1               	movwf	Send_Byte@data
  3090                           
  3091                           ;user.c: 138: RCSTAbits.CREN = 0;
  3092  06D1  0023               	movlb	3	; select bank3
  3093  06D2  121D               	bcf	29,4	;volatile
  3094                           
  3095                           ;user.c: 139: Modulate_Serial();
  3096  06D3  26F3               	fcall	_Modulate_Serial
  3097                           
  3098                           ;user.c: 140: TXREG = data;
  3099  06D4  0871               	movf	Send_Byte@data,w
  3100  06D5  0023               	movlb	3	; select bank3
  3101  06D6  009A               	movwf	26	;volatile
  3102  06D7                     l171:	
  3103                           ;user.c: 141: while(!TXSTAbits.TRMT);
  3104                           
  3105  06D7  1C9E               	btfss	30,1	;volatile
  3106  06D8  2ED7               	goto	l171
  3107                           
  3108                           ;user.c: 142: Disable_Modulation();
  3109  06D9  2711               	fcall	_Disable_Modulation
  3110                           
  3111                           ;user.c: 143: RCSTAbits.CREN = 1;
  3112  06DA  0023               	movlb	3	; select bank3
  3113  06DB  161D               	bsf	29,4	;volatile
  3114                           
  3115                           ;user.c: 144: RCREG;
  3116  06DC  0819               	movf	25,w	;volatile
  3117  06DD  0008               	return
  3118  06DE                     __end_of_Send_Byte:	
  3119                           
  3120                           	psect	text14
  3121  0711                     __ptext14:	
  3122 ;; *************** function _Disable_Modulation *****************
  3123 ;; Defined at:
  3124 ;;		line 154 in file "user.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;		None               void
  3131 ;; Registers used:
  3132 ;;		None
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       0       0       0
  3139 ;;      Locals:         0       0       0       0
  3140 ;;      Temps:          0       0       0       0
  3141 ;;      Totals:         0       0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    1
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_Send_Byte
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _Disable_Modulation
  3154  0711                     _Disable_Modulation:	
  3155                           
  3156                           ;user.c: 155: INTCONbits.TMR0IE=0;
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in _Disable_Modulation: []
  3160  0711  128B               	bcf	11,5	;volatile
  3161                           
  3162                           ;user.c: 156: DACCON0bits.DACEN=0;
  3163  0712  0022               	movlb	2	; select bank2
  3164  0713  1398               	bcf	24,7	;volatile
  3165  0714  0008               	return
  3166  0715                     __end_of_Disable_Modulation:	
  3167                           
  3168                           	psect	text15
  3169  06F3                     __ptext15:	
  3170 ;; *************** function _Modulate_Serial *****************
  3171 ;; Defined at:
  3172 ;;		line 147 in file "user.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;		None               void
  3179 ;; Registers used:
  3180 ;;		status,2
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3186 ;;      Params:         0       0       0       0
  3187 ;;      Locals:         0       0       0       0
  3188 ;;      Temps:          0       0       0       0
  3189 ;;      Totals:         0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    1
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_Send_Byte
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _Modulate_Serial
  3202  06F3                     _Modulate_Serial:	
  3203                           
  3204                           ;user.c: 148: DACCON0bits.DACEN = 1;
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _Modulate_Serial: [status,2]
  3208  06F3  0022               	movlb	2	; select bank2
  3209  06F4  1798               	bsf	24,7	;volatile
  3210                           
  3211                           ;user.c: 149: TMR0=0;
  3212  06F5  0020               	movlb	0	; select bank0
  3213  06F6  0195               	clrf	21	;volatile
  3214                           
  3215                           ;user.c: 150: INTCONbits.TMR0IF=1;
  3216  06F7  150B               	bsf	11,2	;volatile
  3217                           
  3218                           ;user.c: 151: INTCONbits.TMR0IE=1;
  3219  06F8  168B               	bsf	11,5	;volatile
  3220  06F9  0008               	return
  3221  06FA                     __end_of_Modulate_Serial:	
  3222                           
  3223                           	psect	text16
  3224  0696                     __ptext16:	
  3225 ;; *************** function _GET_CHAR_HELPER *****************
  3226 ;; Defined at:
  3227 ;;		line 28 in file "protocol.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  val             1    wreg     PTR unsigned char 
  3230 ;;		 -> _y(1), _x(1), 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  val             1    2[COMMON] PTR unsigned char 
  3233 ;;		 -> _y(1), _x(1), 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      unsigned char 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr1l, fsr1h, status,2
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3243 ;;      Params:         0       0       0       0
  3244 ;;      Locals:         1       0       0       0
  3245 ;;      Temps:          1       0       0       0
  3246 ;;      Totals:         2       0       0       0
  3247 ;;Total ram usage:        2 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    1
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_control_transfer
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _GET_CHAR_HELPER
  3259  0696                     _GET_CHAR_HELPER:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _GET_CHAR_HELPER: [wreg+fsr1l+fsr1h+status,2]
  3263                           ;GET_CHAR_HELPER@val stored from wreg
  3264  0696  00F2               	movwf	GET_CHAR_HELPER@val
  3265  0697  0020               	movlb	0	; select bank0
  3266  0698  01CB               	clrf	__i
  3267  0699  01CC               	clrf	__i+1
  3268  069A                     l265:	
  3269  069A  1A91               	btfsc	17,5	;volatile
  3270  069B  2EA9               	goto	l1904
  3271  069C  3001               	movlw	1
  3272  069D  07CB               	addwf	__i,f
  3273  069E  3000               	movlw	0
  3274  069F  3DCC               	addwfc	__i+1,f
  3275  06A0  3027               	movlw	39
  3276  06A1  024C               	subwf	__i+1,w
  3277  06A2  3010               	movlw	16
  3278  06A3  1903               	skipnz
  3279  06A4  024B               	subwf	__i,w
  3280  06A5  1C03               	skipc
  3281  06A6  2E9A               	goto	l265
  3282  06A7  3001               	movlw	1
  3283  06A8  0008               	return
  3284  06A9                     l1904:	
  3285  06A9  0023               	movlb	3	; select bank3
  3286  06AA  0819               	movf	25,w	;volatile
  3287  06AB  00F1               	movwf	??_GET_CHAR_HELPER
  3288  06AC  0872               	movf	GET_CHAR_HELPER@val,w
  3289  06AD  0086               	movwf	6
  3290  06AE  0187               	clrf	7
  3291  06AF  0871               	movf	??_GET_CHAR_HELPER,w
  3292  06B0  0081               	movwf	1
  3293  06B1  3000               	movlw	0
  3294  06B2  0008               	return
  3295  06B3                     __end_of_GET_CHAR_HELPER:	
  3296                           
  3297                           	psect	text17
  3298  0572                     __ptext17:	
  3299 ;; *************** function _hit_by *****************
  3300 ;; Defined at:
  3301 ;;		line 62 in file "main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  who             1    wreg     unsigned char 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  who             1   12[COMMON] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;		None               void
  3308 ;; Registers used:
  3309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3315 ;;      Params:         0       0       0       0
  3316 ;;      Locals:         1       0       0       0
  3317 ;;      Temps:          0       2       0       0
  3318 ;;      Totals:         1       2       0       0
  3319 ;;Total ram usage:        3 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    3
  3322 ;; This function calls:
  3323 ;;		_add_to_hitlist
  3324 ;;		_Save
  3325 ;;		_Buzz
  3326 ;;		_get_hitlist_length
  3327 ;; This function is called by:
  3328 ;;		_handle_serial
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _hit_by
  3334  0572                     _hit_by:	
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in _hit_by: [allreg]
  3338                           ;hit_by@who stored from wreg
  3339  0572  00FC               	movwf	hit_by@who
  3340                           
  3341                           ;main.c: 63: add_to_hitlist(who);
  3342  0573  087C               	movf	hit_by@who,w
  3343  0574  23EE               	fcall	_add_to_hitlist
  3344                           
  3345                           ;main.c: 64: Save(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  3346  0575  30E0               	movlw	224
  3347  0576  00F1               	movwf	?_Save
  3348  0577  3007               	movlw	7
  3349  0578  00F2               	movwf	?_Save+1
  3350  0579  30A0               	movlw	_hitlist& (0+255)
  3351  057A  0020               	movlb	0	; select bank0
  3352  057B  00B0               	movwf	??_hit_by
  3353  057C  0830               	movf	??_hit_by,w
  3354  057D  00F3               	movwf	?_Save+2
  3355  057E  3010               	movlw	16
  3356  057F  00B1               	movwf	??_hit_by+1
  3357  0580  0831               	movf	??_hit_by+1,w
  3358  0581  00F4               	movwf	?_Save+3
  3359  0582  2442               	fcall	_Save
  3360                           
  3361                           ;main.c: 65: Buzz(1000,50);
  3362  0583  30E8               	movlw	232
  3363  0584  0020               	movlb	0	; select bank0
  3364  0585  00A8               	movwf	?_Buzz
  3365  0586  3003               	movlw	3
  3366  0587  00A9               	movwf	?_Buzz+1
  3367  0588  3032               	movlw	50
  3368  0589  00AA               	movwf	?_Buzz+2
  3369  058A  3000               	movlw	0
  3370  058B  00AB               	movwf	?_Buzz+3
  3371  058C  253E               	fcall	_Buzz
  3372                           
  3373                           ;main.c: 66: if(get_hitlist_length() > config.health)
  3374  058D  2506               	fcall	_get_hitlist_length
  3375  058E  0020               	movlb	0	; select bank0
  3376  058F  00B0               	movwf	??_hit_by
  3377  0590  01B1               	clrf	??_hit_by+1
  3378  0591  0831               	movf	??_hit_by+1,w
  3379  0592  0260               	subwf	_config+5,w
  3380  0593  1D03               	skipz
  3381  0594  2D97               	goto	u1485
  3382  0595  0830               	movf	??_hit_by,w
  3383  0596  025F               	subwf	_config+4,w
  3384  0597                     u1485:	
  3385  0597  1803               	skipnc
  3386  0598  0008               	return
  3387                           
  3388                           ;main.c: 67: {
  3389                           ;main.c: 68: Buzz(100,2000);
  3390  0599  3064               	movlw	100
  3391  059A  00A8               	movwf	?_Buzz
  3392  059B  3000               	movlw	0
  3393  059C  00A9               	movwf	?_Buzz+1
  3394  059D  30D0               	movlw	208
  3395  059E  00AA               	movwf	?_Buzz+2
  3396  059F  3007               	movlw	7
  3397  05A0  00AB               	movwf	?_Buzz+3
  3398  05A1  253E               	fcall	_Buzz
  3399  05A2  0008               	return
  3400  05A3                     __end_of_hit_by:	
  3401                           
  3402                           	psect	text18
  3403  0506                     __ptext18:	
  3404 ;; *************** function _get_hitlist_length *****************
  3405 ;; Defined at:
  3406 ;;		line 300 in file "user.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  i               1    5[COMMON] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      unsigned char 
  3413 ;; Registers used:
  3414 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3420 ;;      Params:         0       0       0       0
  3421 ;;      Locals:         1       0       0       0
  3422 ;;      Temps:          4       0       0       0
  3423 ;;      Totals:         5       0       0       0
  3424 ;;Total ram usage:        5 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    1
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_hit_by
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _get_hitlist_length
  3436  0506                     _get_hitlist_length:	
  3437                           
  3438                           ;user.c: 301: uint8_t i;
  3439                           ;user.c: 302: for(i=0;i<(sizeof(hitlist_t)/2);i++)
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _get_hitlist_length: [wreg+fsr1l+fsr1h+status,2+status,0]
  3443  0506  01F5               	clrf	get_hitlist_length@i
  3444  0507  3010               	movlw	16
  3445  0508  0275               	subwf	get_hitlist_length@i,w
  3446  0509  1803               	btfsc	3,0
  3447  050A  2D3C               	goto	l1804
  3448  050B                     l1788:	
  3449                           
  3450                           ;user.c: 303: {
  3451                           ;user.c: 304: if(!(hitlist[i] & 0x007F)) return 2*i;
  3452  050B  3575               	lslf	get_hitlist_length@i,w
  3453  050C  3EA0               	addlw	_hitlist& (0+255)
  3454  050D  0086               	movwf	6
  3455  050E  0187               	clrf	7
  3456  050F  3F40               	moviw [0]fsr1
  3457  0510  00F1               	movwf	??_get_hitlist_length
  3458  0511  3F41               	moviw [1]fsr1
  3459  0512  00F2               	movwf	??_get_hitlist_length+1
  3460  0513  307F               	movlw	127
  3461  0514  0571               	andwf	??_get_hitlist_length,w
  3462  0515  00F3               	movwf	??_get_hitlist_length+2
  3463  0516  3000               	movlw	0
  3464  0517  0572               	andwf	??_get_hitlist_length+1,w
  3465  0518  00F4               	movwf	??_get_hitlist_length+3
  3466  0519  0874               	movf	??_get_hitlist_length+3,w
  3467  051A  0473               	iorwf	??_get_hitlist_length+2,w
  3468  051B  1D03               	skipz
  3469  051C  2D1F               	goto	l1794
  3470  051D  3575               	lslf	get_hitlist_length@i,w
  3471  051E  0008               	return
  3472  051F                     l1794:	
  3473                           
  3474                           ;user.c: 305: if(!(hitlist[i] & 0x3F80)) return 2*i+1;
  3475  051F  3575               	lslf	get_hitlist_length@i,w
  3476  0520  3EA0               	addlw	_hitlist& (0+255)
  3477  0521  0086               	movwf	6
  3478  0522  0187               	clrf	7
  3479  0523  3F40               	moviw [0]fsr1
  3480  0524  00F1               	movwf	??_get_hitlist_length
  3481  0525  3F41               	moviw [1]fsr1
  3482  0526  00F2               	movwf	??_get_hitlist_length+1
  3483  0527  3080               	movlw	128
  3484  0528  0571               	andwf	??_get_hitlist_length,w
  3485  0529  00F3               	movwf	??_get_hitlist_length+2
  3486  052A  303F               	movlw	63
  3487  052B  0572               	andwf	??_get_hitlist_length+1,w
  3488  052C  00F4               	movwf	??_get_hitlist_length+3
  3489  052D  0874               	movf	??_get_hitlist_length+3,w
  3490  052E  0473               	iorwf	??_get_hitlist_length+2,w
  3491  052F  1D03               	skipz
  3492  0530  2D34               	goto	l1800
  3493  0531  1403               	setc
  3494  0532  0D75               	rlf	get_hitlist_length@i,w
  3495  0533  0008               	return
  3496  0534                     l1800:	
  3497  0534  3001               	movlw	1
  3498  0535  00F1               	movwf	??_get_hitlist_length
  3499  0536  0871               	movf	??_get_hitlist_length,w
  3500  0537  07F5               	addwf	get_hitlist_length@i,f
  3501  0538  3010               	movlw	16
  3502  0539  0275               	subwf	get_hitlist_length@i,w
  3503  053A  1C03               	skipc
  3504  053B  2D0B               	goto	l1788
  3505  053C                     l1804:	
  3506                           
  3507                           ;user.c: 306: }
  3508                           ;user.c: 307: return 2*i;
  3509  053C  3575               	lslf	get_hitlist_length@i,w
  3510  053D  0008               	return
  3511  053E                     __end_of_get_hitlist_length:	
  3512                           
  3513                           	psect	text19
  3514  053E                     __ptext19:	
  3515 ;; *************** function _Buzz *****************
  3516 ;; Defined at:
  3517 ;;		line 130 in file "user.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  freq            2    8[BANK0 ] unsigned int 
  3520 ;;  dur_ms          2   10[BANK0 ] unsigned int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  i               2   14[BANK0 ] unsigned int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;		None               void
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3532 ;;      Params:         0       4       0       0
  3533 ;;      Locals:         0       2       0       0
  3534 ;;      Temps:          0       2       0       0
  3535 ;;      Totals:         0       8       0       0
  3536 ;;Total ram usage:        8 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    2
  3539 ;; This function calls:
  3540 ;;		_tone_off
  3541 ;;		_tone
  3542 ;;		___aldiv
  3543 ;; This function is called by:
  3544 ;;		_hit_by
  3545 ;;		_Get_hit
  3546 ;;		_Sleep
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _Buzz
  3552  053E                     _Buzz:	
  3553                           
  3554                           ;user.c: 131: tone((16000000 / freq)-1);
  3555                           
  3556                           ;incstack = 0
  3557                           ; Regs used in _Buzz: [wreg+status,2+status,0+pclath+cstack]
  3558  053E  0020               	movlb	0	; select bank0
  3559  053F  0828               	movf	Buzz@freq,w
  3560  0540  00F1               	movwf	?___aldiv
  3561  0541  0829               	movf	Buzz@freq+1,w
  3562  0542  00F2               	movwf	?___aldiv+1
  3563  0543  01F3               	clrf	?___aldiv+2
  3564  0544  01F4               	clrf	?___aldiv+3
  3565  0545  3000               	movlw	0
  3566  0546  00F8               	movwf	?___aldiv+7
  3567  0547  30F4               	movlw	244
  3568  0548  00F7               	movwf	?___aldiv+6
  3569  0549  3024               	movlw	36
  3570  054A  00F6               	movwf	?___aldiv+5
  3571  054B  3000               	movlw	0
  3572  054C  00F5               	movwf	?___aldiv+4
  3573  054D  2309               	fcall	___aldiv
  3574  054E  0871               	movf	?___aldiv,w
  3575  054F  3EFF               	addlw	255
  3576  0550  0020               	movlb	0	; select bank0
  3577  0551  00A6               	movwf	?_tone
  3578  0552  30FF               	movlw	255
  3579  0553  3D72               	addwfc	?___aldiv+1,w
  3580  0554  00A7               	movwf	?_tone+1
  3581  0555  26B3               	fcall	_tone
  3582                           
  3583                           ;user.c: 132: for(uint16_t i=0;i<dur_ms;i++) _delay((unsigned long)((1)*(16000000/4000.0
      +                          )));
  3584  0556  0020               	movlb	0	; select bank0
  3585  0557  01AE               	clrf	Buzz@i
  3586  0558  01AF               	clrf	Buzz@i+1
  3587  0559                     l165:	
  3588  0559  082B               	movf	Buzz@dur_ms+1,w
  3589  055A  022F               	subwf	Buzz@i+1,w
  3590  055B  1D03               	skipz
  3591  055C  2D5F               	goto	u1565
  3592  055D  082A               	movf	Buzz@dur_ms,w
  3593  055E  022E               	subwf	Buzz@i,w
  3594  055F                     u1565:	
  3595  055F  1803               	btfsc	3,0
  3596  0560  2D70               	goto	l1780
  3597  0561  3006               	movlw	6
  3598  0562  00AD               	movwf	??_Buzz+1
  3599  0563  3030               	movlw	48
  3600  0564  00AC               	movwf	??_Buzz
  3601  0565                     u2657:	
  3602  0565  0BAC               	decfsz	??_Buzz,f
  3603  0566  2D65               	goto	u2657
  3604  0567  0BAD               	decfsz	??_Buzz+1,f
  3605  0568  2D65               	goto	u2657
  3606  0569  0000               	nop
  3607  056A  3001               	movlw	1
  3608  056B  0020               	movlb	0	; select bank0
  3609  056C  07AE               	addwf	Buzz@i,f
  3610  056D  3000               	movlw	0
  3611  056E  3DAF               	addwfc	Buzz@i+1,f
  3612  056F  2D59               	goto	l165
  3613  0570                     l1780:	
  3614                           
  3615                           ;user.c: 133: tone_off();
  3616  0570  271B               	fcall	_tone_off
  3617  0571  0008               	return
  3618  0572                     __end_of_Buzz:	
  3619                           
  3620                           	psect	text20
  3621  0309                     __ptext20:	
  3622 ;; *************** function ___aldiv *****************
  3623 ;; Defined at:
  3624 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\aldiv.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  divisor         4    1[COMMON] long 
  3627 ;;  dividend        4    5[COMMON] long 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  quotient        4    2[BANK0 ] long 
  3630 ;;  sign            1    1[BANK0 ] unsigned char 
  3631 ;;  counter         1    0[BANK0 ] unsigned char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  4    1[COMMON] long 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3641 ;;      Params:         8       0       0       0
  3642 ;;      Locals:         0       6       0       0
  3643 ;;      Temps:          1       0       0       0
  3644 ;;      Totals:         9       6       0       0
  3645 ;;Total ram usage:       15 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    1
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_Buzz
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function ___aldiv
  3657  0309                     ___aldiv:	
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3661  0309  0020               	movlb	0	; select bank0
  3662  030A  01A1               	clrf	___aldiv@sign
  3663  030B  1FF4               	btfss	___aldiv@divisor+3,7
  3664  030C  2B1A               	goto	l426
  3665  030D  09F1               	comf	___aldiv@divisor,f
  3666  030E  09F2               	comf	___aldiv@divisor+1,f
  3667  030F  09F3               	comf	___aldiv@divisor+2,f
  3668  0310  09F4               	comf	___aldiv@divisor+3,f
  3669  0311  0AF1               	incf	___aldiv@divisor,f
  3670  0312  1903               	skipnz
  3671  0313  0AF2               	incf	___aldiv@divisor+1,f
  3672  0314  1903               	skipnz
  3673  0315  0AF3               	incf	___aldiv@divisor+2,f
  3674  0316  1903               	skipnz
  3675  0317  0AF4               	incf	___aldiv@divisor+3,f
  3676  0318  01A1               	clrf	___aldiv@sign
  3677  0319  0AA1               	incf	___aldiv@sign,f
  3678  031A                     l426:	
  3679  031A  1FF8               	btfss	___aldiv@dividend+3,7
  3680  031B  2B2B               	goto	l2262
  3681  031C  09F5               	comf	___aldiv@dividend,f
  3682  031D  09F6               	comf	___aldiv@dividend+1,f
  3683  031E  09F7               	comf	___aldiv@dividend+2,f
  3684  031F  09F8               	comf	___aldiv@dividend+3,f
  3685  0320  0AF5               	incf	___aldiv@dividend,f
  3686  0321  1903               	skipnz
  3687  0322  0AF6               	incf	___aldiv@dividend+1,f
  3688  0323  1903               	skipnz
  3689  0324  0AF7               	incf	___aldiv@dividend+2,f
  3690  0325  1903               	skipnz
  3691  0326  0AF8               	incf	___aldiv@dividend+3,f
  3692  0327  3001               	movlw	1
  3693  0328  00F9               	movwf	??___aldiv
  3694  0329  0879               	movf	??___aldiv,w
  3695  032A  06A1               	xorwf	___aldiv@sign,f
  3696  032B                     l2262:	
  3697  032B  3000               	movlw	0
  3698  032C  00A5               	movwf	___aldiv@quotient+3
  3699  032D  3000               	movlw	0
  3700  032E  00A4               	movwf	___aldiv@quotient+2
  3701  032F  3000               	movlw	0
  3702  0330  00A3               	movwf	___aldiv@quotient+1
  3703  0331  3000               	movlw	0
  3704  0332  00A2               	movwf	___aldiv@quotient
  3705  0333  0874               	movf	___aldiv@divisor+3,w
  3706  0334  0473               	iorwf	___aldiv@divisor+2,w
  3707  0335  0472               	iorwf	___aldiv@divisor+1,w
  3708  0336  0471               	iorwf	___aldiv@divisor,w
  3709  0337  1903               	skipnz
  3710  0338  2B74               	goto	l2284
  3711  0339  01A0               	clrf	___aldiv@counter
  3712  033A  0AA0               	incf	___aldiv@counter,f
  3713  033B                     l2270:	
  3714  033B  1BF4               	btfsc	___aldiv@divisor+3,7
  3715  033C  2B49               	goto	l2272
  3716  033D  3001               	movlw	1
  3717  033E                     u2535:	
  3718  033E  35F1               	lslf	___aldiv@divisor,f
  3719  033F  0DF2               	rlf	___aldiv@divisor+1,f
  3720  0340  0DF3               	rlf	___aldiv@divisor+2,f
  3721  0341  0DF4               	rlf	___aldiv@divisor+3,f
  3722  0342  0B89               	decfsz	9,f
  3723  0343  2B3E               	goto	u2535
  3724  0344  3001               	movlw	1
  3725  0345  00F9               	movwf	??___aldiv
  3726  0346  0879               	movf	??___aldiv,w
  3727  0347  07A0               	addwf	___aldiv@counter,f
  3728  0348  2B3B               	goto	l2270
  3729  0349                     l2272:	
  3730  0349  3001               	movlw	1
  3731  034A                     u2555:	
  3732  034A  35A2               	lslf	___aldiv@quotient,f
  3733  034B  0DA3               	rlf	___aldiv@quotient+1,f
  3734  034C  0DA4               	rlf	___aldiv@quotient+2,f
  3735  034D  0DA5               	rlf	___aldiv@quotient+3,f
  3736  034E  0B89               	decfsz	9,f
  3737  034F  2B4A               	goto	u2555
  3738  0350  0874               	movf	___aldiv@divisor+3,w
  3739  0351  0278               	subwf	___aldiv@dividend+3,w
  3740  0352  1D03               	skipz
  3741  0353  2B5E               	goto	u2565
  3742  0354  0873               	movf	___aldiv@divisor+2,w
  3743  0355  0277               	subwf	___aldiv@dividend+2,w
  3744  0356  1D03               	skipz
  3745  0357  2B5E               	goto	u2565
  3746  0358  0872               	movf	___aldiv@divisor+1,w
  3747  0359  0276               	subwf	___aldiv@dividend+1,w
  3748  035A  1D03               	skipz
  3749  035B  2B5E               	goto	u2565
  3750  035C  0871               	movf	___aldiv@divisor,w
  3751  035D  0275               	subwf	___aldiv@dividend,w
  3752  035E                     u2565:	
  3753  035E  1C03               	skipc
  3754  035F  2B69               	goto	l2280
  3755  0360  0871               	movf	___aldiv@divisor,w
  3756  0361  02F5               	subwf	___aldiv@dividend,f
  3757  0362  0872               	movf	___aldiv@divisor+1,w
  3758  0363  3BF6               	subwfb	___aldiv@dividend+1,f
  3759  0364  0873               	movf	___aldiv@divisor+2,w
  3760  0365  3BF7               	subwfb	___aldiv@dividend+2,f
  3761  0366  0874               	movf	___aldiv@divisor+3,w
  3762  0367  3BF8               	subwfb	___aldiv@dividend+3,f
  3763  0368  1422               	bsf	___aldiv@quotient,0
  3764  0369                     l2280:	
  3765  0369  3001               	movlw	1
  3766  036A                     u2575:	
  3767  036A  36F4               	lsrf	___aldiv@divisor+3,f
  3768  036B  0CF3               	rrf	___aldiv@divisor+2,f
  3769  036C  0CF2               	rrf	___aldiv@divisor+1,f
  3770  036D  0CF1               	rrf	___aldiv@divisor,f
  3771  036E  0B89               	decfsz	9,f
  3772  036F  2B6A               	goto	u2575
  3773  0370  3001               	movlw	1
  3774  0371  02A0               	subwf	___aldiv@counter,f
  3775  0372  1D03               	btfss	3,2
  3776  0373  2B49               	goto	l2272
  3777  0374                     l2284:	
  3778  0374  0821               	movf	___aldiv@sign,w
  3779  0375  1903               	btfsc	3,2
  3780  0376  2B82               	goto	l2288
  3781  0377  09A2               	comf	___aldiv@quotient,f
  3782  0378  09A3               	comf	___aldiv@quotient+1,f
  3783  0379  09A4               	comf	___aldiv@quotient+2,f
  3784  037A  09A5               	comf	___aldiv@quotient+3,f
  3785  037B  0AA2               	incf	___aldiv@quotient,f
  3786  037C  1903               	skipnz
  3787  037D  0AA3               	incf	___aldiv@quotient+1,f
  3788  037E  1903               	skipnz
  3789  037F  0AA4               	incf	___aldiv@quotient+2,f
  3790  0380  1903               	skipnz
  3791  0381  0AA5               	incf	___aldiv@quotient+3,f
  3792  0382                     l2288:	
  3793  0382  0825               	movf	___aldiv@quotient+3,w
  3794  0383  00F4               	movwf	?___aldiv+3
  3795  0384  0824               	movf	___aldiv@quotient+2,w
  3796  0385  00F3               	movwf	?___aldiv+2
  3797  0386  0823               	movf	___aldiv@quotient+1,w
  3798  0387  00F2               	movwf	?___aldiv+1
  3799  0388  0822               	movf	___aldiv@quotient,w
  3800  0389  00F1               	movwf	?___aldiv
  3801  038A  0008               	return
  3802  038B                     __end_of___aldiv:	
  3803                           
  3804                           	psect	text21
  3805  06B3                     __ptext21:	
  3806 ;; *************** function _tone *****************
  3807 ;; Defined at:
  3808 ;;		line 115 in file "user.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  period          2    6[BANK0 ] unsigned int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3822 ;;      Params:         0       2       0       0
  3823 ;;      Locals:         0       0       0       0
  3824 ;;      Temps:          2       0       0       0
  3825 ;;      Totals:         2       2       0       0
  3826 ;;Total ram usage:        4 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    1
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_handle_music
  3833 ;;		_Buzz
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _tone
  3839  06B3                     _tone:	
  3840                           
  3841                           ;user.c: 116: PWM3CONbits.PWM3EN = 1;
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _tone: [wreg+status,2+status,0]
  3845  06B3  003B               	movlb	27	; select bank27
  3846  06B4  17BB               	bsf	59,7	;volatile
  3847                           
  3848                           ;user.c: 117: PWM3CONbits.PWM3OE = 1;
  3849  06B5  173B               	bsf	59,6	;volatile
  3850                           
  3851                           ;user.c: 118: PWM3PR = period;
  3852  06B6  0020               	movlb	0	; select bank0
  3853  06B7  0827               	movf	tone@period+1,w
  3854  06B8  003B               	movlb	27	; select bank27
  3855  06B9  01B6               	clrf	54	;volatile
  3856  06BA  07B6               	addwf	54,f	;volatile
  3857  06BB  0020               	movlb	0	; select bank0
  3858  06BC  0826               	movf	tone@period,w
  3859  06BD  003B               	movlb	27	; select bank27
  3860  06BE  01B5               	clrf	53	;volatile
  3861  06BF  07B5               	addwf	53,f	;volatile
  3862                           
  3863                           ;user.c: 119: PWM3DC = period >> 1;
  3864  06C0  0020               	movlb	0	; select bank0
  3865  06C1  0827               	movf	tone@period+1,w
  3866  06C2  00FB               	movwf	??_tone+1
  3867  06C3  0826               	movf	tone@period,w
  3868  06C4  00FA               	movwf	??_tone
  3869  06C5  36FB               	lsrf	??_tone+1,f
  3870  06C6  0CFA               	rrf	??_tone,f
  3871  06C7  087A               	movf	??_tone,w
  3872  06C8  003B               	movlb	27	; select bank27
  3873  06C9  00B3               	movwf	51	;volatile
  3874  06CA  087B               	movf	??_tone+1,w
  3875  06CB  00B4               	movwf	52	;volatile
  3876                           
  3877                           ;user.c: 120: PWM3PH = 0x0000;
  3878  06CC  01B1               	clrf	49	;volatile
  3879  06CD  01B2               	clrf	50	;volatile
  3880                           
  3881                           ;user.c: 121: PWM3LDCONbits.PWM3LD = 1;
  3882  06CE  17BF               	bsf	63,7	;volatile
  3883  06CF  0008               	return
  3884  06D0                     __end_of_tone:	
  3885                           
  3886                           	psect	text22
  3887  071B                     __ptext22:	
  3888 ;; *************** function _tone_off *****************
  3889 ;; Defined at:
  3890 ;;		line 125 in file "user.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;		None               void
  3897 ;; Registers used:
  3898 ;;		None
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3904 ;;      Params:         0       0       0       0
  3905 ;;      Locals:         0       0       0       0
  3906 ;;      Temps:          0       0       0       0
  3907 ;;      Totals:         0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    1
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_stop_song
  3915 ;;		_Buzz
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function _tone_off
  3921  071B                     _tone_off:	
  3922                           
  3923                           ;user.c: 126: PWM3CONbits.PWM3OE = 0;
  3924                           
  3925                           ;incstack = 0
  3926                           ; Regs used in _tone_off: []
  3927  071B  003B               	movlb	27	; select bank27
  3928  071C  133B               	bcf	59,6	;volatile
  3929  071D  0008               	return
  3930  071E                     __end_of_tone_off:	
  3931                           
  3932                           	psect	text23
  3933  0442                     __ptext23:	
  3934 ;; *************** function _Save *****************
  3935 ;; Defined at:
  3936 ;;		line 180 in file "user.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  address         2    1[COMMON] unsigned int 
  3939 ;;  ptr             1    3[COMMON] PTR unsigned int 
  3940 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  3941 ;;  data_length     1    4[COMMON] unsigned char 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  i               1    6[COMMON] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;		None               void
  3946 ;; Registers used:
  3947 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3953 ;;      Params:         4       0       0       0
  3954 ;;      Locals:         1       0       0       0
  3955 ;;      Temps:          1       0       0       0
  3956 ;;      Totals:         6       0       0       0
  3957 ;;Total ram usage:        6 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_hit_by
  3964 ;;		_control_transfer
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           
  3969                           ;psect for function _Save
  3970  0442                     _Save:	
  3971                           
  3972                           ;user.c: 182: INTCONbits.GIE = 0;
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _Save: [wreg+fsr1l+fsr1h+status,2+status,0]
  3976  0442  138B               	bcf	11,7	;volatile
  3977                           
  3978                           ;user.c: 183: PMADR = address;
  3979  0443  0872               	movf	Save@address+1,w
  3980  0444  0023               	movlb	3	; select bank3
  3981  0445  0192               	clrf	18	;volatile
  3982  0446  0792               	addwf	18,f	;volatile
  3983  0447  0871               	movf	Save@address,w
  3984  0448  0191               	clrf	17	;volatile
  3985  0449  0791               	addwf	17,f	;volatile
  3986                           
  3987                           ;user.c: 184: PMCON1bits.CFGS = 0;
  3988  044A  1315               	bcf	21,6	;volatile
  3989                           
  3990                           ;user.c: 185: PMCON1bits.FREE = 1;
  3991  044B  1615               	bsf	21,4	;volatile
  3992                           
  3993                           ;user.c: 186: PMCON1bits.WREN = 1;
  3994  044C  1515               	bsf	21,2	;volatile
  3995                           
  3996                           ;user.c: 187: PMCON2 = 0x55;
  3997  044D  3055               	movlw	85
  3998  044E  0096               	movwf	22	;volatile
  3999                           
  4000                           ;user.c: 188: PMCON2 = 0xAA;
  4001  044F  30AA               	movlw	170
  4002  0450  0096               	movwf	22	;volatile
  4003                           
  4004                           ;user.c: 189: PMCON1bits.WR = 1;
  4005  0451  1495               	bsf	21,1	;volatile
  4006                           
  4007                           ;user.c: 190: _nop();
  4008  0452  0000               	nop
  4009                           
  4010                           ;user.c: 191: _nop();
  4011  0453  0000               	nop
  4012                           
  4013                           ;user.c: 192: PMCON1bits.WREN = 0;
  4014  0454  0023               	movlb	3	; select bank3
  4015  0455  1115               	bcf	21,2	;volatile
  4016                           
  4017                           ;user.c: 194: PMADR = address;
  4018  0456  0872               	movf	Save@address+1,w
  4019  0457  0192               	clrf	18	;volatile
  4020  0458  0792               	addwf	18,f	;volatile
  4021  0459  0871               	movf	Save@address,w
  4022  045A  0191               	clrf	17	;volatile
  4023  045B  0791               	addwf	17,f	;volatile
  4024                           
  4025                           ;user.c: 195: PMCON1bits.CFGS = 0;
  4026  045C  1315               	bcf	21,6	;volatile
  4027                           
  4028                           ;user.c: 196: PMCON1bits.FREE = 0;
  4029  045D  1215               	bcf	21,4	;volatile
  4030                           
  4031                           ;user.c: 197: PMCON1bits.WREN = 1;
  4032  045E  1515               	bsf	21,2	;volatile
  4033                           
  4034                           ;user.c: 198: PMCON1bits.LWLO = 1;
  4035  045F  1695               	bsf	21,5	;volatile
  4036                           
  4037                           ;user.c: 200: for (uint8_t i=1; i<=data_length; i++){
  4038  0460  01F6               	clrf	Save@i
  4039  0461  0AF6               	incf	Save@i,f
  4040  0462                     l192:	
  4041  0462  0876               	movf	Save@i,w
  4042  0463  0274               	subwf	Save@data_length,w
  4043  0464  1C03               	btfss	3,0
  4044  0465  2C86               	goto	l195
  4045                           
  4046                           ;user.c: 201: PMDAT = *ptr++;
  4047  0466  0873               	movf	Save@ptr,w
  4048  0467  0086               	movwf	6
  4049  0468  0187               	clrf	7
  4050  0469  3F40               	moviw [0]fsr1
  4051  046A  0093               	movwf	19	;volatile
  4052  046B  3F41               	moviw [1]fsr1
  4053  046C  0094               	movwf	20	;volatile
  4054  046D  3002               	movlw	2
  4055  046E  00F5               	movwf	??_Save
  4056  046F  0875               	movf	??_Save,w
  4057  0470  07F3               	addwf	Save@ptr,f
  4058                           
  4059                           ;user.c: 202: if(i == data_length) PMCON1bits.LWLO = 0;
  4060  0471  0876               	movf	Save@i,w
  4061  0472  0674               	xorwf	Save@data_length,w
  4062  0473  1903               	btfsc	3,2
  4063  0474  1295               	bcf	21,5	;volatile
  4064                           
  4065                           ;user.c: 203: PMCON2 = 0x55;
  4066  0475  3055               	movlw	85
  4067  0476  0096               	movwf	22	;volatile
  4068                           
  4069                           ;user.c: 204: PMCON2 = 0xAA;
  4070  0477  30AA               	movlw	170
  4071  0478  0096               	movwf	22	;volatile
  4072                           
  4073                           ;user.c: 205: PMCON1bits.WR = 1;
  4074  0479  1495               	bsf	21,1	;volatile
  4075                           
  4076                           ;user.c: 206: _nop();
  4077  047A  0000               	nop
  4078                           
  4079                           ;user.c: 207: _nop();
  4080  047B  0000               	nop
  4081                           
  4082                           ;user.c: 208: PMADRL++;
  4083  047C  3001               	movlw	1
  4084  047D  00F5               	movwf	??_Save
  4085  047E  0875               	movf	??_Save,w
  4086  047F  0023               	movlb	3	; select bank3
  4087  0480  0791               	addwf	17,f	;volatile
  4088  0481  3001               	movlw	1
  4089  0482  00F5               	movwf	??_Save
  4090  0483  0875               	movf	??_Save,w
  4091  0484  07F6               	addwf	Save@i,f
  4092  0485  2C62               	goto	l192
  4093  0486                     l195:	
  4094                           
  4095                           ;user.c: 209: }
  4096                           ;user.c: 210: PMCON1bits.WREN = 0;
  4097  0486  1115               	bcf	21,2	;volatile
  4098                           
  4099                           ;user.c: 211: INTCONbits.GIE = 1;
  4100  0487  178B               	bsf	11,7	;volatile
  4101  0488  0008               	return
  4102  0489                     __end_of_Save:	
  4103                           
  4104                           	psect	text24
  4105  03EE                     __ptext24:	
  4106 ;; *************** function _add_to_hitlist *****************
  4107 ;; Defined at:
  4108 ;;		line 311 in file "user.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  gun             1    wreg     unsigned char 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  gun             1    5[COMMON] unsigned char 
  4113 ;;  i               1    8[COMMON] unsigned char 
  4114 ;;  gun16           2    6[COMMON] unsigned int 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;		None               void
  4117 ;; Registers used:
  4118 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4124 ;;      Params:         0       0       0       0
  4125 ;;      Locals:         4       0       0       0
  4126 ;;      Temps:          4       0       0       0
  4127 ;;      Totals:         8       0       0       0
  4128 ;;Total ram usage:        8 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    1
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_hit_by
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function _add_to_hitlist
  4140  03EE                     _add_to_hitlist:	
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _add_to_hitlist: [wreg+fsr1l+fsr1h+status,2+status,0]
  4144                           ;add_to_hitlist@gun stored from wreg
  4145  03EE  00F5               	movwf	add_to_hitlist@gun
  4146                           
  4147                           ;user.c: 312: uint16_t gun16 = gun & 0x7F;
  4148  03EF  0875               	movf	add_to_hitlist@gun,w
  4149  03F0  397F               	andlw	127
  4150  03F1  00F1               	movwf	??_add_to_hitlist
  4151  03F2  01F2               	clrf	??_add_to_hitlist+1
  4152  03F3  0871               	movf	??_add_to_hitlist,w
  4153  03F4  00F6               	movwf	add_to_hitlist@gun16
  4154  03F5  0872               	movf	??_add_to_hitlist+1,w
  4155  03F6  00F7               	movwf	add_to_hitlist@gun16+1
  4156                           
  4157                           ;user.c: 313: for(uint8_t i=0;i<(sizeof(hitlist_t)/2);i++)
  4158  03F7  01F8               	clrf	add_to_hitlist@i
  4159  03F8                     L1:	
  4160  03F8  3010               	movlw	16
  4161  03F9  0278               	subwf	add_to_hitlist@i,w
  4162  03FA  1803               	btfsc	3,0
  4163  03FB  0008               	return
  4164                           
  4165                           ;user.c: 314: {
  4166                           ;user.c: 315: if(!(hitlist[i] & 0x007F))
  4167  03FC  3578               	lslf	add_to_hitlist@i,w
  4168  03FD  3EA0               	addlw	_hitlist& (0+255)
  4169  03FE  0086               	movwf	6
  4170  03FF  0187               	clrf	7
  4171  0400  3F40               	moviw [0]fsr1
  4172  0401  00F1               	movwf	??_add_to_hitlist
  4173  0402  3F41               	moviw [1]fsr1
  4174  0403  00F2               	movwf	??_add_to_hitlist+1
  4175  0404  307F               	movlw	127
  4176  0405  0571               	andwf	??_add_to_hitlist,w
  4177  0406  00F3               	movwf	??_add_to_hitlist+2
  4178  0407  3000               	movlw	0
  4179  0408  0572               	andwf	??_add_to_hitlist+1,w
  4180  0409  00F4               	movwf	??_add_to_hitlist+3
  4181  040A  0874               	movf	??_add_to_hitlist+3,w
  4182  040B  0473               	iorwf	??_add_to_hitlist+2,w
  4183  040C  1D03               	skipz
  4184  040D  2C18               	goto	l1712
  4185                           
  4186                           ;user.c: 316: {
  4187                           ;user.c: 317: hitlist[i] |= gun16;
  4188  040E  3578               	lslf	add_to_hitlist@i,w
  4189  040F  3EA0               	addlw	_hitlist& (0+255)
  4190  0410  0086               	movwf	6
  4191  0411  0187               	clrf	7
  4192  0412  0876               	movf	add_to_hitlist@gun16,w
  4193  0413  0481               	iorwf	1,f
  4194  0414  3141               	addfsr 1,1
  4195  0415  0877               	movf	add_to_hitlist@gun16+1,w
  4196  0416  0481               	iorwf	1,f
  4197                           
  4198                           ;user.c: 318: return;
  4199  0417  0008               	return
  4200  0418                     l1712:	
  4201                           
  4202                           ;user.c: 319: }
  4203                           ;user.c: 320: if(!(hitlist[i] & 0x3F80))
  4204  0418  3578               	lslf	add_to_hitlist@i,w
  4205  0419  3EA0               	addlw	_hitlist& (0+255)
  4206  041A  0086               	movwf	6
  4207  041B  0187               	clrf	7
  4208  041C  3F40               	moviw [0]fsr1
  4209  041D  00F1               	movwf	??_add_to_hitlist
  4210  041E  3F41               	moviw [1]fsr1
  4211  041F  00F2               	movwf	??_add_to_hitlist+1
  4212  0420  3080               	movlw	128
  4213  0421  0571               	andwf	??_add_to_hitlist,w
  4214  0422  00F3               	movwf	??_add_to_hitlist+2
  4215  0423  303F               	movlw	63
  4216  0424  0572               	andwf	??_add_to_hitlist+1,w
  4217  0425  00F4               	movwf	??_add_to_hitlist+3
  4218  0426  0874               	movf	??_add_to_hitlist+3,w
  4219  0427  0473               	iorwf	??_add_to_hitlist+2,w
  4220  0428  1D03               	skipz
  4221  0429  2C3D               	goto	l1718
  4222                           
  4223                           ;user.c: 321: {
  4224                           ;user.c: 322: hitlist[i] |= gun16 << 7;
  4225  042A  0877               	movf	add_to_hitlist@gun16+1,w
  4226  042B  00F2               	movwf	??_add_to_hitlist+1
  4227  042C  0876               	movf	add_to_hitlist@gun16,w
  4228  042D  00F1               	movwf	??_add_to_hitlist
  4229  042E  3007               	movlw	7
  4230  042F                     u1525:	
  4231  042F  35F1               	lslf	??_add_to_hitlist,f
  4232  0430  0DF2               	rlf	??_add_to_hitlist+1,f
  4233  0431  0B89               	decfsz	9,f
  4234  0432  2C2F               	goto	u1525
  4235  0433  3578               	lslf	add_to_hitlist@i,w
  4236  0434  3EA0               	addlw	_hitlist& (0+255)
  4237  0435  0086               	movwf	6
  4238  0436  0187               	clrf	7
  4239  0437  0871               	movf	??_add_to_hitlist,w
  4240  0438  0481               	iorwf	1,f
  4241  0439  3141               	addfsr 1,1
  4242  043A  0872               	movf	??_add_to_hitlist+1,w
  4243  043B  0481               	iorwf	1,f
  4244                           
  4245                           ;user.c: 323: return;
  4246  043C  0008               	return
  4247  043D                     l1718:	
  4248  043D  3001               	movlw	1
  4249  043E  00F1               	movwf	??_add_to_hitlist
  4250  043F  0871               	movf	??_add_to_hitlist,w
  4251  0440  07F8               	addwf	add_to_hitlist@i,f
  4252  0441  2BF8               	goto	L1
  4253  0442                     __end_of_add_to_hitlist:	
  4254                           
  4255                           	psect	text25
  4256  0638                     __ptext25:	
  4257 ;; *************** function _Setup *****************
  4258 ;; Defined at:
  4259 ;;		line 21 in file "user.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;		None               void
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4273 ;;      Params:         0       0       0       0
  4274 ;;      Locals:         0       0       0       0
  4275 ;;      Temps:          1       0       0       0
  4276 ;;      Totals:         1       0       0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    1
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _Setup
  4289  0638                     _Setup:	
  4290                           
  4291                           ;user.c: 22: OSCCON = 0b01111010;
  4292                           
  4293                           ;incstack = 0
  4294                           ; Regs used in _Setup: [wreg+status,2+status,0]
  4295  0638  307A               	movlw	122
  4296  0639  0021               	movlb	1	; select bank1
  4297  063A  0099               	movwf	25	;volatile
  4298                           
  4299                           ;user.c: 24: ANSELA = 0x00;
  4300  063B  0023               	movlb	3	; select bank3
  4301  063C  018C               	clrf	12	;volatile
  4302                           
  4303                           ;user.c: 25: TRISAbits.TRISA5 = 0;
  4304  063D  0021               	movlb	1	; select bank1
  4305  063E  128C               	bcf	12,5	;volatile
  4306                           
  4307                           ;user.c: 26: TRISAbits.TRISA2 = 0;
  4308  063F  110C               	bcf	12,2	;volatile
  4309                           
  4310                           ;user.c: 27: TRISAbits.TRISA0 = 0;
  4311  0640  100C               	bcf	12,0	;volatile
  4312                           
  4313                           ;user.c: 28: PORTAbits.RA5 = 1;
  4314  0641  0020               	movlb	0	; select bank0
  4315  0642  168C               	bsf	12,5	;volatile
  4316                           
  4317                           ;user.c: 31: ANSELAbits.ANSA4 = 1;
  4318  0643  0023               	movlb	3	; select bank3
  4319  0644  160C               	bsf	12,4	;volatile
  4320                           
  4321                           ;user.c: 32: ADCON1 |= 0b00110000;
  4322  0645  3030               	movlw	48
  4323  0646  00F1               	movwf	??_Setup
  4324  0647  0871               	movf	??_Setup,w
  4325  0648  0021               	movlb	1	; select bank1
  4326  0649  049E               	iorwf	30,f	;volatile
  4327                           
  4328                           ;user.c: 35: SPBRGL = 103;
  4329  064A  3067               	movlw	103
  4330  064B  0023               	movlb	3	; select bank3
  4331  064C  009B               	movwf	27	;volatile
  4332                           
  4333                           ;user.c: 36: TXSTAbits.SYNC = 0;
  4334  064D  121E               	bcf	30,4	;volatile
  4335                           
  4336                           ;user.c: 37: RCSTAbits.SPEN = 1;
  4337  064E  179D               	bsf	29,7	;volatile
  4338                           
  4339                           ;user.c: 38: BAUDCONbits.SCKP = 1;
  4340  064F  161F               	bsf	31,4	;volatile
  4341                           
  4342                           ;user.c: 39: TXSTAbits.TXEN = 1;
  4343  0650  169E               	bsf	30,5	;volatile
  4344                           
  4345                           ;user.c: 42: RCSTAbits.CREN = 1;
  4346  0651  161D               	bsf	29,4	;volatile
  4347                           
  4348                           ;user.c: 45: INTCONbits.GIE = 1;
  4349  0652  178B               	bsf	11,7	;volatile
  4350                           
  4351                           ;user.c: 48: OPTION_REGbits.TMR0CS = 0;
  4352  0653  0021               	movlb	1	; select bank1
  4353  0654  1295               	bcf	21,5	;volatile
  4354                           
  4355                           ;user.c: 51: T1CONbits.T1CKPS=3;
  4356  0655  3030               	movlw	48
  4357  0656  0020               	movlb	0	; select bank0
  4358  0657  0498               	iorwf	24,f	;volatile
  4359  0658  0008               	return
  4360  0659                     __end_of_Setup:	
  4361                           
  4362                           	psect	text26
  4363  0489                     __ptext26:	
  4364 ;; *************** function _LoadFromFlash *****************
  4365 ;; Defined at:
  4366 ;;		line 29 in file "main.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4380 ;;      Params:         0       0       0       0
  4381 ;;      Locals:         0       0       0       0
  4382 ;;      Temps:          2       0       0       0
  4383 ;;      Totals:         2       0       0       0
  4384 ;;Total ram usage:        2 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    2
  4387 ;; This function calls:
  4388 ;;		_Load
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _LoadFromFlash
  4396  0489                     _LoadFromFlash:	
  4397                           
  4398                           ;main.c: 30: Load(0x7D0,(uint16_t*)&config,(sizeof(config_t)/2));
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _LoadFromFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4402  0489  30D0               	movlw	208
  4403  048A  00F1               	movwf	?_Load
  4404  048B  3007               	movlw	7
  4405  048C  00F2               	movwf	?_Load+1
  4406  048D  305B               	movlw	_config& (0+255)
  4407  048E  00F7               	movwf	??_LoadFromFlash
  4408  048F  0877               	movf	??_LoadFromFlash,w
  4409  0490  00F3               	movwf	?_Load+2
  4410  0491  3008               	movlw	8
  4411  0492  00F8               	movwf	??_LoadFromFlash+1
  4412  0493  0878               	movf	??_LoadFromFlash+1,w
  4413  0494  00F4               	movwf	?_Load+3
  4414  0495  25CE               	fcall	_Load
  4415                           
  4416                           ;main.c: 31: if(config.id == 0x3FFF)
  4417  0496  303F               	movlw	63
  4418  0497  0020               	movlb	0	; select bank0
  4419  0498  065C               	xorwf	_config+1,w
  4420  0499  1D03               	skipz
  4421  049A  2C9D               	goto	u1315
  4422  049B  30FF               	movlw	255
  4423  049C  065B               	xorwf	_config,w
  4424  049D                     u1315:	
  4425  049D  1D03               	skipz
  4426  049E  2CBD               	goto	l1580
  4427                           
  4428                           ;main.c: 32: {
  4429                           ;main.c: 33: config.health = 16;
  4430  049F  3010               	movlw	16
  4431  04A0  00DF               	movwf	_config+4
  4432  04A1  3000               	movlw	0
  4433  04A2  00E0               	movwf	_config+5
  4434                           
  4435                           ;main.c: 34: config.id = 0x80;
  4436  04A3  3080               	movlw	128
  4437  04A4  00DB               	movwf	_config
  4438  04A5  3000               	movlw	0
  4439  04A6  00DC               	movwf	_config+1
  4440                           
  4441                           ;main.c: 35: config.power = 3;
  4442  04A7  3003               	movlw	3
  4443  04A8  00DD               	movwf	_config+2
  4444  04A9  3000               	movlw	0
  4445  04AA  00DE               	movwf	_config+3
  4446                           
  4447                           ;main.c: 36: config.respawn_timer = 10;
  4448  04AB  300A               	movlw	10
  4449  04AC  00E3               	movwf	_config+8
  4450  04AD  3000               	movlw	0
  4451  04AE  00E4               	movwf	_config+9
  4452                           
  4453                           ;main.c: 37: config.fire_threshold = 500;
  4454  04AF  30F4               	movlw	244
  4455  04B0  00E5               	movwf	_config+10
  4456  04B1  3001               	movlw	1
  4457  04B2  00E6               	movwf	_config+11
  4458                           
  4459                           ;main.c: 39: config.fire_holdoff = 0;
  4460  04B3  01E9               	clrf	_config+14
  4461  04B4  01EA               	clrf	_config+15
  4462                           
  4463                           ;main.c: 40: config.shield = 1;
  4464  04B5  3001               	movlw	1
  4465  04B6  00E1               	movwf	_config+6
  4466  04B7  3000               	movlw	0
  4467  04B8  00E2               	movwf	_config+7
  4468                           
  4469                           ;main.c: 41: config.fire_cheating = 2000;
  4470  04B9  30D0               	movlw	208
  4471  04BA  00E7               	movwf	_config+12
  4472  04BB  3007               	movlw	7
  4473  04BC  00E8               	movwf	_config+13
  4474  04BD                     l1580:	
  4475                           
  4476                           ;main.c: 44: }
  4477                           ;main.c: 45: Load(0x7E0,(uint16_t*)&hitlist,(sizeof(hitlist_t)/2));
  4478  04BD  30E0               	movlw	224
  4479  04BE  00F1               	movwf	?_Load
  4480  04BF  3007               	movlw	7
  4481  04C0  00F2               	movwf	?_Load+1
  4482  04C1  30A0               	movlw	_hitlist& (0+255)
  4483  04C2  00F7               	movwf	??_LoadFromFlash
  4484  04C3  0877               	movf	??_LoadFromFlash,w
  4485  04C4  00F3               	movwf	?_Load+2
  4486  04C5  3010               	movlw	16
  4487  04C6  00F8               	movwf	??_LoadFromFlash+1
  4488  04C7  0878               	movf	??_LoadFromFlash+1,w
  4489  04C8  00F4               	movwf	?_Load+3
  4490  04C9  25CE               	fcall	_Load
  4491  04CA  0008               	return
  4492  04CB                     __end_of_LoadFromFlash:	
  4493                           
  4494                           	psect	text27
  4495  05CE                     __ptext27:	
  4496 ;; *************** function _Load *****************
  4497 ;; Defined at:
  4498 ;;		line 168 in file "user.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  address         2    1[COMMON] unsigned int 
  4501 ;;  ptr             1    3[COMMON] PTR unsigned int 
  4502 ;;		 -> control_transfer@data(32), hitlist(32), config(16), 
  4503 ;;  data_length     1    4[COMMON] unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  i               1    6[COMMON] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4515 ;;      Params:         4       0       0       0
  4516 ;;      Locals:         1       0       0       0
  4517 ;;      Temps:          1       0       0       0
  4518 ;;      Totals:         6       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    1
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_LoadFromFlash
  4526 ;;		_control_transfer
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _Load
  4532  05CE                     _Load:	
  4533                           
  4534                           ;user.c: 169: PMCON1bits.CFGS = 0;
  4535                           
  4536                           ;incstack = 0
  4537                           ; Regs used in _Load: [wreg+fsr1l+fsr1h+status,2+status,0]
  4538  05CE  0023               	movlb	3	; select bank3
  4539  05CF  1315               	bcf	21,6	;volatile
  4540                           
  4541                           ;user.c: 170: PMADR = address;
  4542  05D0  0872               	movf	Load@address+1,w
  4543  05D1  0192               	clrf	18	;volatile
  4544  05D2  0792               	addwf	18,f	;volatile
  4545  05D3  0871               	movf	Load@address,w
  4546  05D4  0191               	clrf	17	;volatile
  4547  05D5  0791               	addwf	17,f	;volatile
  4548                           
  4549                           ;user.c: 171: for (uint8_t i=0; i<data_length; i++){
  4550  05D6  01F6               	clrf	Load@i
  4551  05D7                     l1596:	
  4552  05D7  0874               	movf	Load@data_length,w
  4553  05D8  0276               	subwf	Load@i,w
  4554  05D9  1803               	btfsc	3,0
  4555  05DA  0008               	return
  4556                           
  4557                           ;user.c: 172: PMCON1bits.RD = 1;
  4558  05DB  1415               	bsf	21,0	;volatile
  4559                           
  4560                           ;user.c: 173: _nop();
  4561  05DC  0000               	nop
  4562                           
  4563                           ;user.c: 174: _nop();
  4564  05DD  0000               	nop
  4565                           
  4566                           ;user.c: 175: *ptr++ = PMDAT;
  4567  05DE  0873               	movf	Load@ptr,w
  4568  05DF  0086               	movwf	6
  4569  05E0  0187               	clrf	7
  4570  05E1  0023               	movlb	3	; select bank3
  4571  05E2  0813               	movf	19,w	;volatile
  4572  05E3  3FC0               	movwi [0]fsr1
  4573  05E4  0814               	movf	20,w	;volatile
  4574  05E5  3FC1               	movwi [1]fsr1
  4575  05E6  3002               	movlw	2
  4576  05E7  00F5               	movwf	??_Load
  4577  05E8  0875               	movf	??_Load,w
  4578  05E9  07F3               	addwf	Load@ptr,f
  4579                           
  4580                           ;user.c: 176: PMADR ++;
  4581  05EA  3001               	movlw	1
  4582  05EB  0791               	addwf	17,f	;volatile
  4583  05EC  3000               	movlw	0
  4584  05ED  3D92               	addwfc	18,f	;volatile
  4585  05EE  3001               	movlw	1
  4586  05EF  00F5               	movwf	??_Load
  4587  05F0  0875               	movf	??_Load,w
  4588  05F1  07F6               	addwf	Load@i,f
  4589  05F2  2DD7               	goto	l1596
  4590  05F3                     __end_of_Load:	
  4591                           
  4592                           	psect	intentry
  4593  0004                     __pintentry:	
  4594 ;; *************** function _High_Priority_Interrupt *****************
  4595 ;; Defined at:
  4596 ;;		line 286 in file "user.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;		None               void
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4610 ;;      Params:         0       0       0       0
  4611 ;;      Locals:         0       0       0       0
  4612 ;;      Temps:          1       0       0       0
  4613 ;;      Totals:         1       0       0       0
  4614 ;;Total ram usage:        1 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		Interrupt level 1
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623  0004                     _High_Priority_Interrupt:	
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _High_Priority_Interrupt: [wreg+status,2+status,0]
  4627  0004  3180               	pagesel	$
  4628  0005  0020               	movlb	0	; select bank0
  4629  0006  087F               	movf	127,w
  4630  0007  00F0               	movwf	??_High_Priority_Interrupt
  4631                           
  4632                           ;user.c: 287: if(INTCONbits.TMR0IF)
  4633  0008  1D0B               	btfss	11,2	;volatile
  4634  0009  2812               	goto	i1l222
  4635  000A  0022               	banksel	280	;# 
  4636  000B  0818               	movf	24,w	;# 
  4637  000C  3A20               	xorlw	32	;# 
  4638  000D  0098               	movwf	24	;# 
  4639                           
  4640                           ;user.c: 294: TMR0 -= 50;
  4641  000E  3032               	movlw	50
  4642  000F  0020               	movlb	0	; select bank0
  4643  0010  0295               	subwf	21,f	;volatile
  4644                           
  4645                           ;user.c: 295: INTCONbits.TMR0IF = 0;
  4646  0011  110B               	bcf	11,2	;volatile
  4647  0012                     i1l222:	
  4648  0012  0870               	movf	??_High_Priority_Interrupt,w
  4649  0013  00FF               	movwf	127
  4650  0014  0009               	retfie
  4651  0015                     __end_of_High_Priority_Interrupt:	
  4652  007E                     btemp	set	126	;btemp
  4653  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     43      77
    BANK1            80      0      64
    BANK2            80      0       0

Pointer List with Targets:

    ?___aldiv	long  size(1) Largest target is 0

    ?_ADC_read	unsigned int  size(1) Largest target is 0

    control_transfer@dptr	PTR unsigned char  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), 

    GET_CHAR_HELPER@val	PTR unsigned char  size(1) Largest target is 1
		 -> _y(BANK0[1]), _x(BANK0[1]), 

    Save@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    Load@ptr	PTR unsigned int  size(1) Largest target is 32
		 -> control_transfer@data(BANK0[32]), hitlist(BANK1[32]), config(BANK0[16]), 

    play_song@song	PTR unsigned int  size(1) Largest target is 32
		 -> fire_song(BANK1[32]), 

    cur_song	PTR unsigned int  size(1) Largest target is 32
		 -> NULL(NULL[0]), fire_song(BANK1[32]), 


Critical Paths under _main in COMMON

    _handle_music->_tone
    _handle_fire->_play_song
    _handle_serial->_hit_by
    _control_transfer->_Load
    _control_transfer->_Save
    _SEND_EOF->_SEND_DATA_BYTE
    _SEND_SOF->_SEND_DATA_BYTE
    _SEND_DATA_BYTE->_Send_Byte
    _Buzz->_tone
    _tone->___aldiv
    _LoadFromFlash->_Load

Critical Paths under _High_Priority_Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handle_serial
    _handle_music->_tone
    _handle_serial->_control_transfer
    _hit_by->_Buzz
    _Buzz->_tone
    _tone->___aldiv

Critical Paths under _High_Priority_Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _High_Priority_Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _High_Priority_Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2659
                      _LoadFromFlash
                              _Setup
                      _handle_serial
                        _handle_fire
                       _handle_music
 ---------------------------------------------------------------------------------
 (1) _handle_music                                         2     2      0      44
                                              8 BANK0      2     2      0
                          _stop_song
                               _tone
 ---------------------------------------------------------------------------------
 (1) _handle_fire                                          4     4      0     155
                                              8 COMMON     4     4      0
                           _ADC_read
                             _LED_on
                            _LED_off
                          _play_song
                          _stop_song
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _stop_song                                            0     0      0       0
                           _tone_off
 ---------------------------------------------------------------------------------
 (2) _play_song                                            7     3      4      88
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LED_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LED_on                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_read                                             4     2      2       0
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _handle_serial                                        3     3      0    2369
                                             40 BANK0      3     3      0
                             _hit_by
                   _control_transfer
 ---------------------------------------------------------------------------------
 (2) _control_transfer                                    42    42      0    1288
                                              7 COMMON     2     2      0
                                              0 BANK0     40    40      0
                               _Load
                               _Save
                    _GET_CHAR_HELPER
                     _SEND_DATA_BYTE
                           _SEND_SOF
                           _SEND_EOF
 ---------------------------------------------------------------------------------
 (3) _SEND_EOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (3) _SEND_SOF                                             1     1      0     110
                                              5 COMMON     1     1      0
                          _Send_Byte
                     _SEND_DATA_BYTE
 ---------------------------------------------------------------------------------
 (4) _SEND_DATA_BYTE                                       3     3      0      88
                                              2 COMMON     3     3      0
                          _Send_Byte
 ---------------------------------------------------------------------------------
 (2) _Send_Byte                                            1     1      0      22
                                              1 COMMON     1     1      0
                    _Modulate_Serial
                 _Disable_Modulation
 ---------------------------------------------------------------------------------
 (3) _Disable_Modulation                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Modulate_Serial                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GET_CHAR_HELPER                                      2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _hit_by                                               3     3      0     948
                                             12 COMMON     1     1      0
                                             16 BANK0      2     2      0
                     _add_to_hitlist
                               _Save
                               _Buzz
                 _get_hitlist_length
 ---------------------------------------------------------------------------------
 (3) _get_hitlist_length                                   5     5      0     156
                                              1 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _Buzz                                                 8     4      4     412
                                              8 BANK0      8     4      4
                           _tone_off
                               _tone
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     300
                                              1 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _tone                                                 4     2      2      44
                                             10 COMMON     2     2      0
                                              6 BANK0      2     0      2
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _tone_off                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Save                                                 6     2      4     157
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _add_to_hitlist                                       8     8      0     201
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LoadFromFlash                                        2     2      0      91
                                              7 COMMON     2     2      0
                               _Load
 ---------------------------------------------------------------------------------
 (3) _Load                                                 6     2      4      91
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _High_Priority_Interrupt                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LoadFromFlash
     _Load
   _Setup
   _handle_serial
     _hit_by
       _add_to_hitlist
       _Save
       _Buzz
         _tone_off
         _tone
           ___aldiv (ARG)
         ___aldiv
       _get_hitlist_length
     _control_transfer
       _Load
       _Save
       _GET_CHAR_HELPER
       _SEND_DATA_BYTE
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
       _SEND_SOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
       _SEND_EOF
         _Send_Byte
           _Modulate_Serial
           _Disable_Modulation
         _SEND_DATA_BYTE
           _Send_Byte
             _Modulate_Serial
             _Disable_Modulation
   _handle_fire
     _ADC_read
     _LED_on
     _LED_off
     _play_song
     _stop_song
       _tone_off
     _Send_Byte
       _Modulate_Serial
       _Disable_Modulation
   _handle_music
     _stop_song
       _tone_off
     _tone
       ___aldiv (ARG)

 _High_Priority_Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       6       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      9A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      40       8       80.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      A0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Aug 18 23:18:13 2014

     __size_of_get_hitlist_length 0038                       __CFG_CP$OFF 0000                                __i 004B  
                              __x 006B                                __y 006C                     _LoadFromFlash 0489  
                             l134 0686                               l171 06D7                               l165 0559  
                             l192 0462                               l265 069A                               l426 031A  
                             l195 0486                               l378 0308                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_LVP$OFF 0000                              l2206 0289  
                            l2142 01FA                              l2134 01E8                              l2062 014E  
                     Load@address 0071                              l2312 02EB                              l2240 02E5  
                            l2144 01FC                   __end_of_LED_off 0718                              l2242 02F3  
                            l2234 02C9                              l1602 0708                              l2236 02D7  
                            l2270 033B                              l2262 032B                              l2246 02F8  
                            l1712 0418                              l2280 0369                              l2272 0349  
                            l1800 0534                              l2184 0253                              l1616 04DA  
                            l1650 03C0                              l1580 04BD                              l2284 0374  
                            l1804 053C                              l1660 03E4                              l1718 043D  
                            l1646 03B0                              l1662 03E6                              l2288 0382  
                            l1904 06A9                              l1656 03DB                              l1690 05CB  
                            l1596 05D7                              l1780 0570                              l1688 05CA  
                            l1794 051F                              l1970 0082                              l1788 050B  
                            l1998 00BA                              u2005 0116                              u1315 049D  
                            u1405 03A1                              u1415 03A9                              u2145 018B  
                            u1435 03BE                              u1525 042F                              u2405 0269  
                            u1365 04E8                              u2095 0164                              u2345 0239  
                            u1385 04FF                              u1625 068D                              u2195 01B2  
                            u1715 0046                              u1395 0399                              u1565 055F  
                            u1485 0597                              u1725 005C                              u2535 033E  
                            u2295 0212                              u2607 0681                              u1665 0620  
                            u2617 06F0                              u2465 029F                              u1905 00D0  
                            u1825 0098                              u2555 034A                              u2627 06E2  
                            u2565 035E                              u2637 062B                              u2575 036A  
                            u2647 0632                              u1775 0074                              u2657 0565  
                            u1955 00F3              control_transfer@data 0020                              _TMR0 0015  
                            _TMR1 0016              control_transfer@page 0045              control_transfer@dptr 0043  
                            _Load 05CE                              _Buzz 053E                      __CFG_WRT$OFF 0000  
                            _Save 0442                              _main 0706                     Send_Byte@data 0071  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              _tone 06B3                              indf1 0001  
                            fsr1l 0006                              btemp 007E                     __CFG_BOREN$ON 0000  
                            start 0015                  __end_of_ADC_read 0696                        Buzz@dur_ms 002A  
               ??_GET_CHAR_HELPER 0071                     __CFG_MCLRE$ON 0000                    ?_LoadFromFlash 0070  
                           ?_Load 0071                             ?_Buzz 0028                             ?_Save 0071  
                 __end_of___aldiv 038B                             ?_main 0070                             _ADRES 009B  
                   __CFG_WDTE$OFF 0000  __size_of_High_Priority_Interrupt 0011                             ?_tone 0026  
                           i1l222 0012                             _PMADR 0191                             _PMDAT 0193  
                           _RCREG 0199                  __end_of_SEND_EOF 06F3                  __end_of_SEND_SOF 06E9  
                           Load@i 0076                             _TXREG 019A                             Buzz@i 002E  
                           Save@i 0076                             _Setup 0638                   add_to_hitlist@i 0078  
                           status 0003                             wtemp0 007E          __end_of_control_transfer 0309  
                 __initialization 0016                      __end_of_Load 05F3                      __end_of_Buzz 0572  
                    __end_of_Save 0489                      __end_of_main 070C                      __end_of_tone 06D0  
                          DACCON0 0118                            ??_Load 0075                            ??_Buzz 002C  
                          ??_Save 0075                            ??_main 007D                            ??_tone 007A  
            __end_of_handle_music 05CE                    __CFG_PLLEN$OFF 0000                         ??_LED_off 0071  
                          ?_Setup 0070              __size_of_handle_fire 0063                            _ADCON1 009E  
                          _ANSELA 018C                            _LED_on 0718                            _PMADRL 0191  
                          _PMCON2 0196                            _OSCCON 0099                            _PWM3DC 0DB3  
                          _PWM3PH 0DB1                            _SPBRGL 019B                            _PWM3PR 0DB5  
                  __CFG_PWRTE$OFF 0000                   ??_LoadFromFlash 0077                         ??___aldiv 0079  
              __size_of_Send_Byte 000E                    __CFG_STVREN$ON 0000                  ??_SEND_DATA_BYTE 0072  
                          _config 005B                            _hit_by 0572                   play_song@length 0071  
                 play_song@repeat 0074        __end_of_Disable_Modulation 0715                       Save@address 0071  
                _my_random_number 0058                         ?_ADC_read 0071                  __end_of_tone_off 071E  
        __size_of_Modulate_Serial 0007           __end_of__initialization 002C           handle_serial@rx_counter 0059  
                       ?_SEND_EOF 0070                         ?_SEND_SOF 0070                    __pcstackCOMMON 0070  
                   __end_of_Setup 0659                      __pidataBANK1 0659           _High_Priority_Interrupt 0004  
                  _OPTION_REGbits 0095                        ??_ADC_read 0073                           ??_Setup 0071  
                 _GET_CHAR_HELPER 0696                 __end_of_Send_Byte 06DE           __size_of_add_to_hitlist 0054  
                      __pbssBANK0 004B                        __pbssBANK1 00A0                           ?_LED_on 0070  
           __end_of_handle_serial 0506        __end_of_get_hitlist_length 053E                        ??_SEND_EOF 0075  
                      ??_SEND_SOF 0075                        __pmaintext 0706                 _cur_song_duration 004D  
                      __pintentry 0004             __size_of_handle_music 002B                           ?_hit_by 0070  
              __size_of_play_song 0023                           _LED_off 0715                           Load@ptr 0073  
                 __size_of_LED_on 0003                __size_of_stop_song 0005                 ??_Modulate_Serial 0071  
                         Save@ptr 0073                      _handle_music 05A3                 ?_control_transfer 0070  
              ??_control_transfer 0077                   SEND_DATA_BYTE@b 0074         ??_High_Priority_Interrupt 0070  
                         ___aldiv 0309                         ?_tone_off 0070                   __size_of_hit_by 0031  
                         __ptext1 05A3                           __ptext2 038B                           __ptext3 070C  
                         __ptext4 05F3                           __ptext5 0715                           __ptext6 0718  
                         __ptext7 0679                           __ptext8 04CB                           __ptext9 002E  
                       _T1CONbits 0018           __end_of_GET_CHAR_HELPER 06B3                           _hitlist 00A0  
                ___aldiv@dividend 0075                           clrloop0 06FB                 add_to_hitlist@gun 0075  
            end_of_initialization 002C                 __end_of_play_song 0616                           init_ram 0700  
                         initloop 0701                         _RCSTAbits 019D                  ___aldiv@quotient 0022  
                      ??_tone_off 0071                         _PORTAbits 000C                 __end_of_stop_song 0711  
                   ??_handle_fire 0078                  __CFG_FOSC$INTOSC 0000                         _TRISAbits 008C  
                     _DACCON0bits 0118                    _add_to_hitlist 03EE                 __size_of_ADC_read 001D  
              _Disable_Modulation 0711                    __end_of_LED_on 071B                         _TXSTAbits 019E  
             control_transfer@cmd 0040               ?_Disable_Modulation 0070                handle_fire@counter 004F  
               __size_of_SEND_EOF 000A                 __size_of_SEND_SOF 000B             __end_of_LoadFromFlash 04CB  
                     _BAUDCONbits 019F                    __end_of_hit_by 05A3                GET_CHAR_HELPER@val 0072  
                   play_song@song 0077                  ?_GET_CHAR_HELPER 0070               start_initialization 0016  
            ??_Disable_Modulation 0071            __end_of_add_to_hitlist 0442               __end_of_handle_fire 03EE  
                        ??_LED_on 0071                         _Send_Byte 06D0                     _PWM3LDCONbits 0DBF  
                __CFG_LPBOREN$OFF 0000                      _cur_song_ptr 0056                       __pdataBANK1 00C0  
                        ??_hit_by 0030                _get_hitlist_length 0506                          ?_LED_off 0070  
                 _Modulate_Serial 06F3                     __pcstackBANK0 0020                   ?_add_to_hitlist 0070  
         __size_of_SEND_DATA_BYTE 0022                         __checksum 0053               ?_get_hitlist_length 0070  
                handle_fire@timer 0051                   Save@data_length 0074                        ?_Send_Byte 0070  
            ??_get_hitlist_length 0071                          ?___aldiv 0071                    handle_serial@b 004A  
               __size_of_tone_off 0003                         _fire_song 00C0            __size_of_handle_serial 003B  
       __size_of_control_transfer 02DB                       _handle_fire 038B                          _ADC_read 0679  
                  __size_of_Setup 0021                   ___aldiv@divisor 0071                   ___aldiv@counter 0020  
                       clear_ram0 06FA                          _PIE1bits 0091                   Load@data_length 0074  
                       _play_song 05F3                          _PIR1bits 0011                          _SEND_EOF 06E9  
                        _SEND_SOF 06DE           __end_of_Modulate_Serial 06FA                        _ADCON0bits 009D  
             get_hitlist_length@i 0075                control_transfer@id 0042                        tone@period 0026  
                        Buzz@freq 0028               add_to_hitlist@gun16 0076                  __size_of_LED_off 0003  
                       _stop_song 070C                         hit_by@who 007C                       ??_Send_Byte 0071  
                   _handle_serial 04CB          ?_High_Priority_Interrupt 0070                        ?_play_song 0071  
                __size_of___aldiv 0082                        _ANSELAbits 018C                    _SEND_DATA_BYTE 0616  
                      ?_stop_song 0070                   _cur_song_length 0055     control_transfer@random_number 0041  
                        __ptext10 06E9                          __ptext11 06DE                          __ptext20 0309  
                        __ptext12 0616                          __ptext21 06B3                          __ptext13 06D0  
                        __ptext22 071B                          __ptext14 0711                          __ptext23 0442  
                        __ptext15 06F3                          __ptext24 03EE                          __ptext16 0696  
                        __ptext25 0638                          __ptext17 0572                          __ptext26 0489  
                        __ptext18 0506                          __ptext27 05CE                          __ptext19 053E  
                 _cur_song_repeat 0057                     __size_of_Load 0025                    ?_handle_serial 0070  
                   __size_of_Buzz 0034                          _cur_song 0054                     __size_of_Save 0047  
                   __size_of_main 0006                     __size_of_tone 001D                          _tone_off 071B  
               control_transfer@i 0044                 control_transfer@x 0047            play_song@note_duration 0072  
                ?_Modulate_Serial 0070                  ??_add_to_hitlist 0071            __end_of_SEND_DATA_BYTE 0638  
                _control_transfer 002E                        _INTCONbits 000B       __size_of_Disable_Modulation 0004  
                     _PWM3CONbits 0DBB                          intlevel1 0000          __size_of_GET_CHAR_HELPER 001D  
 __end_of_High_Priority_Interrupt 0015                      handle_fire@a 007A            __size_of_LoadFromFlash 0042  
                      _PMCON1bits 0195                 __CFG_CLKOUTEN$OFF 0000                     ?_handle_music 0070  
                     ??_play_song 0075                   ?_SEND_DATA_BYTE 0070                      ?_handle_fire 0070  
                    ___aldiv@sign 0021                       ??_stop_song 0071                   ??_handle_serial 0048  
              handle_serial@rx_id 005A                    ??_handle_music 0028  
